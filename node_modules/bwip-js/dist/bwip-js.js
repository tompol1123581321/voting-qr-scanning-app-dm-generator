// This file is part of the bwip-js project available at:
//
// 	  http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2019 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2019-11-08
// Copyright (c) 2004-2019 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.bwipjs = factory();
	}
}(typeof self !== 'undefined' ? self : this, function () {
"use strict";
// exports.js

// bwipjs.request(req, res [, overrides])
//
// Returns a PNG image from the query args of a node.js http request object.
//
// This function is asynchronous.
//
// Node.js usage only.
function Request(req, res, extra) {
	if (!Request.url) {
		Request.url = require('url');
	}
	var opts = Request.url.parse(req.url, true).query;

	// Convert boolean empty parameters to true
	for (var id in opts) {
		if (opts[id] === '') {
			opts[id] = true;
		}
	}

	// Add in server options/overrides
	if (extra) {
		for (var id in extra) {
			opts[id] = extra[id];
		}
	}

	ToBuffer(opts, function(err, png) {
		if (err) {
			res.writeHead(400, { 'Content-Type':'text/plain' });
			res.end('' + (err.stack || err), 'utf-8');
		} else {
			res.writeHead(200, { 'Content-Type':'image/png' });
			res.end(png, 'binary');
			require('fs').writeFileSync('/tmp/bwipjs.png', png);
		}
	});
}

// bwipjs.toBuffer(options[, callback])
//
// Uses the built-in graphics drawing and zlib PNG encoding to return a
// barcode image in a node.js Buffer.
//
// `options` are a bwip-js/BWIPP options object.
// `callback` is an optional callback handler with prototype:
//
// 		function callback(err, png)
//
// 		`err` is an Error object or string.  If `err` is set, `png` is null.
// 		`png` is a node Buffer containing the PNG image.
//
// If `callback` is not provided, a Promise is returned.
//
// Node.js usage only.
function ToBuffer(opts, callback) {
	try {
		FixupOptions(opts);
		return Render(opts, DrawingZlibPng(opts, callback));
	} catch (e) {
		if (callback) {
			callback(e);
		} else {
			return new Promise(function(resolve, reject) {
				reject(e);
			});
		}
	}
}

// bwipjs.toCanvas(canvas, options)
// bwipjs.toCanvas(options, canvas)
//
// Uses the built-in canvas drawing.  Identical rendering as toBuffer().
//
// `canvas` can be an HTMLCanvasElement or an ID string or unique selector string.
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Browser usage only.
function ToCanvas(opts, canvas) {
	if (typeof canvas == 'string') {
		canvas = document.getElementById(canvas) || document.querySelector(canvas);
	} else if (typeof opts == 'string') {
		opts = document.getElementById(opts) || document.querySelector(opts);
	}
	if (opts instanceof HTMLCanvasElement) {
		var tmp = opts;
		opts = canvas;
		canvas = tmp;
	} else if (!(canvas instanceof HTMLCanvasElement)) {
		throw 'bwipjs: Not a canvas';
	}
	FixupOptions(opts);
	Render(opts, DrawingCanvas(opts, canvas));
}

// bwipjs.fixupOptions(options)
//
// Call this before passing your options object to a drawing constructor.
function FixupOptions(opts) {
	var scale	= opts.scale || 2;
	var scaleX	= +opts.scaleX || scale;
	var scaleY	= +opts.scaleY || scaleX;

	// Fix up padding.
	opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);
	opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);

	// We override BWIPP's background color functionality.  If in CMYK, convert to RGB so
	// the drawing interface is consistent.
	if (/^[0-9a-fA-F]{8}$/.test(''+opts.backgroundcolor)) {
		var cmyk = opts.backgroundcolor;
		var c = parseInt(cmyk.substr(0,2), 16) / 255;
		var m = parseInt(cmyk.substr(2,2), 16) / 255;
		var y = parseInt(cmyk.substr(4,2), 16) / 255;
		var k = parseInt(cmyk.substr(6,2), 16) / 255;
		var r = Math.floor((1-c) * (1-k) * 255).toString(16);
		var g = Math.floor((1-m) * (1-k) * 255).toString(16);
		var b = Math.floor((1-y) * (1-k) * 255).toString(16);
		opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +
							   (g.length == 1 ? '0' : '') + g +
							   (b.length == 1 ? '0' : '') + b;
	}

	return opts;

	function padding(a, b, c, s) {
		if (a != null) {
			return a*s;
		}
		if (b != null) {
			return b*s;
		}
		return c*s || 0;
	}
}

var BWIPJS_OPTIONS = {
	bcid:1,
	text:1,
	scale:1,
	scaleX:1,
	scaleY:1,
	rotate:1,
	padding:1,
	paddingwidth:1,
	paddingheight:1,
	paddingtop:1,
	paddingleft:1,
	paddingright:1,
	paddingbottom:1,
	backgroundcolor:1,
};

// bwipjs.render(options, drawing)
//
// Renders a barcode using the provided drawing object.
//
// This function is synchronous and throws on error.
function Render(params, drawing) {
	// Set the bwip-js defaults
	var scale	= params.scale || 2;
	var scaleX	= +params.scaleX || scale;
	var scaleY	= +params.scaleY || scaleX;
	var rotate	= params.rotate || 'N';

	// The required parameters
	var bcid = params.bcid;
	var text = params.text;

	if (!text) {
		throw new ReferenceError('bwip-js: bar code text not specified.');
	}
	if (!bcid) {
		throw new ReferenceError('bwip-js: bar code type not specified.');
	}

	// Create a barcode writer object.  This is the interface between
	// the low-level BWIPP code, the bwip-js graphics context, and the
	// drawing interface.
	var bw = new BWIPJS(drawing);

	// Set the BWIPP options
	var opts = {};
	for (var id in params) {
		if (!BWIPJS_OPTIONS[id]) {
			opts[id] = params[id];
		}
	}

	// Fix a disconnect in the BWIPP rendering logic
	if (opts.alttext) {
		opts.includetext = true;
	}
	// We use mm rather than inches for height - except pharmacode2 height
	// which is already in mm.
	if (+opts.height && bcid != 'pharmacode2') {
		opts.height = opts.height / 25.4 || 0.5;
	}
	// Likewise, width
	if (+opts.width) {
		opts.width = opts.width / 25.4 || 0;
	}

	// Scale the image
	bw.scale(scaleX, scaleY);

	// Call into the BWIPP cross-compiled code and render the image.
	BWIPP()(bw, bcid, text, opts);
	return bw.render();		// Returns whatever drawing.end() returns
}

// bwipjs.raw(options)
// bwipjs.raw(encoder, text, opts-string)
//
// Invokes the low level BWIPP code and returns the raw encoding data.
//
// This function is synchronous and throws on error.
function Raw(encoder, text, options) {
	if (arguments.length == 1) {
		options = encoder;
		encoder = options.bcid;
		text = options.text;
	}

	// The drawing interface is just needed for the pre-init() calls.
	var bw = new BWIPJS(DrawingBuiltin({}));
	var stack = BWIPP()(bw, encoder, text, options, true);

	// bwip-js uses Maps to emulate PostScript dictionary objects; but Maps
	// are not a typical/expected return value.  Convert to plain-old-objects.
	var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };
	for (var i = 0; i < stack.length; i++) {
		var elt = stack[i];
		if (elt instanceof Map) {
			var obj = {};
			// Could they make Maps any harder to iterate over???
			for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {
				var id = keys.next().value;
				if (ids[id]) {
					var val = elt.get(id);
					if (val instanceof Array) {
						// The postscript arrays have extra named properties
						// to emulate array views.  Return cleaned up arrays.
						obj[id] = val.b.slice(val.o, val.o + val.length);
					} else {
						obj[id] = val;
					}
				}
			}
			stack[i] = obj;
		} else {
			// This should never exec...
			stack.splice(i--, 1);
		}
	}
	return stack;
}
function BWIPP() {
	"use strict";
	// bwip-js/barcode-hdr.js
	//
	// This code is injected above the cross-compiled barcode.ps.

	// The BWIPJS object (graphics interface)
	var $$ = null;

	// The global dictionary.  Each renderer and encoder declare a
	// $1 local dict.
	var $0 = {
		$error: new Map // the postscript error object
	};

	var $j = 0; // stack pointer
	var $k = []; // operand stack

	// Array ctor
	//	$a()	: Build a new array up to the Infinity-marker on the stack.
	//	$a(arr)	: Convert native array to a "view" of the array.
	//	$a(len)	: Create a new array of length `len`
	function $a(a) {
		if (!arguments.length) {
			for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
			if (i < 0) {
				throw new Error('array-marker-not-found');
			}
			a = $k.splice(i + 1, $j - 1 - i);
			$j = i;
		} else if (!(a instanceof Array)) {
			a = new Array(+arguments[0]);
			for (var i = 0, l = a.length; i < l; i++) {
				a[i] = null;
			}
		}
		a.b = a; // base array
		a.o = 0; // offset into base
		return a;
	}

	// dict ctor
	//	$d() : look for the Infinity marker on the stack
	function $d() {
		var d = new Map;
		for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i -= 2) {
			if ($k[i - 1] === Infinity) {
				throw new Error('dict-malformed-stack');
			}
			// Unlike javascript, postscript dict keys differentiate between
			// numbers and the string representation of a number.
			var k = $k[i - 1]; // "key" into the dict entry
			var t = typeof k;
			if (t == 'number' || t == 'string') {
				d.set(k, $k[i]);
			} else if (k instanceof Uint8Array) {
				d.set($z(k), $k[i]);
			} else {
				throw 'dict-not-a-valid-key(' + k + ')';
			}
		}
		if (i < 0) {
			throw 'dict-marker-not-found';
		}
		$j = i;
		return d;
	}

	// string ctor
	//	s(number)	: create zero-filled string of number-length
	//	s(string)	: make a copy of the string
	//	s(uint8[])	: make a copy of the string
	//
	// Returns a Uint8Array-string.
	function $s(v) {
		var t = typeof v;
		if (t === 'number') {
			return new Uint8Array(v);
		}
		if (t !== 'string') {
			v = '' + v;
		}
		var s = new Uint8Array(v.length);
		for (var i = 0; i < v.length; i++) {
			s[i] = v.charCodeAt(i);
		}
		return s;
	}

	// ... n c roll
	function $r(n, c) {
		if ($j < n) {
			throw 'roll: --stack-underflow--';
		}
		if (!c) {
			return;
		}
		if (c < 0) {
			var t = $k.splice($j - n, -c);
		} else {
			var t = $k.splice($j - n, n - c);
		}
		$k.splice.apply($k, [$j - t.length, 0].concat(t));
	}

	// Primarily designed to convert uint8-string to string, but will call the
	// the toString() method on any value.
	function $z(s) {
		if (s instanceof Uint8Array) {
			// Postscript treats nul-char as end of string, even if string is
			// longer.
			for (var i = 0, l = s.length; i < l && s[i]; i++);
			if (i < l) {
				return String.fromCharCode.apply(null, s.subarray(0, i));
			}
			return String.fromCharCode.apply(null, s)
		}
		return '' + s;
	}

	// Copies source to dest and returns a view of just the copied characters
	function $strcpy(dst, src) {
		if (typeof dst === 'string') {
			dst = $s(dst);
		}
		if (src instanceof Uint8Array) {
			for (var i = 0, l = src.length; i < l; i++) {
				dst[i] = src[i];
			}
		} else {
			for (var i = 0, l = src.length; i < l; i++) {
				dst[i] = src.charCodeAt(i);
			}
		}
		return src.length < dst.length ? dst.subarray(0, src.length) : dst;
	}

	// Copies source to dest and should (but doesn't) return a view of just the copied elements
	function $arrcpy(dst, src) {
		for (var i = 0, l = src.length; i < l; i++) {
			dst[i] = src[i];
		}
		dst.length = src.length;
		return dst;
	}

	// cvs operator - convert a value to its string representation
	//	s : string to store into
	//	v : any value
	function $cvs(s, v) {
		var t = typeof v;
		if (t == 'number' || t == 'boolean' || v === null) {
			v = '' + v;
		} else if (t !== 'string') {
			v = '--nostringval--';
		}
		for (var i = 0, l = v.length; i < l; i++) {
			s[i] = v.charCodeAt(i);
		}
		$k[$j++] = i < s.length ? s.subarray(0, i) : s;
	}
	// cvrs operator - convert a number to a radix string
	//	s : string to store into
	//	n : number
	//	r : radix
	function $cvrs(s, n, r) {
		return $strcpy(s, (~~n).toString(r).toUpperCase());
	}

	// get operator
	//	s : source
	//	k : key
	function $get(s, k) {
		if (s instanceof Uint8Array) {
			return s[k];
		}
		if (typeof s === 'string') {
			return s.charCodeAt(k);
		}
		if (s instanceof Array) {
			return s.b[s.o + k];
		}
		if (k instanceof Uint8Array) {
			return s.get($z(k));
		}
		return s.get(k);
	}

	// put operator
	//	d : dest
	//	k : key
	//	v : value
	function $put(d, k, v) {
		if (d instanceof Uint8Array) {
			d[k] = v;
		} else if (d instanceof Array) {
			d.b[d.o + k] = v;
		} else if (typeof d == 'object') {
			if (k instanceof Uint8Array) {
				d.set($z(k), v);
			} else {
				d.set(k, v);
			}
		} else {
			throw 'put-not-writable-' + (typeof d);
		}
	}

	// getinterval operator
	//	s : src
	//	o : offset
	//	l : length
	function $geti(s, o, l) {
		if (s instanceof Uint8Array) {
			return s.subarray(o, o + l);
		}
		if (s instanceof Array) {
			var a = new Array(l);
			a.b = s.b; // base array
			a.o = s.o + o; // offset into base
			return a;
		}
		// Must be a string
		return s.substr(o, l);
	}

	// putinterval operator
	//	d : dst
	//	o : offset
	//	s : src
	function $puti(d, o, s) {
		if (d instanceof Uint8Array) {
			if (typeof s == 'string') {
				for (var i = 0, l = s.length; i < l; i++) {
					d[o + i] = s.charCodeAt(i);
				}
			} else {
				// When both d and s are the same, we want to copy
				// backwards, which works for the general case as well.
				for (var i = s.length - 1; i >= 0; i--) {
					d[o + i] = s[i];
				}
			}
		} else if (d instanceof Array) {
			// Operate on the base arrays
			var darr = d.b;
			var doff = o + d.o;
			var sarr = s.b;
			var soff = s.o;

			for (var i = 0, l = s.length; i < l; i++) {
				darr[doff + i] = sarr[soff + i];
			}
		} else {
			throw 'putinterval-not-writable-' + (typeof d);
		}
	}

	// type operator
	function $type(v) {
		// null can be mis-typed - get it out of the way
		if (v === null || v === undefined) {
			return 'nulltype';
		}
		var t = typeof v;
		if (t == 'number') {
			return v % 1 ? 'realtype' : 'integertype';
		}
		if (t == 'boolean') {
			return 'booleantype';
		}
		if (t == 'string' || v instanceof Uint8Array) {
			return 'stringtype';
		}
		if (t == 'function') {
			return 'operatortype';
		}
		if (v instanceof Array) {
			return 'arraytype';
		}
		return 'dicttype';
		// filetype
		// fonttype
		// gstatetype
		// marktype	(v === Infinity)
		// nametype
		// savetype
	}

	// search operator
	//		string seek search suffix match prefix true %if-found
	//						   string false				%if-not-found
	function $search(str, seek) {
		if (!(str instanceof Uint8Array)) {
			str = $s(str);
		}
		var ls = str.length;

		// Virtually all uses of search in BWIPP are for single-characters.
		// Optimize for that case.
		if (seek.length == 1) {
			var lk = 1;
			var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
			for (var i = 0; i < ls && str[i] != cd; i++);
		} else {
			// Slow path, 
			if (!(seek instanceof Uint8Array)) {
				seek = $(seek);
			}
			var lk = seek.length;
			var cd = seek[0];
			for (var i = 0; i < ls && str[i] != cd; i++);
			while (i < ls) {
				for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
				if (j === lk) {
					break;
				}
				for (i++; i < ls && str[i] != cd; i++);
			}
		}
		if (i < ls) {
			$k[$j++] = str.subarray(i + lk);
			$k[$j++] = str.subarray(i, i + lk);
			$k[$j++] = str.subarray(0, i);
			$k[$j++] = true;
		} else {
			$k[$j++] = str;
			$k[$j++] = false;
		}
	}

	// The callback is omitted when forall is being used just to push onto the
	// stack.  The callback normally returns undefined.  A return of true means break.
	function $forall(o, cb) {
		if (o instanceof Uint8Array) {
			for (var i = 0, l = o.length; i < l; i++) {
				$k[$j++] = o[i];
				if (cb && cb()) break;
			}
		} else if (o instanceof Array) {
			// The array may be a view.
			for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
				$k[$j++] = a[i];
				if (cb && cb()) break;
			}
		} else if (typeof o === 'string') {
			for (var i = 0, l = o.length; i < l; i++) {
				$k[$j++] = o.charCodeAt(i);
				if (cb && cb()) break;
			}
		} else if (o instanceof Map) {
			for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
				var id = keys.next().value;
				$k[$j++] = id;
				$k[$j++] = o.get(id);
				if (cb && cb()) break;
			}
		} else {
			for (var id in o) {
				$k[$j++] = id;
				$k[$j++] = o[id];
				if (cb && cb()) break;
			}
		}
	}

	function $cleartomark() {
		while ($j > 0 && $k[--$j] !== Infinity);
	}

	function $counttomark() {
		for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
		return $j - i - 1;
	}

	function $aload(a) {
		for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
			$k[$j++] = b[o + i];
		}
		// This push has been optimized out.  See $.aload() in psc.js.
		//$k[$j++] = a;
	}

	function $astore(a) {
		for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
			b[o - i] = $k[--$j];
		}
		$k[$j++] = a;
	}

	function $eq(a, b) {
		if (typeof a === 'string' && typeof b === 'string') {
			return a == b;
		}
		if (a instanceof Uint8Array && b instanceof Uint8Array) {
			if (a.length != b.length) {
				return false;
			}
			for (var i = 0, l = a.length; i < l; i++) {
				if (a[i] != b[i]) {
					return false;
				}
			}
			return true;
		}
		if (a instanceof Uint8Array && typeof b === 'string' ||
			b instanceof Uint8Array && typeof a === 'string') {
			if (a instanceof Uint8Array) {
				a = $z(a);
			} else {
				b = $z(b);
			}
			return a == b;
		}
		return a == b;
	}

	function $ne(a, b) {
		return !$eq(a, b);
	}

	function $lt(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a < b;
	}

	function $le(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a <= b;
	}

	function $gt(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a > b;
	}

	function $ge(a, b) {
		if (a instanceof Uint8Array) {
			a = $z(a);
		}
		if (b instanceof Uint8Array) {
			b = $z(b);
		}
		return a >= b;
	}

	function $an(a, b) { // and
		return (typeof a === 'boolean') ? a && b : a & b;
	}

	function $or(a, b) { // or
		return (typeof a === 'boolean') ? a || b : a | b;
	}

	function $xo(a, b) { // xor
		return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
	}

	function $nt(a) {
		return typeof a == 'boolean' ? !a : ~a;
	}

	// DEBUG-BEGIN
	function $stack() {
		console.log('[[[');
		for (var i = $j - 1; i >= 0; i--) {
			console.log(tostring($k[i]));
		}
		console.log(']]]');

		function tostring(v) {
			// null can be mis-typed - get it out of the way
			if (v === null) {
				return 'null';
			} else if (v === undefined) {
				return '<undefined>';
			} else if (v instanceof Array) {
				var s = '<array,' + v.o + ',' + v.length + '>[';
				for (var j = v.o, a = v.b, l = v.length + v.o; j < l; j++) {
					s += (j == v.o ? '' : ',') + tostring(a[j]);
				}
				return s + ']';
			} else if (v instanceof Uint8Array) {
				return '(' + $z[v] + ')';
			} else if (typeof v === 'object') {
				var s = '<<';
				for (var id in v) {
					s += (s.length == 7 ? '' : ',') + id + ':' + tostring(v[id]);
				}
				return s + '>>';
			} else if (typeof v === 'string') {
				return '"' + v + '"';
			} else {
				return '' + v;
			}
		}
	}
	// DEBUG-END
	$0.raiseerror = function() {
		$put($0.$error, 'errorinfo', $k[--$j]); /*55*/
		$put($0.$error, 'errorname', $k[--$j]); /*56*/
		$put($0.$error, 'command', null); /*57*/
		$put($0.$error, 'newerror', true); /*58*/
		throw new Error($0.$error.get("errorname") + ": " + $0.$error.get("errorinfo")); /*59*/
	};
	$0.renmatrix = function() {
		if ($0.bwipjs_dontdraw) { //no-else/*326*/
			return; /*326*/
		} /*326*/
		var $1 = {}; /*328*/
		$1.args = $k[--$j]; /*330*/
		$1.width = 1; /*333*/
		$1.height = 1; /*334*/
		$1.barcolor = "unset"; /*335*/
		$1.backgroundcolor = "unset"; /*336*/
		$1.colormap = "unset"; /*337*/
		$1.dotty = false; /*338*/
		$1.inkspread = 0; /*339*/
		$1.inkspreadh = 0; /*340*/
		$1.inkspreadv = 0; /*341*/
		$1.includetext = false; /*342*/
		$1.txt = $a([]); /*343*/
		$1.textcolor = "unset"; /*344*/
		$1.textxalign = "unset"; /*345*/
		$1.textyalign = "unset"; /*346*/
		$1.textfont = "Courier"; /*347*/
		$1.textsize = 10; /*348*/
		$1.textxoffset = 0; /*349*/
		$1.textyoffset = 0; /*350*/
		$1.textgaps = 0; /*351*/
		$1.alttext = ""; /*352*/
		$forall($1.args, function() {
			/*355*/
			var _4 = $k[--$j]; /*355*/
			$1[$k[--$j]] = _4; /*355*/
		}); /*355*/
		var _6 = $1.opt; /*356*/
		for (var _B = _6.size, _A = _6.keys(), _9 = 0; _9 < _B; _9++) {
			/*356*/
			var _7 = _A.next().value; /*356*/
			$1[_7] = _6.get(_7); /*356*/
		} /*356*/
		$1.width = +$1.width; /*358*/
		$1.height = +$1.height; /*359*/
		$1.barcolor = "" + $1.barcolor; /*360*/
		$1.backgroundcolor = "" + $1.backgroundcolor; /*361*/
		$1.inkspread = +$1.inkspread; /*362*/
		$1.inkspreadh = +$1.inkspreadh; /*363*/
		$1.inkspreadv = +$1.inkspreadv; /*364*/
		$1.textcolor = "" + $1.textcolor; /*365*/
		$1.textxalign = "" + $1.textxalign; /*366*/
		$1.textyalign = "" + $1.textyalign; /*367*/
		$1.textfont = "" + $1.textfont; /*368*/
		$1.textsize = +$1.textsize; /*369*/
		$1.textxoffset = +$1.textxoffset; /*370*/
		$1.textyoffset = +$1.textyoffset; /*371*/
		$1.textgaps = +$1.textgaps; /*372*/
		$1.alttext = "" + $1.alttext; /*373*/
		if ($1.inkspread != 0) { //no-else/*375*/
			$1.inkspreadh = $1.inkspread; /*375*/
		} /*375*/
		if ($1.inkspread != 0) { //no-else/*376*/
			$1.inkspreadv = $1.inkspread; /*376*/
		} /*376*/
		$1.xyget = function() {
			var _X = $k[--$j]; /*378*/
			var _a = $get($1.pixs, $k[--$j] + (_X * $1.pixx)); /*378*/
			$k[$j++] = _a; /*378*/
		}; /*378*/
		$1.cget = function() {
			var _c = $k[--$j]; /*379*/
			var _f = $get($1.cache, $k[--$j] + (_c * $1.pixx)); /*379*/
			var _g = $k[--$j]; /*379*/
			$k[$j++] = $an(_g, _f); /*379*/
		}; /*379*/
		$1.cput = function() {
			var _h = $k[--$j]; /*381*/
			$k[$j++] = _h; /*385*/
			if ((_h % 4) == 0) {
				/*384*/
				var _i = $k[--$j]; /*382*/
				var _j = $k[--$j]; /*382*/
				var _k = $k[--$j]; /*382*/
				var _l = $1.pixx; /*382*/
				var _m = $1.cache; /*382*/
				$put(_m, _k + (_j * _l), $or($get(_m, _k + (_j * _l)), _i)); /*382*/
			} else {
				/*384*/
				$j -= 3; /*384*/
			} /*384*/
		}; /*386*/
		$1.abcd = function() {
			$k[$j++] = $s(4); /*393*/
			$k[$j++] = 0; /*393*/
			$k[$j++] = Infinity; /*393*/
			var _p = $k[--$j]; /*390*/
			var _q = $k[--$j]; /*390*/
			var _r = $k[--$j]; /*390*/
			var _s = $k[--$j]; /*390*/
			var _v = $k[--$j] + (_s * $1.pixx); /*391*/
			$k[$j++] = _r; /*392*/
			$k[$j++] = _q; /*392*/
			$k[$j++] = _p; /*392*/
			$k[$j++] = _v; /*392*/
			$aload($geti($1.pixs, _v, 2)); /*392*/
			var _y = $k[--$j]; /*392*/
			var _z = $k[--$j]; /*392*/
			var _13 = $geti($1.pixs, $k[--$j] + $1.pixx, 2); /*393*/
			$k[$j++] = _z; /*393*/
			$k[$j++] = _y; /*393*/
			$aload(_13); /*393*/
			var _14 = $a(); /*393*/
			for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) {
				/*394*/
				var _18 = $k[--$j]; /*394*/
				var _19 = $k[--$j]; /*394*/
				$put(_19, _18, $get(_14, _15) + 48); /*394*/
				$k[$j++] = _19; /*394*/
				$k[$j++] = _18 + 1; /*394*/
			} /*394*/
			$j--; /*394*/
		}; /*395*/
		$1.right = function() {
			if ($1.dir != 1) { //no-else/*397*/
				$k[$j++] = $1.x; /*397*/
				$k[$j++] = $1.y; /*397*/
				$k[$j++] = $1.dir; /*397*/
				$1.cput(); /*397*/
				$k[$j++] = $a([$1.x, $1.y]); /*397*/
			} /*397*/
			$1.x = $1.x + 1; /*397*/
			$1.dir = 1; /*397*/
		}; /*397*/
		$1.down = function() {
			if ($1.dir != 2) { //no-else/*398*/
				$k[$j++] = $1.x; /*398*/
				$k[$j++] = $1.y; /*398*/
				$k[$j++] = $1.dir; /*398*/
				$1.cput(); /*398*/
				$k[$j++] = $a([$1.x, $1.y]); /*398*/
			} /*398*/
			$1.y = $1.y + 1; /*398*/
			$1.dir = 2; /*398*/
		}; /*398*/
		$1.left = function() {
			if ($1.dir != 4) { //no-else/*399*/
				$k[$j++] = $1.x; /*399*/
				$k[$j++] = $1.y; /*399*/
				$k[$j++] = $1.dir; /*399*/
				$1.cput(); /*399*/
				$k[$j++] = $a([$1.x, $1.y]); /*399*/
			} /*399*/
			$1.x = $1.x - 1; /*399*/
			$1.dir = 4; /*399*/
		}; /*399*/
		$1.up = function() {
			if ($1.dir != 8) { //no-else/*400*/
				$k[$j++] = $1.x; /*400*/
				$k[$j++] = $1.y; /*400*/
				$k[$j++] = $1.dir; /*400*/
				$1.cput(); /*400*/
				$k[$j++] = $a([$1.x, $1.y]); /*400*/
			} /*400*/
			$1.y = $1.y - 1; /*400*/
			$1.dir = 8; /*400*/
		}; /*400*/
		$1.trace = function() {
			$1.y = $k[--$j]; /*404*/
			$1.x = $k[--$j]; /*404*/
			$k[$j++] = 'dir'; /*406*/
			$k[$j++] = $1.x + 1; /*406*/
			$k[$j++] = $1.y + 1; /*406*/
			$1.xyget(); /*406*/
			var _1l = ($k[--$j] == 1) ? 8 : 4; /*406*/
			$1[$k[--$j]] = _1l; /*406*/
			$1.sx = $1.x; /*407*/
			$1.sy = $1.y; /*407*/
			$1.sdir = $1.dir; /*407*/
			$k[$j++] = Infinity; /*411*/
			for (;;) {
				/*425*/
				$k[$j++] = $1.x; /*412*/
				$k[$j++] = $1.y; /*412*/
				$1.abcd(); /*412*/
				for (var _1s = 0, _1t = 1; _1s < _1t; _1s++) {
					/*423*/
					var _1u = $k[--$j]; /*414*/
					$k[$j++] = _1u; /*414*/
					if ($eq(_1u, "0001") || ($eq(_1u, "0011") || $eq(_1u, "1011"))) { //no-else/*414*/
						$j--; /*414*/
						$1.right(); /*414*/
						break; /*414*/
					} /*414*/
					var _1v = $k[--$j]; /*415*/
					$k[$j++] = _1v; /*415*/
					if ($eq(_1v, "0010") || ($eq(_1v, "1010") || $eq(_1v, "1110"))) { //no-else/*415*/
						$j--; /*415*/
						$1.down(); /*415*/
						break; /*415*/
					} /*415*/
					var _1w = $k[--$j]; /*416*/
					$k[$j++] = _1w; /*416*/
					if ($eq(_1w, "1000") || ($eq(_1w, "1100") || $eq(_1w, "1101"))) { //no-else/*416*/
						$j--; /*416*/
						$1.left(); /*416*/
						break; /*416*/
					} /*416*/
					var _1x = $k[--$j]; /*417*/
					$k[$j++] = _1x; /*417*/
					if ($eq(_1x, "0100") || ($eq(_1x, "0101") || $eq(_1x, "0111"))) { //no-else/*417*/
						$j--; /*417*/
						$1.up(); /*417*/
						break; /*417*/
					} /*417*/
					var _1y = $k[--$j]; /*418*/
					$k[$j++] = _1y; /*422*/
					if ($eq(_1y, "1001")) {
						/*421*/
						if ($1.dir == 2) {
							/*419*/
							$j--; /*419*/
							$1.left(); /*419*/
							break; /*419*/
						} else {
							/*419*/
							$j--; /*419*/
							$1.right(); /*419*/
							break; /*419*/
						} /*419*/
					} else {
						/*421*/
						if ($1.dir == 1) {
							/*421*/
							$j--; /*421*/
							$1.down(); /*421*/
							break; /*421*/
						} else {
							/*421*/
							$j--; /*421*/
							$1.up(); /*421*/
							break; /*421*/
						} /*421*/
					} /*421*/
				} /*421*/
				if (($eq($1.x, $1.sx) && $eq($1.y, $1.sy)) && ($1.dir == $1.sdir)) { //no-else/*424*/
					break; /*424*/
				} /*424*/
			} /*424*/
			$astore($a($counttomark())); /*426*/
			var _29 = $k[--$j]; /*426*/
			var _2A = $k[--$j]; /*426*/
			$k[$j++] = _29; /*426*/
		}; /*428*/
		$1.drawlayer = function() {
			$1.pixsorig = $1.pixs; /*444*/
			$1.pixs = $k[--$j]; /*445*/
			$k[$j++] = Infinity; /*456*/
			for (var _2E = 0, _2F = $1.pixx + 2; _2E < _2F; _2E++) {
				/*449*/
				$k[$j++] = 0; /*449*/
			} /*449*/
			for (var _2J = 0, _2K = $1.pixx, _2I = $1.pixs.length - 1; _2K < 0 ? _2J >= _2I : _2J <= _2I; _2J += _2K) {
				/*454*/
				$k[$j++] = 0; /*452*/
				$aload($geti($1.pixs, _2J, $1.pixx)); /*452*/
				$k[$j++] = 0; /*453*/
			} /*453*/
			for (var _2P = 0, _2Q = $1.pixx + 2; _2P < _2Q; _2P++) {
				/*455*/
				$k[$j++] = 0; /*455*/
			} /*455*/
			$1.pixs = $a(); /*456*/
			$1.pixx = $1.pixx + 2; /*457*/
			$1.pixy = $1.pixy + 2; /*458*/
			$k[$j++] = Infinity; /*461*/
			for (var _2V = 0, _2W = $1.pixs.length; _2V < _2W; _2V++) {
				/*461*/
				$k[$j++] = 0; /*461*/
			} /*461*/
			$1.cache = $a(); /*461*/
			$k[$j++] = Infinity; /*482*/
			for (var _2a = 0, _2Z = $1.pixy - 2; _2a <= _2Z; _2a += 1) {
				/*481*/
				$1.j = _2a; /*466*/
				for (var _2d = 0, _2c = $1.pixx - 2; _2d <= _2c; _2d += 1) {
					/*480*/
					$1.i = _2d; /*468*/
					$k[$j++] = 'k'; /*469*/
					$k[$j++] = $1.i; /*469*/
					$k[$j++] = $1.j; /*469*/
					$1.abcd(); /*469*/
					var _2g = $k[--$j]; /*469*/
					$1[$k[--$j]] = _2g; /*469*/
					if ($eq($1.k, "0001") || $eq($1.k, "1001")) { //no-else/*474*/
						$k[$j++] = 8; /*471*/
						$k[$j++] = $1.i; /*471*/
						$k[$j++] = $1.j; /*471*/
						$1.cget(); /*471*/
						if ($k[--$j] == 0) { //no-else/*473*/
							$k[$j++] = $1.i; /*472*/
							$k[$j++] = $1.j; /*472*/
							$1.trace(); /*472*/
						} /*472*/
					} /*472*/
					if ($eq($1.k, "1110")) { //no-else/*479*/
						$k[$j++] = 4; /*476*/
						$k[$j++] = $1.i; /*476*/
						$k[$j++] = $1.j; /*476*/
						$1.cget(); /*476*/
						if ($k[--$j] == 0) { //no-else/*478*/
							$k[$j++] = $1.i; /*477*/
							$k[$j++] = $1.j; /*477*/
							$1.trace(); /*477*/
						} /*477*/
					} /*477*/
				} /*477*/
			} /*477*/
			$1.paths = $a(); /*482*/
			$1.pixx = $1.pixx - 2; /*485*/
			$1.pixy = $1.pixy - 2; /*486*/
			$$.newpath(); /*489*/
			var _2y = $1.paths; /*490*/
			for (var _2z = 0, _30 = _2y.length; _2z < _30; _2z++) {
				/*508*/
				$1.p = $get(_2y, _2z); /*491*/
				$1.len = $1.p.length; /*492*/
				$aload($get($1.p, $1.len - 1)); /*493*/
				$aload($get($1.p, 0)); /*494*/
				for (var _3A = 0, _39 = $1.len - 1; _3A <= _39; _3A += 1) {
					/*505*/
					$1.i = _3A; /*496*/
					$aload($get($1.p, ($1.i + 1) % $1.len)); /*497*/
					var _3F = $k[--$j]; /*497*/
					var _3G = $k[--$j]; /*497*/
					var _3H = $k[--$j]; /*497*/
					var _3I = $k[--$j]; /*497*/
					var _3J = $k[--$j]; /*497*/
					var _3K = $k[--$j]; /*497*/
					$k[$j++] = _3I; /*499*/
					$k[$j++] = _3H; /*499*/
					$k[$j++] = _3G; /*499*/
					$k[$j++] = _3F; /*499*/
					$k[$j++] = _3K; /*499*/
					$k[$j++] = _3I; /*499*/
					$k[$j++] = $1.inkspreadh; /*499*/
					if ($lt(_3F, _3J)) {
						/*499*/
						var _3M = $k[--$j]; /*499*/
						var _3N = $k[--$j]; /*499*/
						$k[$j++] = _3N + _3M; /*499*/
					} else {
						/*499*/
						var _3O = $k[--$j]; /*499*/
						var _3P = $k[--$j]; /*499*/
						$k[$j++] = _3P - _3O; /*499*/
					} /*499*/
					var _3Q = $k[--$j]; /*500*/
					var _3R = $k[--$j]; /*500*/
					var _3S = $k[--$j]; /*500*/
					var _3T = $k[--$j]; /*500*/
					var _3U = $k[--$j]; /*501*/
					$k[$j++] = _3U; /*502*/
					$k[$j++] = _3Q; /*502*/
					$k[$j++] = _3T; /*502*/
					$k[$j++] = _3S; /*502*/
					$k[$j++] = _3U; /*502*/
					$k[$j++] = $1.inkspreadv; /*502*/
					if ($gt(_3T, _3R)) {
						/*502*/
						var _3W = $k[--$j]; /*502*/
						var _3X = $k[--$j]; /*502*/
						$k[$j++] = _3X + _3W; /*502*/
					} else {
						/*502*/
						var _3Y = $k[--$j]; /*502*/
						var _3Z = $k[--$j]; /*502*/
						$k[$j++] = _3Z - _3Y; /*502*/
					} /*502*/
					var _3a = $k[--$j]; /*503*/
					var _3b = $k[--$j]; /*503*/
					var _3c = $k[--$j]; /*503*/
					var _3d = $k[--$j]; /*503*/
					$k[$j++] = _3c; /*504*/
					$k[$j++] = _3b; /*504*/
					$k[$j++] = _3d; /*504*/
					$k[$j++] = $1.pixy - _3a; /*504*/
					if ($1.i == 0) {
						/*504*/
						var _3g = $k[--$j]; /*504*/
						$$.moveto($k[--$j], _3g); /*504*/
					} else {
						/*504*/
						var _3i = $k[--$j]; /*504*/
						$$.lineto($k[--$j], _3i); /*504*/
					} /*504*/
				} /*504*/
				$$.closepath(); /*506*/
				$j -= 4; /*507*/
			} /*507*/
			$$.fill(); /*509*/
			$1.pixs = $1.pixsorig; /*511*/
		}; /*513*/
		$1.drawlayerdots = function() {
			$1.pixsorig = $1.pixs; /*517*/
			$1.pixs = $k[--$j]; /*518*/
			$$.newpath(); /*520*/
			for (var _3p = 0, _3o = $1.pixs.length - 1; _3p <= _3o; _3p += 1) {
				/*528*/
				$1.x = _3p % $1.pixx; /*522*/
				$1.y = ~~(_3p / $1.pixx); /*523*/
				$k[$j++] = $1.x; /*524*/
				$k[$j++] = $1.y; /*524*/
				$1.xyget(); /*524*/
				if ($k[--$j] == 1) { //no-else/*527*/
					$$.moveto($1.x + 0.5, ($1.pixy - $1.y) - 0.5); /*525*/
					$$.arc($1.x + 0.5, ($1.pixy - $1.y) - 0.5, 0.5 - $1.inkspread, 0, 360, 1); /*526*/
				} /*526*/
			} /*526*/
			$$.fill(); /*529*/
			$1.pixs = $1.pixsorig; /*531*/
		}; /*533*/
		$$.save(); /*535*/
		$1.inkspread = $1.inkspread / 2; /*538*/
		$1.inkspreadh = $1.inkspreadh / 2; /*539*/
		$1.inkspreadv = $1.inkspreadv / 2; /*540*/
		var _46 = $$.currpos(); /*541*/
		$$.translate(_46.x, _46.y); /*541*/
		$$.scale(($1.width / $1.pixx) * 72, ($1.height / $1.pixy) * 72); /*542*/
		$$.moveto(0, 0); /*543*/
		$$.lineto($1.pixx, 0); /*543*/
		$$.lineto($1.pixx, $1.pixy); /*543*/
		$$.lineto(0, $1.pixy); /*543*/
		$$.closepath(); /*543*/
		if ($eq($1.colormap, "unset")) { //no-else/*548*/
			var _4H = new Map([
				[1, $1.barcolor]
			]); /*547*/
			$1.colormap = _4H; /*547*/
		} /*547*/
		var _4I = $1.colormap; /*550*/
		for (var _4N = _4I.size, _4M = _4I.keys(), _4L = 0; _4L < _4N; _4L++) {
			/*556*/
			var _4J = _4M.next().value; /*556*/
			$$.setcolor(_4I.get(_4J)); /*551*/
			$1.key = _4J; /*552*/
			$k[$j++] = Infinity; /*554*/
			var _4O = $1.pixs; /*554*/
			for (var _4P = 0, _4Q = _4O.length; _4P < _4Q; _4P++) {
				/*554*/
				var _4T = $eq($get(_4O, _4P), $1.key) ? 1 : 0; /*554*/
				$k[$j++] = _4T; /*554*/
			} /*554*/
			var _4U = $a(); /*554*/
			$k[$j++] = _4U; /*555*/
			if ($1.dotty) {
				/*555*/
				$1.drawlayerdots(); /*555*/
			} else {
				/*555*/
				$1.drawlayer(); /*555*/
			} /*555*/
		} /*555*/
		if ($ne($1.textcolor, "unset")) { //no-else/*559*/
			$$.setcolor($1.textcolor); /*559*/
		} /*559*/
		if ($1.includetext) { //no-else/*616*/
			if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) {
				/*614*/
				$1.s = 0; /*562*/
				$1.fn = ""; /*562*/
				var _4c = $1.txt; /*563*/
				for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) {
					/*572*/
					$forall($get(_4c, _4d)); /*564*/
					var _4g = $k[--$j]; /*565*/
					var _4h = $k[--$j]; /*565*/
					$k[$j++] = _4h; /*570*/
					$k[$j++] = _4g; /*570*/
					if ((_4g != $1.s) || $ne(_4h, $1.fn)) {
						/*569*/
						var _4k = $k[--$j]; /*566*/
						var _4l = $k[--$j]; /*566*/
						$1.s = _4k; /*566*/
						$1.fn = _4l; /*566*/
						$$.selectfont(_4l, _4k); /*567*/
					} else {
						/*569*/
						$j -= 2; /*569*/
					} /*569*/
					var _4m = $k[--$j]; /*571*/
					$$.moveto($k[--$j], _4m); /*571*/
					$$.show($k[--$j], 0, 0); /*571*/
				} /*571*/
			} else {
				/*614*/
				$$.selectfont($1.textfont, $1.textsize); /*574*/
				if ($eq($1.alttext, "")) {
					/*580*/
					$k[$j++] = Infinity; /*576*/
					var _4s = $1.txt; /*576*/
					for (var _4t = 0, _4u = _4s.length; _4t < _4u; _4t++) {
						/*576*/
						$forall($get($get(_4s, _4t), 0)); /*576*/
					} /*576*/
					$1.txt = $a(); /*576*/
					$1.tstr = $s($1.txt.length); /*577*/
					for (var _52 = 0, _51 = $1.txt.length - 1; _52 <= _51; _52 += 1) {
						/*578*/
						$put($1.tstr, _52, $get($1.txt, _52)); /*578*/
					} /*578*/
				} else {
					/*580*/
					$1.tstr = $1.alttext; /*580*/
				} /*580*/
				if ($1.tstr.length == 0) {
					/*590*/
					$k[$j++] = 0; /*585*/
				} else {
					/*590*/
					$$.save(); /*587*/
					$$.newpath(); /*588*/
					$$.moveto(0, 0); /*588*/
					$$.charpath("0", false); /*588*/
					var _58 = $$.pathbbox(); /*588*/
					$$.restore(); /*590*/
					$k[$j++] = _58.ury; /*590*/
				} /*590*/
				$1.textascent = $k[--$j]; /*599*/
				var _5B = $$.stringwidth($1.tstr); /*600*/
				$1.textwidth = _5B.w + (($1.tstr.length - 1) * $1.textgaps); /*600*/
				$1.textxpos = $1.textxoffset + (($1.x - $1.textwidth) / 2); /*602*/
				if ($eq($1.textxalign, "left")) { //no-else/*603*/
					$1.textxpos = $1.textxoffset; /*603*/
				} /*603*/
				if ($eq($1.textxalign, "right")) { //no-else/*604*/
					$1.textxpos = ($1.x - $1.textxoffset) - $1.textwidth; /*604*/
				} /*604*/
				if ($eq($1.textxalign, "offleft")) { //no-else/*605*/
					$1.textxpos = -($1.textwidth + $1.textxoffset); /*605*/
				} /*605*/
				if ($eq($1.textxalign, "offright")) { //no-else/*606*/
					$1.textxpos = $1.x + $1.textxoffset; /*606*/
				} /*606*/
				if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.x)) { //no-else/*610*/
					$1.textxpos = 0; /*608*/
					$1.textgaps = ($1.x - $1.textwidth) / ($1.tstr.length - 1); /*609*/
				} /*609*/
				$1.textypos = -(($1.textyoffset + $1.textascent) + 1); /*611*/
				if ($eq($1.textyalign, "above")) { //no-else/*612*/
					$1.textypos = ($1.textyoffset + $1.pixy) + 1; /*612*/
				} /*612*/
				if ($eq($1.textyalign, "center")) { //no-else/*613*/
					$1.textypos = $1.textyoffset + (($1.pixy - $1.textascent) / 2); /*613*/
				} /*613*/
				$$.moveto($1.textxpos, $1.textypos); /*614*/
				$$.show($1.tstr, $1.textgaps, 0); /*614*/
			} /*614*/
		} /*614*/
		$$.restore(); /*618*/
	};
	$0.ean5 = function() {
		var $1 = {}; /*736*/
		$1.options = $k[--$j]; /*738*/
		$1.barcode = $k[--$j]; /*739*/
		$1.dontdraw = false; /*741*/
		$1.includetext = false; /*742*/
		$1.textfont = 'Helvetica'; /*743*/
		$1.textsize = 12; /*744*/
		$1.textxoffset = 0; /*745*/
		$1.textyoffset = "unset"; /*746*/
		$1.height = 0.7; /*747*/
		$forall($1.options, function() {
			/*758*/
			var _3 = $k[--$j]; /*758*/
			$1[$k[--$j]] = _3; /*758*/
		}); /*758*/
		$1.textfont = "" + $1.textfont; /*760*/
		$1.textsize = +$1.textsize; /*761*/
		$1.height = +$1.height; /*762*/
		$1.textxoffset = +$1.textxoffset; /*763*/
		if ($eq($1.textyoffset, "unset")) {
			/*767*/
			$1.textyoffset = ($1.height * 72) + 1; /*765*/
		} else {
			/*767*/
			$1.textyoffset = +$1.textyoffset; /*767*/
		} /*767*/
		if ($1.barcode.length != 5) { //no-else/*773*/
			$k[$j++] = 'bwipp.ean5badLength'; /*772*/
			$k[$j++] = "EAN-5 add-on must be 5 digits"; /*772*/
			$0.raiseerror(); /*772*/
		} /*772*/
		$forall($1.barcode, function() {
			/*778*/
			var _E = $k[--$j]; /*775*/
			if ((_E < 48) || (_E > 57)) { //no-else/*777*/
				$k[$j++] = 'bwipp.ean5badCharacter'; /*776*/
				$k[$j++] = "EAN-5 add-on must contain only digits"; /*776*/
				$0.raiseerror(); /*776*/
			} /*776*/
		}); /*776*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); /*785*/
		$1.barchars = "0123456789"; /*788*/
		$1.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); /*794*/
		$1.checksum = 0; /*795*/
		for (var _H = 0; _H <= 4; _H += 1) {
			/*804*/
			$1.i = _H; /*797*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*798*/
			if (($1.i % 2) == 0) {
				/*802*/
				$1.checksum = ($1.barchar * 3) + $1.checksum; /*800*/
			} else {
				/*802*/
				$1.checksum = ($1.barchar * 9) + $1.checksum; /*802*/
			} /*802*/
		} /*802*/
		$1.checksum = $1.checksum % 10; /*805*/
		$1.mirrormap = $get($1.mirrormaps, $1.checksum); /*806*/
		$1.sbs = $s(31); /*808*/
		$1.txt = $a(5); /*809*/
		for (var _W = 0; _W <= 4; _W += 1) {
			/*839*/
			$1.i = _W; /*812*/
			if ($1.i == 0) {
				/*818*/
				$puti($1.sbs, 0, $get($1.encs, 10)); /*816*/
			} else {
				/*818*/
				$puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); /*818*/
			} /*818*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*822*/
			$j--; /*823*/
			$1.indx = $k[--$j].length; /*824*/
			$j -= 2; /*825*/
			$1.enc = $get($1.encs, $1.indx); /*826*/
			if ($get($1.mirrormap, $1.i) == 49) { //no-else/*836*/
				$1.enclen = $1.enc.length; /*828*/
				$1.revenc = $s($1.enclen); /*829*/
				for (var _v = 0, _u = $1.enclen - 1; _v <= _u; _v += 1) {
					/*834*/
					$1.j = _v; /*831*/
					$1.char = $get($1.enc, $1.j); /*832*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*833*/
				} /*833*/
				$1.enc = $1.revenc; /*835*/
			} /*835*/
			$puti($1.sbs, ($1.i * 6) + 3, $1.enc); /*837*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 9) + 13) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*838*/
		} /*838*/
		$k[$j++] = Infinity; /*853*/
		$k[$j++] = Infinity; /*845*/
		var _1I = $1.sbs; /*844*/
		for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) {
			/*844*/
			$k[$j++] = $get(_1I, _1J) - 48; /*844*/
		} /*844*/
		var _1M = $a(); /*845*/
		$k[$j++] = Infinity; /*846*/
		for (var _1N = 0, _1O = 16; _1N < _1O; _1N++) {
			/*845*/
			$k[$j++] = $1.height; /*845*/
		} /*845*/
		var _1Q = $a(); /*846*/
		$k[$j++] = Infinity; /*847*/
		for (var _1R = 0, _1S = 16; _1R < _1S; _1R++) {
			/*846*/
			$k[$j++] = 0; /*846*/
		} /*846*/
		var _1T = $a(); /*847*/
		$k[$j++] = 'ren'; /*849*/
		$k[$j++] = $0.renlinear; /*849*/
		$k[$j++] = 'sbs'; /*849*/
		$k[$j++] = _1M; /*849*/
		$k[$j++] = 'bhs'; /*849*/
		$k[$j++] = _1Q; /*849*/
		$k[$j++] = 'bbs'; /*849*/
		$k[$j++] = _1T; /*849*/
		if ($1.includetext) { //no-else/*849*/
			$k[$j++] = 'txt'; /*848*/
			$k[$j++] = $1.txt; /*848*/
		} /*848*/
		$k[$j++] = 'opt'; /*853*/
		$k[$j++] = $1.options; /*853*/
		$k[$j++] = 'guardrightpos'; /*853*/
		$k[$j++] = 10; /*853*/
		$k[$j++] = 'guardrightypos'; /*853*/
		$k[$j++] = $1.textyoffset + 4; /*853*/
		$k[$j++] = 'bordertop'; /*853*/
		$k[$j++] = 10; /*853*/
		var _1Y = $d(); /*853*/
		$k[$j++] = _1Y; /*856*/
		if (!$1.dontdraw) { //no-else/*856*/
			$0.renlinear(); /*856*/
		} /*856*/
	};
	$0.ean2 = function() {
		var $1 = {}; /*885*/
		$1.options = $k[--$j]; /*887*/
		$1.barcode = $k[--$j]; /*888*/
		$1.dontdraw = false; /*890*/
		$1.includetext = false; /*891*/
		$1.textfont = 'Helvetica'; /*892*/
		$1.textsize = 12; /*893*/
		$1.textxoffset = 0; /*894*/
		$1.textyoffset = "unset"; /*895*/
		$1.height = 0.7; /*896*/
		$forall($1.options, function() {
			/*907*/
			var _3 = $k[--$j]; /*907*/
			$1[$k[--$j]] = _3; /*907*/
		}); /*907*/
		$1.textfont = "" + $1.textfont; /*909*/
		$1.textsize = +$1.textsize; /*910*/
		$1.height = +$1.height; /*911*/
		$1.textxoffset = +$1.textxoffset; /*912*/
		if ($eq($1.textyoffset, "unset")) {
			/*916*/
			$1.textyoffset = ($1.height * 72) + 1; /*914*/
		} else {
			/*916*/
			$1.textyoffset = +$1.textyoffset; /*916*/
		} /*916*/
		if ($1.barcode.length != 2) { //no-else/*922*/
			$k[$j++] = 'bwipp.ean2badLength'; /*921*/
			$k[$j++] = "EAN-2 add-on must be 2 digits"; /*921*/
			$0.raiseerror(); /*921*/
		} /*921*/
		$forall($1.barcode, function() {
			/*927*/
			var _E = $k[--$j]; /*924*/
			if ((_E < 48) || (_E > 57)) { //no-else/*926*/
				$k[$j++] = 'bwipp.ean2badCharacter'; /*925*/
				$k[$j++] = "EAN-2 add-on must contain only digits"; /*925*/
				$0.raiseerror(); /*925*/
			} /*925*/
		}); /*925*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); /*934*/
		$1.barchars = "0123456789"; /*937*/
		$1.mirrormap = $get($a(["00", "01", "10", "11"]), (~~$z($geti($1.barcode, 0, 2))) % 4); /*940*/
		$1.sbs = $s(13); /*942*/
		$1.txt = $a(2); /*943*/
		for (var _M = 0; _M <= 1; _M += 1) {
			/*973*/
			$1.i = _M; /*946*/
			if ($1.i == 0) {
				/*952*/
				$puti($1.sbs, 0, $get($1.encs, 10)); /*950*/
			} else {
				/*952*/
				$puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); /*952*/
			} /*952*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*956*/
			$j--; /*957*/
			$1.indx = $k[--$j].length; /*958*/
			$j -= 2; /*959*/
			$1.enc = $get($1.encs, $1.indx); /*960*/
			if ($get($1.mirrormap, $1.i) == 49) { //no-else/*970*/
				$1.enclen = $1.enc.length; /*962*/
				$1.revenc = $s($1.enclen); /*963*/
				for (var _l = 0, _k = $1.enclen - 1; _l <= _k; _l += 1) {
					/*968*/
					$1.j = _l; /*965*/
					$1.char = $get($1.enc, $1.j); /*966*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*967*/
				} /*967*/
				$1.enc = $1.revenc; /*969*/
			} /*969*/
			$puti($1.sbs, ($1.i * 6) + 3, $1.enc); /*971*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 9) + 13) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*972*/
		} /*972*/
		$k[$j++] = Infinity; /*987*/
		$k[$j++] = Infinity; /*979*/
		var _18 = $1.sbs; /*978*/
		for (var _19 = 0, _1A = _18.length; _19 < _1A; _19++) {
			/*978*/
			$k[$j++] = $get(_18, _19) - 48; /*978*/
		} /*978*/
		var _1C = $a(); /*979*/
		$k[$j++] = Infinity; /*980*/
		for (var _1D = 0, _1E = 12; _1D < _1E; _1D++) {
			/*979*/
			$k[$j++] = $1.height; /*979*/
		} /*979*/
		var _1G = $a(); /*980*/
		$k[$j++] = Infinity; /*981*/
		for (var _1H = 0, _1I = 12; _1H < _1I; _1H++) {
			/*980*/
			$k[$j++] = 0; /*980*/
		} /*980*/
		var _1J = $a(); /*981*/
		$k[$j++] = 'ren'; /*983*/
		$k[$j++] = $0.renlinear; /*983*/
		$k[$j++] = 'sbs'; /*983*/
		$k[$j++] = _1C; /*983*/
		$k[$j++] = 'bhs'; /*983*/
		$k[$j++] = _1G; /*983*/
		$k[$j++] = 'bbs'; /*983*/
		$k[$j++] = _1J; /*983*/
		if ($1.includetext) { //no-else/*983*/
			$k[$j++] = 'txt'; /*982*/
			$k[$j++] = $1.txt; /*982*/
		} /*982*/
		$k[$j++] = 'opt'; /*987*/
		$k[$j++] = $1.options; /*987*/
		$k[$j++] = 'guardrightpos'; /*987*/
		$k[$j++] = 10; /*987*/
		$k[$j++] = 'guardrightypos'; /*987*/
		$k[$j++] = $1.textyoffset + 4; /*987*/
		$k[$j++] = 'bordertop'; /*987*/
		$k[$j++] = 10; /*987*/
		var _1O = $d(); /*987*/
		$k[$j++] = _1O; /*990*/
		if (!$1.dontdraw) { //no-else/*990*/
			$0.renlinear(); /*990*/
		} /*990*/
	};
	$0.ean13 = function() {
		var $1 = {}; /*1021*/
		$1.options = $k[--$j]; /*1023*/
		$1.barcode = $k[--$j]; /*1024*/
		$1.dontdraw = false; /*1026*/
		$1.includetext = false; /*1027*/
		$1.textfont = 'Helvetica'; /*1028*/
		$1.textsize = 12; /*1029*/
		$1.textxoffset = -10; /*1030*/
		$1.textyoffset = -4.5; /*1031*/
		$1.height = 1; /*1032*/
		$1.addongap = 12; /*1033*/
		$1.addontextfont = "unset"; /*1034*/
		$1.addontextsize = "unset"; /*1035*/
		$1.addontextxoffset = "unset"; /*1036*/
		$1.addontextyoffset = "unset"; /*1037*/
		$forall($1.options, function() {
			/*1048*/
			var _3 = $k[--$j]; /*1048*/
			$1[$k[--$j]] = _3; /*1048*/
		}); /*1048*/
		$1.textfont = "" + $1.textfont; /*1050*/
		$1.textsize = +$1.textsize; /*1051*/
		$1.textxoffset = +$1.textxoffset; /*1052*/
		$1.textyoffset = +$1.textyoffset; /*1053*/
		$1.height = +$1.height; /*1054*/
		$1.addongap = +$1.addongap; /*1055*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1056*/
			$1.addontextfont = "" + $1.addontextfont; /*1056*/
		} /*1056*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1057*/
			$1.addontextsize = +$1.addontextsize; /*1057*/
		} /*1057*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1058*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1058*/
		} /*1058*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1059*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1059*/
		} /*1059*/
		$search($1.barcode, " "); /*1062*/
		if ($k[--$j]) {
			/*1068*/
			$1.barcode = $k[--$j]; /*1063*/
			$j--; /*1064*/
			$1.addon = $k[--$j]; /*1065*/
		} else {
			/*1068*/
			$j--; /*1067*/
			$1.addon = ""; /*1068*/
		} /*1068*/
		if (($1.barcode.length != 12) && ($1.barcode.length != 13)) { //no-else/*1074*/
			$k[$j++] = 'bwipp.ean13badLength'; /*1073*/
			$k[$j++] = "EAN-13 must be 12 or 13 digits"; /*1073*/
			$0.raiseerror(); /*1073*/
		} /*1073*/
		$forall($1.barcode, function() {
			/*1079*/
			var _Q = $k[--$j]; /*1076*/
			if ((_Q < 48) || (_Q > 57)) { //no-else/*1078*/
				$k[$j++] = 'bwipp.ean13badCharacter'; /*1077*/
				$k[$j++] = "EAN-13 must contain only digits"; /*1077*/
				$0.raiseerror(); /*1077*/
			} /*1077*/
		}); /*1077*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1082*/
			$k[$j++] = 'bwipp.ean13badAddOnLength'; /*1081*/
			$k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; /*1081*/
			$0.raiseerror(); /*1081*/
		} /*1081*/
		$1.pad = $s(13); /*1085*/
		$1.checksum = 0; /*1086*/
		for (var _V = 0; _V <= 11; _V += 1) {
			/*1095*/
			$1.i = _V; /*1088*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*1089*/
			if (($1.i % 2) == 0) {
				/*1093*/
				$1.checksum = $1.barchar + $1.checksum; /*1091*/
			} else {
				/*1093*/
				$1.checksum = ($1.barchar * 3) + $1.checksum; /*1093*/
			} /*1093*/
		} /*1093*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1096*/
		if ($1.barcode.length == 13) { //no-else/*1101*/
			if ($get($1.barcode, 12) != ($1.checksum + 48)) { //no-else/*1100*/
				$k[$j++] = 'bwipp.ean13badCheckDigit'; /*1099*/
				$k[$j++] = "Incorrect EAN-13 check digit provided"; /*1099*/
				$0.raiseerror(); /*1099*/
			} /*1099*/
		} /*1099*/
		$puti($1.pad, 0, $1.barcode); /*1102*/
		$put($1.pad, 12, $1.checksum + 48); /*1103*/
		$1.barcode = $1.pad; /*1104*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); /*1111*/
		$1.barchars = "0123456789"; /*1114*/
		$1.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); /*1120*/
		$1.sbs = $s(59); /*1122*/
		$1.txt = $a(13); /*1123*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1126*/
		$1.mirrormap = $get($1.mirrormaps, $get($1.barcode, 0) - 48); /*1129*/
		$put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1130*/
		for (var _17 = 1; _17 <= 6; _17 += 1) {
			/*1153*/
			$1.i = _17; /*1135*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1136*/
			$j--; /*1137*/
			$1.indx = $k[--$j].length; /*1138*/
			$j -= 2; /*1139*/
			$1.enc = $get($1.encs, $1.indx); /*1140*/
			if ($get($1.mirrormap, $1.i - 1) == 49) { //no-else/*1150*/
				$1.enclen = $1.enc.length; /*1142*/
				$1.revenc = $s($1.enclen); /*1143*/
				for (var _1O = 0, _1N = $1.enclen - 1; _1O <= _1N; _1O += 1) {
					/*1148*/
					$1.j = _1O; /*1145*/
					$1.char = $get($1.enc, $1.j); /*1146*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*1147*/
				} /*1147*/
				$1.enc = $1.revenc; /*1149*/
			} /*1149*/
			$puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); /*1151*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 14) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1152*/
		} /*1152*/
		$puti($1.sbs, ((7 - 1) * 4) + 3, $get($1.encs, 11)); /*1156*/
		for (var _1o = 7; _1o <= 12; _1o += 1) {
			/*1169*/
			$1.i = _1o; /*1161*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1162*/
			$j--; /*1163*/
			$1.indx = $k[--$j].length; /*1164*/
			$j -= 2; /*1165*/
			$1.enc = $get($1.encs, $1.indx); /*1166*/
			$puti($1.sbs, (($1.i - 1) * 4) + 8, $1.enc); /*1167*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 18) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1168*/
		} /*1168*/
		$puti($1.sbs, 56, $get($1.encs, 12)); /*1172*/
		$k[$j++] = Infinity; /*1174*/
		var _2E = $1.sbs; /*1174*/
		for (var _2F = 0, _2G = _2E.length; _2F < _2G; _2F++) {
			/*1174*/
			$k[$j++] = $get(_2E, _2F) - 48; /*1174*/
		} /*1174*/
		$1.sbs = $a(); /*1174*/
		if ($1.includetext) {
			/*1181*/
			$k[$j++] = Infinity; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			for (var _2M = 0, _2N = 12; _2M < _2N; _2M++) {
				/*1176*/
				$k[$j++] = $1.height - 0.075; /*1176*/
			} /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			for (var _2R = 0, _2S = 12; _2R < _2S; _2R++) {
				/*1176*/
				$k[$j++] = $1.height - 0.075; /*1176*/
			} /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$k[$j++] = $1.height; /*1176*/
			$1.bhs = $a(); /*1176*/
			$k[$j++] = Infinity; /*1177*/
			$k[$j++] = 0; /*1177*/
			$k[$j++] = 0; /*1177*/
			for (var _2X = 0, _2Y = 12; _2X < _2Y; _2X++) {
				/*1177*/
				$k[$j++] = 0.075; /*1177*/
			} /*1177*/
			$k[$j++] = 0; /*1177*/
			$k[$j++] = 0; /*1177*/
			for (var _2Z = 0, _2a = 12; _2Z < _2a; _2Z++) {
				/*1177*/
				$k[$j++] = 0.075; /*1177*/
			} /*1177*/
			$k[$j++] = 0; /*1177*/
			$k[$j++] = 0; /*1177*/
			$1.bbs = $a(); /*1177*/
		} else {
			/*1181*/
			$k[$j++] = Infinity; /*1179*/
			for (var _2c = 0, _2d = 30; _2c < _2d; _2c++) {
				/*1179*/
				$k[$j++] = $1.height; /*1179*/
			} /*1179*/
			$1.bhs = $a(); /*1179*/
			$k[$j++] = Infinity; /*1180*/
			for (var _2g = 0, _2h = 30; _2g < _2h; _2g++) {
				/*1180*/
				$k[$j++] = 0; /*1180*/
			} /*1180*/
			$1.bbs = $a(); /*1180*/
			$1.txt = $a([]); /*1181*/
		} /*1181*/
		$1.guardrightypos = 0; /*1183*/
		if ($ne($1.addon, "")) { //no-else/*1204*/
			$k[$j++] = Infinity; /*1194*/
			$k[$j++] = 'dontdraw'; /*1191*/
			$k[$j++] = true; /*1191*/
			$k[$j++] = 'includetext'; /*1191*/
			$k[$j++] = true; /*1191*/
			$k[$j++] = 'height'; /*1191*/
			$k[$j++] = $1.height - 0.15; /*1191*/
			$k[$j++] = 'textxoffset'; /*1191*/
			if ($1.addontextxoffset != "unset") {
				/*1191*/
				$k[$j++] = $1.addontextxoffset; /*1191*/
			} else {
				/*1191*/
				$k[$j++] = 95 + $1.addongap; /*1191*/
			} /*1191*/
			if ($1.addontextyoffset != "unset") { //no-else/*1192*/
				$k[$j++] = 'textyoffset'; /*1192*/
				$k[$j++] = $1.addontextyoffset; /*1192*/
			} /*1192*/
			var _2s = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1193*/
			var _2u = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1194*/
			$k[$j++] = 'textsize'; /*1194*/
			$k[$j++] = _2s; /*1194*/
			$k[$j++] = 'textfont'; /*1194*/
			$k[$j++] = _2u; /*1194*/
			$1.addopts = $d(); /*1195*/
			if ($1.addon.length == 2) { //no-else/*1196*/
				$k[$j++] = $1.addon; /*1196*/
				$k[$j++] = $1.addopts; /*1196*/
				$0.ean2(); /*1196*/
			} /*1196*/
			if ($1.addon.length == 5) { //no-else/*1197*/
				$k[$j++] = $1.addon; /*1197*/
				$k[$j++] = $1.addopts; /*1197*/
				$0.ean5(); /*1197*/
			} /*1197*/
			$1.addcode = $k[--$j]; /*1198*/
			$k[$j++] = Infinity; /*1199*/
			$aload($1.sbs); /*1199*/
			$k[$j++] = $1.addongap; /*1199*/
			$aload($get($1.addcode, "sbs")); /*1199*/
			$1.sbs = $a(); /*1199*/
			$k[$j++] = Infinity; /*1200*/
			$aload($1.bhs); /*1200*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1200*/
				var _3B = $k[--$j]; /*1200*/
				$k[$j++] = _3B - 0.075; /*1200*/
			}); /*1200*/
			$1.bhs = $a(); /*1200*/
			$k[$j++] = Infinity; /*1201*/
			$aload($1.bbs); /*1201*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1201*/
				var _3G = $k[--$j]; /*1201*/
				$k[$j++] = _3G + 0.075; /*1201*/
			}); /*1201*/
			$1.bbs = $a(); /*1201*/
			$k[$j++] = Infinity; /*1202*/
			$aload($1.txt); /*1202*/
			$aload($get($1.addcode, "txt")); /*1202*/
			$1.txt = $a(); /*1202*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1203*/
		} /*1203*/
		var _3T = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1216*/
		$k[$j++] = _3T; /*1219*/
		if (!$1.dontdraw) { //no-else/*1219*/
			$0.renlinear(); /*1219*/
		} /*1219*/
	};
	$0.ean8 = function() {
		var $1 = {}; /*1250*/
		$1.options = $k[--$j]; /*1252*/
		$1.barcode = $k[--$j]; /*1253*/
		$1.dontdraw = false; /*1255*/
		$1.includetext = false; /*1256*/
		$1.textfont = 'Helvetica'; /*1257*/
		$1.textsize = 12; /*1258*/
		$1.textxoffset = 4; /*1259*/
		$1.textyoffset = -4.5; /*1260*/
		$1.height = 1; /*1261*/
		$1.addongap = 12; /*1262*/
		$1.addontextfont = "unset"; /*1263*/
		$1.addontextsize = "unset"; /*1264*/
		$1.addontextxoffset = "unset"; /*1265*/
		$1.addontextyoffset = "unset"; /*1266*/
		$forall($1.options, function() {
			/*1277*/
			var _3 = $k[--$j]; /*1277*/
			$1[$k[--$j]] = _3; /*1277*/
		}); /*1277*/
		$1.textfont = "" + $1.textfont; /*1279*/
		$1.textsize = +$1.textsize; /*1280*/
		$1.textxoffset = +$1.textxoffset; /*1281*/
		$1.textyoffset = +$1.textyoffset; /*1282*/
		$1.height = +$1.height; /*1283*/
		$1.addongap = +$1.addongap; /*1284*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1285*/
			$1.addontextfont = "" + $1.addontextfont; /*1285*/
		} /*1285*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1286*/
			$1.addontextsize = +$1.addontextsize; /*1286*/
		} /*1286*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1287*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1287*/
		} /*1287*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1288*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1288*/
		} /*1288*/
		$search($1.barcode, " "); /*1291*/
		if ($k[--$j]) {
			/*1297*/
			$1.barcode = $k[--$j]; /*1292*/
			$j--; /*1293*/
			$1.addon = $k[--$j]; /*1294*/
		} else {
			/*1297*/
			$j--; /*1296*/
			$1.addon = ""; /*1297*/
		} /*1297*/
		if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //no-else/*1303*/
			$k[$j++] = 'bwipp.ean8badLength'; /*1302*/
			$k[$j++] = "EAN-8 must be 7 or 8 digits"; /*1302*/
			$0.raiseerror(); /*1302*/
		} /*1302*/
		$forall($1.barcode, function() {
			/*1308*/
			var _Q = $k[--$j]; /*1305*/
			if ((_Q < 48) || (_Q > 57)) { //no-else/*1307*/
				$k[$j++] = 'bwipp.ean8badCharacter'; /*1306*/
				$k[$j++] = "EAN-8 must contain only digits"; /*1306*/
				$0.raiseerror(); /*1306*/
			} /*1306*/
		}); /*1306*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1311*/
			$k[$j++] = 'bwipp.ean8badAddOnLength'; /*1310*/
			$k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; /*1310*/
			$0.raiseerror(); /*1310*/
		} /*1310*/
		$1.pad = $s(8); /*1314*/
		$1.checksum = 0; /*1315*/
		for (var _V = 0; _V <= 6; _V += 1) {
			/*1324*/
			$1.i = _V; /*1317*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*1318*/
			if (($1.i % 2) != 0) {
				/*1322*/
				$1.checksum = $1.barchar + $1.checksum; /*1320*/
			} else {
				/*1322*/
				$1.checksum = ($1.barchar * 3) + $1.checksum; /*1322*/
			} /*1322*/
		} /*1322*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1325*/
		if ($1.barcode.length == 8) { //no-else/*1330*/
			if ($get($1.barcode, 7) != ($1.checksum + 48)) { //no-else/*1329*/
				$k[$j++] = 'bwipp.ean8badCheckDigit'; /*1328*/
				$k[$j++] = "Incorrect EAN-8 check digit provided"; /*1328*/
				$0.raiseerror(); /*1328*/
			} /*1328*/
		} /*1328*/
		$puti($1.pad, 0, $1.barcode); /*1331*/
		$put($1.pad, 7, $1.checksum + 48); /*1332*/
		$1.barcode = $1.pad; /*1333*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); /*1340*/
		$1.barchars = "0123456789"; /*1343*/
		$1.sbs = $s(43); /*1345*/
		$1.txt = $a(8); /*1346*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1349*/
		for (var _u = 0; _u <= 3; _u += 1) {
			/*1362*/
			$1.i = _u; /*1354*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1355*/
			$j--; /*1356*/
			$1.indx = $k[--$j].length; /*1357*/
			$j -= 2; /*1358*/
			$1.enc = $get($1.encs, $1.indx); /*1359*/
			$puti($1.sbs, ($1.i * 4) + 3, $1.enc); /*1360*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 7) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1361*/
		} /*1361*/
		$puti($1.sbs, (4 * 4) + 3, $get($1.encs, 11)); /*1365*/
		for (var _1K = 4; _1K <= 7; _1K += 1) {
			/*1378*/
			$1.i = _1K; /*1370*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1371*/
			$j--; /*1372*/
			$1.indx = $k[--$j].length; /*1373*/
			$j -= 2; /*1374*/
			$1.enc = $get($1.encs, $1.indx); /*1375*/
			$puti($1.sbs, ($1.i * 4) + 8, $1.enc); /*1376*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + $1.textxoffset) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*1377*/
		} /*1377*/
		$puti($1.sbs, 40, $get($1.encs, 12)); /*1381*/
		$k[$j++] = Infinity; /*1383*/
		var _1k = $1.sbs; /*1383*/
		for (var _1l = 0, _1m = _1k.length; _1l < _1m; _1l++) {
			/*1383*/
			$k[$j++] = $get(_1k, _1l) - 48; /*1383*/
		} /*1383*/
		$1.sbs = $a(); /*1383*/
		if ($1.includetext) {
			/*1390*/
			$k[$j++] = Infinity; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			for (var _1s = 0, _1t = 8; _1s < _1t; _1s++) {
				/*1385*/
				$k[$j++] = $1.height - 0.075; /*1385*/
			} /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			for (var _1x = 0, _1y = 8; _1x < _1y; _1x++) {
				/*1385*/
				$k[$j++] = $1.height - 0.075; /*1385*/
			} /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$k[$j++] = $1.height; /*1385*/
			$1.bhs = $a(); /*1385*/
			$k[$j++] = Infinity; /*1386*/
			$k[$j++] = 0; /*1386*/
			$k[$j++] = 0; /*1386*/
			for (var _23 = 0, _24 = 8; _23 < _24; _23++) {
				/*1386*/
				$k[$j++] = 0.075; /*1386*/
			} /*1386*/
			$k[$j++] = 0; /*1386*/
			$k[$j++] = 0; /*1386*/
			for (var _25 = 0, _26 = 8; _25 < _26; _25++) {
				/*1386*/
				$k[$j++] = 0.075; /*1386*/
			} /*1386*/
			$k[$j++] = 0; /*1386*/
			$k[$j++] = 0; /*1386*/
			$1.bbs = $a(); /*1386*/
		} else {
			/*1390*/
			$k[$j++] = Infinity; /*1388*/
			for (var _28 = 0, _29 = 22; _28 < _29; _28++) {
				/*1388*/
				$k[$j++] = $1.height; /*1388*/
			} /*1388*/
			$1.bhs = $a(); /*1388*/
			$k[$j++] = Infinity; /*1389*/
			for (var _2C = 0, _2D = 22; _2C < _2D; _2C++) {
				/*1389*/
				$k[$j++] = 0; /*1389*/
			} /*1389*/
			$1.bbs = $a(); /*1389*/
			$1.txt = $a([]); /*1390*/
		} /*1390*/
		$1.guardrightypos = 0; /*1392*/
		if ($ne($1.addon, "")) { //no-else/*1413*/
			$k[$j++] = Infinity; /*1403*/
			$k[$j++] = 'dontdraw'; /*1400*/
			$k[$j++] = true; /*1400*/
			$k[$j++] = 'includetext'; /*1400*/
			$k[$j++] = true; /*1400*/
			$k[$j++] = 'height'; /*1400*/
			$k[$j++] = $1.height - 0.15; /*1400*/
			$k[$j++] = 'textxoffset'; /*1400*/
			if ($1.addontextxoffset != "unset") {
				/*1400*/
				$k[$j++] = $1.addontextxoffset; /*1400*/
			} else {
				/*1400*/
				$k[$j++] = 67 + $1.addongap; /*1400*/
			} /*1400*/
			if ($1.addontextyoffset != "unset") { //no-else/*1401*/
				$k[$j++] = 'textyoffset'; /*1401*/
				$k[$j++] = $1.addontextyoffset; /*1401*/
			} /*1401*/
			var _2O = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1402*/
			var _2Q = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1403*/
			$k[$j++] = 'textsize'; /*1403*/
			$k[$j++] = _2O; /*1403*/
			$k[$j++] = 'textfont'; /*1403*/
			$k[$j++] = _2Q; /*1403*/
			$1.addopts = $d(); /*1404*/
			if ($1.addon.length == 2) { //no-else/*1405*/
				$k[$j++] = $1.addon; /*1405*/
				$k[$j++] = $1.addopts; /*1405*/
				$0.ean2(); /*1405*/
			} /*1405*/
			if ($1.addon.length == 5) { //no-else/*1406*/
				$k[$j++] = $1.addon; /*1406*/
				$k[$j++] = $1.addopts; /*1406*/
				$0.ean5(); /*1406*/
			} /*1406*/
			$1.addcode = $k[--$j]; /*1407*/
			$k[$j++] = Infinity; /*1408*/
			$aload($1.sbs); /*1408*/
			$k[$j++] = $1.addongap; /*1408*/
			$aload($get($1.addcode, "sbs")); /*1408*/
			$1.sbs = $a(); /*1408*/
			$k[$j++] = Infinity; /*1409*/
			$aload($1.bhs); /*1409*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1409*/
				var _2h = $k[--$j]; /*1409*/
				$k[$j++] = _2h - 0.075; /*1409*/
			}); /*1409*/
			$1.bhs = $a(); /*1409*/
			$k[$j++] = Infinity; /*1410*/
			$aload($1.bbs); /*1410*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1410*/
				var _2m = $k[--$j]; /*1410*/
				$k[$j++] = _2m + 0.075; /*1410*/
			}); /*1410*/
			$1.bbs = $a(); /*1410*/
			$k[$j++] = Infinity; /*1411*/
			$aload($1.txt); /*1411*/
			$aload($get($1.addcode, "txt")); /*1411*/
			$1.txt = $a(); /*1411*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1412*/
		} /*1412*/
		var _2z = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardleftpos", 10],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1426*/
		$k[$j++] = _2z; /*1429*/
		if (!$1.dontdraw) { //no-else/*1429*/
			$0.renlinear(); /*1429*/
		} /*1429*/
	};
	$0.upca = function() {
		var $1 = {}; /*1460*/
		$1.options = $k[--$j]; /*1462*/
		$1.barcode = $k[--$j]; /*1463*/
		$1.dontdraw = false; /*1465*/
		$1.includetext = false; /*1466*/
		$1.textfont = 'Helvetica'; /*1467*/
		$1.textsize = 12; /*1468*/
		$1.textxoffset = -7; /*1469*/
		$1.textyoffset = -4.5; /*1470*/
		$1.height = 1; /*1471*/
		$1.addongap = 12; /*1472*/
		$1.addontextfont = "unset"; /*1473*/
		$1.addontextsize = "unset"; /*1474*/
		$1.addontextxoffset = "unset"; /*1475*/
		$1.addontextyoffset = "unset"; /*1476*/
		$forall($1.options, function() {
			/*1487*/
			var _3 = $k[--$j]; /*1487*/
			$1[$k[--$j]] = _3; /*1487*/
		}); /*1487*/
		$1.textfont = "" + $1.textfont; /*1489*/
		$1.textsize = +$1.textsize; /*1490*/
		$1.textxoffset = +$1.textxoffset; /*1491*/
		$1.textyoffset = +$1.textyoffset; /*1492*/
		$1.height = +$1.height; /*1493*/
		$1.addongap = +$1.addongap; /*1494*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1495*/
			$1.addontextfont = "" + $1.addontextfont; /*1495*/
		} /*1495*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1496*/
			$1.addontextsize = +$1.addontextsize; /*1496*/
		} /*1496*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1497*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1497*/
		} /*1497*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1498*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1498*/
		} /*1498*/
		$search($1.barcode, " "); /*1501*/
		if ($k[--$j]) {
			/*1507*/
			$1.barcode = $k[--$j]; /*1502*/
			$j--; /*1503*/
			$1.addon = $k[--$j]; /*1504*/
		} else {
			/*1507*/
			$j--; /*1506*/
			$1.addon = ""; /*1507*/
		} /*1507*/
		if (($1.barcode.length == 7) || ($1.barcode.length == 8)) { //no-else/*1553*/
			$forall($1.barcode, function() {
				/*1517*/
				var _Q = $k[--$j]; /*1514*/
				if ((_Q < 48) || (_Q > 57)) { //no-else/*1516*/
					$k[$j++] = 'bwipp.upcAupcEbadCharacter'; /*1515*/
					$k[$j++] = "UPC-E must contain only digits"; /*1515*/
					$0.raiseerror(); /*1515*/
				} /*1515*/
			}); /*1515*/
			var _S = $get($1.barcode, 0); /*1518*/
			if ((_S != 48) && (_S != 49)) { //no-else/*1520*/
				$k[$j++] = 'bwipp.upcAupcEbadNumberSystem'; /*1519*/
				$k[$j++] = "UPC-E must have number system 0 or 1"; /*1519*/
				$0.raiseerror(); /*1519*/
			} /*1519*/
			for (var _T = 0, _U = 1; _T < _U; _T++) {
				/*1548*/
				var _W = ($1.barcode.length == 8) ? 12 : 11; /*1522*/
				$1.upcacode = $s(_W); /*1522*/
				if (($get($1.barcode, 6) - 48) <= 2) { //no-else/*1529*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); /*1524*/
					$puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); /*1525*/
					$puti($1.upcacode, 4, "0000"); /*1526*/
					$puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); /*1527*/
					break; /*1528*/
				} /*1528*/
				if (($get($1.barcode, 6) - 48) == 3) { //no-else/*1535*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); /*1531*/
					$puti($1.upcacode, 4, "00000"); /*1532*/
					$puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); /*1533*/
					break; /*1534*/
				} /*1534*/
				if (($get($1.barcode, 6) - 48) == 4) { //no-else/*1541*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); /*1537*/
					$puti($1.upcacode, 5, "00000"); /*1538*/
					$puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); /*1539*/
					break; /*1540*/
				} /*1540*/
				if (($get($1.barcode, 6) - 48) >= 5) { //no-else/*1547*/
					$puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); /*1543*/
					$puti($1.upcacode, 6, "0000"); /*1544*/
					$puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); /*1545*/
					break; /*1546*/
				} /*1546*/
			} /*1546*/
			if ($1.barcode.length == 8) { //no-else/*1551*/
				$puti($1.upcacode, 11, $geti($1.barcode, 7, 1)); /*1550*/
			} /*1550*/
			$1.barcode = $1.upcacode; /*1552*/
		} /*1552*/
		if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //no-else/*1558*/
			$k[$j++] = 'bwipp.upcAbadLength'; /*1557*/
			$k[$j++] = "UPC-A must be 11 or 12 digits"; /*1557*/
			$0.raiseerror(); /*1557*/
		} /*1557*/
		var _1I = $1.barcode; /*1559*/
		for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) {
			/*1563*/
			var _1L = $get(_1I, _1J); /*1563*/
			if ((_1L < 48) || (_1L > 57)) { //no-else/*1562*/
				$k[$j++] = 'bwipp.upcAbadCharacter'; /*1561*/
				$k[$j++] = "UPC-A must contain only digits"; /*1561*/
				$0.raiseerror(); /*1561*/
			} /*1561*/
		} /*1561*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1566*/
			$k[$j++] = 'bwipp.upcAbadAddOnLength'; /*1565*/
			$k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; /*1565*/
			$0.raiseerror(); /*1565*/
		} /*1565*/
		$1.pad = $s(12); /*1569*/
		$1.checksum = 0; /*1570*/
		for (var _1Q = 0; _1Q <= 10; _1Q += 1) {
			/*1579*/
			$1.i = _1Q; /*1572*/
			$1.barchar = $get($1.barcode, $1.i) - 48; /*1573*/
			if (($1.i % 2) != 0) {
				/*1577*/
				$1.checksum = $1.checksum + $1.barchar; /*1575*/
			} else {
				/*1577*/
				$1.checksum = $1.checksum + ($1.barchar * 3); /*1577*/
			} /*1577*/
		} /*1577*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1580*/
		if ($1.barcode.length == 12) { //no-else/*1585*/
			if ($get($1.barcode, 11) != ($1.checksum + 48)) { //no-else/*1584*/
				$k[$j++] = 'bwipp.upcAbadCheckDigit'; /*1583*/
				$k[$j++] = "Incorrect UPC check digit provided"; /*1583*/
				$0.raiseerror(); /*1583*/
			} /*1583*/
		} /*1583*/
		$puti($1.pad, 0, $1.barcode); /*1586*/
		$put($1.pad, 11, $1.checksum + 48); /*1587*/
		$1.barcode = $1.pad; /*1588*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); /*1595*/
		$1.barchars = "0123456789"; /*1598*/
		$1.sbs = $s(59); /*1600*/
		$1.txt = $a(12); /*1601*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1604*/
		for (var _1p = 0; _1p <= 5; _1p += 1) {
			/*1621*/
			$1.i = _1p; /*1609*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1610*/
			$j--; /*1611*/
			$1.indx = $k[--$j].length; /*1612*/
			$j -= 2; /*1613*/
			$1.enc = $get($1.encs, $1.indx); /*1614*/
			$puti($1.sbs, ($1.i * 4) + 3, $1.enc); /*1615*/
			if ($1.i == 0) {
				/*1619*/
				$put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1617*/
			} else {
				/*1619*/
				$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + 11) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1619*/
			} /*1619*/
		} /*1619*/
		$puti($1.sbs, (6 * 4) + 3, $get($1.encs, 11)); /*1624*/
		for (var _2O = 6; _2O <= 11; _2O += 1) {
			/*1641*/
			$1.i = _2O; /*1629*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1630*/
			$j--; /*1631*/
			$1.indx = $k[--$j].length; /*1632*/
			$j -= 2; /*1633*/
			$1.enc = $get($1.encs, $1.indx); /*1634*/
			$puti($1.sbs, ($1.i * 4) + 8, $1.enc); /*1635*/
			if ($1.i == 11) {
				/*1639*/
				$put($1.txt, 11, $a([$geti($1.barcode, 11, 1), $1.textxoffset + 104, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1637*/
			} else {
				/*1639*/
				$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 7) + $1.textxoffset) + 15, $1.textyoffset, $1.textfont, $1.textsize])); /*1639*/
			} /*1639*/
		} /*1639*/
		$puti($1.sbs, 56, $get($1.encs, 12)); /*1644*/
		$k[$j++] = Infinity; /*1646*/
		var _2x = $1.sbs; /*1646*/
		for (var _2y = 0, _2z = _2x.length; _2y < _2z; _2y++) {
			/*1646*/
			$k[$j++] = $get(_2x, _2y) - 48; /*1646*/
		} /*1646*/
		$1.sbs = $a(); /*1646*/
		if ($1.includetext) {
			/*1653*/
			$k[$j++] = Infinity; /*1648*/
			for (var _33 = 0, _34 = 4; _33 < _34; _33++) {
				/*1648*/
				$k[$j++] = $1.height; /*1648*/
			} /*1648*/
			for (var _36 = 0, _37 = 10; _36 < _37; _36++) {
				/*1648*/
				$k[$j++] = $1.height - 0.075; /*1648*/
			} /*1648*/
			$k[$j++] = $1.height; /*1648*/
			$k[$j++] = $1.height; /*1648*/
			for (var _3B = 0, _3C = 10; _3B < _3C; _3B++) {
				/*1648*/
				$k[$j++] = $1.height - 0.075; /*1648*/
			} /*1648*/
			for (var _3E = 0, _3F = 4; _3E < _3F; _3E++) {
				/*1648*/
				$k[$j++] = $1.height; /*1648*/
			} /*1648*/
			$1.bhs = $a(); /*1648*/
			$k[$j++] = Infinity; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			for (var _3I = 0, _3J = 10; _3I < _3J; _3I++) {
				/*1649*/
				$k[$j++] = 0.075; /*1649*/
			} /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			for (var _3K = 0, _3L = 10; _3K < _3L; _3K++) {
				/*1649*/
				$k[$j++] = 0.075; /*1649*/
			} /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$k[$j++] = 0; /*1649*/
			$1.bbs = $a(); /*1649*/
		} else {
			/*1653*/
			$k[$j++] = Infinity; /*1651*/
			for (var _3N = 0, _3O = 30; _3N < _3O; _3N++) {
				/*1651*/
				$k[$j++] = $1.height; /*1651*/
			} /*1651*/
			$1.bhs = $a(); /*1651*/
			$k[$j++] = Infinity; /*1652*/
			for (var _3R = 0, _3S = 30; _3R < _3S; _3R++) {
				/*1652*/
				$k[$j++] = 0; /*1652*/
			} /*1652*/
			$1.bbs = $a(); /*1652*/
			$1.txt = $a([]); /*1653*/
		} /*1653*/
		$1.guardrightypos = 0; /*1655*/
		if ($ne($1.addon, "")) { //no-else/*1676*/
			$k[$j++] = Infinity; /*1666*/
			$k[$j++] = 'dontdraw'; /*1663*/
			$k[$j++] = true; /*1663*/
			$k[$j++] = 'includetext'; /*1663*/
			$k[$j++] = true; /*1663*/
			$k[$j++] = 'height'; /*1663*/
			$k[$j++] = $1.height - 0.15; /*1663*/
			$k[$j++] = 'textxoffset'; /*1663*/
			if ($1.addontextxoffset != "unset") {
				/*1663*/
				$k[$j++] = $1.addontextxoffset; /*1663*/
			} else {
				/*1663*/
				$k[$j++] = 95 + $1.addongap; /*1663*/
			} /*1663*/
			if ($1.addontextyoffset != "unset") { //no-else/*1664*/
				$k[$j++] = 'textyoffset'; /*1664*/
				$k[$j++] = $1.addontextyoffset; /*1664*/
			} /*1664*/
			var _3d = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1665*/
			var _3f = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1666*/
			$k[$j++] = 'textsize'; /*1666*/
			$k[$j++] = _3d; /*1666*/
			$k[$j++] = 'textfont'; /*1666*/
			$k[$j++] = _3f; /*1666*/
			$1.addopts = $d(); /*1667*/
			if ($1.addon.length == 2) { //no-else/*1668*/
				$k[$j++] = $1.addon; /*1668*/
				$k[$j++] = $1.addopts; /*1668*/
				$0.ean2(); /*1668*/
			} /*1668*/
			if ($1.addon.length == 5) { //no-else/*1669*/
				$k[$j++] = $1.addon; /*1669*/
				$k[$j++] = $1.addopts; /*1669*/
				$0.ean5(); /*1669*/
			} /*1669*/
			$1.addcode = $k[--$j]; /*1670*/
			$k[$j++] = Infinity; /*1671*/
			$aload($1.sbs); /*1671*/
			$k[$j++] = $1.addongap; /*1671*/
			$aload($get($1.addcode, "sbs")); /*1671*/
			$1.sbs = $a(); /*1671*/
			$k[$j++] = Infinity; /*1672*/
			$aload($1.bhs); /*1672*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1672*/
				var _3w = $k[--$j]; /*1672*/
				$k[$j++] = _3w - 0.075; /*1672*/
			}); /*1672*/
			$1.bhs = $a(); /*1672*/
			$k[$j++] = Infinity; /*1673*/
			$aload($1.bbs); /*1673*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1673*/
				var _41 = $k[--$j]; /*1673*/
				$k[$j++] = _41 + 0.075; /*1673*/
			}); /*1673*/
			$1.bbs = $a(); /*1673*/
			$k[$j++] = Infinity; /*1674*/
			$aload($1.txt); /*1674*/
			$aload($get($1.addcode, "txt")); /*1674*/
			$1.txt = $a(); /*1674*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1675*/
		} /*1675*/
		var _4E = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1688*/
		$k[$j++] = _4E; /*1691*/
		if (!$1.dontdraw) { //no-else/*1691*/
			$0.renlinear(); /*1691*/
		} /*1691*/
	};
	$0.upce = function() {
		var $1 = {}; /*1722*/
		$1.options = $k[--$j]; /*1724*/
		$1.barcode = $k[--$j]; /*1725*/
		$1.dontdraw = false; /*1727*/
		$1.includetext = false; /*1728*/
		$1.textfont = 'Helvetica'; /*1729*/
		$1.textsize = 12; /*1730*/
		$1.textxoffset = -7; /*1731*/
		$1.textyoffset = -4.5; /*1732*/
		$1.height = 1; /*1733*/
		$1.addongap = 12; /*1734*/
		$1.addontextfont = "unset"; /*1735*/
		$1.addontextsize = "unset"; /*1736*/
		$1.addontextxoffset = "unset"; /*1737*/
		$1.addontextyoffset = "unset"; /*1738*/
		$forall($1.options, function() {
			/*1749*/
			var _3 = $k[--$j]; /*1749*/
			$1[$k[--$j]] = _3; /*1749*/
		}); /*1749*/
		$1.textfont = "" + $1.textfont; /*1751*/
		$1.textsize = +$1.textsize; /*1752*/
		$1.textxoffset = +$1.textxoffset; /*1753*/
		$1.textyoffset = +$1.textyoffset; /*1754*/
		$1.height = +$1.height; /*1755*/
		$1.addongap = +$1.addongap; /*1756*/
		if ($ne($1.addontextfont, "unset")) { //no-else/*1757*/
			$1.addontextfont = "" + $1.addontextfont; /*1757*/
		} /*1757*/
		if ($ne($1.addontextsize, "unset")) { //no-else/*1758*/
			$1.addontextsize = +$1.addontextsize; /*1758*/
		} /*1758*/
		if ($ne($1.addontextxoffset, "unset")) { //no-else/*1759*/
			$1.addontextxoffset = +$1.addontextxoffset; /*1759*/
		} /*1759*/
		if ($ne($1.addontextyoffset, "unset")) { //no-else/*1760*/
			$1.addontextyoffset = +$1.addontextyoffset; /*1760*/
		} /*1760*/
		$search($1.barcode, " "); /*1763*/
		if ($k[--$j]) {
			/*1769*/
			$1.barcode = $k[--$j]; /*1764*/
			$j--; /*1765*/
			$1.addon = $k[--$j]; /*1766*/
		} else {
			/*1769*/
			$j--; /*1768*/
			$1.addon = ""; /*1769*/
		} /*1769*/
		if (($1.barcode.length == 11) || ($1.barcode.length == 12)) { //no-else/*1811*/
			$forall($1.barcode, function() {
				/*1779*/
				var _Q = $k[--$j]; /*1776*/
				if ((_Q < 48) || (_Q > 57)) { //no-else/*1778*/
					$k[$j++] = 'bwipp.upcEupcAbadCharacter'; /*1777*/
					$k[$j++] = "UPC-A must contain only digits"; /*1777*/
					$0.raiseerror(); /*1777*/
				} /*1777*/
			}); /*1777*/
			for (var _R = 0, _S = 1; _R < _S; _R++) {
				/*1806*/
				var _U = ($1.barcode.length == 12) ? 8 : 7; /*1781*/
				$1.upcecode = $s(_U); /*1781*/
				if ((($get($1.barcode, 3) - 48) <= 2) && $eq($geti($1.barcode, 4, 4), "0000")) { //no-else/*1787*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 3)); /*1783*/
					$puti($1.upcecode, 3, $geti($1.barcode, 8, 3)); /*1784*/
					$puti($1.upcecode, 6, $geti($1.barcode, 3, 1)); /*1785*/
					break; /*1786*/
				} /*1786*/
				if ($eq($geti($1.barcode, 4, 5), "00000")) { //no-else/*1793*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 4)); /*1789*/
					$puti($1.upcecode, 4, $geti($1.barcode, 9, 2)); /*1790*/
					$puti($1.upcecode, 6, "3"); /*1791*/
					break; /*1792*/
				} /*1792*/
				if ($eq($geti($1.barcode, 5, 5), "00000")) { //no-else/*1799*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 5)); /*1795*/
					$puti($1.upcecode, 5, $geti($1.barcode, 10, 1)); /*1796*/
					$puti($1.upcecode, 6, "4"); /*1797*/
					break; /*1798*/
				} /*1798*/
				if ((($get($1.barcode, 10) - 48) >= 5) && $eq($geti($1.barcode, 6, 4), "0000")) { //no-else/*1804*/
					$puti($1.upcecode, 0, $geti($1.barcode, 0, 6)); /*1801*/
					$puti($1.upcecode, 6, $geti($1.barcode, 10, 1)); /*1802*/
					break; /*1803*/
				} /*1803*/
				$k[$j++] = 'bwipp.upcEupcAnotCompressible'; /*1805*/
				$k[$j++] = "UPC-A cannot be converted to a UPC-E"; /*1805*/
				$0.raiseerror(); /*1805*/
			} /*1805*/
			if ($1.barcode.length == 12) { //no-else/*1809*/
				$puti($1.upcecode, 7, $geti($1.barcode, 11, 1)); /*1808*/
			} /*1808*/
			$1.barcode = $1.upcecode; /*1810*/
		} /*1810*/
		if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //no-else/*1816*/
			$k[$j++] = 'bwipp.upcEbadLength'; /*1815*/
			$k[$j++] = "UPC-E must be 7 or 8 digits"; /*1815*/
			$0.raiseerror(); /*1815*/
		} /*1815*/
		var _1I = $1.barcode; /*1817*/
		for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) {
			/*1821*/
			var _1L = $get(_1I, _1J); /*1821*/
			if ((_1L < 48) || (_1L > 57)) { //no-else/*1820*/
				$k[$j++] = 'bwipp.upcEbadCharacter'; /*1819*/
				$k[$j++] = "UPC-E must contain only digits"; /*1819*/
				$0.raiseerror(); /*1819*/
			} /*1819*/
		} /*1819*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*1824*/
			$k[$j++] = 'bwipp.upcEbadAddOnLength'; /*1823*/
			$k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; /*1823*/
			$0.raiseerror(); /*1823*/
		} /*1823*/
		var _1Q = $get($1.barcode, 0); /*1827*/
		if ((_1Q != 48) && (_1Q != 49)) { //no-else/*1829*/
			$k[$j++] = 'bwipp.upcEbadNumberSystem'; /*1828*/
			$k[$j++] = "UPC-E must have number system 0 or 1"; /*1828*/
			$0.raiseerror(); /*1828*/
		} /*1828*/
		$1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); /*1836*/
		$1.barchars = "0123456789"; /*1839*/
		$1.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); /*1844*/
		for (var _1T = 0, _1U = 1; _1T < _1U; _1T++) {
			/*1874*/
			$1.upcacode = $s(11); /*1848*/
			if (($get($1.barcode, 6) - 48) <= 2) { //no-else/*1855*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); /*1850*/
				$puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); /*1851*/
				$puti($1.upcacode, 4, "0000"); /*1852*/
				$puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); /*1853*/
				break; /*1854*/
			} /*1854*/
			if (($get($1.barcode, 6) - 48) == 3) { //no-else/*1861*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); /*1857*/
				$puti($1.upcacode, 4, "00000"); /*1858*/
				$puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); /*1859*/
				break; /*1860*/
			} /*1860*/
			if (($get($1.barcode, 6) - 48) == 4) { //no-else/*1867*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); /*1863*/
				$puti($1.upcacode, 5, "00000"); /*1864*/
				$puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); /*1865*/
				break; /*1866*/
			} /*1866*/
			if (($get($1.barcode, 6) - 48) >= 5) { //no-else/*1873*/
				$puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); /*1869*/
				$puti($1.upcacode, 6, "0000"); /*1870*/
				$puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); /*1871*/
				break; /*1872*/
			} /*1872*/
		} /*1872*/
		$1.checksum = 0; /*1875*/
		for (var _29 = 0; _29 <= 10; _29 += 1) {
			/*1884*/
			$1.i = _29; /*1877*/
			$1.barchar = $get($1.upcacode, $1.i) - 48; /*1878*/
			if (($1.i % 2) != 0) {
				/*1882*/
				$1.checksum = $1.checksum + $1.barchar; /*1880*/
			} else {
				/*1882*/
				$1.checksum = $1.checksum + ($1.barchar * 3); /*1882*/
			} /*1882*/
		} /*1882*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*1885*/
		if ($1.barcode.length == 8) { //no-else/*1890*/
			if ($get($1.barcode, 7) != ($1.checksum + 48)) { //no-else/*1889*/
				$k[$j++] = 'bwipp.upcEbadCheckDigit'; /*1888*/
				$k[$j++] = "Incorrect UPC check digit provided"; /*1888*/
				$0.raiseerror(); /*1888*/
			} /*1888*/
		} /*1888*/
		$1.pad = $s(8); /*1891*/
		$puti($1.pad, 0, $1.barcode); /*1892*/
		$put($1.pad, 7, $1.checksum + 48); /*1893*/
		$1.barcode = $1.pad; /*1894*/
		$1.txt = $a(8); /*1895*/
		$put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1896*/
		$1.mirrormap = $get($1.mirrormaps, $1.checksum); /*1899*/
		if ($get($1.barcode, 0) == 48) { //no-else/*1913*/
			$1.invt = $s($1.mirrormap.length); /*1903*/
			for (var _2l = 0, _2k = $1.mirrormap.length - 1; _2l <= _2k; _2l += 1) {
				/*1911*/
				$1.i = _2l; /*1905*/
				if ($get($1.mirrormap, $1.i) == 48) {
					/*1909*/
					$put($1.invt, $1.i, 49); /*1907*/
				} else {
					/*1909*/
					$put($1.invt, $1.i, 48); /*1909*/
				} /*1909*/
			} /*1909*/
			$1.mirrormap = $1.invt; /*1912*/
		} /*1912*/
		$1.sbs = $s(33); /*1915*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*1918*/
		for (var _2y = 1; _2y <= 6; _2y += 1) {
			/*1940*/
			$1.i = _2y; /*1921*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*1923*/
			$j--; /*1924*/
			$1.indx = $k[--$j].length; /*1925*/
			$j -= 2; /*1926*/
			$1.enc = $get($1.encs, $1.indx); /*1927*/
			if ($get($1.mirrormap, $1.i - 1) == 49) { //no-else/*1937*/
				$1.enclen = $1.enc.length; /*1929*/
				$1.revenc = $s($1.enclen); /*1930*/
				for (var _3F = 0, _3E = $1.enclen - 1; _3F <= _3E; _3F += 1) {
					/*1935*/
					$1.j = _3F; /*1932*/
					$1.char = $get($1.enc, $1.j); /*1933*/
					$put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); /*1934*/
				} /*1934*/
				$1.enc = $1.revenc; /*1936*/
			} /*1936*/
			$puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); /*1938*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 1) * 7) + 11) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); /*1939*/
		} /*1939*/
		$put($1.txt, 7, $a([$geti($1.barcode, 7, 1), ((6 * 7) + 18) + $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize - 2])); /*1942*/
		$puti($1.sbs, 27, $get($1.encs, 11)); /*1945*/
		$k[$j++] = Infinity; /*1947*/
		var _3n = $1.sbs; /*1947*/
		for (var _3o = 0, _3p = _3n.length; _3o < _3p; _3o++) {
			/*1947*/
			$k[$j++] = $get(_3n, _3o) - 48; /*1947*/
		} /*1947*/
		$1.sbs = $a(); /*1947*/
		if ($1.includetext) {
			/*1954*/
			$k[$j++] = Infinity; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			for (var _3v = 0, _3w = 12; _3v < _3w; _3v++) {
				/*1949*/
				$k[$j++] = $1.height - 0.075; /*1949*/
			} /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$k[$j++] = $1.height; /*1949*/
			$1.bhs = $a(); /*1949*/
			$k[$j++] = Infinity; /*1950*/
			$k[$j++] = 0; /*1950*/
			$k[$j++] = 0; /*1950*/
			for (var _42 = 0, _43 = 12; _42 < _43; _42++) {
				/*1950*/
				$k[$j++] = 0.075; /*1950*/
			} /*1950*/
			$k[$j++] = 0; /*1950*/
			$k[$j++] = 0; /*1950*/
			$k[$j++] = 0; /*1950*/
			$1.bbs = $a(); /*1950*/
		} else {
			/*1954*/
			$k[$j++] = Infinity; /*1952*/
			for (var _45 = 0, _46 = 17; _45 < _46; _45++) {
				/*1952*/
				$k[$j++] = $1.height; /*1952*/
			} /*1952*/
			$1.bhs = $a(); /*1952*/
			$k[$j++] = Infinity; /*1953*/
			for (var _49 = 0, _4A = 17; _49 < _4A; _49++) {
				/*1953*/
				$k[$j++] = 0; /*1953*/
			} /*1953*/
			$1.bbs = $a(); /*1953*/
			$1.txt = $a([]); /*1954*/
		} /*1954*/
		$1.guardrightypos = 0; /*1956*/
		if ($ne($1.addon, "")) { //no-else/*1977*/
			$k[$j++] = Infinity; /*1967*/
			$k[$j++] = 'dontdraw'; /*1964*/
			$k[$j++] = true; /*1964*/
			$k[$j++] = 'includetext'; /*1964*/
			$k[$j++] = true; /*1964*/
			$k[$j++] = 'height'; /*1964*/
			$k[$j++] = $1.height - 0.15; /*1964*/
			$k[$j++] = 'textxoffset'; /*1964*/
			if ($1.addontextxoffset != "unset") {
				/*1964*/
				$k[$j++] = $1.addontextxoffset; /*1964*/
			} else {
				/*1964*/
				$k[$j++] = 51 + $1.addongap; /*1964*/
			} /*1964*/
			if ($1.addontextyoffset != "unset") { //no-else/*1965*/
				$k[$j++] = 'textyoffset'; /*1965*/
				$k[$j++] = $1.addontextyoffset; /*1965*/
			} /*1965*/
			var _4L = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; /*1966*/
			var _4N = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; /*1967*/
			$k[$j++] = 'textsize'; /*1967*/
			$k[$j++] = _4L; /*1967*/
			$k[$j++] = 'textfont'; /*1967*/
			$k[$j++] = _4N; /*1967*/
			$1.addopts = $d(); /*1968*/
			if ($1.addon.length == 2) { //no-else/*1969*/
				$k[$j++] = $1.addon; /*1969*/
				$k[$j++] = $1.addopts; /*1969*/
				$0.ean2(); /*1969*/
			} /*1969*/
			if ($1.addon.length == 5) { //no-else/*1970*/
				$k[$j++] = $1.addon; /*1970*/
				$k[$j++] = $1.addopts; /*1970*/
				$0.ean5(); /*1970*/
			} /*1970*/
			$1.addcode = $k[--$j]; /*1971*/
			$k[$j++] = Infinity; /*1972*/
			$aload($1.sbs); /*1972*/
			$k[$j++] = $1.addongap; /*1972*/
			$aload($get($1.addcode, "sbs")); /*1972*/
			$1.sbs = $a(); /*1972*/
			$k[$j++] = Infinity; /*1973*/
			$aload($1.bhs); /*1973*/
			$forall($get($1.addcode, "bhs"), function() {
				/*1973*/
				var _4e = $k[--$j]; /*1973*/
				$k[$j++] = _4e - 0.075; /*1973*/
			}); /*1973*/
			$1.bhs = $a(); /*1973*/
			$k[$j++] = Infinity; /*1974*/
			$aload($1.bbs); /*1974*/
			$forall($get($1.addcode, "bbs"), function() {
				/*1974*/
				var _4j = $k[--$j]; /*1974*/
				$k[$j++] = _4j + 0.075; /*1974*/
			}); /*1974*/
			$1.bbs = $a(); /*1974*/
			$k[$j++] = Infinity; /*1975*/
			$aload($1.txt); /*1975*/
			$aload($get($1.addcode, "txt")); /*1975*/
			$1.txt = $a(); /*1975*/
			$1.guardrightypos = ($1.height * 72) - 6; /*1976*/
		} /*1976*/
		var _4w = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["txt", $1.txt],
			["opt", $1.options],
			["guardrightpos", 10],
			["guardrightypos", $1.guardrightypos],
			["borderbottom", 5]
		]); /*1989*/
		$k[$j++] = _4w; /*1992*/
		if (!$1.dontdraw) { //no-else/*1992*/
			$0.renlinear(); /*1992*/
		} /*1992*/
	};
	$0.isbn = function() {
		var $1 = {}; /*2022*/
		$1.options = $k[--$j]; /*2024*/
		$1.barcode = $k[--$j]; /*2025*/
		$1.dontdraw = false; /*2027*/
		$1.includetext = false; /*2028*/
		$1.isbntextfont = 'OCR-A'; /*2029*/
		$1.isbntextsize = 8; /*2030*/
		$1.isbntextxoffset = "unset"; /*2031*/
		$1.isbntextyoffset = "unset"; /*2032*/
		$1.height = 1; /*2033*/
		$1.addongap = 12; /*2034*/
		$1.legacy = false; /*2035*/
		$forall($1.options, function() {
			/*2046*/
			var _3 = $k[--$j]; /*2046*/
			$1[$k[--$j]] = _3; /*2046*/
		}); /*2046*/
		$1.isbntextfont = "" + $1.isbntextfont; /*2048*/
		$1.isbntextsize = +$1.isbntextsize; /*2049*/
		if ($ne($1.isbntextxoffset, "unset")) { //no-else/*2050*/
			$1.isbntextxoffset = +$1.isbntextxoffset; /*2050*/
		} /*2050*/
		if ($ne($1.isbntextyoffset, "unset")) { //no-else/*2051*/
			$1.isbntextyoffset = +$1.isbntextyoffset; /*2051*/
		} /*2051*/
		$1.height = +$1.height; /*2052*/
		$1.addongap = +$1.addongap; /*2053*/
		$search($1.barcode, " "); /*2056*/
		if ($k[--$j]) {
			/*2062*/
			$1.barcode = $k[--$j]; /*2057*/
			$j--; /*2058*/
			$1.addon = $k[--$j]; /*2059*/
		} else {
			/*2062*/
			$j--; /*2061*/
			$1.addon = ""; /*2062*/
		} /*2062*/
		if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //no-else/*2069*/
			$k[$j++] = 'bwipp.isbnBadLength'; /*2068*/
			$k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; /*2068*/
			$0.raiseerror(); /*2068*/
		} /*2068*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*2072*/
			$k[$j++] = 'bwipp.isbnBadAddOnLength'; /*2071*/
			$k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; /*2071*/
			$0.raiseerror(); /*2071*/
		} /*2071*/
		if ($1.barcode.length >= 15) {
			/*2136*/
			var _Q = $geti($1.barcode, 0, 4); /*2074*/
			if ($ne(_Q, "978-") && $ne(_Q, "979-")) { //no-else/*2076*/
				$k[$j++] = 'bwipp.isbn13badPrefix'; /*2075*/
				$k[$j++] = "ISBN-13 prefix must be 978- or 979-"; /*2075*/
				$0.raiseerror(); /*2075*/
			} /*2075*/
			$1.wasdash = false; /*2077*/
			$1.numdash = 0; /*2077*/
			$1.numdigit = 0; /*2077*/
			$forall($geti($1.barcode, 5, 9), function() {
				/*2091*/
				var _T = $k[--$j]; /*2079*/
				$k[$j++] = _T; /*2086*/
				if (_T == 45) { //no-else/*2086*/
					if ($1.wasdash) { //no-else/*2083*/
						$k[$j++] = 'bwipp.isbn13adjacentDashes'; /*2082*/
						$k[$j++] = "ISBN-13 does not permit adjacent dashes"; /*2082*/
						$0.raiseerror(); /*2082*/
					} /*2082*/
					$1.wasdash = true; /*2084*/
					$1.numdash = $1.numdash + 1; /*2085*/
				} /*2085*/
				var _W = $k[--$j]; /*2087*/
				if ((_W >= 48) && (_W <= 57)) { //no-else/*2090*/
					$1.wasdash = false; /*2088*/
					$1.numdigit = $1.numdigit + 1; /*2089*/
				} /*2089*/
			}); /*2089*/
			if (($1.numdash != 2) || ($1.numdigit != 7)) { //no-else/*2094*/
				$k[$j++] = 'bwipp.isbn13numDashesDigits'; /*2093*/
				$k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; /*2093*/
				$0.raiseerror(); /*2093*/
			} /*2093*/
			var _b = $get($1.barcode, 14); /*2095*/
			if ((_b < 48) || (_b > 57)) { //no-else/*2097*/
				$k[$j++] = 'bwipp.isbn13character15'; /*2096*/
				$k[$j++] = "ISBN-13 character 15 must be a digit"; /*2096*/
				$0.raiseerror(); /*2096*/
			} /*2096*/
			if ($1.barcode.length == 17) { //no-else/*2105*/
				if ($ne($geti($1.barcode, 15, 1), "-")) { //no-else/*2101*/
					$k[$j++] = 'bwipp.isbn13character16'; /*2100*/
					$k[$j++] = "ISBN-13 penultimate character must be a dash"; /*2100*/
					$0.raiseerror(); /*2100*/
				} /*2100*/
				var _g = $get($1.barcode, 16); /*2102*/
				if ((_g < 48) || (_g > 57)) { //no-else/*2104*/
					$k[$j++] = 'bwipp.isbn13character17'; /*2103*/
					$k[$j++] = "ISBN-13 final character must be a digit"; /*2103*/
					$0.raiseerror(); /*2103*/
				} /*2103*/
			} /*2103*/
		} else {
			/*2136*/
			var _i = $get($1.barcode, 0); /*2107*/
			if ((_i < 48) || (_i > 57)) { //no-else/*2109*/
				$k[$j++] = 'bwipp.isbn10FirstDigit'; /*2108*/
				$k[$j++] = "ISBN-10 first character must be a digit"; /*2108*/
				$0.raiseerror(); /*2108*/
			} /*2108*/
			$1.wasdash = false; /*2110*/
			$1.numdash = 0; /*2110*/
			$1.numdigit = 0; /*2110*/
			$forall($geti($1.barcode, 1, 9), function() {
				/*2124*/
				var _l = $k[--$j]; /*2112*/
				$k[$j++] = _l; /*2119*/
				if (_l == 45) { //no-else/*2119*/
					if ($1.wasdash) { //no-else/*2116*/
						$k[$j++] = 'bwipp.isbn10adjacentDashes'; /*2115*/
						$k[$j++] = "ISBN-10 does not permit adjacent dashes"; /*2115*/
						$0.raiseerror(); /*2115*/
					} /*2115*/
					$1.wasdash = true; /*2117*/
					$1.numdash = $1.numdash + 1; /*2118*/
				} /*2118*/
				var _o = $k[--$j]; /*2120*/
				if ((_o >= 48) && (_o <= 57)) { //no-else/*2123*/
					$1.wasdash = false; /*2121*/
					$1.numdigit = $1.numdigit + 1; /*2122*/
				} /*2122*/
			}); /*2122*/
			if (($1.numdash != 2) || ($1.numdigit != 7)) { //no-else/*2127*/
				$k[$j++] = 'bwipp.isbn10numDashesDigits'; /*2126*/
				$k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; /*2126*/
				$0.raiseerror(); /*2126*/
			} /*2126*/
			var _t = $get($1.barcode, 10); /*2128*/
			if ((_t < 48) || (_t > 57)) { //no-else/*2130*/
				$k[$j++] = 'bwipp.isbn10character11'; /*2129*/
				$k[$j++] = "ISBN-10 character 11 must be a digit"; /*2129*/
				$0.raiseerror(); /*2129*/
			} /*2129*/
			if ($1.barcode.length == 13) { //no-else/*2138*/
				if ($ne($geti($1.barcode, 11, 1), "-")) { //no-else/*2134*/
					$k[$j++] = 'bwipp.isbn10character12'; /*2133*/
					$k[$j++] = "ISBN-10 penultimate character must be a dash"; /*2133*/
					$0.raiseerror(); /*2133*/
				} /*2133*/
				var _y = $get($1.barcode, 12); /*2135*/
				if (((_y < 48) || (_y > 57)) && (_y != 88)) { //no-else/*2137*/
					$k[$j++] = 'bwipp.isbn10character13'; /*2136*/
					$k[$j++] = "ISBN-10 final character must be a digit or X"; /*2136*/
					$0.raiseerror(); /*2136*/
				} /*2136*/
			} /*2136*/
		} /*2136*/
		$1.isbntxt = $1.barcode; /*2141*/
		if ($1.isbntxt.length <= 13) { //no-else/*2167*/
			$1.isbn = $s(10); /*2145*/
			$1.checksum = 0; /*2146*/
			$1.i = 0; /*2147*/
			$1.n = 0; /*2147*/
			for (;;) {
				/*2159*/
				$1.isbnchar = $get($1.isbntxt, $1.i) - 48; /*2149*/
				if ($1.isbnchar != -3) { //no-else/*2156*/
					$put($1.isbn, $1.n, $1.isbnchar + 48); /*2151*/
					if ($1.n < 9) { //no-else/*2154*/
						$1.checksum = $1.checksum + ((10 - $1.n) * $1.isbnchar); /*2153*/
					} /*2153*/
					$1.n = $1.n + 1; /*2155*/
				} /*2155*/
				$1.i = $1.i + 1; /*2157*/
				if ($1.i == $1.isbntxt.length) { //no-else/*2158*/
					break; /*2158*/
				} /*2158*/
			} /*2158*/
			var _1I = (11 - ($1.checksum % 11)) % 11; /*2160*/
			$k[$j++] = 'checksum'; /*2160*/
			$k[$j++] = _1I; /*2160*/
			if (_1I == 10) { //no-else/*2160*/
				$j--; /*2160*/
				$k[$j++] = 40; /*2160*/
			} /*2160*/
			var _1J = $k[--$j]; /*2160*/
			$1[$k[--$j]] = _1J + 48; /*2160*/
			$1.isbn = $geti($1.isbn, 0, 9); /*2161*/
			if ($1.isbntxt.length == 13) { //no-else/*2166*/
				if ($get($1.isbntxt, 12) != $1.checksum) { //no-else/*2165*/
					$k[$j++] = 'bwipp.isbn10badCheckDigit'; /*2164*/
					$k[$j++] = "Incorrect ISBN-10 check digit provided"; /*2164*/
					$0.raiseerror(); /*2164*/
				} /*2164*/
			} /*2164*/
		} /*2164*/
		if ((!$1.legacy) || ($1.isbntxt.length >= 15)) { //no-else/*2203*/
			if ($1.isbntxt.length <= 13) { //no-else/*2177*/
				$1.pad = $s(15); /*2173*/
				$puti($1.pad, 0, "978-"); /*2174*/
				$puti($1.pad, 4, $geti($1.isbntxt, 0, 11)); /*2175*/
				$1.isbntxt = $1.pad; /*2176*/
			} /*2176*/
			$1.isbn = $s(13); /*2180*/
			$1.checksum = 0; /*2181*/
			$1.i = 0; /*2182*/
			$1.n = 0; /*2182*/
			for (;;) {
				/*2194*/
				$1.isbnchar = $get($1.isbntxt, $1.i) - 48; /*2184*/
				if ($1.isbnchar != -3) { //no-else/*2191*/
					$put($1.isbn, $1.n, $1.isbnchar + 48); /*2186*/
					if ($1.n < 12) { //no-else/*2189*/
						$k[$j++] = 'checksum'; /*2188*/
						$k[$j++] = $1.isbnchar; /*2188*/
						if (($1.n % 2) != 0) { //no-else/*2188*/
							var _1l = $k[--$j]; /*2188*/
							$k[$j++] = _1l * 3; /*2188*/
						} /*2188*/
						var _1n = $k[--$j]; /*2188*/
						$1[$k[--$j]] = _1n + $1.checksum; /*2188*/
					} /*2188*/
					$1.n = $1.n + 1; /*2190*/
				} /*2190*/
				$1.i = $1.i + 1; /*2192*/
				if ($1.i == $1.isbntxt.length) { //no-else/*2193*/
					break; /*2193*/
				} /*2193*/
			} /*2193*/
			$1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; /*2195*/
			$1.isbn = $geti($1.isbn, 0, 12); /*2196*/
			if ($1.isbntxt.length == 17) { //no-else/*2201*/
				if ($get($1.isbntxt, 16) != $1.checksum) { //no-else/*2200*/
					$k[$j++] = 'bwipp.isbn13badCheckDigit'; /*2199*/
					$k[$j++] = "Incorrect ISBN-13 check digit provided"; /*2199*/
					$0.raiseerror(); /*2199*/
				} /*2199*/
			} /*2199*/
		} /*2199*/
		var _21 = ($1.isbn.length == 12) ? 22 : 18; /*2206*/
		$1.pad = $s(_21); /*2206*/
		$puti($1.pad, 0, "ISBN "); /*2207*/
		$puti($1.pad, 5, $1.isbntxt); /*2208*/
		$put($1.pad, $1.pad.length - 2, 45); /*2209*/
		$put($1.pad, $1.pad.length - 1, $1.checksum); /*2210*/
		$1.isbntxt = $1.pad; /*2211*/
		$1.barcode = $s(12); /*2214*/
		if ($1.isbn.length == 9) {
			/*2219*/
			$puti($1.barcode, 0, "978"); /*2216*/
			$puti($1.barcode, 3, $1.isbn); /*2217*/
		} else {
			/*2219*/
			$puti($1.barcode, 0, $1.isbn); /*2219*/
		} /*2219*/
		if ($ne($1.addon, "")) { //no-else/*2229*/
			var _2L = $s((12 + $1.addon.length) + 1); /*2224*/
			$puti(_2L, 0, $1.barcode); /*2225*/
			$puti(_2L, 12, " "); /*2226*/
			$puti(_2L, 13, $1.addon); /*2227*/
			$1.barcode = _2L; /*2228*/
		} /*2228*/
		$put($1.options, "dontdraw", true); /*2232*/
		$put($1.options, "addongap", $1.addongap); /*2233*/
		$k[$j++] = 'args'; /*2234*/
		$k[$j++] = $1.barcode; /*2234*/
		$k[$j++] = $1.options; /*2234*/
		$0.ean13(); /*2234*/
		var _2T = $k[--$j]; /*2234*/
		$1[$k[--$j]] = _2T; /*2234*/
		if ($1.includetext) { //no-else/*2253*/
			if ($1.isbntextxoffset == "unset") { //no-else/*2240*/
				$k[$j++] = 'isbntextxoffset'; /*2239*/
				if ($1.isbn.length == 9) {
					/*2239*/
					$k[$j++] = -1; /*2239*/
				} else {
					/*2239*/
					$k[$j++] = -12; /*2239*/
				} /*2239*/
				var _2Y = $k[--$j]; /*2239*/
				$1[$k[--$j]] = _2Y; /*2239*/
			} /*2239*/
			if ($1.isbntextyoffset == "unset") { //no-else/*2243*/
				$1.isbntextyoffset = ($1.height * 72) + 3; /*2242*/
			} /*2242*/
			var _2d = $get($1.args, "txt") !== undefined; /*2244*/
			if (_2d) {
				/*2251*/
				$1.txt = $get($1.args, "txt"); /*2245*/
				$1.newtxt = $a($1.txt.length + 1); /*2246*/
				$puti($1.newtxt, 0, $1.txt); /*2247*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])); /*2248*/
				$put($1.args, "txt", $1.newtxt); /*2249*/
			} else {
				/*2251*/
				$put($1.args, "txt", $a([$a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])])); /*2251*/
			} /*2251*/
		} /*2251*/
		$put($1.args, "opt", $1.options); /*2255*/
		$k[$j++] = $1.args; /*2258*/
		if (!$1.dontdraw) { //no-else/*2258*/
			$0.renlinear(); /*2258*/
		} /*2258*/
	};
	$0.ismn = function() {
		var $1 = {}; /*2288*/
		$1.options = $k[--$j]; /*2290*/
		$1.barcode = $k[--$j]; /*2291*/
		$1.dontdraw = false; /*2293*/
		$1.includetext = false; /*2294*/
		$1.ismntextfont = 'OCR-A'; /*2295*/
		$1.ismntextsize = 8; /*2296*/
		$1.ismntextxoffset = "unset"; /*2297*/
		$1.ismntextyoffset = "unset"; /*2298*/
		$1.height = 1; /*2299*/
		$1.addongap = 12; /*2300*/
		$1.legacy = false; /*2301*/
		$forall($1.options, function() {
			/*2312*/
			var _3 = $k[--$j]; /*2312*/
			$1[$k[--$j]] = _3; /*2312*/
		}); /*2312*/
		$1.ismntextfont = "" + $1.ismntextfont; /*2314*/
		$1.ismntextsize = +$1.ismntextsize; /*2315*/
		if ($ne($1.ismntextxoffset, "unset")) { //no-else/*2316*/
			$1.ismntextxoffset = +$1.ismntextxoffset; /*2316*/
		} /*2316*/
		if ($ne($1.ismntextyoffset, "unset")) { //no-else/*2317*/
			$1.ismntextyoffset = +$1.ismntextyoffset; /*2317*/
		} /*2317*/
		$1.height = +$1.height; /*2318*/
		$1.addongap = +$1.addongap; /*2319*/
		$search($1.barcode, " "); /*2322*/
		if ($k[--$j]) {
			/*2328*/
			$1.barcode = $k[--$j]; /*2323*/
			$j--; /*2324*/
			$1.addon = $k[--$j]; /*2325*/
		} else {
			/*2328*/
			$j--; /*2327*/
			$1.addon = ""; /*2328*/
		} /*2328*/
		if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //no-else/*2335*/
			$k[$j++] = 'bwipp.ismnBadLength'; /*2334*/
			$k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; /*2334*/
			$0.raiseerror(); /*2334*/
		} /*2334*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*2338*/
			$k[$j++] = 'bwipp.ismnBadAddOnLength'; /*2337*/
			$k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; /*2337*/
			$0.raiseerror(); /*2337*/
		} /*2337*/
		if ($1.barcode.length >= 15) {
			/*2405*/
			if ($ne($geti($1.barcode, 0, 4), "979-")) { //no-else/*2342*/
				$k[$j++] = 'bwipp.ismn13badPrefix'; /*2341*/
				$k[$j++] = "ISMN-13 prefix must be 979-"; /*2341*/
				$0.raiseerror(); /*2341*/
			} /*2341*/
			$1.wasdash = false; /*2343*/
			$1.numdash = 0; /*2343*/
			$1.numdigit = 0; /*2343*/
			$forall($geti($1.barcode, 5, 9), function() {
				/*2357*/
				var _T = $k[--$j]; /*2345*/
				$k[$j++] = _T; /*2352*/
				if (_T == 45) { //no-else/*2352*/
					if ($1.wasdash) { //no-else/*2349*/
						$k[$j++] = 'bwipp.ismn13adjacentDashes'; /*2348*/
						$k[$j++] = "ISMN-13 does not permit adjacent dashes"; /*2348*/
						$0.raiseerror(); /*2348*/
					} /*2348*/
					$1.wasdash = true; /*2350*/
					$1.numdash = $1.numdash + 1; /*2351*/
				} /*2351*/
				var _W = $k[--$j]; /*2353*/
				if ((_W >= 48) && (_W <= 57)) { //no-else/*2356*/
					$1.wasdash = false; /*2354*/
					$1.numdigit = $1.numdigit + 1; /*2355*/
				} /*2355*/
			}); /*2355*/
			if (($1.numdash != 2) || ($1.numdigit != 7)) { //no-else/*2360*/
				$k[$j++] = 'bwipp.ismn13numDashesDigits'; /*2359*/
				$k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; /*2359*/
				$0.raiseerror(); /*2359*/
			} /*2359*/
			var _b = $get($1.barcode, 14); /*2361*/
			if ((_b < 48) || (_b > 57)) { //no-else/*2363*/
				$k[$j++] = 'bwipp.ismn13character15'; /*2362*/
				$k[$j++] = "ISMN-13 character 15 must be a digit"; /*2362*/
				$0.raiseerror(); /*2362*/
			} /*2362*/
			if ($1.barcode.length == 17) { //no-else/*2371*/
				if ($ne($geti($1.barcode, 15, 1), "-")) { //no-else/*2367*/
					$k[$j++] = 'bwipp.ismn13character16'; /*2366*/
					$k[$j++] = "ISMN-13 penultimate character must be a dash"; /*2366*/
					$0.raiseerror(); /*2366*/
				} /*2366*/
				var _g = $get($1.barcode, 16); /*2368*/
				if ((_g < 48) || (_g > 57)) { //no-else/*2370*/
					$k[$j++] = 'bwipp.ismn13character17'; /*2369*/
					$k[$j++] = "ISMN-13 final character must be a digit"; /*2369*/
					$0.raiseerror(); /*2369*/
				} /*2369*/
			} /*2369*/
		} else {
			/*2405*/
			if ($ne($geti($1.barcode, 0, 2), "M-")) { //no-else/*2375*/
				$k[$j++] = 'bwipp.ismn10badPrefix'; /*2374*/
				$k[$j++] = "ISMN-10 prefix must be M-"; /*2374*/
				$0.raiseerror(); /*2374*/
			} /*2374*/
			var _k = $get($1.barcode, 2); /*2376*/
			if ((_k < 48) || (_k > 57)) { //no-else/*2378*/
				$k[$j++] = 'bwipp.ismn10character3'; /*2377*/
				$k[$j++] = "ISMN-10 character 3 must be a digit"; /*2377*/
				$0.raiseerror(); /*2377*/
			} /*2377*/
			$1.wasdash = false; /*2379*/
			$1.numdash = 0; /*2379*/
			$1.numdigit = 0; /*2379*/
			$forall($geti($1.barcode, 3, 7), function() {
				/*2393*/
				var _n = $k[--$j]; /*2381*/
				$k[$j++] = _n; /*2388*/
				if (_n == 45) { //no-else/*2388*/
					if ($1.wasdash) { //no-else/*2385*/
						$k[$j++] = 'bwipp.ismn10adjacentDashes'; /*2384*/
						$k[$j++] = "ISMN-10 does not permit adjacent dashes"; /*2384*/
						$0.raiseerror(); /*2384*/
					} /*2384*/
					$1.wasdash = true; /*2386*/
					$1.numdash = $1.numdash + 1; /*2387*/
				} /*2387*/
				var _q = $k[--$j]; /*2389*/
				if ((_q >= 48) && (_q <= 57)) { //no-else/*2392*/
					$1.wasdash = false; /*2390*/
					$1.numdigit = $1.numdigit + 1; /*2391*/
				} /*2391*/
			}); /*2391*/
			if (($1.numdash != 1) || ($1.numdigit != 6)) { //no-else/*2396*/
				$k[$j++] = 'bwipp.ismn10numDashesDigits'; /*2395*/
				$k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; /*2395*/
				$0.raiseerror(); /*2395*/
			} /*2395*/
			var _v = $get($1.barcode, 10); /*2397*/
			if ((_v < 48) || (_v > 57)) { //no-else/*2399*/
				$k[$j++] = 'bwipp.ismn10character11'; /*2398*/
				$k[$j++] = "ISMN-10 character 11 must be a digit"; /*2398*/
				$0.raiseerror(); /*2398*/
			} /*2398*/
			if ($1.barcode.length == 13) { //no-else/*2407*/
				if ($ne($geti($1.barcode, 11, 1), "-")) { //no-else/*2403*/
					$k[$j++] = 'bwipp.ismn10character12'; /*2402*/
					$k[$j++] = "ISMN-10 penultimate character must be a dash"; /*2402*/
					$0.raiseerror(); /*2402*/
				} /*2402*/
				var _10 = $get($1.barcode, 12); /*2404*/
				if (((_10 < 48) || (_10 > 57)) && (_10 != 88)) { //no-else/*2406*/
					$k[$j++] = 'bwipp.ismn10character13'; /*2405*/
					$k[$j++] = "ISMN-10 final character must be a digit or X"; /*2405*/
					$0.raiseerror(); /*2405*/
				} /*2405*/
			} /*2405*/
		} /*2405*/
		$1.ismntxt = $1.barcode; /*2410*/
		$1.legacytxt = ""; /*2413*/
		if ($1.ismntxt.length <= 13) { //no-else/*2420*/
			$1.legacytxt = $1.ismntxt; /*2415*/
			$1.pad = $s($1.ismntxt.length + 4); /*2416*/
			$puti($1.pad, 0, "979-0-"); /*2417*/
			$puti($1.pad, 6, $geti($1.ismntxt, 2, $1.ismntxt.length - 2)); /*2418*/
			$1.ismntxt = $1.pad; /*2419*/
		} /*2419*/
		$1.ismn = $s(13); /*2423*/
		$1.checksum = 0; /*2424*/
		$1.i = 0; /*2425*/
		$1.n = 0; /*2425*/
		for (;;) {
			/*2441*/
			$1.ismnchar = $get($1.ismntxt, $1.i) - 48; /*2427*/
			if ($1.ismnchar != -3) { //no-else/*2438*/
				$put($1.ismn, $1.n, $1.ismnchar + 48); /*2429*/
				if ($1.n < 12) { //no-else/*2436*/
					if (($1.n % 2) == 0) {
						/*2434*/
						$1.checksum = $1.ismnchar + $1.checksum; /*2432*/
					} else {
						/*2434*/
						$1.checksum = ($1.ismnchar * 3) + $1.checksum; /*2434*/
					} /*2434*/
				} /*2434*/
				$1.n = $1.n + 1; /*2437*/
			} /*2437*/
			$1.i = $1.i + 1; /*2439*/
			if ($1.i == $1.ismntxt.length) { //no-else/*2440*/
				break; /*2440*/
			} /*2440*/
		} /*2440*/
		$1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; /*2442*/
		if (($1.barcode.length == 13) || ($1.barcode.length == 17)) { //no-else/*2449*/
			var _1X = $1.barcode; /*2446*/
			if ($get(_1X, _1X.length - 1) != $1.checksum) { //no-else/*2448*/
				$k[$j++] = 'bwipp.ismnBadCheckDigit'; /*2447*/
				$k[$j++] = "Incorrect ISMN check digit provided"; /*2447*/
				$0.raiseerror(); /*2447*/
			} /*2447*/
		} /*2447*/
		if ($1.legacy && $ne($1.legacytxt, "")) {
			/*2456*/
			$1.ismntxt = $1.legacytxt; /*2453*/
			$1.pad = $s(18); /*2454*/
		} else {
			/*2456*/
			$1.pad = $s(22); /*2456*/
		} /*2456*/
		$puti($1.pad, 0, "ISMN "); /*2458*/
		$puti($1.pad, 5, $1.ismntxt); /*2459*/
		$put($1.pad, $1.pad.length - 2, 45); /*2460*/
		$put($1.pad, $1.pad.length - 1, $1.checksum); /*2461*/
		$1.ismntxt = $1.pad; /*2462*/
		$1.barcode = $geti($1.ismn, 0, 12); /*2465*/
		if ($ne($1.addon, "")) { //no-else/*2474*/
			var _1s = $s((12 + $1.addon.length) + 1); /*2469*/
			$puti(_1s, 0, $1.barcode); /*2470*/
			$puti(_1s, 12, " "); /*2471*/
			$puti(_1s, 13, $1.addon); /*2472*/
			$1.barcode = _1s; /*2473*/
		} /*2473*/
		$put($1.options, "dontdraw", true); /*2477*/
		$put($1.options, "addongap", $1.addongap); /*2478*/
		$k[$j++] = 'args'; /*2479*/
		$k[$j++] = $1.barcode; /*2479*/
		$k[$j++] = $1.options; /*2479*/
		$0.ean13(); /*2479*/
		var _20 = $k[--$j]; /*2479*/
		$1[$k[--$j]] = _20; /*2479*/
		if ($1.includetext) { //no-else/*2498*/
			if ($1.ismntextxoffset == "unset") { //no-else/*2485*/
				$k[$j++] = 'ismntextxoffset'; /*2484*/
				if ($1.ismntxt.length == 18) {
					/*2484*/
					$k[$j++] = -1; /*2484*/
				} else {
					/*2484*/
					$k[$j++] = -12; /*2484*/
				} /*2484*/
				var _25 = $k[--$j]; /*2484*/
				$1[$k[--$j]] = _25; /*2484*/
			} /*2484*/
			if ($1.ismntextyoffset == "unset") { //no-else/*2488*/
				$1.ismntextyoffset = ($1.height * 72) + 3; /*2487*/
			} /*2487*/
			var _2A = $get($1.args, "txt") !== undefined; /*2489*/
			if (_2A) {
				/*2496*/
				$1.txt = $get($1.args, "txt"); /*2490*/
				$1.newtxt = $a($1.txt.length + 1); /*2491*/
				$puti($1.newtxt, 0, $1.txt); /*2492*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])); /*2493*/
				$put($1.args, "txt", $1.newtxt); /*2494*/
			} else {
				/*2496*/
				$put($1.args, "txt", $a([$a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])])); /*2496*/
			} /*2496*/
		} /*2496*/
		$put($1.args, "opt", $1.options); /*2500*/
		$k[$j++] = $1.args; /*2503*/
		if (!$1.dontdraw) { //no-else/*2503*/
			$0.renlinear(); /*2503*/
		} /*2503*/
	};
	$0.issn = function() {
		var $1 = {}; /*2533*/
		$1.options = $k[--$j]; /*2535*/
		$1.issntxt = $k[--$j]; /*2536*/
		$1.dontdraw = false; /*2538*/
		$1.includetext = false; /*2539*/
		$1.issntextfont = 'OCR-A'; /*2540*/
		$1.issntextsize = 8; /*2541*/
		$1.issntextxoffset = "unset"; /*2542*/
		$1.issntextyoffset = "unset"; /*2543*/
		$1.height = 1; /*2544*/
		$1.addongap = 12; /*2545*/
		$forall($1.options, function() {
			/*2556*/
			var _3 = $k[--$j]; /*2556*/
			$1[$k[--$j]] = _3; /*2556*/
		}); /*2556*/
		$1.issntextfont = "" + $1.issntextfont; /*2558*/
		$1.issntextsize = +$1.issntextsize; /*2559*/
		if ($ne($1.issntextxoffset, "unset")) { //no-else/*2560*/
			$1.issntextxoffset = +$1.issntextxoffset; /*2560*/
		} /*2560*/
		if ($ne($1.issntextyoffset, "unset")) { //no-else/*2561*/
			$1.issntextyoffset = +$1.issntextyoffset; /*2561*/
		} /*2561*/
		$1.height = +$1.height; /*2562*/
		$1.addongap = +$1.addongap; /*2563*/
		$search($1.issntxt, " "); /*2566*/
		if ($k[--$j]) {
			/*2572*/
			$1.issntxt = $k[--$j]; /*2567*/
			$j--; /*2568*/
			$1.seqvar = $k[--$j]; /*2569*/
		} else {
			/*2572*/
			$j--; /*2571*/
			$1.seqvar = "00"; /*2572*/
		} /*2572*/
		$search($1.seqvar, " "); /*2576*/
		if ($k[--$j]) {
			/*2582*/
			$1.seqvar = $k[--$j]; /*2577*/
			$j--; /*2578*/
			$1.addon = $k[--$j]; /*2579*/
		} else {
			/*2582*/
			$j--; /*2581*/
			$1.addon = ""; /*2582*/
		} /*2582*/
		if (($1.issntxt.length != 8) && ($1.issntxt.length != 9)) { //no-else/*2588*/
			$k[$j++] = 'bwipp.issnBadLength'; /*2587*/
			$k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; /*2587*/
			$0.raiseerror(); /*2587*/
		} /*2587*/
		$forall($geti($1.issntxt, 0, 4), function() {
			/*2593*/
			var _P = $k[--$j]; /*2590*/
			if ((_P < 48) || (_P > 57)) { //no-else/*2592*/
				$k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric'; /*2591*/
				$k[$j++] = "ISSN first four characters must be numeral characters"; /*2591*/
				$0.raiseerror(); /*2591*/
			} /*2591*/
		}); /*2591*/
		if ($ne($geti($1.issntxt, 4, 1), "-")) { //no-else/*2596*/
			$k[$j++] = 'bwipp.issnNeedsDash'; /*2595*/
			$k[$j++] = "ISSN fifth character must be a dash"; /*2595*/
			$0.raiseerror(); /*2595*/
		} /*2595*/
		$forall($geti($1.issntxt, 5, 3), function() {
			/*2601*/
			var _U = $k[--$j]; /*2598*/
			if ((_U < 48) || (_U > 57)) { //no-else/*2600*/
				$k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric'; /*2599*/
				$k[$j++] = "ISSN sixth through eighth characters must be numerals"; /*2599*/
				$0.raiseerror(); /*2599*/
			} /*2599*/
		}); /*2599*/
		if ($1.issntxt.length == 9) { //no-else/*2606*/
			var _X = $get($1.issntxt, 8); /*2603*/
			if (((_X < 48) || (_X > 57)) && (_X != 88)) { //no-else/*2605*/
				$k[$j++] = 'bwipp.issnNinthCharacterBadFormat'; /*2604*/
				$k[$j++] = "ISSN ninth character must be a number or the character X"; /*2604*/
				$0.raiseerror(); /*2604*/
			} /*2604*/
		} /*2604*/
		if ($1.seqvar.length != 2) { //no-else/*2609*/
			$k[$j++] = 'bwipp.issnBadSequenceVariantLength'; /*2608*/
			$k[$j++] = "Sequence variant for ISSN must be 2 digits"; /*2608*/
			$0.raiseerror(); /*2608*/
		} /*2608*/
		$forall($1.seqvar, function() {
			/*2614*/
			var _a = $k[--$j]; /*2611*/
			if ((_a < 48) || (_a > 57)) { //no-else/*2613*/
				$k[$j++] = 'bwipp.issnSequenceVariantBadCharacter'; /*2612*/
				$k[$j++] = "Sequence variant for ISSN must contain only digits"; /*2612*/
				$0.raiseerror(); /*2612*/
			} /*2612*/
		}); /*2612*/
		if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //no-else/*2617*/
			$k[$j++] = 'bwipp.issnBadAddOnLength'; /*2616*/
			$k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; /*2616*/
			$0.raiseerror(); /*2616*/
		} /*2616*/
		$1.issn = $s(8); /*2620*/
		$1.checksum = 0; /*2621*/
		$1.i = 0; /*2622*/
		$1.n = 0; /*2622*/
		for (;;) {
			/*2634*/
			$1.issnchar = $get($1.issntxt, $1.i) - 48; /*2624*/
			if ($1.issnchar != -3) { //no-else/*2631*/
				$put($1.issn, $1.n, $1.issnchar + 48); /*2626*/
				if ($1.n < 7) { //no-else/*2629*/
					$1.checksum = $1.checksum + ($1.issnchar * (8 - $1.n)); /*2628*/
				} /*2628*/
				$1.n = $1.n + 1; /*2630*/
			} /*2630*/
			$1.i = $1.i + 1; /*2632*/
			if ($1.i == $1.issntxt.length) { //no-else/*2633*/
				break; /*2633*/
			} /*2633*/
		} /*2633*/
		$1.checksum = (11 - ($1.checksum % 11)) % 11; /*2635*/
		var _w = $1.checksum + 48; /*2636*/
		$k[$j++] = 'checksum'; /*2636*/
		$k[$j++] = _w; /*2636*/
		if (_w == 58) { //no-else/*2636*/
			$j--; /*2636*/
			$k[$j++] = 88; /*2636*/
		} /*2636*/
		var _x = $k[--$j]; /*2636*/
		$1[$k[--$j]] = _x; /*2636*/
		if ($1.issntxt.length == 9) { //no-else/*2641*/
			if ($get($1.issntxt, 8) != $1.checksum) { //no-else/*2640*/
				$k[$j++] = 'bwipp.issnBadCheckDigit'; /*2639*/
				$k[$j++] = "Incorrect ISSN check digit provided"; /*2639*/
				$0.raiseerror(); /*2639*/
			} /*2639*/
		} /*2639*/
		$1.pad = $s(14); /*2644*/
		$puti($1.pad, 0, "ISSN "); /*2645*/
		$puti($1.pad, 5, $1.issntxt); /*2646*/
		$put($1.pad, 13, $1.checksum); /*2647*/
		$1.issntxt = $1.pad; /*2648*/
		$1.barcode = $geti($1.issn, 0, 7); /*2651*/
		$1.barcode = $s(12); /*2654*/
		$puti($1.barcode, 0, "977"); /*2655*/
		$puti($1.barcode, 3, $1.issn); /*2656*/
		$puti($1.barcode, 10, $1.seqvar); /*2657*/
		if ($ne($1.addon, "")) { //no-else/*2666*/
			var _1K = $s((12 + $1.addon.length) + 1); /*2661*/
			$puti(_1K, 0, $1.barcode); /*2662*/
			$puti(_1K, 12, " "); /*2663*/
			$puti(_1K, 13, $1.addon); /*2664*/
			$1.barcode = _1K; /*2665*/
		} /*2665*/
		$put($1.options, "dontdraw", true); /*2669*/
		$put($1.options, "addongap", $1.addongap); /*2670*/
		$k[$j++] = 'args'; /*2671*/
		$k[$j++] = $1.barcode; /*2671*/
		$k[$j++] = $1.options; /*2671*/
		$0.ean13(); /*2671*/
		var _1S = $k[--$j]; /*2671*/
		$1[$k[--$j]] = _1S; /*2671*/
		if ($1.includetext) { //no-else/*2688*/
			if ($1.issntextxoffset == "unset") { //no-else/*2675*/
				$1.issntextxoffset = 10; /*2675*/
			} /*2675*/
			if ($1.issntextyoffset == "unset") { //no-else/*2678*/
				$1.issntextyoffset = ($1.height * 72) + 3; /*2677*/
			} /*2677*/
			var _1Z = $get($1.args, "txt") !== undefined; /*2679*/
			if (_1Z) {
				/*2686*/
				$1.txt = $get($1.args, "txt"); /*2680*/
				$1.newtxt = $a($1.txt.length + 1); /*2681*/
				$puti($1.newtxt, 0, $1.txt); /*2682*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])); /*2683*/
				$put($1.args, "txt", $1.newtxt); /*2684*/
			} else {
				/*2686*/
				$put($1.args, "txt", $a([$a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])])); /*2686*/
			} /*2686*/
		} /*2686*/
		$put($1.args, "opt", $1.options); /*2690*/
		$k[$j++] = $1.args; /*2693*/
		if (!$1.dontdraw) { //no-else/*2693*/
			$0.renlinear(); /*2693*/
		} /*2693*/
	};
	$0.code128 = function() {
		var $1 = {}; /*2722*/
		$1.options = $k[--$j]; /*2724*/
		$1.barcode = $k[--$j]; /*2725*/
		$1.dontdraw = false; /*2727*/
		$1.includetext = false; /*2728*/
		$1.textfont = 'Courier'; /*2729*/
		$1.textsize = 10; /*2730*/
		$1.textxoffset = 0; /*2731*/
		$1.textyoffset = -8.5; /*2732*/
		$1.height = 1; /*2733*/
		$1.encoding = "auto"; /*2734*/
		$1.raw = false; /*2735*/
		$1.parse = false; /*2736*/
		$1.parsefnc = false; /*2737*/
		$forall($1.options, function() {
			/*2748*/
			var _3 = $k[--$j]; /*2748*/
			$1[$k[--$j]] = _3; /*2748*/
		}); /*2748*/
		$1.textfont = "" + $1.textfont; /*2750*/
		$1.textsize = +$1.textsize; /*2751*/
		$1.textxoffset = +$1.textxoffset; /*2752*/
		$1.textyoffset = +$1.textyoffset; /*2753*/
		$1.height = +$1.height; /*2754*/
		$1.barlen = $1.barcode.length; /*2777*/
		$1.sta = -1; /*2780*/
		$1.stb = -2; /*2780*/
		$1.stc = -3; /*2780*/
		$1.swa = -4; /*2781*/
		$1.swb = -5; /*2781*/
		$1.swc = -6; /*2781*/
		$1.fn1 = -7; /*2782*/
		$1.fn2 = -8; /*2782*/
		$1.fn3 = -9; /*2782*/
		$1.fn4 = -10; /*2783*/
		$1.sft = -11; /*2783*/
		$1.stp = -12; /*2783*/
		$1.lka = -13; /*2784*/
		$1.lkc = -14; /*2784*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sft, $1.sft, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.sta, $1.sta, $1.sta]), $a([$1.stb, $1.stb, $1.stb]), $a([$1.stc, $1.stc, $1.stc]), $a([$1.stp, $1.stp, $1.stp])]); /*2825*/
		$1.charvals = $a([new Map, new Map, new Map]); /*2828*/
		for (var _2R = 0, _2Q = $1.charmaps.length - 1; _2R <= _2Q; _2R += 1) {
			/*2837*/
			$1.i = _2R; /*2830*/
			$1.encs = $get($1.charmaps, $1.i); /*2831*/
			for (var _2V = 0; _2V <= 2; _2V += 1) {
				/*2836*/
				$1.j = _2V; /*2833*/
				var _2Y = $get($1.encs, $1.j); /*2834*/
				$k[$j++] = _2Y; /*2834*/
				if ($eq($type(_2Y), 'stringtype')) { //no-else/*2834*/
					var _2b = $get($k[--$j], 0); /*2834*/
					$k[$j++] = _2b; /*2834*/
				} /*2834*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*2835*/
			} /*2835*/
		} /*2835*/
		$1.seta = $get($1.charvals, 0); /*2838*/
		$1.setb = $get($1.charvals, 1); /*2839*/
		$1.setc = $get($1.charvals, 2); /*2840*/
		$put($1.seta, $1.lka, $get($1.seta, $1.swb)); /*2843*/
		$put($1.seta, $1.lkc, $get($1.seta, $1.swc)); /*2843*/
		$put($1.setb, $1.lka, $get($1.setb, $1.swc)); /*2844*/
		$put($1.setb, $1.lkc, $get($1.setb, $1.swa)); /*2844*/
		$put($1.setc, $1.lka, $get($1.setc, $1.swa)); /*2845*/
		$put($1.setc, $1.lkc, $get($1.setc, $1.swb)); /*2845*/
		if ($1.raw) { //no-else/*2847*/
			$1.encoding = "raw"; /*2847*/
		} /*2847*/
		if ($eq($1.encoding, "raw")) { //no-else/*2861*/
			$1.cws = $a($1.barlen); /*2850*/
			$1.i = 0; /*2851*/
			$1.j = 0; /*2851*/
			for (;;) {
				/*2858*/
				if ($1.i == $1.barlen) { //no-else/*2853*/
					break; /*2853*/
				} /*2853*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*2854*/
				$put($1.cws, $1.j, $1.cw); /*2855*/
				$1.i = $1.i + 4; /*2856*/
				$1.j = $1.j + 1; /*2857*/
			} /*2857*/
			$1.cws = $geti($1.cws, 0, $1.j); /*2859*/
			$1.text = ""; /*2860*/
		} /*2860*/
		if ($eq($1.encoding, "auto")) { //no-else/*3111*/
			var _3e = new Map([
				["FNC1", $1.fn1],
				["FNC2", $1.fn2],
				["FNC3", $1.fn3],
				["LNKA", $1.lka],
				["LNKC", $1.lkc]
			]); /*2871*/
			$1.fncvals = _3e; /*2872*/
			$1.msg = $a($1.barlen); /*2875*/
			$1.text = $s($1.barlen); /*2876*/
			$1.i = 0; /*2877*/
			$1.j = 0; /*2877*/
			for (;;) {
				/*2893*/
				if ($1.i == $1.barlen) { //no-else/*2878*/
					break; /*2878*/
				} /*2878*/
				$1.char = $get($1.barcode, $1.i); /*2879*/
				$put($1.text, $1.j, $1.char); /*2880*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*2889*/
					if ($get($1.barcode, $1.i + 1) != 94) {
						/*2887*/
						$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*2883*/
						$puti($1.text, $1.j, " "); /*2884*/
						$1.i = $1.i + 4; /*2885*/
					} else {
						/*2887*/
						$1.i = $1.i + 1; /*2887*/
					} /*2887*/
				} /*2887*/
				$put($1.msg, $1.j, $1.char); /*2890*/
				$1.i = $1.i + 1; /*2891*/
				$1.j = $1.j + 1; /*2892*/
			} /*2892*/
			$1.msg = $geti($1.msg, 0, $1.j); /*2894*/
			$1.msglen = $1.msg.length; /*2895*/
			$1.text = $geti($1.text, 0, $1.j); /*2896*/
			$k[$j++] = Infinity; /*2899*/
			for (var _4K = 0, _4L = $1.msglen; _4K < _4L; _4K++) {
				/*2899*/
				$k[$j++] = 0; /*2899*/
			} /*2899*/
			$k[$j++] = 0; /*2899*/
			$1.numSA = $a(); /*2899*/
			$k[$j++] = Infinity; /*2900*/
			for (var _4O = 0, _4P = $1.msglen; _4O < _4P; _4O++) {
				/*2900*/
				$k[$j++] = 0; /*2900*/
			} /*2900*/
			$k[$j++] = 0; /*2900*/
			$1.numEA = $a(); /*2900*/
			for (var _4S = $1.msglen - 1; _4S >= 0; _4S -= 1) {
				/*2910*/
				$1.i = _4S; /*2902*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*2909*/
					if ($get($1.msg, $1.i) >= 128) {
						/*2907*/
						$put($1.numEA, $1.i, $get($1.numEA, $1.i + 1) + 1); /*2905*/
					} else {
						/*2907*/
						$put($1.numSA, $1.i, $get($1.numSA, $1.i + 1) + 1); /*2907*/
					} /*2907*/
				} /*2907*/
			} /*2907*/
			$1.ea = false; /*2913*/
			$1.msgtmp = $a([]); /*2913*/
			for (var _4m = 0, _4l = $1.msglen - 1; _4m <= _4l; _4m += 1) {
				/*2928*/
				$1.i = _4m; /*2915*/
				$1.c = $get($1.msg, $1.i); /*2916*/
				if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //no-else/*2926*/
					if ($1.ea) {
						/*2918*/
						$k[$j++] = $1.numSA; /*2918*/
					} else {
						/*2918*/
						$k[$j++] = $1.numEA; /*2918*/
					} /*2918*/
					var _4y = $get($k[--$j], $1.i); /*2918*/
					var _51 = ((_4y + $1.i) == $1.msglen) ? 3 : 5; /*2919*/
					if (_4y < _51) {
						/*2924*/
						$k[$j++] = Infinity; /*2921*/
						$aload($1.msgtmp); /*2921*/
						$k[$j++] = $1.fn4; /*2921*/
						$1.msgtmp = $a(); /*2921*/
					} else {
						/*2924*/
						$k[$j++] = Infinity; /*2923*/
						$aload($1.msgtmp); /*2923*/
						$k[$j++] = $1.fn4; /*2923*/
						$k[$j++] = $1.fn4; /*2923*/
						$1.msgtmp = $a(); /*2923*/
						$1.ea = !$1.ea; /*2924*/
					} /*2924*/
				} /*2924*/
				$k[$j++] = Infinity; /*2927*/
				$aload($1.msgtmp); /*2927*/
				if ($1.c >= 0) {
					/*2927*/
					$k[$j++] = $1.c & 127; /*2927*/
				} else {
					/*2927*/
					$k[$j++] = $1.c; /*2927*/
				} /*2927*/
				$1.msgtmp = $a(); /*2927*/
			} /*2927*/
			$1.msg = $1.msgtmp; /*2929*/
			$1.msglen = $1.msg.length; /*2930*/
			$1.numsscr = function() {
				$1.n = 0; /*2934*/
				$1.s = 0; /*2934*/
				$1.p = $k[--$j]; /*2935*/
				for (;;) {
					/*2946*/
					if ($1.p >= $1.msglen) { //no-else/*2936*/
						break; /*2936*/
					} /*2936*/
					var _5M = $get($1.msg, $1.p); /*2937*/
					var _5O = $get($1.setc, _5M) !== undefined; /*2938*/
					$k[$j++] = _5M; /*2938*/
					if (!_5O) { //no-else/*2938*/
						$j--; /*2938*/
						break; /*2938*/
					} /*2938*/
					if ($k[--$j] == $1.fn1) { //no-else/*2942*/
						if (($1.s % 2) == 0) {
							/*2941*/
							$1.s = $1.s + 1; /*2941*/
						} else {
							/*2941*/
							break; /*2941*/
						} /*2941*/
					} /*2941*/
					$1.n = $1.n + 1; /*2943*/
					$1.s = $1.s + 1; /*2944*/
					$1.p = $1.p + 1; /*2945*/
				} /*2945*/
				$k[$j++] = $1.n; /*2947*/
				$k[$j++] = $1.s; /*2947*/
			}; /*2948*/
			$1.enca = function() {
				$put($1.cws, $1.j, $get($1.seta, $k[--$j])); /*2952*/
				$1.j = $1.j + 1; /*2953*/
			}; /*2954*/
			$1.encb = function() {
				$put($1.cws, $1.j, $get($1.setb, $k[--$j])); /*2956*/
				$1.j = $1.j + 1; /*2957*/
			}; /*2958*/
			$1.encc = function() {
				var _5k = $k[--$j]; /*2960*/
				$k[$j++] = _5k; /*2964*/
				if ($ne($type(_5k), 'arraytype')) {
					/*2963*/
					var _5o = $get($1.setc, $k[--$j]); /*2961*/
					$k[$j++] = _5o; /*2961*/
				} else {
					/*2963*/
					$aload($k[--$j]); /*2963*/
					var _5q = $k[--$j]; /*2963*/
					var _5r = $k[--$j]; /*2963*/
					$k[$j++] = (_5q - 48) + ((_5r - 48) * 10); /*2963*/
				} /*2963*/
				$put($1.cws, $1.j, $k[--$j]); /*2965*/
				$1.j = $1.j + 1; /*2966*/
			}; /*2967*/
			$1.anotb = function() {
				var _5w = $k[--$j]; /*2970*/
				var _5y = $get($1.seta, _5w) !== undefined; /*2970*/
				var _60 = $get($1.setb, _5w) !== undefined; /*2970*/
				$k[$j++] = _5y && (!_60); /*2970*/
			}; /*2970*/
			$1.bnota = function() {
				var _61 = $k[--$j]; /*2971*/
				var _63 = $get($1.setb, _61) !== undefined; /*2971*/
				var _65 = $get($1.seta, _61) !== undefined; /*2971*/
				$k[$j++] = _63 && (!_65); /*2971*/
			}; /*2971*/
			$k[$j++] = Infinity; /*2974*/
			for (var _67 = 0, _68 = $1.msg.length; _67 < _68; _67++) {
				/*2974*/
				$k[$j++] = 0; /*2974*/
			} /*2974*/
			$k[$j++] = 9999; /*2974*/
			$1.nextanotb = $a(); /*2974*/
			$k[$j++] = Infinity; /*2975*/
			for (var _6B = 0, _6C = $1.msg.length; _6B < _6C; _6B++) {
				/*2975*/
				$k[$j++] = 0; /*2975*/
			} /*2975*/
			$k[$j++] = 9999; /*2975*/
			$1.nextbnota = $a(); /*2975*/
			for (var _6F = $1.msg.length - 1; _6F >= 0; _6F -= 1) {
				/*2988*/
				$1.i = _6F; /*2977*/
				$k[$j++] = $get($1.msg, $1.i); /*2978*/
				$1.anotb(); /*2978*/
				if ($k[--$j]) {
					/*2981*/
					$put($1.nextanotb, $1.i, 0); /*2979*/
				} else {
					/*2981*/
					$put($1.nextanotb, $1.i, $get($1.nextanotb, $1.i + 1) + 1); /*2981*/
				} /*2981*/
				$k[$j++] = $get($1.msg, $1.i); /*2983*/
				$1.bnota(); /*2983*/
				if ($k[--$j]) {
					/*2986*/
					$put($1.nextbnota, $1.i, 0); /*2984*/
				} else {
					/*2986*/
					$put($1.nextbnota, $1.i, $get($1.nextbnota, $1.i + 1) + 1); /*2986*/
				} /*2986*/
			} /*2986*/
			$1.abeforeb = function() {
				var _6c = $k[--$j]; /*2991*/
				$k[$j++] = $lt($get($1.nextanotb, _6c), $get($1.nextbnota, _6c)); /*2991*/
			}; /*2991*/
			$1.bbeforea = function() {
				var _6h = $k[--$j]; /*2992*/
				$k[$j++] = $lt($get($1.nextbnota, _6h), $get($1.nextanotb, _6h)); /*2992*/
			}; /*2992*/
			$1.cws = $a(($1.barcode.length * 2) + 3); /*2994*/
			$1.j = 0; /*2997*/
			if ($1.msglen > 0) {
				/*2998*/
				$k[$j++] = 0; /*2998*/
				$1.numsscr(); /*2998*/
			} else {
				/*2998*/
				$k[$j++] = -1; /*2998*/
				$k[$j++] = -1; /*2998*/
			} /*2998*/
			$1.nums = $k[--$j]; /*2998*/
			$1.nchars = $k[--$j]; /*2998*/
			for (;;) {
				/*3023*/
				if ($1.msglen == 0) { //no-else/*3004*/
					$k[$j++] = $1.stb; /*3001*/
					$1.enca(); /*3001*/
					$1.cset = "setb"; /*3002*/
					break; /*3003*/
				} /*3003*/
				if (($1.msglen == 2) && ($1.nums == 2)) { //no-else/*3009*/
					$k[$j++] = $1.stc; /*3006*/
					$1.enca(); /*3006*/
					$1.cset = "setc"; /*3007*/
					break; /*3008*/
				} /*3008*/
				if ($1.nums >= 4) { //no-else/*3014*/
					$k[$j++] = $1.stc; /*3011*/
					$1.enca(); /*3011*/
					$1.cset = "setc"; /*3012*/
					break; /*3013*/
				} /*3013*/
				$k[$j++] = 0; /*3015*/
				$1.abeforeb(); /*3015*/
				if ($k[--$j]) { //no-else/*3019*/
					$k[$j++] = $1.sta; /*3016*/
					$1.enca(); /*3016*/
					$1.cset = "seta"; /*3017*/
					break; /*3018*/
				} /*3018*/
				$k[$j++] = $1.stb; /*3020*/
				$1.enca(); /*3020*/
				$1.cset = "setb"; /*3021*/
				break; /*3022*/
			} /*3022*/
			$1.i = 0; /*3026*/
			for (;;) {
				/*3109*/
				if ($1.i == $1.msglen) { //no-else/*3027*/
					break; /*3027*/
				} /*3027*/
				$k[$j++] = $1.i; /*3029*/
				$1.numsscr(); /*3029*/
				$1.nums = $k[--$j]; /*3029*/
				$1.nchars = $k[--$j]; /*3029*/
				for (;;) {
					/*3107*/
					if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.nums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //no-else/*3046*/
						if (($1.nums % 2) == 0) {
							/*3044*/
							$k[$j++] = $1.swc; /*3036*/
							if ($eq($1.cset, "seta")) {
								/*3036*/
								$1.enca(); /*3036*/
							} else {
								/*3036*/
								$1.encb(); /*3036*/
							} /*3036*/
							$1.cset = "setc"; /*3037*/
							break; /*3038*/
						} else {
							/*3044*/
							$k[$j++] = $get($1.msg, $1.i); /*3040*/
							if ($eq($1.cset, "seta")) {
								/*3040*/
								$1.enca(); /*3040*/
							} else {
								/*3040*/
								$1.encb(); /*3040*/
							} /*3040*/
							$1.i = $1.i + 1; /*3041*/
							$k[$j++] = $1.swc; /*3042*/
							if ($eq($1.cset, "seta")) {
								/*3042*/
								$1.enca(); /*3042*/
							} else {
								/*3042*/
								$1.encb(); /*3042*/
							} /*3042*/
							$1.cset = "setc"; /*3043*/
							break; /*3044*/
						} /*3044*/
					} /*3044*/
					$k[$j++] = $eq($1.cset, "setb"); /*3047*/
					$k[$j++] = $get($1.msg, $1.i); /*3047*/
					$1.anotb(); /*3047*/
					var _7R = $k[--$j]; /*3047*/
					if (($k[--$j] && _7R)) { //no-else/*3059*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*3055*/
							$k[$j++] = $1.i + 1; /*3049*/
							$1.bbeforea(); /*3049*/
							if ($k[--$j]) { //no-else/*3054*/
								$k[$j++] = $1.sft; /*3050*/
								$1.encb(); /*3050*/
								$k[$j++] = $get($1.msg, $1.i); /*3051*/
								$1.enca(); /*3051*/
								$1.i = $1.i + 1; /*3052*/
								break; /*3053*/
							} /*3053*/
						} /*3053*/
						$k[$j++] = $1.swa; /*3056*/
						$1.encb(); /*3056*/
						$1.cset = "seta"; /*3057*/
						break; /*3058*/
					} /*3058*/
					$k[$j++] = $eq($1.cset, "seta"); /*3060*/
					$k[$j++] = $get($1.msg, $1.i); /*3060*/
					$1.bnota(); /*3060*/
					var _7h = $k[--$j]; /*3060*/
					if (($k[--$j] && _7h)) { //no-else/*3072*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*3068*/
							$k[$j++] = $1.i + 1; /*3062*/
							$1.abeforeb(); /*3062*/
							if ($k[--$j]) { //no-else/*3067*/
								$k[$j++] = $1.sft; /*3063*/
								$1.enca(); /*3063*/
								$k[$j++] = $get($1.msg, $1.i); /*3064*/
								$1.encb(); /*3064*/
								$1.i = $1.i + 1; /*3065*/
								break; /*3066*/
							} /*3066*/
						} /*3066*/
						$k[$j++] = $1.swb; /*3069*/
						$1.enca(); /*3069*/
						$1.cset = "setb"; /*3070*/
						break; /*3071*/
					} /*3071*/
					if (($eq($1.cset, "setc") && ($1.nums < 2)) && ($get($1.msg, $1.i) > -1)) { //no-else/*3082*/
						$k[$j++] = $1.i; /*3074*/
						$1.abeforeb(); /*3074*/
						if ($k[--$j]) { //no-else/*3078*/
							$k[$j++] = $1.swa; /*3075*/
							$1.encc(); /*3075*/
							$1.cset = "seta"; /*3076*/
							break; /*3077*/
						} /*3077*/
						$k[$j++] = $1.swb; /*3079*/
						$1.encc(); /*3079*/
						$1.cset = "setb"; /*3080*/
						break; /*3081*/
					} /*3081*/
					if ($eq($1.cset, "seta")) { //no-else/*3089*/
						$k[$j++] = $get($1.msg, $1.i); /*3086*/
						$1.enca(); /*3086*/
						$1.i = $1.i + 1; /*3087*/
						break; /*3088*/
					} /*3088*/
					if ($eq($1.cset, "setb")) { //no-else/*3094*/
						$k[$j++] = $get($1.msg, $1.i); /*3091*/
						$1.encb(); /*3091*/
						$1.i = $1.i + 1; /*3092*/
						break; /*3093*/
					} /*3093*/
					if ($eq($1.cset, "setc")) { //no-else/*3104*/
						if ($get($1.msg, $1.i) <= -1) {
							/*3101*/
							$k[$j++] = $get($1.msg, $1.i); /*3097*/
							$1.encc(); /*3097*/
							$1.i = $1.i + 1; /*3098*/
						} else {
							/*3101*/
							$k[$j++] = $geti($1.msg, $1.i, 2); /*3100*/
							$1.encc(); /*3100*/
							$1.i = $1.i + 2; /*3101*/
						} /*3101*/
						break; /*3103*/
					} /*3103*/
					break; /*3106*/
				} /*3106*/
			} /*3106*/
			$1.cws = $geti($1.cws, 0, $1.j); /*3110*/
		} /*3110*/
		var _8S = $a($1.j + 2); /*3114*/
		$puti(_8S, 0, $1.cws); /*3114*/
		$1.cws = _8S; /*3114*/
		$1.csum = $get($1.cws, 0); /*3115*/
		for (var _8Y = 1, _8X = $1.j - 1; _8Y <= _8X; _8Y += 1) {
			/*3119*/
			$1.i = _8Y; /*3117*/
			$1.csum = $1.csum + ($get($1.cws, $1.i) * $1.i); /*3118*/
		} /*3118*/
		$1.csum = $1.csum % 103; /*3120*/
		$put($1.cws, $1.j, $1.csum); /*3121*/
		$put($1.cws, $1.j + 1, $get($1.seta, $1.stp)); /*3122*/
		$1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); /*3142*/
		$1.sbs = $s(($1.cws.length * 6) + 1); /*3145*/
		for (var _8s = 0, _8r = $1.cws.length - 1; _8s <= _8r; _8s += 1) {
			/*3149*/
			$1.i = _8s; /*3147*/
			$puti($1.sbs, $1.i * 6, $get($1.encs, $get($1.cws, $1.i))); /*3148*/
		} /*3148*/
		$k[$j++] = Infinity; /*3159*/
		$k[$j++] = Infinity; /*3155*/
		var _90 = $1.sbs; /*3154*/
		for (var _91 = 0, _92 = _90.length; _91 < _92; _91++) {
			/*3154*/
			$k[$j++] = $get(_90, _91) - 48; /*3154*/
		} /*3154*/
		var _94 = $a(); /*3155*/
		$k[$j++] = Infinity; /*3156*/
		for (var _96 = 0, _97 = ~~(($1.sbs.length + 1) / 2); _96 < _97; _96++) {
			/*3155*/
			$k[$j++] = $1.height; /*3155*/
		} /*3155*/
		var _99 = $a(); /*3156*/
		$k[$j++] = Infinity; /*3157*/
		for (var _9B = 0, _9C = ~~(($1.sbs.length + 1) / 2); _9B < _9C; _9B++) {
			/*3156*/
			$k[$j++] = 0; /*3156*/
		} /*3156*/
		var _9D = $a(); /*3157*/
		$k[$j++] = 'ren'; /*3159*/
		$k[$j++] = $0.renlinear; /*3159*/
		$k[$j++] = 'sbs'; /*3159*/
		$k[$j++] = _94; /*3159*/
		$k[$j++] = 'bhs'; /*3159*/
		$k[$j++] = _99; /*3159*/
		$k[$j++] = 'bbs'; /*3159*/
		$k[$j++] = _9D; /*3159*/
		$k[$j++] = 'txt'; /*3159*/
		$k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); /*3159*/
		$k[$j++] = 'textxalign'; /*3159*/
		$k[$j++] = "center"; /*3159*/
		$k[$j++] = 'opt'; /*3159*/
		$k[$j++] = $1.options; /*3159*/
		var _9M = $d(); /*3159*/
		$k[$j++] = _9M; /*3162*/
		if (!$1.dontdraw) { //no-else/*3162*/
			$0.renlinear(); /*3162*/
		} /*3162*/
	};
	$0['gs1-128'] = function() {
		var $1 = {}; /*3192*/
		$1.options = $k[--$j]; /*3194*/
		$1.barcode = $k[--$j]; /*3195*/
		$1.dontdraw = false; /*3197*/
		$1.includetext = false; /*3198*/
		$1.textfont = 'Courier'; /*3199*/
		$1.textsize = 10; /*3200*/
		$1.textxoffset = 0; /*3201*/
		$1.textyoffset = -8.5; /*3202*/
		$1.height = 0.5; /*3203*/
		$1.linkagea = false; /*3204*/
		$1.linkagec = false; /*3205*/
		$forall($1.options, function() {
			/*3216*/
			var _3 = $k[--$j]; /*3216*/
			$1[$k[--$j]] = _3; /*3216*/
		}); /*3216*/
		$1.textfont = "" + $1.textfont; /*3218*/
		$1.textsize = +$1.textsize; /*3219*/
		$1.textxoffset = +$1.textxoffset; /*3220*/
		$1.textyoffset = +$1.textyoffset; /*3221*/
		$1.height = +$1.height; /*3222*/
		$1.text = $1.barcode; /*3224*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*3228*/
			$1.out = $s($1.in.length); /*3229*/
			$1.j = 0; /*3230*/
			$k[$j++] = $1.in; /*3244*/
			for (;;) {
				/*3244*/
				$search($k[--$j], "^"); /*3233*/
				if ($k[--$j]) {
					/*3242*/
					var _H = $k[--$j]; /*3234*/
					$puti($1.out, $1.j, _H); /*3234*/
					$1.j = (_H.length + $1.j) + 1; /*3235*/
					$j--; /*3236*/
					var _L = $k[--$j]; /*3237*/
					$put($1.out, $1.j - 1, ~~$z($geti(_L, 0, 3))); /*3237*/
					$k[$j++] = $geti(_L, 3, _L.length - 3); /*3238*/
				} else {
					/*3242*/
					var _Q = $k[--$j]; /*3240*/
					$puti($1.out, $1.j, _Q); /*3240*/
					$1.j = _Q.length + $1.j; /*3241*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*3242*/
					break; /*3242*/
				} /*3242*/
			} /*3242*/
		}; /*3245*/
		$1.ais = $a([]); /*3248*/
		$1.vals = $a([]); /*3249*/
		var _Z = $1.barcode; /*3250*/
		$k[$j++] = $geti(_Z, 1, _Z.length - 1); /*3263*/
		for (;;) {
			/*3263*/
			var _b = $k[--$j]; /*3252*/
			$k[$j++] = _b; /*3252*/
			if ($eq(_b, "")) { //no-else/*3252*/
				break; /*3252*/
			} /*3252*/
			$search($k[--$j], ")"); /*3253*/
			$j--; /*3253*/
			var _d = $k[--$j]; /*3254*/
			var _e = $k[--$j]; /*3254*/
			var _f = $k[--$j]; /*3255*/
			$k[$j++] = _d; /*3255*/
			$search(_f, "("); /*3255*/
			if ($k[--$j]) {
				/*3258*/
				var _h = $k[--$j]; /*3256*/
				var _i = $k[--$j]; /*3256*/
				var _j = $k[--$j]; /*3256*/
				var _k = $k[--$j]; /*3256*/
				$k[$j++] = _j; /*3256*/
				$k[$j++] = _k; /*3256*/
				$k[$j++] = _h; /*3256*/
			} else {
				/*3258*/
				var _l = $k[--$j]; /*3258*/
				var _m = $k[--$j]; /*3258*/
				$k[$j++] = ""; /*3258*/
				$k[$j++] = _m; /*3258*/
				$k[$j++] = _l; /*3258*/
			} /*3258*/
			$k[$j++] = Infinity; /*3260*/
			$aload($1.ais); /*3260*/
			var _p = $k[$j - 1 - ($counttomark() + 2)]; /*3260*/
			$k[$j++] = _p; /*3260*/
			$1.ais = $a(); /*3260*/
			$k[$j++] = Infinity; /*3261*/
			$aload($1.vals); /*3261*/
			var _t = $k[$j - 1 - ($counttomark() + 1)]; /*3261*/
			$k[$j++] = _t; /*3261*/
			$1.expand(); /*3261*/
			$1.vals = $a(); /*3261*/
			$j -= 2; /*3262*/
		} /*3262*/
		$j--; /*3264*/
		$1.aifixed = new Map; /*3269*/
		$k[$j++] = Infinity; /*3271*/
		for (var _v = 0; _v <= 4; _v += 1) {
			/*3271*/
			$k[$j++] = _v; /*3271*/
		} /*3271*/
		var _w = $a(); /*3271*/
		for (var _x = 0, _y = _w.length; _x < _y; _x++) {
			/*3274*/
			var _11 = $strcpy($s(2), "00"); /*3273*/
			$put(_11, 1, $get(_w, _x) + 48); /*3273*/
			$put($1.aifixed, _11, _11); /*3273*/
		} /*3273*/
		$k[$j++] = Infinity; /*3279*/
		for (var _13 = 11; _13 <= 20; _13 += 1) {
			/*3276*/
			$k[$j++] = _13; /*3276*/
		} /*3276*/
		$k[$j++] = 23; /*3278*/
		for (var _14 = 31; _14 <= 36; _14 += 1) {
			/*3278*/
			$k[$j++] = _14; /*3278*/
		} /*3278*/
		$k[$j++] = 41; /*3279*/
		var _15 = $a(); /*3279*/
		for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) {
			/*3282*/
			var _1A = $cvrs($s(2), $get(_15, _16), 10); /*3281*/
			$put($1.aifixed, _1A, _1A); /*3281*/
		} /*3281*/
		$1.fnc1 = -1; /*3285*/
		$1.c128 = $a([$1.fnc1]); /*3286*/
		for (var _1G = 0, _1F = $1.ais.length - 1; _1G <= _1F; _1G += 1) {
			/*3302*/
			$1.i = _1G; /*3288*/
			$1.ai = $get($1.ais, $1.i); /*3289*/
			$1.val = $get($1.vals, $1.i); /*3290*/
			var _1Q = $a(($1.c128.length + $1.ai.length) + $1.val.length); /*3291*/
			$puti(_1Q, 0, $1.c128); /*3292*/
			$k[$j++] = _1Q; /*3293*/
			$k[$j++] = _1Q; /*3293*/
			$k[$j++] = $1.c128.length; /*3293*/
			$k[$j++] = $1.ai; /*3293*/
			$k[$j++] = Infinity; /*3293*/
			var _1U = $k[--$j]; /*3293*/
			var _1V = $k[--$j]; /*3293*/
			$k[$j++] = _1U; /*3293*/
			$forall(_1V); /*3293*/
			var _1W = $a(); /*3293*/
			var _1X = $k[--$j]; /*3293*/
			$puti($k[--$j], _1X, _1W); /*3293*/
			var _1Z = $k[--$j]; /*3294*/
			$k[$j++] = _1Z; /*3294*/
			$k[$j++] = _1Z; /*3294*/
			$k[$j++] = $1.c128.length + $1.ai.length; /*3294*/
			$k[$j++] = $1.val; /*3294*/
			$k[$j++] = Infinity; /*3294*/
			var _1d = $k[--$j]; /*3294*/
			var _1e = $k[--$j]; /*3294*/
			$k[$j++] = _1d; /*3294*/
			$forall(_1e); /*3294*/
			var _1f = $a(); /*3294*/
			var _1g = $k[--$j]; /*3294*/
			$puti($k[--$j], _1g, _1f); /*3294*/
			$1.c128 = $k[--$j]; /*3295*/
			var _1o = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*3296*/
			if (($1.i != ($1.ais.length - 1)) && (!_1o)) { //no-else/*3301*/
				var _1q = $a($1.c128.length + 1); /*3297*/
				$puti(_1q, 0, $1.c128); /*3298*/
				$put(_1q, $1.c128.length, $1.fnc1); /*3299*/
				$1.c128 = _1q; /*3300*/
			} /*3300*/
		} /*3300*/
		$1.barcode = $s(($1.c128.length + 1) * 5); /*3305*/
		$1.i = 0; /*3306*/
		$1.j = 0; /*3306*/
		for (;;) {
			/*3316*/
			if ($1.i == $1.c128.length) { //no-else/*3307*/
				break; /*3307*/
			} /*3307*/
			var _20 = $get($1.c128, $1.i); /*3308*/
			$k[$j++] = _20; /*3313*/
			if (_20 == $1.fnc1) {
				/*3312*/
				$j--; /*3309*/
				$puti($1.barcode, $1.j, "^FNC1"); /*3309*/
				$1.j = $1.j + 4; /*3310*/
			} else {
				/*3312*/
				$put($1.barcode, $1.j, $k[--$j]); /*3312*/
			} /*3312*/
			$1.i = $1.i + 1; /*3314*/
			$1.j = $1.j + 1; /*3315*/
		} /*3315*/
		if ($1.linkagea || $1.linkagec) { //no-else/*3320*/
			$k[$j++] = $1.barcode; /*3318*/
			$k[$j++] = $1.j; /*3318*/
			if ($1.linkagea) {
				/*3318*/
				$k[$j++] = "^LNKA"; /*3318*/
			} else {
				/*3318*/
				$k[$j++] = "^LNKC"; /*3318*/
			} /*3318*/
			var _2F = $k[--$j]; /*3318*/
			var _2G = $k[--$j]; /*3318*/
			$puti($k[--$j], _2G, _2F); /*3318*/
			$1.j = $1.j + 5; /*3319*/
		} /*3319*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*3321*/
		$put($1.options, "height", $1.height); /*3324*/
		$put($1.options, "dontdraw", true); /*3325*/
		$put($1.options, "parsefnc", true); /*3326*/
		$k[$j++] = 'args'; /*3327*/
		$k[$j++] = $1.barcode; /*3327*/
		$k[$j++] = $1.options; /*3327*/
		$0.code128(); /*3327*/
		var _2S = $k[--$j]; /*3327*/
		$1[$k[--$j]] = _2S; /*3327*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3329*/
		$put($1.args, "textxalign", "center"); /*3330*/
		$put($1.args, "opt", $1.options); /*3331*/
		$k[$j++] = $1.args; /*3334*/
		if (!$1.dontdraw) { //no-else/*3334*/
			$0.renlinear(); /*3334*/
		} /*3334*/
	};
	$0.ean14 = function() {
		var $1 = {}; /*3364*/
		$1.options = $k[--$j]; /*3366*/
		$1.barcode = $k[--$j]; /*3367*/
		$1.dontdraw = false; /*3369*/
		$1.includetext = false; /*3370*/
		$1.textfont = 'Courier'; /*3371*/
		$1.textsize = 10; /*3372*/
		$1.textxoffset = 0; /*3373*/
		$1.textyoffset = -8.5; /*3374*/
		$1.height = 1; /*3375*/
		$forall($1.options, function() {
			/*3386*/
			var _3 = $k[--$j]; /*3386*/
			$1[$k[--$j]] = _3; /*3386*/
		}); /*3386*/
		$1.textfont = "" + $1.textfont; /*3388*/
		$1.textsize = +$1.textsize; /*3389*/
		$1.textxoffset = +$1.textxoffset; /*3390*/
		$1.textyoffset = +$1.textyoffset; /*3391*/
		$1.height = +$1.height; /*3392*/
		$1.text = $1.barcode; /*3395*/
		var _B = $1.barcode; /*3396*/
		$k[$j++] = $s(_B.length); /*3397*/
		$k[$j++] = 0; /*3397*/
		$forall(_B, function() {
			/*3397*/
			var _D = $k[--$j]; /*3397*/
			$k[$j++] = _D; /*3397*/
			if (_D != 32) {
				/*3397*/
				var _E = $k[--$j]; /*3397*/
				var _F = $k[--$j]; /*3397*/
				var _G = $k[--$j]; /*3397*/
				$put(_G, _F, _E); /*3397*/
				$k[$j++] = _G; /*3397*/
				$k[$j++] = _F + 1; /*3397*/
			} else {
				/*3397*/
				$j--; /*3397*/
			} /*3397*/
		}); /*3397*/
		var _H = $k[--$j]; /*3398*/
		$1.barcode = $geti($k[--$j], 0, _H); /*3398*/
		$1.hasspace = $1.text.length != $1.barcode.length; /*3399*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*3404*/
			$k[$j++] = 'bwipp.ean14badAI'; /*3403*/
			$k[$j++] = "GS1-14 must begin with (01) application identifier"; /*3403*/
			$0.raiseerror(); /*3403*/
		} /*3403*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*3407*/
			$k[$j++] = 'bwipp.ean14badLength'; /*3406*/
			$k[$j++] = "GS1-14 must be 13 or 14 digits"; /*3406*/
			$0.raiseerror(); /*3406*/
		} /*3406*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*3412*/
			var _T = $k[--$j]; /*3409*/
			if ((_T < 48) || (_T > 57)) { //no-else/*3411*/
				$k[$j++] = 'bwipp.ean14badCharacter'; /*3410*/
				$k[$j++] = "GS1-14 must contain only digits"; /*3410*/
				$0.raiseerror(); /*3410*/
			} /*3410*/
		}); /*3410*/
		$1.checksum = 0; /*3415*/
		for (var _U = 0; _U <= 12; _U += 1) {
			/*3419*/
			$1.i = _U; /*3417*/
			$k[$j++] = 'checksum'; /*3418*/
			$k[$j++] = $1.checksum; /*3418*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*3418*/
			if (($1.i % 2) == 0) { //no-else/*3418*/
				var _a = $k[--$j]; /*3418*/
				$k[$j++] = _a * 3; /*3418*/
			} /*3418*/
			var _b = $k[--$j]; /*3418*/
			var _c = $k[--$j]; /*3418*/
			$1[$k[--$j]] = _c + _b; /*3418*/
		} /*3418*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*3420*/
		if ($1.barcode.length == 18) {
			/*3434*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*3424*/
				$k[$j++] = 'bwipp.ean14badCheckDigit'; /*3423*/
				$k[$j++] = "Incorrect GS1-14 check digit provided"; /*3423*/
				$0.raiseerror(); /*3423*/
			} /*3423*/
		} else {
			/*3434*/
			var _j = $s(18); /*3426*/
			$puti(_j, 0, $1.barcode); /*3427*/
			$put(_j, 17, $1.checksum + 48); /*3428*/
			$1.barcode = _j; /*3429*/
			var _o = $1.hasspace ? 2 : 1; /*3430*/
			var _p = $s($1.text.length + _o); /*3430*/
			$puti(_p, _p.length - 2, " "); /*3431*/
			$put(_p, _p.length - 1, $1.checksum + 48); /*3432*/
			$puti(_p, 0, $1.text); /*3433*/
			$1.text = _p; /*3434*/
		} /*3434*/
		$1.gtin = $geti($1.barcode, 4, 14); /*3436*/
		$1.barcode = $s(21); /*3439*/
		$puti($1.barcode, 0, "^FNC101"); /*3440*/
		$puti($1.barcode, 7, $1.gtin); /*3441*/
		$put($1.options, "dontdraw", true); /*3444*/
		$put($1.options, "parsefnc", true); /*3445*/
		$k[$j++] = 'args'; /*3446*/
		$k[$j++] = $1.barcode; /*3446*/
		$k[$j++] = $1.options; /*3446*/
		$0.code128(); /*3446*/
		var _12 = $k[--$j]; /*3446*/
		$1[$k[--$j]] = _12; /*3446*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3448*/
		$put($1.args, "textxalign", "center"); /*3449*/
		$put($1.args, "opt", $1.options); /*3450*/
		$k[$j++] = $1.args; /*3453*/
		if (!$1.dontdraw) { //no-else/*3453*/
			$0.renlinear(); /*3453*/
		} /*3453*/
	};
	$0.sscc18 = function() {
		var $1 = {}; /*3483*/
		$1.options = $k[--$j]; /*3485*/
		$1.barcode = $k[--$j]; /*3486*/
		$1.dontdraw = false; /*3488*/
		$1.includetext = false; /*3489*/
		$1.textfont = 'Courier'; /*3490*/
		$1.textsize = 10; /*3491*/
		$1.textxoffset = 0; /*3492*/
		$1.textyoffset = -8.5; /*3493*/
		$1.height = 1; /*3494*/
		$forall($1.options, function() {
			/*3505*/
			var _3 = $k[--$j]; /*3505*/
			$1[$k[--$j]] = _3; /*3505*/
		}); /*3505*/
		$1.textfont = "" + $1.textfont; /*3507*/
		$1.textsize = +$1.textsize; /*3508*/
		$1.textxoffset = +$1.textxoffset; /*3509*/
		$1.textyoffset = +$1.textyoffset; /*3510*/
		$1.height = +$1.height; /*3511*/
		$1.text = $1.barcode; /*3514*/
		var _B = $1.barcode; /*3515*/
		$k[$j++] = $s(_B.length); /*3516*/
		$k[$j++] = 0; /*3516*/
		$forall(_B, function() {
			/*3516*/
			var _D = $k[--$j]; /*3516*/
			$k[$j++] = _D; /*3516*/
			if (_D != 32) {
				/*3516*/
				var _E = $k[--$j]; /*3516*/
				var _F = $k[--$j]; /*3516*/
				var _G = $k[--$j]; /*3516*/
				$put(_G, _F, _E); /*3516*/
				$k[$j++] = _G; /*3516*/
				$k[$j++] = _F + 1; /*3516*/
			} else {
				/*3516*/
				$j--; /*3516*/
			} /*3516*/
		}); /*3516*/
		var _H = $k[--$j]; /*3517*/
		$1.barcode = $geti($k[--$j], 0, _H); /*3517*/
		$1.hasspace = $1.text.length != $1.barcode.length; /*3518*/
		if ($ne($geti($1.barcode, 0, 4), "(00)")) { //no-else/*3523*/
			$k[$j++] = 'bwipp.sscc18badAI'; /*3522*/
			$k[$j++] = "SSCC-18 must begin with (00) application identifier"; /*3522*/
			$0.raiseerror(); /*3522*/
		} /*3522*/
		if (($1.barcode.length != 21) && ($1.barcode.length != 22)) { //no-else/*3526*/
			$k[$j++] = 'bwipp.sscc18badLength'; /*3525*/
			$k[$j++] = "SSCC-18 must be 17 or 18 digits"; /*3525*/
			$0.raiseerror(); /*3525*/
		} /*3525*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*3531*/
			var _T = $k[--$j]; /*3528*/
			if ((_T < 48) || (_T > 57)) { //no-else/*3530*/
				$k[$j++] = 'bwipp.sscc18badCharacter'; /*3529*/
				$k[$j++] = "SSCC-18 must contain only digits"; /*3529*/
				$0.raiseerror(); /*3529*/
			} /*3529*/
		}); /*3529*/
		$1.checksum = 0; /*3534*/
		for (var _U = 0; _U <= 16; _U += 1) {
			/*3538*/
			$1.i = _U; /*3536*/
			$k[$j++] = 'checksum'; /*3537*/
			$k[$j++] = $1.checksum; /*3537*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*3537*/
			if (($1.i % 2) == 0) { //no-else/*3537*/
				var _a = $k[--$j]; /*3537*/
				$k[$j++] = _a * 3; /*3537*/
			} /*3537*/
			var _b = $k[--$j]; /*3537*/
			var _c = $k[--$j]; /*3537*/
			$1[$k[--$j]] = _c + _b; /*3537*/
		} /*3537*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*3539*/
		if ($1.barcode.length == 22) {
			/*3553*/
			if ($get($1.barcode, 21) != ($1.checksum + 48)) { //no-else/*3543*/
				$k[$j++] = 'bwipp.sscc18badCheckDigit'; /*3542*/
				$k[$j++] = "Incorrect SSCC-18 check digit provided"; /*3542*/
				$0.raiseerror(); /*3542*/
			} /*3542*/
		} else {
			/*3553*/
			var _j = $s(22); /*3545*/
			$puti(_j, 0, $1.barcode); /*3546*/
			$put(_j, 21, $1.checksum + 48); /*3547*/
			$1.barcode = _j; /*3548*/
			var _o = $1.hasspace ? 2 : 1; /*3549*/
			var _p = $s($1.text.length + _o); /*3549*/
			$puti(_p, _p.length - 2, " "); /*3550*/
			$put(_p, _p.length - 1, $1.checksum + 48); /*3551*/
			$puti(_p, 0, $1.text); /*3552*/
			$1.text = _p; /*3553*/
		} /*3553*/
		$1.sscc = $geti($1.barcode, 4, 18); /*3555*/
		$1.barcode = $s(25); /*3558*/
		$puti($1.barcode, 0, "^FNC100"); /*3559*/
		$puti($1.barcode, 7, $1.sscc); /*3560*/
		$put($1.options, "dontdraw", true); /*3563*/
		$put($1.options, "parsefnc", true); /*3564*/
		$k[$j++] = 'args'; /*3565*/
		$k[$j++] = $1.barcode; /*3565*/
		$k[$j++] = $1.options; /*3565*/
		$0.code128(); /*3565*/
		var _12 = $k[--$j]; /*3565*/
		$1[$k[--$j]] = _12; /*3565*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3567*/
		$put($1.args, "textxalign", "center"); /*3568*/
		$put($1.args, "opt", $1.options); /*3569*/
		$k[$j++] = $1.args; /*3572*/
		if (!$1.dontdraw) { //no-else/*3572*/
			$0.renlinear(); /*3572*/
		} /*3572*/
	};
	$0.code39 = function() {
		var $1 = {}; /*3601*/
		$1.options = $k[--$j]; /*3603*/
		$1.barcode = $k[--$j]; /*3604*/
		$1.dontdraw = false; /*3606*/
		$1.includecheck = false; /*3607*/
		$1.validatecheck = false; /*3608*/
		$1.includetext = false; /*3609*/
		$1.includecheckintext = false; /*3610*/
		$1.hidestars = false; /*3611*/
		$1.textfont = 'Courier'; /*3612*/
		$1.textsize = 10; /*3613*/
		$1.textyoffset = -8.5; /*3614*/
		$1.height = 1; /*3615*/
		$forall($1.options, function() {
			/*3626*/
			var _3 = $k[--$j]; /*3626*/
			$1[$k[--$j]] = _3; /*3626*/
		}); /*3626*/
		$1.textfont = "" + $1.textfont; /*3628*/
		$1.textsize = +$1.textsize; /*3629*/
		$1.textyoffset = +$1.textyoffset; /*3630*/
		$1.height = +$1.height; /*3631*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*3634*/
		$1.charvals = new Map; /*3635*/
		for (var _9 = 0; _9 <= 42; _9 += 1) {
			/*3636*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*3636*/
		} /*3636*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*3643*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*3640*/
			if (!_J) { //no-else/*3642*/
				$k[$j++] = 'bwipp.code39badCharacter'; /*3641*/
				$k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*3641*/
				$0.raiseerror(); /*3641*/
			} /*3641*/
		} /*3641*/
		$k[$j++] = 'barlen'; /*3645*/
		$k[$j++] = $1.barcode.length; /*3645*/
		if ($1.validatecheck) { //no-else/*3645*/
			var _M = $k[--$j]; /*3645*/
			$k[$j++] = _M - 1; /*3645*/
		} /*3645*/
		var _N = $k[--$j]; /*3645*/
		$1[$k[--$j]] = _N; /*3645*/
		$1.checksum = 0; /*3647*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*3651*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum; /*3650*/
		} /*3650*/
		$1.checksum = $1.checksum % 43; /*3652*/
		if ($1.validatecheck) { //no-else/*3659*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*3656*/
				$k[$j++] = 'bwipp.code39badCheckDigit'; /*3655*/
				$k[$j++] = "Incorrect Code 39 check digit provided"; /*3655*/
				$0.raiseerror(); /*3655*/
			} /*3655*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*3657*/
			$1.includecheck = true; /*3658*/
		} /*3658*/
		$1.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); /*3672*/
		var _l = $1.includecheck ? 3 : 2; /*3674*/
		$1.sbs = $s(($1.barlen + _l) * 10); /*3674*/
		var _p = $1.includecheck ? 3 : 2; /*3675*/
		$1.txt = $a($1.barlen + _p); /*3675*/
		$puti($1.sbs, 0, $get($1.encs, 43)); /*3678*/
		if (!$1.hidestars) {
			/*3682*/
			$put($1.txt, 0, $a(["*", 0, $1.textyoffset, $1.textfont, $1.textsize])); /*3680*/
		} else {
			/*3682*/
			$put($1.txt, 0, $a(["", 0, $1.textyoffset, $1.textfont, $1.textsize])); /*3682*/
		} /*3682*/
		for (var _17 = 0, _16 = $1.barlen - 1; _17 <= _16; _17 += 1) {
			/*3690*/
			$1.i = _17; /*3686*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*3687*/
			$puti($1.sbs, ($1.i * 10) + 10, $get($1.encs, $1.indx)); /*3688*/
			$put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i, 1), ($1.i + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3689*/
		} /*3689*/
		if ($1.includecheck) {
			/*3711*/
			$puti($1.sbs, ($1.barlen * 10) + 10, $get($1.encs, $1.checksum)); /*3694*/
			if ($1.includecheckintext) {
				/*3698*/
				$put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum, 1), ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3696*/
			} else {
				/*3698*/
				$put($1.txt, $1.barlen + 1, $a(["", ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3698*/
			} /*3698*/
			$puti($1.sbs, ($1.barlen * 10) + 20, $get($1.encs, 43)); /*3700*/
			if (!$1.hidestars) {
				/*3704*/
				$put($1.txt, $1.barlen + 2, $a(["*", ($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3702*/
			} else {
				/*3704*/
				$put($1.txt, $1.barlen + 2, $a(["", ($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3704*/
			} /*3704*/
		} else {
			/*3711*/
			$puti($1.sbs, ($1.barlen * 10) + 10, $get($1.encs, 43)); /*3707*/
			if (!$1.hidestars) {
				/*3711*/
				$put($1.txt, $1.barlen + 1, $a(["*", ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3709*/
			} else {
				/*3711*/
				$put($1.txt, $1.barlen + 1, $a(["", ($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); /*3711*/
			} /*3711*/
		} /*3711*/
		$k[$j++] = Infinity; /*3724*/
		$k[$j++] = Infinity; /*3719*/
		var _2S = $1.sbs; /*3718*/
		for (var _2T = 0, _2U = _2S.length; _2T < _2U; _2T++) {
			/*3718*/
			$k[$j++] = $get(_2S, _2T) - 48; /*3718*/
		} /*3718*/
		var _2W = $a(); /*3719*/
		$k[$j++] = Infinity; /*3720*/
		for (var _2Y = 0, _2Z = ~~(($1.sbs.length + 1) / 2); _2Y < _2Z; _2Y++) {
			/*3719*/
			$k[$j++] = $1.height; /*3719*/
		} /*3719*/
		var _2b = $a(); /*3720*/
		$k[$j++] = Infinity; /*3721*/
		for (var _2d = 0, _2e = ~~(($1.sbs.length + 1) / 2); _2d < _2e; _2d++) {
			/*3720*/
			$k[$j++] = 0; /*3720*/
		} /*3720*/
		var _2f = $a(); /*3721*/
		$k[$j++] = 'ren'; /*3723*/
		$k[$j++] = $0.renlinear; /*3723*/
		$k[$j++] = 'sbs'; /*3723*/
		$k[$j++] = _2W; /*3723*/
		$k[$j++] = 'bhs'; /*3723*/
		$k[$j++] = _2b; /*3723*/
		$k[$j++] = 'bbs'; /*3723*/
		$k[$j++] = _2f; /*3723*/
		if ($1.includetext) { //no-else/*3723*/
			$k[$j++] = 'txt'; /*3722*/
			$k[$j++] = $1.txt; /*3722*/
		} /*3722*/
		$k[$j++] = 'opt'; /*3724*/
		$k[$j++] = $1.options; /*3724*/
		var _2j = $d(); /*3724*/
		$k[$j++] = _2j; /*3727*/
		if (!$1.dontdraw) { //no-else/*3727*/
			$0.renlinear(); /*3727*/
		} /*3727*/
	};
	$0.code39ext = function() {
		var $1 = {}; /*3757*/
		$1.options = $k[--$j]; /*3759*/
		$1.barcode = $k[--$j]; /*3760*/
		$1.dontdraw = false; /*3762*/
		$1.includetext = false; /*3763*/
		$1.parse = false; /*3764*/
		$forall($1.options, function() {
			/*3775*/
			var _3 = $k[--$j]; /*3775*/
			$1[$k[--$j]] = _3; /*3775*/
		}); /*3775*/
		$forall($1.barcode, function() {
			/*3803*/
			if ($k[--$j] >= 128) { //no-else/*3802*/
				$k[$j++] = 'bwipp.code39extBadCharacter'; /*3801*/
				$k[$j++] = "Code 39 Extended must contain only ASCII characters"; /*3801*/
				$0.raiseerror(); /*3801*/
			} /*3801*/
		}); /*3801*/
		$1.barlen = $1.barcode.length; /*3805*/
		$1.extencs = $a
		$1.newcode = $s($1.barlen * 2); /*3819*/
		$1.newtext = $s($1.barlen * 2); /*3820*/
		$1.j = 0; /*3821*/
		for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) {
			/*3829*/
			$1.i = _F; /*3823*/
			$1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); /*3824*/
			$puti($1.newcode, $1.j, $1.extchar); /*3825*/
			$put($1.newtext, $1.j, $get($1.barcode, $1.i)); /*3826*/
			if ($1.extchar.length != 1) { //no-else/*3827*/
				$puti($1.newtext, $1.j + 1, " "); /*3827*/
			} /*3827*/
			$1.j = $1.j + $1.extchar.length; /*3828*/
		} /*3828*/
		$1.newcode = $geti($1.newcode, 0, $1.j); /*3830*/
		$1.newtext = $geti($1.newtext, 0, $1.j); /*3831*/
		$put($1.options, "dontdraw", true); /*3834*/
		$k[$j++] = 'args'; /*3835*/
		$k[$j++] = $1.newcode; /*3835*/
		$k[$j++] = $1.options; /*3835*/
		$0.code39(); /*3835*/
		var _h = $k[--$j]; /*3835*/
		$1[$k[--$j]] = _h; /*3835*/
		if ($1.includetext) { //no-else/*3847*/
			$1.txt = $get($1.args, "txt"); /*3839*/
			for (var _o = 0, _n = $1.newtext.length - 1; _o <= _n; _o += 1) {
				/*3845*/
				$1.i = _o; /*3841*/
				$1.txtentry = $get($1.txt, $1.i + 1); /*3842*/
				$put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); /*3843*/
				$put($1.txt, $1.i + 1, $1.txtentry); /*3844*/
			} /*3844*/
			$put($1.args, "txt", $1.txt); /*3846*/
		} /*3846*/
		$put($1.args, "opt", $1.options); /*3848*/
		$k[$j++] = $1.args; /*3851*/
		if (!$1.dontdraw) { //no-else/*3851*/
			$0.renlinear(); /*3851*/
		} /*3851*/
	};
	$0.code32 = function() {
		var $1 = {}; /*3881*/
		$1.options = $k[--$j]; /*3883*/
		$1.barcode = $k[--$j]; /*3884*/
		$1.dontdraw = false; /*3886*/
		$1.includetext = false; /*3887*/
		$1.textfont = 'Courier'; /*3888*/
		$1.textsize = 10; /*3889*/
		$1.textyoffset = -8.5; /*3890*/
		$1.textxoffset = 0; /*3891*/
		$1.height = 1; /*3892*/
		$forall($1.options, function() {
			/*3903*/
			var _3 = $k[--$j]; /*3903*/
			$1[$k[--$j]] = _3; /*3903*/
		}); /*3903*/
		$1.textfont = "" + $1.textfont; /*3905*/
		$1.textsize = +$1.textsize; /*3906*/
		$1.textyoffset = +$1.textyoffset; /*3907*/
		$1.height = +$1.height; /*3908*/
		if (($1.barcode.length != 8) && ($1.barcode.length != 9)) { //no-else/*3913*/
			$k[$j++] = 'bwipp.code32badLength'; /*3912*/
			$k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; /*3912*/
			$0.raiseerror(); /*3912*/
		} /*3912*/
		$forall($1.barcode, function() {
			/*3918*/
			var _C = $k[--$j]; /*3915*/
			if ((_C < 48) || (_C > 57)) { //no-else/*3917*/
				$k[$j++] = 'bwipp.code32badCharacter'; /*3916*/
				$k[$j++] = "Italian Pharmacode must contain only digits"; /*3916*/
				$0.raiseerror(); /*3916*/
			} /*3916*/
		}); /*3916*/
		$1.checksum = 0; /*3921*/
		for (var _D = 0; _D <= 7; _D += 1) {
			/*3926*/
			$1.i = _D; /*3923*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*3924*/
			if (($1.i % 2) != 0) { //no-else/*3924*/
				var _I = $k[--$j]; /*3924*/
				$k[$j++] = _I * 2; /*3924*/
			} /*3924*/
			var _J = $k[--$j]; /*3924*/
			$k[$j++] = _J; /*3924*/
			if (_J > 9) { //no-else/*3924*/
				var _K = $k[--$j]; /*3924*/
				$k[$j++] = _K - 9; /*3924*/
			} /*3924*/
			$1.checksum = $k[--$j] + $1.checksum; /*3925*/
		} /*3925*/
		$1.checksum = $1.checksum % 10; /*3927*/
		if ($1.barcode.length == 9) { //no-else/*3932*/
			if ($get($1.barcode, 8) != ($1.checksum + 48)) { //no-else/*3931*/
				$k[$j++] = 'bwipp.code32badCheckDigit'; /*3930*/
				$k[$j++] = "Incorrect Italian Pharmacode check digit provided"; /*3930*/
				$0.raiseerror(); /*3930*/
			} /*3930*/
		} /*3930*/
		var _S = $s(10); /*3933*/
		$puti(_S, 0, $1.barcode); /*3934*/
		$put(_S, 8, $1.checksum + 48); /*3935*/
		$1.text = _S; /*3936*/
		$1.val = $cvrs($1.barcode, ~~$z($1.text), 32); /*3939*/
		$1.barcode = $s(6); /*3940*/
		for (var _Z = 0; _Z <= 5; _Z += 1) {
			/*3941*/
			$put($1.barcode, _Z, 48); /*3941*/
		} /*3941*/
		$puti($1.barcode, 6 - $1.val.length, $1.val); /*3942*/
		for (var _e = 0; _e <= 5; _e += 1) {
			/*3949*/
			var _g = $get($1.barcode, _e); /*3946*/
			$k[$j++] = _e; /*3947*/
			$k[$j++] = _g; /*3947*/
			$k[$j++] = _g; /*3947*/
			for (var _h = 0, _i = "AEIO".length; _h < _i; _h++) {
				/*3947*/
				if ($k[--$j] >= $get("AEIO", _h)) { //no-else/*3947*/
					var _l = $k[--$j]; /*3947*/
					$k[$j++] = _l + 1; /*3947*/
				} /*3947*/
				var _m = $k[--$j]; /*3947*/
				$k[$j++] = _m; /*3947*/
				$k[$j++] = _m; /*3947*/
			} /*3947*/
			$j--; /*3947*/
			var _o = $k[--$j]; /*3948*/
			$put($1.barcode, $k[--$j], _o); /*3948*/
		} /*3948*/
		$puti($1.text, 1, $geti($1.text, 0, 9)); /*3952*/
		$put($1.text, 0, 65); /*3953*/
		$put($1.options, "dontdraw", true); /*3956*/
		$k[$j++] = 'args'; /*3957*/
		$k[$j++] = $1.barcode; /*3957*/
		$k[$j++] = $1.options; /*3957*/
		$0.code39(); /*3957*/
		var _x = $k[--$j]; /*3957*/
		$1[$k[--$j]] = _x; /*3957*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*3959*/
		$put($1.args, "textxalign", "center"); /*3960*/
		$put($1.args, "opt", $1.options); /*3961*/
		$k[$j++] = $1.args; /*3964*/
		if (!$1.dontdraw) { //no-else/*3964*/
			$0.renlinear(); /*3964*/
		} /*3964*/
	};
	$0.pzn = function() {
		var $1 = {}; /*3994*/
		$1.options = $k[--$j]; /*3996*/
		$1.barcode = $k[--$j]; /*3997*/
		$1.dontdraw = false; /*3999*/
		$1.includetext = false; /*4000*/
		$1.textfont = 'Courier'; /*4001*/
		$1.textsize = 10; /*4002*/
		$1.textyoffset = -8.5; /*4003*/
		$1.textxoffset = 0; /*4004*/
		$1.height = 1; /*4005*/
		$1.pzn8 = false; /*4006*/
		$forall($1.options, function() {
			/*4017*/
			var _3 = $k[--$j]; /*4017*/
			$1[$k[--$j]] = _3; /*4017*/
		}); /*4017*/
		$1.textfont = "" + $1.textfont; /*4019*/
		$1.textsize = +$1.textsize; /*4020*/
		$1.textyoffset = +$1.textyoffset; /*4021*/
		$1.textxoffset = +$1.textxoffset; /*4022*/
		$1.height = +$1.height; /*4023*/
		if ($1.pzn8) {
			/*4032*/
			if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //no-else/*4029*/
				$k[$j++] = 'bwipp.pzn8badLength'; /*4028*/
				$k[$j++] = "PZN8 must be 7 or 8 digits"; /*4028*/
				$0.raiseerror(); /*4028*/
			} /*4028*/
		} else {
			/*4032*/
			if (($1.barcode.length != 6) && ($1.barcode.length != 7)) { //no-else/*4033*/
				$k[$j++] = 'bwipp.pzn7badLength'; /*4032*/
				$k[$j++] = "PZN7 must be 6 or 7 digits"; /*4032*/
				$0.raiseerror(); /*4032*/
			} /*4032*/
		} /*4032*/
		$forall($1.barcode, function() {
			/*4039*/
			var _G = $k[--$j]; /*4036*/
			if ((_G < 48) || (_G > 57)) { //no-else/*4038*/
				$k[$j++] = 'bwipp.pznBadCharacter'; /*4037*/
				$k[$j++] = "PZN must contain only digits"; /*4037*/
				$0.raiseerror(); /*4037*/
			} /*4037*/
		}); /*4037*/
		var _I = $1.pzn8 ? 9 : 8; /*4042*/
		$1.msglen = _I; /*4042*/
		$1.checksum = 0; /*4043*/
		for (var _L = 0, _K = $1.msglen - 3; _L <= _K; _L += 1) {
			/*4048*/
			$1.i = _L; /*4045*/
			var _R = $1.pzn8 ? 1 : 2; /*4046*/
			$1.checksum = (($get($1.barcode, $1.i) - 48) * ($1.i + _R)) + $1.checksum; /*4047*/
		} /*4047*/
		$1.checksum = $1.checksum % 11; /*4049*/
		if ($1.checksum == 10) { //no-else/*4052*/
			$k[$j++] = 'bwipp.pznBadInputSequence'; /*4051*/
			$k[$j++] = "Incorrect PZN input sequence provided"; /*4051*/
			$0.raiseerror(); /*4051*/
		} /*4051*/
		if ($1.barcode.length == ($1.msglen - 1)) { //no-else/*4057*/
			if ($get($1.barcode, $1.msglen - 2) != ($1.checksum + 48)) { //no-else/*4056*/
				$k[$j++] = 'bwipp.pznBadCheckDigit'; /*4055*/
				$k[$j++] = "Incorrect PZN check digit provided"; /*4055*/
				$0.raiseerror(); /*4055*/
			} /*4055*/
		} /*4055*/
		var _c = $s($1.msglen); /*4058*/
		$put(_c, 0, 45); /*4059*/
		$puti(_c, 1, $1.barcode); /*4060*/
		$put(_c, $1.msglen - 1, $1.checksum + 48); /*4061*/
		$1.msg = _c; /*4062*/
		$put($1.options, "dontdraw", true); /*4065*/
		$k[$j++] = 'args'; /*4066*/
		$k[$j++] = $1.msg; /*4066*/
		$k[$j++] = $1.options; /*4066*/
		$0.code39(); /*4066*/
		var _j = $k[--$j]; /*4066*/
		$1[$k[--$j]] = _j; /*4066*/
		$1.text = $s($1.msglen + 5); /*4069*/
		$puti($1.text, 0, "PZN - "); /*4070*/
		$puti($1.text, 6, $geti($1.msg, 1, $1.msglen - 1)); /*4071*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4073*/
		$put($1.args, "textxalign", "center"); /*4074*/
		$put($1.args, "opt", $1.options); /*4075*/
		$k[$j++] = $1.args; /*4078*/
		if (!$1.dontdraw) { //no-else/*4078*/
			$0.renlinear(); /*4078*/
		} /*4078*/
	};
	$0.code93 = function() {
		var $1 = {}; /*4107*/
		$1.options = $k[--$j]; /*4109*/
		$1.barcode = $k[--$j]; /*4110*/
		$1.dontdraw = false; /*4112*/
		$1.includecheck = false; /*4113*/
		$1.includetext = false; /*4114*/
		$1.textfont = 'Courier'; /*4115*/
		$1.textsize = 10; /*4116*/
		$1.textyoffset = -8.5; /*4117*/
		$1.height = 1; /*4118*/
		$1.parsefnc = false; /*4119*/
		$forall($1.options, function() {
			/*4130*/
			var _3 = $k[--$j]; /*4130*/
			$1[$k[--$j]] = _3; /*4130*/
		}); /*4130*/
		$1.textfont = "" + $1.textfont; /*4132*/
		$1.textsize = +$1.textsize; /*4133*/
		$1.textyoffset = +$1.textyoffset; /*4134*/
		$1.height = +$1.height; /*4135*/
		$1.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); /*4148*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*4151*/
		$1.barlen = $1.barcode.length; /*4153*/
		$1.sft1 = -1; /*4156*/
		$1.sft2 = -2; /*4156*/
		$1.sft3 = -3; /*4156*/
		$1.sft4 = -4; /*4156*/
		var _F = new Map([
			["SFT$", $1.sft1],
			["SFT%", $1.sft2],
			["SFT/", $1.sft3],
			["SFT+", $1.sft4]
		]); /*4161*/
		$1.fncvals = _F; /*4162*/
		$1.msg = $a($1.barlen); /*4165*/
		$1.i = 0; /*4166*/
		$1.j = 0; /*4166*/
		for (;;) {
			/*4180*/
			if ($1.i == $1.barlen) { //no-else/*4167*/
				break; /*4167*/
			} /*4167*/
			$1.char = $get($1.barcode, $1.i); /*4168*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*4176*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*4174*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*4171*/
					$1.i = $1.i + 4; /*4172*/
				} else {
					/*4174*/
					$1.i = $1.i + 1; /*4174*/
				} /*4174*/
			} /*4174*/
			$put($1.msg, $1.j, $1.char); /*4177*/
			$1.i = $1.i + 1; /*4178*/
			$1.j = $1.j + 1; /*4179*/
		} /*4179*/
		$1.msg = $geti($1.msg, 0, $1.j); /*4181*/
		$1.msglen = $1.msg.length; /*4182*/
		if ($1.includecheck) {
			/*4187*/
			$1.sbs = $s(($1.msglen * 6) + 25); /*4185*/
		} else {
			/*4187*/
			$1.sbs = $s(($1.msglen * 6) + 13); /*4187*/
		} /*4187*/
		$1.txt = $a($1.msglen); /*4189*/
		$puti($1.sbs, 0, $get($1.encs, 47)); /*4192*/
		$1.checksum1 = 0; /*4194*/
		$1.checksum2 = 0; /*4194*/
		for (var _w = 0, _v = $1.msglen - 1; _w <= _v; _w += 1) {
			/*4213*/
			$1.i = _w; /*4196*/
			var _z = $get($1.msg, $1.i); /*4198*/
			$k[$j++] = _z; /*4207*/
			if (_z < 0) {
				/*4206*/
				$1.indx = 42 - $k[--$j]; /*4199*/
				$1.char = " "; /*4200*/
			} else {
				/*4206*/
				var _11 = $s(1); /*4202*/
				$put(_11, 0, $k[--$j]); /*4202*/
				$1.char = _11; /*4202*/
				$search($1.barchars, $1.char); /*4203*/
				$j--; /*4204*/
				$1.indx = $k[--$j].length; /*4205*/
				$j -= 2; /*4206*/
			} /*4206*/
			$1.enc = $get($1.encs, $1.indx); /*4208*/
			$puti($1.sbs, ($1.i * 6) + 6, $1.enc); /*4209*/
			$put($1.txt, $1.i, $a([$1.char, ($1.i * 9) + 9, $1.textyoffset, $1.textfont, $1.textsize])); /*4210*/
			$1.checksum1 = $1.checksum1 + ((((($1.msglen - $1.i) - 1) % 20) + 1) * $1.indx); /*4211*/
			$1.checksum2 = $1.checksum2 + (((($1.msglen - $1.i) % 15) + 1) * $1.indx); /*4212*/
		} /*4212*/
		if ($1.includecheck) {
			/*4225*/
			$1.checksum1 = $1.checksum1 % 47; /*4217*/
			$1.checksum2 = ($1.checksum2 + $1.checksum1) % 47; /*4218*/
			$puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, $1.checksum1)); /*4219*/
			$puti($1.sbs, ($1.msglen * 6) + 12, $get($1.encs, $1.checksum2)); /*4220*/
			$puti($1.sbs, ($1.msglen * 6) + 18, $get($1.encs, 48)); /*4222*/
		} else {
			/*4225*/
			$puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, 48)); /*4225*/
		} /*4225*/
		$k[$j++] = Infinity; /*4237*/
		$k[$j++] = Infinity; /*4232*/
		var _1o = $1.sbs; /*4231*/
		for (var _1p = 0, _1q = _1o.length; _1p < _1q; _1p++) {
			/*4231*/
			$k[$j++] = $get(_1o, _1p) - 48; /*4231*/
		} /*4231*/
		var _1s = $a(); /*4232*/
		$k[$j++] = Infinity; /*4233*/
		for (var _1u = 0, _1v = ~~(($1.sbs.length + 1) / 2); _1u < _1v; _1u++) {
			/*4232*/
			$k[$j++] = $1.height; /*4232*/
		} /*4232*/
		var _1x = $a(); /*4233*/
		$k[$j++] = Infinity; /*4234*/
		for (var _1z = 0, _20 = ~~(($1.sbs.length + 1) / 2); _1z < _20; _1z++) {
			/*4233*/
			$k[$j++] = 0; /*4233*/
		} /*4233*/
		var _21 = $a(); /*4234*/
		$k[$j++] = 'ren'; /*4236*/
		$k[$j++] = $0.renlinear; /*4236*/
		$k[$j++] = 'sbs'; /*4236*/
		$k[$j++] = _1s; /*4236*/
		$k[$j++] = 'bhs'; /*4236*/
		$k[$j++] = _1x; /*4236*/
		$k[$j++] = 'bbs'; /*4236*/
		$k[$j++] = _21; /*4236*/
		if ($1.includetext) { //no-else/*4236*/
			$k[$j++] = 'txt'; /*4235*/
			$k[$j++] = $1.txt; /*4235*/
		} /*4235*/
		$k[$j++] = 'opt'; /*4237*/
		$k[$j++] = $1.options; /*4237*/
		var _25 = $d(); /*4237*/
		$k[$j++] = _25; /*4240*/
		if (!$1.dontdraw) { //no-else/*4240*/
			$0.renlinear(); /*4240*/
		} /*4240*/
	};
	$0.code93ext = function() {
		var $1 = {}; /*4270*/
		$1.options = $k[--$j]; /*4272*/
		$1.barcode = $k[--$j]; /*4273*/
		$1.dontdraw = false; /*4275*/
		$1.includetext = false; /*4276*/
		$1.parse = false; /*4277*/
		$forall($1.options, function() {
			/*4288*/
			var _3 = $k[--$j]; /*4288*/
			$1[$k[--$j]] = _3; /*4288*/
		}); /*4288*/
		$1.barlen = $1.barcode.length; /*4311*/
		$1.extencs = $a
		$1.newcode = $s($1.barlen * 6); /*4333*/
		$1.newtext = $s($1.barlen * 6); /*4334*/
		$1.j = 0; /*4335*/
		$1.k = 0; /*4335*/
		for (var _D = 0, _C = $1.barlen - 1; _D <= _C; _D += 1) {
			/*4345*/
			$1.i = _D; /*4337*/
			$1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); /*4338*/
			$1.extlen = $1.extchar.length; /*4339*/
			$puti($1.newcode, $1.j, $1.extchar); /*4340*/
			$put($1.newtext, $1.k, $get($1.barcode, $1.i)); /*4341*/
			if ($1.extlen != 1) { //no-else/*4342*/
				$puti($1.newtext, $1.k + 1, " "); /*4342*/
			} /*4342*/
			$1.j = $1.j + $1.extlen; /*4343*/
			var _Z = ($1.extlen == 1) ? 1 : 2; /*4344*/
			$1.k = $1.k + _Z; /*4344*/
		} /*4344*/
		$1.newcode = $geti($1.newcode, 0, $1.j); /*4346*/
		$1.newtext = $geti($1.newtext, 0, $1.k); /*4347*/
		$put($1.options, "dontdraw", true); /*4350*/
		$put($1.options, "parsefnc", true); /*4351*/
		$k[$j++] = 'args'; /*4352*/
		$k[$j++] = $1.newcode; /*4352*/
		$k[$j++] = $1.options; /*4352*/
		$0.code93(); /*4352*/
		var _k = $k[--$j]; /*4352*/
		$1[$k[--$j]] = _k; /*4352*/
		if ($1.includetext) { //no-else/*4364*/
			$1.txt = $get($1.args, "txt"); /*4356*/
			for (var _r = 0, _q = $1.newtext.length - 1; _r <= _q; _r += 1) {
				/*4362*/
				$1.i = _r; /*4358*/
				$1.txtentry = $get($1.txt, $1.i); /*4359*/
				$put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); /*4360*/
				$put($1.txt, $1.i, $1.txtentry); /*4361*/
			} /*4361*/
			$put($1.args, "txt", $1.txt); /*4363*/
		} /*4363*/
		$put($1.args, "opt", $1.options); /*4365*/
		$k[$j++] = $1.args; /*4368*/
		if (!$1.dontdraw) { //no-else/*4368*/
			$0.renlinear(); /*4368*/
		} /*4368*/
	};
	$0.interleaved2of5 = function() {
		var $1 = {}; /*4397*/
		$1.options = $k[--$j]; /*4399*/
		$1.barcode = $k[--$j]; /*4400*/
		$1.dontdraw = false; /*4402*/
		$1.includecheck = false; /*4403*/
		$1.includetext = false; /*4404*/
		$1.includecheckintext = false; /*4405*/
		$1.textfont = 'Courier'; /*4406*/
		$1.textsize = 10; /*4407*/
		$1.textyoffset = -8.5; /*4408*/
		$1.height = 1; /*4409*/
		$forall($1.options, function() {
			/*4420*/
			var _3 = $k[--$j]; /*4420*/
			$1[$k[--$j]] = _3; /*4420*/
		}); /*4420*/
		$1.textfont = "" + $1.textfont; /*4422*/
		$1.textsize = +$1.textsize; /*4423*/
		$1.textyoffset = +$1.textyoffset; /*4424*/
		$1.height = +$1.height; /*4425*/
		$forall($1.barcode, function() {
			/*4432*/
			var _A = $k[--$j]; /*4429*/
			if ((_A < 48) || (_A > 57)) { //no-else/*4431*/
				$k[$j++] = 'bwipp.interleaved2of5badCharacter'; /*4430*/
				$k[$j++] = "Interleaved 2 of 5 must contain only digits"; /*4430*/
				$0.raiseerror(); /*4430*/
			} /*4430*/
		}); /*4430*/
		$1.barlen = $1.barcode.length; /*4434*/
		if (((($1.barlen % 2) == 0) && $1.includecheck) || ((($1.barlen % 2) != 0) && (!$1.includecheck))) { //no-else/*4445*/
			$1.pad = $s($1.barlen + 1); /*4440*/
			$put($1.pad, 0, 48); /*4441*/
			$puti($1.pad, 1, $1.barcode); /*4442*/
			$1.barcode = $1.pad; /*4443*/
			$1.barlen = $1.barlen + 1; /*4444*/
		} /*4444*/
		if ($1.includecheck) { //no-else/*4464*/
			$1.checksum = 0; /*4449*/
			for (var _Q = 0, _P = $1.barlen - 1; _Q <= _P; _Q += 1) {
				/*4457*/
				$1.i = _Q; /*4451*/
				if (($1.i % 2) == 0) {
					/*4455*/
					$1.checksum = $1.checksum + (($get($1.barcode, $1.i) - 48) * 3); /*4453*/
				} else {
					/*4455*/
					$1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); /*4455*/
				} /*4455*/
			} /*4455*/
			$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4458*/
			$1.pad = $s($1.barlen + 1); /*4459*/
			$puti($1.pad, 0, $1.barcode); /*4460*/
			$put($1.pad, $1.barlen, $1.checksum + 48); /*4461*/
			$1.barcode = $1.pad; /*4462*/
			$1.barlen = $1.barlen + 1; /*4463*/
		} /*4463*/
		$1.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); /*4471*/
		$1.barchars = "0123456789"; /*4474*/
		$1.sbs = $s(($1.barlen * 5) + 8); /*4475*/
		$1.txt = $a($1.barlen); /*4476*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*4479*/
		for (var _u = 0, _t = $1.barlen - 1; _u <= _t; _u += 2) {
			/*4513*/
			$1.i = _u; /*4482*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*4484*/
			$j--; /*4485*/
			$1.indx = $k[--$j].length; /*4486*/
			$j -= 2; /*4487*/
			$1.enca = $get($1.encs, $1.indx); /*4488*/
			$search($1.barchars, $geti($1.barcode, $1.i + 1, 1)); /*4490*/
			$j--; /*4491*/
			$1.indx = $k[--$j].length; /*4492*/
			$j -= 2; /*4493*/
			$1.encb = $get($1.encs, $1.indx); /*4494*/
			$1.intl = $s($1.enca.length * 2); /*4497*/
			for (var _1F = 0, _1E = $1.enca.length - 1; _1F <= _1E; _1F += 1) {
				/*4504*/
				$1.j = _1F; /*4499*/
				$1.achar = $get($1.enca, $1.j); /*4500*/
				$1.bchar = $get($1.encb, $1.j); /*4501*/
				$put($1.intl, $1.j * 2, $1.achar); /*4502*/
				$put($1.intl, ($1.j * 2) + 1, $1.bchar); /*4503*/
			} /*4503*/
			$puti($1.sbs, ($1.i * 5) + 4, $1.intl); /*4506*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*4507*/
			if (($1.includecheck && (!$1.includecheckintext)) && (($1.barlen - 2) == $1.i)) {
				/*4511*/
				$put($1.txt, $1.i + 1, $a([" ", (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*4509*/
			} else {
				/*4511*/
				$put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i + 1, 1), (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); /*4511*/
			} /*4511*/
		} /*4511*/
		$puti($1.sbs, ($1.barlen * 5) + 4, $get($1.encs, 11)); /*4516*/
		$k[$j++] = Infinity; /*4529*/
		$k[$j++] = Infinity; /*4522*/
		var _24 = $1.sbs; /*4521*/
		for (var _25 = 0, _26 = _24.length; _25 < _26; _25++) {
			/*4521*/
			$k[$j++] = $get(_24, _25) - 48; /*4521*/
		} /*4521*/
		var _28 = $a(); /*4522*/
		$k[$j++] = Infinity; /*4523*/
		for (var _2A = 0, _2B = ~~(($1.sbs.length + 1) / 2); _2A < _2B; _2A++) {
			/*4522*/
			$k[$j++] = $1.height; /*4522*/
		} /*4522*/
		var _2D = $a(); /*4523*/
		$k[$j++] = Infinity; /*4524*/
		for (var _2F = 0, _2G = ~~(($1.sbs.length + 1) / 2); _2F < _2G; _2F++) {
			/*4523*/
			$k[$j++] = 0; /*4523*/
		} /*4523*/
		var _2H = $a(); /*4524*/
		$k[$j++] = 'ren'; /*4526*/
		$k[$j++] = $0.renlinear; /*4526*/
		$k[$j++] = 'sbs'; /*4526*/
		$k[$j++] = _28; /*4526*/
		$k[$j++] = 'bhs'; /*4526*/
		$k[$j++] = _2D; /*4526*/
		$k[$j++] = 'bbs'; /*4526*/
		$k[$j++] = _2H; /*4526*/
		if ($1.includetext) { //no-else/*4526*/
			$k[$j++] = 'txt'; /*4525*/
			$k[$j++] = $1.txt; /*4525*/
		} /*4525*/
		$k[$j++] = 'barratio'; /*4529*/
		$k[$j++] = 2; /*4529*/
		$k[$j++] = 'spaceratio'; /*4529*/
		$k[$j++] = 2; /*4529*/
		$k[$j++] = 'opt'; /*4529*/
		$k[$j++] = $1.options; /*4529*/
		var _2L = $d(); /*4529*/
		$k[$j++] = _2L; /*4532*/
		if (!$1.dontdraw) { //no-else/*4532*/
			$0.renlinear(); /*4532*/
		} /*4532*/
	};
	$0.itf14 = function() {
		var $1 = {}; /*4562*/
		$1.options = $k[--$j]; /*4564*/
		$1.barcode = $k[--$j]; /*4565*/
		$1.dontdraw = false; /*4567*/
		$1.includetext = false; /*4568*/
		$1.includecheckintext = true; /*4569*/
		$1.textfont = 'Courier'; /*4570*/
		$1.textsize = 10; /*4571*/
		$1.textxoffset = 0; /*4572*/
		$1.textyoffset = 3; /*4573*/
		$1.height = 0.5; /*4574*/
		$1.showborder = true; /*4575*/
		$1.borderwidth = 4; /*4576*/
		$1.borderleft = 15; /*4577*/
		$1.borderright = 15; /*4578*/
		$forall($1.options, function() {
			/*4589*/
			var _3 = $k[--$j]; /*4589*/
			$1[$k[--$j]] = _3; /*4589*/
		}); /*4589*/
		$1.textfont = "" + $1.textfont; /*4591*/
		$1.textsize = +$1.textsize; /*4592*/
		$1.textxoffset = +$1.textxoffset; /*4593*/
		$1.textyoffset = +$1.textyoffset; /*4594*/
		$1.height = +$1.height; /*4595*/
		$1.borderwidth = +$1.borderwidth; /*4596*/
		$1.borderleft = +$1.borderleft; /*4597*/
		$1.borderright = +$1.borderright; /*4598*/
		$1.text = $1.barcode; /*4601*/
		var _E = $1.barcode; /*4602*/
		$k[$j++] = $s(_E.length); /*4603*/
		$k[$j++] = 0; /*4603*/
		$forall(_E, function() {
			/*4603*/
			var _G = $k[--$j]; /*4603*/
			$k[$j++] = _G; /*4603*/
			if (_G != 32) {
				/*4603*/
				var _H = $k[--$j]; /*4603*/
				var _I = $k[--$j]; /*4603*/
				var _J = $k[--$j]; /*4603*/
				$put(_J, _I, _H); /*4603*/
				$k[$j++] = _J; /*4603*/
				$k[$j++] = _I + 1; /*4603*/
			} else {
				/*4603*/
				$j--; /*4603*/
			} /*4603*/
		}); /*4603*/
		var _K = $k[--$j]; /*4604*/
		$1.barcode = $geti($k[--$j], 0, _K); /*4604*/
		$1.hasspace = $1.text.length != $1.barcode.length; /*4605*/
		if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //no-else/*4610*/
			$k[$j++] = 'bwipp.itf14badLength'; /*4609*/
			$k[$j++] = "ITF-14 must be 13 or 14 digits"; /*4609*/
			$0.raiseerror(); /*4609*/
		} /*4609*/
		$forall($1.barcode, function() {
			/*4615*/
			var _S = $k[--$j]; /*4612*/
			if ((_S < 48) || (_S > 57)) { //no-else/*4614*/
				$k[$j++] = 'bwipp.itf14badCharacter'; /*4613*/
				$k[$j++] = "ITF-14 must contain only digits"; /*4613*/
				$0.raiseerror(); /*4613*/
			} /*4613*/
		}); /*4613*/
		$1.checksum = 0; /*4618*/
		for (var _T = 0; _T <= 12; _T += 1) {
			/*4622*/
			$1.i = _T; /*4620*/
			$k[$j++] = 'checksum'; /*4621*/
			$k[$j++] = $1.checksum; /*4621*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*4621*/
			if (($1.i % 2) == 0) { //no-else/*4621*/
				var _Z = $k[--$j]; /*4621*/
				$k[$j++] = _Z * 3; /*4621*/
			} /*4621*/
			var _a = $k[--$j]; /*4621*/
			var _b = $k[--$j]; /*4621*/
			$1[$k[--$j]] = _b + _a; /*4621*/
		} /*4621*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4623*/
		if ($1.barcode.length == 14) {
			/*4637*/
			if ($get($1.barcode, 13) != ($1.checksum + 48)) { //no-else/*4627*/
				$k[$j++] = 'bwipp.itf14badCheckDigit'; /*4626*/
				$k[$j++] = "Incorrect ITF-14 check digit provided"; /*4626*/
				$0.raiseerror(); /*4626*/
			} /*4626*/
		} else {
			/*4637*/
			var _i = $s(14); /*4629*/
			$puti(_i, 0, $1.barcode); /*4630*/
			$put(_i, 13, $1.checksum + 48); /*4631*/
			$1.barcode = _i; /*4632*/
			var _n = $1.hasspace ? 2 : 1; /*4633*/
			var _o = $s($1.text.length + _n); /*4633*/
			$puti(_o, _o.length - 2, " "); /*4634*/
			$put(_o, _o.length - 1, $1.checksum + 48); /*4635*/
			$puti(_o, 0, $1.text); /*4636*/
			$1.text = _o; /*4637*/
		} /*4637*/
		$put($1.options, "dontdraw", true); /*4641*/
		$put($1.options, "showborder", $1.showborder); /*4642*/
		$put($1.options, "borderwidth", $1.borderwidth); /*4643*/
		$put($1.options, "borderleft", $1.borderleft); /*4644*/
		$put($1.options, "borderright", $1.borderright); /*4645*/
		$put($1.options, "height", $1.height); /*4646*/
		$put($1.options, "textyoffset", $1.textyoffset); /*4647*/
		$k[$j++] = 'args'; /*4648*/
		$k[$j++] = $1.barcode; /*4648*/
		$k[$j++] = $1.options; /*4648*/
		$0.interleaved2of5(); /*4648*/
		var _16 = $k[--$j]; /*4648*/
		$1[$k[--$j]] = _16; /*4648*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4650*/
		$put($1.args, "textxalign", "center"); /*4651*/
		$put($1.args, "opt", $1.options); /*4652*/
		$k[$j++] = $1.args; /*4655*/
		if (!$1.dontdraw) { //no-else/*4655*/
			$0.renlinear(); /*4655*/
		} /*4655*/
	};
	$0.identcode = function() {
		var $1 = {}; /*4685*/
		$1.options = $k[--$j]; /*4687*/
		$1.barcode = $k[--$j]; /*4688*/
		$1.dontdraw = false; /*4690*/
		$1.includetext = false; /*4691*/
		$1.textfont = 'Courier'; /*4692*/
		$1.textsize = 10; /*4693*/
		$1.textxoffset = 0; /*4694*/
		$1.textyoffset = -8.5; /*4695*/
		$1.height = 1; /*4696*/
		$forall($1.options, function() {
			/*4707*/
			var _3 = $k[--$j]; /*4707*/
			$1[$k[--$j]] = _3; /*4707*/
		}); /*4707*/
		$1.textfont = "" + $1.textfont; /*4709*/
		$1.textsize = +$1.textsize; /*4710*/
		$1.textxoffset = +$1.textxoffset; /*4711*/
		$1.textyoffset = +$1.textyoffset; /*4712*/
		$1.height = +$1.height; /*4713*/
		if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //no-else/*4718*/
			$k[$j++] = 'bwipp.identcodeBadLength'; /*4717*/
			$k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; /*4717*/
			$0.raiseerror(); /*4717*/
		} /*4717*/
		$forall($1.barcode, function() {
			/*4723*/
			var _D = $k[--$j]; /*4720*/
			if ((_D < 48) || (_D > 57)) { //no-else/*4722*/
				$k[$j++] = 'bwipp.identcodeBadCharacter'; /*4721*/
				$k[$j++] = "Deutsche Post Identcode must contain only digits"; /*4721*/
				$0.raiseerror(); /*4721*/
			} /*4721*/
		}); /*4721*/
		$1.checksum = 0; /*4726*/
		for (var _E = 0; _E <= 10; _E += 1) {
			/*4730*/
			$1.i = _E; /*4728*/
			$k[$j++] = 'checksum'; /*4729*/
			$k[$j++] = $1.checksum; /*4729*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*4729*/
			if (($1.i % 2) == 0) {
				/*4729*/
				var _K = $k[--$j]; /*4729*/
				$k[$j++] = _K * 4; /*4729*/
			} else {
				/*4729*/
				var _L = $k[--$j]; /*4729*/
				$k[$j++] = _L * 9; /*4729*/
			} /*4729*/
			var _M = $k[--$j]; /*4729*/
			var _N = $k[--$j]; /*4729*/
			$1[$k[--$j]] = _N + _M; /*4729*/
		} /*4729*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4731*/
		if ($1.barcode.length == 12) { //no-else/*4736*/
			if ($get($1.barcode, 11) != ($1.checksum + 48)) { //no-else/*4735*/
				$k[$j++] = 'bwipp.identcodeBadCheckDigit'; /*4734*/
				$k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; /*4734*/
				$0.raiseerror(); /*4734*/
			} /*4734*/
		} /*4734*/
		var _U = $s(12); /*4737*/
		$puti(_U, 0, $1.barcode); /*4738*/
		$put(_U, 11, $1.checksum + 48); /*4739*/
		$1.barcode = _U; /*4740*/
		$1.text = $strcpy($s(16), "  .       .     "); /*4743*/
		$puti($1.text, 0, $geti($1.barcode, 0, 2)); /*4744*/
		$puti($1.text, 3, $geti($1.barcode, 2, 3)); /*4745*/
		$puti($1.text, 7, $geti($1.barcode, 5, 3)); /*4746*/
		$puti($1.text, 11, $geti($1.barcode, 8, 3)); /*4747*/
		$puti($1.text, 15, $geti($1.barcode, 11, 1)); /*4748*/
		$put($1.options, "dontdraw", true); /*4751*/
		$put($1.options, "includecheck", false); /*4752*/
		$k[$j++] = 'args'; /*4753*/
		$k[$j++] = $1.barcode; /*4753*/
		$k[$j++] = $1.options; /*4753*/
		$0.interleaved2of5(); /*4753*/
		var _s = $k[--$j]; /*4753*/
		$1[$k[--$j]] = _s; /*4753*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4755*/
		$put($1.args, "textxalign", "center"); /*4756*/
		$put($1.args, "opt", $1.options); /*4757*/
		$k[$j++] = $1.args; /*4760*/
		if (!$1.dontdraw) { //no-else/*4760*/
			$0.renlinear(); /*4760*/
		} /*4760*/
	};
	$0.leitcode = function() {
		var $1 = {}; /*4790*/
		$1.options = $k[--$j]; /*4792*/
		$1.barcode = $k[--$j]; /*4793*/
		$1.dontdraw = false; /*4795*/
		$1.includetext = false; /*4796*/
		$1.textfont = 'Courier'; /*4797*/
		$1.textsize = 10; /*4798*/
		$1.textxoffset = 0; /*4799*/
		$1.textyoffset = -8.5; /*4800*/
		$1.height = 1; /*4801*/
		$forall($1.options, function() {
			/*4812*/
			var _3 = $k[--$j]; /*4812*/
			$1[$k[--$j]] = _3; /*4812*/
		}); /*4812*/
		$1.textfont = "" + $1.textfont; /*4814*/
		$1.textsize = +$1.textsize; /*4815*/
		$1.textxoffset = +$1.textxoffset; /*4816*/
		$1.textyoffset = +$1.textyoffset; /*4817*/
		$1.height = +$1.height; /*4818*/
		if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //no-else/*4823*/
			$k[$j++] = 'bwipp.leitcodeBadLength'; /*4822*/
			$k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; /*4822*/
			$0.raiseerror(); /*4822*/
		} /*4822*/
		$forall($1.barcode, function() {
			/*4828*/
			var _D = $k[--$j]; /*4825*/
			if ((_D < 48) || (_D > 57)) { //no-else/*4827*/
				$k[$j++] = 'bwipp.leitcodeBadCharacter'; /*4826*/
				$k[$j++] = "Deutsche Post Leitcode must contain only digits"; /*4826*/
				$0.raiseerror(); /*4826*/
			} /*4826*/
		}); /*4826*/
		$1.checksum = 0; /*4831*/
		for (var _E = 0; _E <= 12; _E += 1) {
			/*4835*/
			$1.i = _E; /*4833*/
			$k[$j++] = 'checksum'; /*4834*/
			$k[$j++] = $1.checksum; /*4834*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*4834*/
			if (($1.i % 2) == 0) {
				/*4834*/
				var _K = $k[--$j]; /*4834*/
				$k[$j++] = _K * 4; /*4834*/
			} else {
				/*4834*/
				var _L = $k[--$j]; /*4834*/
				$k[$j++] = _L * 9; /*4834*/
			} /*4834*/
			var _M = $k[--$j]; /*4834*/
			var _N = $k[--$j]; /*4834*/
			$1[$k[--$j]] = _N + _M; /*4834*/
		} /*4834*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4836*/
		if ($1.barcode.length == 14) { //no-else/*4841*/
			if ($get($1.barcode, 13) != ($1.checksum + 48)) { //no-else/*4840*/
				$k[$j++] = 'bwipp.leitcodeBadCheckDigit'; /*4839*/
				$k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; /*4839*/
				$0.raiseerror(); /*4839*/
			} /*4839*/
		} /*4839*/
		var _U = $s(14); /*4842*/
		$puti(_U, 0, $1.barcode); /*4843*/
		$put(_U, 13, $1.checksum + 48); /*4844*/
		$1.barcode = _U; /*4845*/
		$1.text = $strcpy($s(18), "     .   .   .    "); /*4848*/
		$puti($1.text, 0, $geti($1.barcode, 0, 5)); /*4849*/
		$puti($1.text, 6, $geti($1.barcode, 5, 3)); /*4850*/
		$puti($1.text, 10, $geti($1.barcode, 8, 3)); /*4851*/
		$puti($1.text, 14, $geti($1.barcode, 11, 2)); /*4852*/
		$puti($1.text, 17, $geti($1.barcode, 13, 1)); /*4853*/
		$put($1.options, "dontdraw", true); /*4856*/
		$put($1.options, "includecheck", false); /*4857*/
		$k[$j++] = 'args'; /*4858*/
		$k[$j++] = $1.barcode; /*4858*/
		$k[$j++] = $1.options; /*4858*/
		$0.interleaved2of5(); /*4858*/
		var _s = $k[--$j]; /*4858*/
		$1[$k[--$j]] = _s; /*4858*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*4860*/
		$put($1.args, "textxalign", "center"); /*4861*/
		$put($1.args, "opt", $1.options); /*4862*/
		$k[$j++] = $1.args; /*4865*/
		if (!$1.dontdraw) { //no-else/*4865*/
			$0.renlinear(); /*4865*/
		} /*4865*/
	};
	$0.databaromni = function() {
		var $1 = {}; /*4895*/
		$1.options = $k[--$j]; /*4897*/
		$1.barcode = $k[--$j]; /*4898*/
		$1.dontdraw = false; /*4900*/
		$1.height = 33 / 72; /*4901*/
		$1.linkage = false; /*4902*/
		$1.format = "omni"; /*4903*/
		$1.barxmult = 33; /*4904*/
		$forall($1.options, function() {
			/*4915*/
			var _3 = $k[--$j]; /*4915*/
			$1[$k[--$j]] = _3; /*4915*/
		}); /*4915*/
		if ($eq($1.format, "truncated")) { //no-else/*4917*/
			$1.height = 13 / 72; /*4917*/
		} /*4917*/
		$1.height = +$1.height; /*4918*/
		$1.barxmult = ~~$1.barxmult; /*4919*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*4924*/
			$k[$j++] = 'bwipp.databaromniBadAI'; /*4923*/
			$k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; /*4923*/
			$0.raiseerror(); /*4923*/
		} /*4923*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*4927*/
			$k[$j++] = 'bwipp.databaromniBadLength'; /*4926*/
			$k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; /*4926*/
			$0.raiseerror(); /*4926*/
		} /*4926*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*4932*/
			var _F = $k[--$j]; /*4929*/
			if ((_F < 48) || (_F > 57)) { //no-else/*4931*/
				$k[$j++] = 'bwipp.databaromniBadCharacter'; /*4930*/
				$k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; /*4930*/
				$0.raiseerror(); /*4930*/
			} /*4930*/
		}); /*4930*/
		$1.checksum = 0; /*4935*/
		for (var _G = 0; _G <= 12; _G += 1) {
			/*4939*/
			$1.i = _G; /*4937*/
			$k[$j++] = 'checksum'; /*4938*/
			$k[$j++] = $1.checksum; /*4938*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*4938*/
			if (($1.i % 2) == 0) { //no-else/*4938*/
				var _M = $k[--$j]; /*4938*/
				$k[$j++] = _M * 3; /*4938*/
			} /*4938*/
			var _N = $k[--$j]; /*4938*/
			var _O = $k[--$j]; /*4938*/
			$1[$k[--$j]] = _O + _N; /*4938*/
		} /*4938*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*4940*/
		if ($1.barcode.length == 18) { //no-else/*4945*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*4944*/
				$k[$j++] = 'bwipp.databaromniBadCheckDigit'; /*4943*/
				$k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; /*4943*/
				$0.raiseerror(); /*4943*/
			} /*4943*/
		} /*4943*/
		var _V = $s(18); /*4946*/
		$puti(_V, 0, $1.barcode); /*4947*/
		$put(_V, 17, $1.checksum + 48); /*4948*/
		$1.barcode = _V; /*4949*/
		$1.txt = $a($1.barcode.length); /*4952*/
		for (var _c = 0, _b = $1.barcode.length - 1; _c <= _b; _c += 1) {
			/*4956*/
			$1.i = _c; /*4954*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*4955*/
		} /*4955*/
		$1.ncr = function() {
			var _j = $k[--$j]; /*4959*/
			var _k = $k[--$j]; /*4959*/
			var _l = _k - _j; /*4959*/
			if (_j < (_k - _j)) { //no-else/*4959*/
				var _ = _l; /*4959*/
				_l = _j; /*4959*/
				_j = _; /*4959*/
			} /*4959*/
			$k[$j++] = _l; /*4966*/
			$k[$j++] = 1; /*4966*/
			$k[$j++] = 1; /*4966*/
			for (var _n = _k, _m = _j + 1; _n >= _m; _n -= 1) {
				/*4966*/
				var _o = $k[--$j]; /*4962*/
				var _p = $k[--$j]; /*4963*/
				var _q = $k[--$j]; /*4963*/
				$k[$j++] = _q; /*4965*/
				$k[$j++] = _p; /*4965*/
				$k[$j++] = _o * _n; /*4965*/
				if ($le(_p, _q)) { //no-else/*4965*/
					var _r = $k[--$j]; /*4964*/
					var _s = $k[--$j]; /*4964*/
					$k[$j++] = _s + 1; /*4964*/
					$k[$j++] = ~~(_r / _s); /*4964*/
				} /*4964*/
			} /*4964*/
			for (;;) {
				/*4970*/
				var _t = $k[--$j]; /*4968*/
				var _u = $k[--$j]; /*4968*/
				var _v = $k[--$j]; /*4968*/
				$k[$j++] = _v; /*4968*/
				$k[$j++] = _u; /*4968*/
				$k[$j++] = _t; /*4968*/
				if ($gt(_u, _v)) { //no-else/*4968*/
					break; /*4968*/
				} /*4968*/
				var _w = $k[--$j]; /*4969*/
				var _x = $k[--$j]; /*4969*/
				$k[$j++] = _x + 1; /*4969*/
				$k[$j++] = ~~(_w / _x); /*4969*/
			} /*4969*/
			var _y = $k[--$j]; /*4971*/
			var _z = $k[--$j]; /*4971*/
			var _10 = $k[--$j]; /*4971*/
			$k[$j++] = _y; /*4971*/
		}; /*4972*/
		$1.getRSSwidths = function() {
			$1.oe = $k[--$j]; /*4975*/
			$1.el = $k[--$j]; /*4976*/
			$1.mw = $k[--$j]; /*4977*/
			$1.nm = $k[--$j]; /*4978*/
			$1.val = $k[--$j]; /*4979*/
			$1.out = $a($1.el); /*4980*/
			$1.mask = 0; /*4981*/
			for (var _1A = 0, _19 = $1.el - 2; _1A <= _19; _1A += 1) {
				/*5008*/
				$1.bar = _1A; /*4983*/
				$1.ew = 1; /*4984*/
				var _1C = $1.bar; /*4985*/
				$1.mask = $1.mask | ((_1C < 0 ? 1 >>> -_1C : 1 << _1C)); /*4985*/
				for (;;) {
					/*5004*/
					$k[$j++] = 'sval'; /*4986*/
					$k[$j++] = ($1.nm - $1.ew) - 1; /*4986*/
					$k[$j++] = ($1.el - $1.bar) - 2; /*4986*/
					$1.ncr(); /*4986*/
					var _1H = $k[--$j]; /*4986*/
					$1[$k[--$j]] = _1H; /*4986*/
					if (($1.oe && ($1.mask == 0)) && (((($1.nm - $1.ew) - ($1.el * 2)) + ($1.bar * 2)) >= -2)) { //no-else/*4989*/
						$k[$j++] = 'sval'; /*4988*/
						$k[$j++] = $1.sval; /*4988*/
						$k[$j++] = (($1.nm - $1.ew) - $1.el) + $1.bar; /*4988*/
						$k[$j++] = ($1.el - $1.bar) - 2; /*4988*/
						$1.ncr(); /*4988*/
						var _1W = $k[--$j]; /*4988*/
						var _1X = $k[--$j]; /*4988*/
						$1[$k[--$j]] = _1X - _1W; /*4988*/
					} /*4988*/
					if (($1.el - $1.bar) > 2) {
						/*4998*/
						$1.lval = 0; /*4991*/
						for (var _1h = ((($1.nm - $1.ew) - $1.el) + $1.bar) + 2, _1g = $1.mw + 1; _1h >= _1g; _1h -= 1) {
							/*4995*/
							$k[$j++] = (($1.nm - _1h) - $1.ew) - 1; /*4993*/
							$k[$j++] = ($1.el - $1.bar) - 3; /*4993*/
							$1.ncr(); /*4993*/
							$1.lval = $k[--$j] + $1.lval; /*4994*/
						} /*4994*/
						$1.sval = $1.sval - ($1.lval * (($1.el - $1.bar) - 1)); /*4996*/
					} else {
						/*4998*/
						if (($1.nm - $1.ew) > $1.mw) { //no-else/*4998*/
							$1.sval = $1.sval - 1; /*4998*/
						} /*4998*/
					} /*4998*/
					$1.val = $1.val - $1.sval; /*5000*/
					if ($1.val < 0) { //no-else/*5001*/
						break; /*5001*/
					} /*5001*/
					$1.ew = $1.ew + 1; /*5002*/
					var _21 = $1.bar; /*5003*/
					$1.mask = $1.mask & (~((_21 < 0 ? 1 >>> -_21 : 1 << _21))); /*5003*/
				} /*5003*/
				$1.val = $1.val + $1.sval; /*5005*/
				$1.nm = $1.nm - $1.ew; /*5006*/
				$put($1.out, $1.bar, $1.ew); /*5007*/
			} /*5007*/
			$put($1.out, $1.el - 1, $1.nm); /*5009*/
			$k[$j++] = $1.out; /*5010*/
		}; /*5011*/
		$k[$j++] = Infinity; /*5016*/
		var _2E = $1.linkage ? 1 : 0; /*5014*/
		$k[$j++] = _2E; /*5015*/
		$forall($geti($1.barcode, 4, 13), function() {
			/*5015*/
			var _2H = $k[--$j]; /*5015*/
			$k[$j++] = _2H - 48; /*5015*/
		}); /*5015*/
		$1.binval = $a(); /*5016*/
		for (var _2J = 0; _2J <= 12; _2J += 1) {
			/*5022*/
			$1.i = _2J; /*5019*/
			var _2K = $1.binval; /*5020*/
			var _2L = $1.i; /*5020*/
			$put(_2K, _2L + 1, $get(_2K, _2L + 1) + (($get($1.binval, $1.i) % 4537077) * 10)); /*5020*/
			$put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 4537077)); /*5021*/
		} /*5021*/
		$1.right = $get($1.binval, 13) % 4537077; /*5023*/
		var _2X = $1.binval; /*5024*/
		$put(_2X, 13, ~~($get(_2X, 13) / 4537077)); /*5024*/
		$1.left = 0; /*5026*/
		$1.i = true; /*5027*/
		for (var _2Z = 0; _2Z <= 13; _2Z += 1) {
			/*5037*/
			$1.j = _2Z; /*5029*/
			var _2c = $get($1.binval, $1.j); /*5030*/
			$k[$j++] = _2c; /*5036*/
			if ((_2c == 0) && $1.i) {
				/*5035*/
				$j--; /*5032*/
			} else {
				/*5035*/
				$1.i = false; /*5034*/
				$1.left = $1.left + ($k[--$j] * (~~Math.pow(10, 13 - $1.j))); /*5035*/
			} /*5035*/
		} /*5035*/
		$1.d1 = ~~($1.left / 1597); /*5039*/
		$1.d2 = $1.left % 1597; /*5040*/
		$1.d3 = ~~($1.right / 1597); /*5041*/
		$1.d4 = $1.right % 1597; /*5042*/
		$1.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); /*5050*/
		$1.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); /*5057*/
		$1.i = 0; /*5059*/
		for (;;) {
			/*5069*/
			if ($1.d1 <= $get($1.tab164, $1.i)) { //no-else/*5067*/
				$forall($geti($1.tab164, $1.i + 1, 7)); /*5061*/
				$1.d1te = $k[--$j]; /*5062*/
				$1.d1to = $k[--$j]; /*5062*/
				$1.d1mwe = $k[--$j]; /*5063*/
				$1.d1mwo = $k[--$j]; /*5063*/
				$1.d1ele = $k[--$j]; /*5064*/
				$1.d1elo = $k[--$j]; /*5064*/
				$1.d1gs = $k[--$j]; /*5065*/
				break; /*5066*/
			} /*5066*/
			$1.i = $1.i + 8; /*5068*/
		} /*5068*/
		$1.i = 0; /*5071*/
		for (;;) {
			/*5081*/
			if ($1.d2 <= $get($1.tab154, $1.i)) { //no-else/*5079*/
				$forall($geti($1.tab154, $1.i + 1, 7)); /*5073*/
				$1.d2te = $k[--$j]; /*5074*/
				$1.d2to = $k[--$j]; /*5074*/
				$1.d2mwe = $k[--$j]; /*5075*/
				$1.d2mwo = $k[--$j]; /*5075*/
				$1.d2ele = $k[--$j]; /*5076*/
				$1.d2elo = $k[--$j]; /*5076*/
				$1.d2gs = $k[--$j]; /*5077*/
				break; /*5078*/
			} /*5078*/
			$1.i = $1.i + 8; /*5080*/
		} /*5080*/
		$1.i = 0; /*5083*/
		for (;;) {
			/*5093*/
			if ($1.d3 <= $get($1.tab164, $1.i)) { //no-else/*5091*/
				$forall($geti($1.tab164, $1.i + 1, 7)); /*5085*/
				$1.d3te = $k[--$j]; /*5086*/
				$1.d3to = $k[--$j]; /*5086*/
				$1.d3mwe = $k[--$j]; /*5087*/
				$1.d3mwo = $k[--$j]; /*5087*/
				$1.d3ele = $k[--$j]; /*5088*/
				$1.d3elo = $k[--$j]; /*5088*/
				$1.d3gs = $k[--$j]; /*5089*/
				break; /*5090*/
			} /*5090*/
			$1.i = $1.i + 8; /*5092*/
		} /*5092*/
		$1.i = 0; /*5095*/
		for (;;) {
			/*5105*/
			if ($1.d4 <= $get($1.tab154, $1.i)) { //no-else/*5103*/
				$forall($geti($1.tab154, $1.i + 1, 7)); /*5097*/
				$1.d4te = $k[--$j]; /*5098*/
				$1.d4to = $k[--$j]; /*5098*/
				$1.d4mwe = $k[--$j]; /*5099*/
				$1.d4mwo = $k[--$j]; /*5099*/
				$1.d4ele = $k[--$j]; /*5100*/
				$1.d4elo = $k[--$j]; /*5100*/
				$1.d4gs = $k[--$j]; /*5101*/
				break; /*5102*/
			} /*5102*/
			$1.i = $1.i + 8; /*5104*/
		} /*5104*/
		$k[$j++] = 'd1wo'; /*5107*/
		$k[$j++] = ~~(($1.d1 - $1.d1gs) / $1.d1te); /*5107*/
		$k[$j++] = $1.d1elo; /*5107*/
		$k[$j++] = $1.d1mwo; /*5107*/
		$k[$j++] = 4; /*5107*/
		$k[$j++] = false; /*5107*/
		$1.getRSSwidths(); /*5107*/
		var _3q = $k[--$j]; /*5107*/
		$1[$k[--$j]] = _3q; /*5107*/
		$k[$j++] = 'd1we'; /*5108*/
		$k[$j++] = ($1.d1 - $1.d1gs) % $1.d1te; /*5108*/
		$k[$j++] = $1.d1ele; /*5108*/
		$k[$j++] = $1.d1mwe; /*5108*/
		$k[$j++] = 4; /*5108*/
		$k[$j++] = true; /*5108*/
		$1.getRSSwidths(); /*5108*/
		var _3x = $k[--$j]; /*5108*/
		$1[$k[--$j]] = _3x; /*5108*/
		$k[$j++] = 'd2wo'; /*5109*/
		$k[$j++] = ($1.d2 - $1.d2gs) % $1.d2to; /*5109*/
		$k[$j++] = $1.d2elo; /*5109*/
		$k[$j++] = $1.d2mwo; /*5109*/
		$k[$j++] = 4; /*5109*/
		$k[$j++] = true; /*5109*/
		$1.getRSSwidths(); /*5109*/
		var _44 = $k[--$j]; /*5109*/
		$1[$k[--$j]] = _44; /*5109*/
		$k[$j++] = 'd2we'; /*5110*/
		$k[$j++] = ~~(($1.d2 - $1.d2gs) / $1.d2to); /*5110*/
		$k[$j++] = $1.d2ele; /*5110*/
		$k[$j++] = $1.d2mwe; /*5110*/
		$k[$j++] = 4; /*5110*/
		$k[$j++] = false; /*5110*/
		$1.getRSSwidths(); /*5110*/
		var _4B = $k[--$j]; /*5110*/
		$1[$k[--$j]] = _4B; /*5110*/
		$k[$j++] = 'd3wo'; /*5111*/
		$k[$j++] = ~~(($1.d3 - $1.d3gs) / $1.d3te); /*5111*/
		$k[$j++] = $1.d3elo; /*5111*/
		$k[$j++] = $1.d3mwo; /*5111*/
		$k[$j++] = 4; /*5111*/
		$k[$j++] = false; /*5111*/
		$1.getRSSwidths(); /*5111*/
		var _4I = $k[--$j]; /*5111*/
		$1[$k[--$j]] = _4I; /*5111*/
		$k[$j++] = 'd3we'; /*5112*/
		$k[$j++] = ($1.d3 - $1.d3gs) % $1.d3te; /*5112*/
		$k[$j++] = $1.d3ele; /*5112*/
		$k[$j++] = $1.d3mwe; /*5112*/
		$k[$j++] = 4; /*5112*/
		$k[$j++] = true; /*5112*/
		$1.getRSSwidths(); /*5112*/
		var _4P = $k[--$j]; /*5112*/
		$1[$k[--$j]] = _4P; /*5112*/
		$k[$j++] = 'd4wo'; /*5113*/
		$k[$j++] = ($1.d4 - $1.d4gs) % $1.d4to; /*5113*/
		$k[$j++] = $1.d4elo; /*5113*/
		$k[$j++] = $1.d4mwo; /*5113*/
		$k[$j++] = 4; /*5113*/
		$k[$j++] = true; /*5113*/
		$1.getRSSwidths(); /*5113*/
		var _4W = $k[--$j]; /*5113*/
		$1[$k[--$j]] = _4W; /*5113*/
		$k[$j++] = 'd4we'; /*5114*/
		$k[$j++] = ~~(($1.d4 - $1.d4gs) / $1.d4to); /*5114*/
		$k[$j++] = $1.d4ele; /*5114*/
		$k[$j++] = $1.d4mwe; /*5114*/
		$k[$j++] = 4; /*5114*/
		$k[$j++] = false; /*5114*/
		$1.getRSSwidths(); /*5114*/
		var _4d = $k[--$j]; /*5114*/
		$1[$k[--$j]] = _4d; /*5114*/
		$1.d1w = $a(8); /*5116*/
		for (var _4g = 0; _4g <= 3; _4g += 1) {
			/*5121*/
			$1.i = _4g; /*5118*/
			$put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); /*5119*/
			$put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); /*5120*/
		} /*5120*/
		$1.d2w = $a(8); /*5123*/
		for (var _4s = 0; _4s <= 3; _4s += 1) {
			/*5128*/
			$1.i = _4s; /*5125*/
			$put($1.d2w, 7 - ($1.i * 2), $get($1.d2wo, $1.i)); /*5126*/
			$put($1.d2w, 6 - ($1.i * 2), $get($1.d2we, $1.i)); /*5127*/
		} /*5127*/
		$1.d3w = $a(8); /*5130*/
		for (var _54 = 0; _54 <= 3; _54 += 1) {
			/*5135*/
			$1.i = _54; /*5132*/
			$put($1.d3w, 7 - ($1.i * 2), $get($1.d3wo, $1.i)); /*5133*/
			$put($1.d3w, 6 - ($1.i * 2), $get($1.d3we, $1.i)); /*5134*/
		} /*5134*/
		$1.d4w = $a(8); /*5137*/
		for (var _5G = 0; _5G <= 3; _5G += 1) {
			/*5142*/
			$1.i = _5G; /*5139*/
			$put($1.d4w, $1.i * 2, $get($1.d4wo, $1.i)); /*5140*/
			$put($1.d4w, ($1.i * 2) + 1, $get($1.d4we, $1.i)); /*5141*/
		} /*5141*/
		$k[$j++] = Infinity; /*5149*/
		var _5R = $1.d1w; /*5145*/
		for (var _5S = 0, _5T = _5R.length; _5S < _5T; _5S++) {
			/*5145*/
			$k[$j++] = $get(_5R, _5S); /*5145*/
		} /*5145*/
		var _5V = $1.d2w; /*5146*/
		for (var _5W = 0, _5X = _5V.length; _5W < _5X; _5W++) {
			/*5146*/
			$k[$j++] = $get(_5V, _5W); /*5146*/
		} /*5146*/
		var _5Z = $1.d3w; /*5147*/
		for (var _5a = 0, _5b = _5Z.length; _5a < _5b; _5a++) {
			/*5147*/
			$k[$j++] = $get(_5Z, _5a); /*5147*/
		} /*5147*/
		var _5d = $1.d4w; /*5148*/
		for (var _5e = 0, _5f = _5d.length; _5e < _5f; _5e++) {
			/*5148*/
			$k[$j++] = $get(_5d, _5e); /*5148*/
		} /*5148*/
		$1.widths = $a(); /*5149*/
		$1.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); /*5156*/
		$1.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); /*5162*/
		$1.checksum = 0; /*5164*/
		for (var _5k = 0; _5k <= 31; _5k += 1) {
			/*5168*/
			$1.i = _5k; /*5166*/
			$1.checksum = $1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i)); /*5167*/
		} /*5167*/
		$1.checksum = $1.checksum % 79; /*5169*/
		if ($1.checksum >= 8) { //no-else/*5170*/
			$1.checksum = $1.checksum + 1; /*5170*/
		} /*5170*/
		if ($1.checksum >= 72) { //no-else/*5171*/
			$1.checksum = $1.checksum + 1; /*5171*/
		} /*5171*/
		$1.checklt = $geti($1.checkwidths, (~~($1.checksum / 9)) * 5, 5); /*5172*/
		$1.checkrtrev = $geti($1.checkwidths, ($1.checksum % 9) * 5, 5); /*5173*/
		$1.checkrt = $a(5); /*5174*/
		for (var _64 = 0; _64 <= 4; _64 += 1) {
			/*5178*/
			$1.i = _64; /*5176*/
			$put($1.checkrt, $1.i, $get($1.checkrtrev, 4 - $1.i)); /*5177*/
		} /*5177*/
		if ($eq($1.format, "omni") || $eq($1.format, "truncated")) {
			/*5297*/
			$k[$j++] = Infinity; /*5186*/
			var _6C = $1.d1w; /*5184*/
			$k[$j++] = 1; /*5184*/
			for (var _6D = 0, _6E = _6C.length; _6D < _6E; _6D++) {
				/*5184*/
				$k[$j++] = $get(_6C, _6D); /*5184*/
			} /*5184*/
			$forall($1.checklt); /*5184*/
			var _6H = $1.d2w; /*5184*/
			for (var _6I = 0, _6J = _6H.length; _6I < _6J; _6I++) {
				/*5184*/
				$k[$j++] = $get(_6H, _6I); /*5184*/
			} /*5184*/
			var _6L = $1.d4w; /*5185*/
			for (var _6M = 0, _6N = _6L.length; _6M < _6N; _6M++) {
				/*5185*/
				$k[$j++] = $get(_6L, _6M); /*5185*/
			} /*5185*/
			var _6P = $1.checkrt; /*5185*/
			for (var _6Q = 0, _6R = _6P.length; _6Q < _6R; _6Q++) {
				/*5185*/
				$k[$j++] = $get(_6P, _6Q); /*5185*/
			} /*5185*/
			var _6T = $1.d3w; /*5185*/
			for (var _6U = 0, _6V = _6T.length; _6U < _6V; _6U++) {
				/*5185*/
				$k[$j++] = $get(_6T, _6U); /*5185*/
			} /*5185*/
			$k[$j++] = 1; /*5185*/
			$k[$j++] = 1; /*5185*/
			$1.sbs = $a(); /*5186*/
			$k[$j++] = Infinity; /*5195*/
			var _6Y = $1.sbs; /*5190*/
			$k[$j++] = Infinity; /*5192*/
			for (var _6a = 0, _6b = ~~(($1.sbs.length + 1) / 2); _6a < _6b; _6a++) {
				/*5191*/
				$k[$j++] = $1.height; /*5191*/
			} /*5191*/
			var _6d = $a(); /*5192*/
			$k[$j++] = Infinity; /*5193*/
			for (var _6f = 0, _6g = ~~(($1.sbs.length + 1) / 2); _6f < _6g; _6f++) {
				/*5192*/
				$k[$j++] = 0; /*5192*/
			} /*5192*/
			var _6h = $a(); /*5193*/
			$k[$j++] = 'ren'; /*5195*/
			$k[$j++] = $0.renlinear; /*5195*/
			$k[$j++] = 'sbs'; /*5195*/
			$k[$j++] = _6Y; /*5195*/
			$k[$j++] = 'bhs'; /*5195*/
			$k[$j++] = _6d; /*5195*/
			$k[$j++] = 'bbs'; /*5195*/
			$k[$j++] = _6h; /*5195*/
			$k[$j++] = 'txt'; /*5195*/
			$k[$j++] = $1.txt; /*5195*/
			$k[$j++] = 'textxalign'; /*5195*/
			$k[$j++] = "center"; /*5195*/
			$k[$j++] = 'opt'; /*5195*/
			$k[$j++] = $1.options; /*5195*/
			var _6k = $d(); /*5195*/
			$k[$j++] = _6k; /*5198*/
			if (!$1.dontdraw) { //no-else/*5198*/
				$0.renlinear(); /*5198*/
			} /*5198*/
		} else {
			/*5297*/
			$k[$j++] = Infinity; /*5202*/
			var _6m = $1.d1w; /*5202*/
			$k[$j++] = 1; /*5202*/
			$k[$j++] = 1; /*5202*/
			for (var _6n = 0, _6o = _6m.length; _6n < _6o; _6n++) {
				/*5202*/
				$k[$j++] = $get(_6m, _6n); /*5202*/
			} /*5202*/
			$forall($1.checklt); /*5202*/
			var _6r = $1.d2w; /*5202*/
			for (var _6s = 0, _6t = _6r.length; _6s < _6t; _6s++) {
				/*5202*/
				$k[$j++] = $get(_6r, _6s); /*5202*/
			} /*5202*/
			$k[$j++] = 1; /*5202*/
			$k[$j++] = 1; /*5202*/
			$k[$j++] = 0; /*5202*/
			$1.top = $a(); /*5202*/
			$k[$j++] = Infinity; /*5203*/
			var _6w = $1.d4w; /*5203*/
			$k[$j++] = 1; /*5203*/
			$k[$j++] = 1; /*5203*/
			for (var _6x = 0, _6y = _6w.length; _6x < _6y; _6x++) {
				/*5203*/
				$k[$j++] = $get(_6w, _6x); /*5203*/
			} /*5203*/
			var _70 = $1.checkrt; /*5203*/
			for (var _71 = 0, _72 = _70.length; _71 < _72; _71++) {
				/*5203*/
				$k[$j++] = $get(_70, _71); /*5203*/
			} /*5203*/
			var _74 = $1.d3w; /*5203*/
			for (var _75 = 0, _76 = _74.length; _75 < _76; _75++) {
				/*5203*/
				$k[$j++] = $get(_74, _75); /*5203*/
			} /*5203*/
			$k[$j++] = 1; /*5203*/
			$k[$j++] = 1; /*5203*/
			$k[$j++] = 0; /*5203*/
			$1.bot = $a(); /*5203*/
			for (var _79 = 0; _79 <= 24; _79 += 2) {
				/*5208*/
				$1.i = _79; /*5205*/
				for (var _7D = 0, _7E = $get($1.top, $1.i); _7D < _7E; _7D++) {
					/*5206*/
					$k[$j++] = 0; /*5206*/
				} /*5206*/
				for (var _7I = 0, _7J = $get($1.top, $1.i + 1); _7I < _7J; _7I++) {
					/*5207*/
					$k[$j++] = 1; /*5207*/
				} /*5207*/
			} /*5207*/
			$astore($a(50)); /*5209*/
			$1.top = $k[--$j]; /*5209*/
			for (var _7M = 0; _7M <= 24; _7M += 2) {
				/*5214*/
				$1.i = _7M; /*5211*/
				for (var _7Q = 0, _7R = $get($1.bot, $1.i); _7Q < _7R; _7Q++) {
					/*5212*/
					$k[$j++] = 1; /*5212*/
				} /*5212*/
				for (var _7V = 0, _7W = $get($1.bot, $1.i + 1); _7V < _7W; _7V++) {
					/*5213*/
					$k[$j++] = 0; /*5213*/
				} /*5213*/
			} /*5213*/
			$astore($a(50)); /*5215*/
			$1.bot = $k[--$j]; /*5215*/
			if ($eq($1.format, "stacked")) { //no-else/*5234*/
				$k[$j++] = Infinity; /*5219*/
				for (var _7a = 0, _7b = 50; _7a < _7b; _7a++) {
					/*5219*/
					$k[$j++] = 0; /*5219*/
				} /*5219*/
				$1.sep = $a(); /*5219*/
				for (var _7d = 4; _7d <= 45; _7d += 1) {
					/*5227*/
					$1.i = _7d; /*5221*/
					if ($eq($get($1.top, $1.i), $get($1.bot, $1.i))) {
						/*5225*/
						$put($1.sep, $1.i, 1 - $get($1.top, $1.i)); /*5223*/
					} else {
						/*5225*/
						$put($1.sep, $1.i, 1 - $get($1.sep, $1.i - 1)); /*5225*/
					} /*5225*/
				} /*5225*/
				$k[$j++] = Infinity; /*5232*/
				for (var _7u = 0, _7v = 5; _7u < _7v; _7u++) {
					/*5229*/
					$aload($1.top); /*5229*/
				} /*5229*/
				$aload($1.sep); /*5230*/
				for (var _7y = 0, _7z = 7; _7y < _7z; _7y++) {
					/*5231*/
					$aload($1.bot); /*5231*/
				} /*5231*/
				$1.pixs = $a(); /*5232*/
				$1.pixy = ~~($1.pixs.length / 50); /*5233*/
			} /*5233*/
			if ($eq($1.format, "stackedomni")) { //no-else/*5284*/
				$k[$j++] = Infinity; /*5238*/
				$forall($1.top, function() {
					/*5238*/
					var _85 = $k[--$j]; /*5238*/
					$k[$j++] = 1 - _85; /*5238*/
				}); /*5238*/
				$1.sep1 = $a(); /*5238*/
				$puti($1.sep1, 0, $a([0, 0, 0, 0])); /*5239*/
				$puti($1.sep1, 46, $a([0, 0, 0, 0])); /*5240*/
				for (var _8B = 18; _8B <= 30; _8B += 1) {
					/*5253*/
					$1.i = _8B; /*5242*/
					if ($get($1.top, $1.i) == 0) {
						/*5250*/
						if ($get($1.top, $1.i - 1) == 1) {
							/*5247*/
							$k[$j++] = 1; /*5245*/
						} else {
							/*5247*/
							var _8L = ($get($1.sep1, $1.i - 1) == 0) ? 1 : 0; /*5247*/
							$k[$j++] = _8L; /*5247*/
						} /*5247*/
					} else {
						/*5250*/
						$k[$j++] = 0; /*5250*/
					} /*5250*/
					$put($1.sep1, $1.i, $k[--$j]); /*5252*/
				} /*5252*/
				$k[$j++] = Infinity; /*5254*/
				$k[$j++] = 0; /*5254*/
				$k[$j++] = 0; /*5254*/
				$k[$j++] = 0; /*5254*/
				$k[$j++] = 0; /*5254*/
				for (var _8P = 0, _8Q = 21; _8P < _8Q; _8P++) {
					/*5254*/
					$k[$j++] = 0; /*5254*/
					$k[$j++] = 1; /*5254*/
				} /*5254*/
				$k[$j++] = 0; /*5254*/
				$k[$j++] = 0; /*5254*/
				$k[$j++] = 0; /*5254*/
				$k[$j++] = 0; /*5254*/
				$1.sep2 = $a(); /*5254*/
				$k[$j++] = Infinity; /*5255*/
				$forall($1.bot, function() {
					/*5255*/
					var _8T = $k[--$j]; /*5255*/
					$k[$j++] = 1 - _8T; /*5255*/
				}); /*5255*/
				$1.sep3 = $a(); /*5255*/
				$puti($1.sep3, 0, $a([0, 0, 0, 0])); /*5256*/
				$puti($1.sep3, 46, $a([0, 0, 0, 0])); /*5257*/
				for (var _8Z = 19; _8Z <= 31; _8Z += 1) {
					/*5270*/
					$1.i = _8Z; /*5259*/
					if ($get($1.bot, $1.i) == 0) {
						/*5267*/
						if ($get($1.bot, $1.i - 1) == 1) {
							/*5264*/
							$k[$j++] = 1; /*5262*/
						} else {
							/*5264*/
							var _8j = ($get($1.sep3, $1.i - 1) == 0) ? 1 : 0; /*5264*/
							$k[$j++] = _8j; /*5264*/
						} /*5264*/
					} else {
						/*5267*/
						$k[$j++] = 0; /*5267*/
					} /*5267*/
					$put($1.sep3, $1.i, $k[--$j]); /*5269*/
				} /*5269*/
				$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*5271*/
				$k[$j++] = true; /*5272*/
				for (var _8o = 0; _8o <= 12; _8o += 1) {
					/*5272*/
					var _8t = $k[--$j]; /*5272*/
					$k[$j++] = _8t && $eq($get($1.bot, _8o + 19), $get($1.f3, _8o)); /*5272*/
				} /*5272*/
				if ($k[--$j]) { //no-else/*5275*/
					$puti($1.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*5274*/
				} /*5274*/
				$k[$j++] = Infinity; /*5282*/
				for (var _8y = 0, _8z = $1.barxmult; _8y < _8z; _8y++) {
					/*5277*/
					$aload($1.top); /*5277*/
				} /*5277*/
				$aload($1.sep1); /*5278*/
				$aload($1.sep2); /*5279*/
				$aload($1.sep3); /*5280*/
				for (var _95 = 0, _96 = $1.barxmult; _95 < _96; _95++) {
					/*5281*/
					$aload($1.bot); /*5281*/
				} /*5281*/
				$1.pixs = $a(); /*5282*/
				$1.pixy = ~~($1.pixs.length / 50); /*5283*/
			} /*5283*/
			var _9E = new Map([
				["ren", $0.renmatrix],
				["pixs", $1.pixs],
				["pixx", 50],
				["pixy", $1.pixy],
				["height", $1.pixy / 72],
				["width", 50 / 72],
				["opt", $1.options]
			]); /*5294*/
			$k[$j++] = _9E; /*5297*/
			if (!$1.dontdraw) { //no-else/*5297*/
				$0.renmatrix(); /*5297*/
			} /*5297*/
		} /*5297*/
	};
	$0.databarstacked = function() {
		var $1 = {}; /*5329*/
		$1.options = $k[--$j]; /*5331*/
		$1.barcode = $k[--$j]; /*5332*/
		$1.dontdraw = false; /*5334*/
		$forall($1.options, function() {
			/*5345*/
			var _3 = $k[--$j]; /*5345*/
			$1[$k[--$j]] = _3; /*5345*/
		}); /*5345*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5350*/
			$k[$j++] = 'bwipp.databarstackedBadAI'; /*5349*/
			$k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; /*5349*/
			$0.raiseerror(); /*5349*/
		} /*5349*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5353*/
			$k[$j++] = 'bwipp.databarstackedBadLength'; /*5352*/
			$k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; /*5352*/
			$0.raiseerror(); /*5352*/
		} /*5352*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*5358*/
			var _C = $k[--$j]; /*5355*/
			if ((_C < 48) || (_C > 57)) { //no-else/*5357*/
				$k[$j++] = 'bwipp.databarstackedBadCharacter'; /*5356*/
				$k[$j++] = "GS1 DataBar Stacked must contain only digits"; /*5356*/
				$0.raiseerror(); /*5356*/
			} /*5356*/
		}); /*5356*/
		$1.checksum = 0; /*5361*/
		for (var _D = 0; _D <= 12; _D += 1) {
			/*5365*/
			$1.i = _D; /*5363*/
			$k[$j++] = 'checksum'; /*5364*/
			$k[$j++] = $1.checksum; /*5364*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5364*/
			if (($1.i % 2) == 0) { //no-else/*5364*/
				var _J = $k[--$j]; /*5364*/
				$k[$j++] = _J * 3; /*5364*/
			} /*5364*/
			var _K = $k[--$j]; /*5364*/
			var _L = $k[--$j]; /*5364*/
			$1[$k[--$j]] = _L + _K; /*5364*/
		} /*5364*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5366*/
		if ($1.barcode.length == 18) { //no-else/*5371*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5370*/
				$k[$j++] = 'bwipp.databarstackedBadCheckDigit'; /*5369*/
				$k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; /*5369*/
				$0.raiseerror(); /*5369*/
			} /*5369*/
		} /*5369*/
		var _S = $s(18); /*5372*/
		$puti(_S, 0, $1.barcode); /*5373*/
		$put(_S, 17, $1.checksum + 48); /*5374*/
		$1.barcode = _S; /*5375*/
		$put($1.options, "dontdraw", true); /*5378*/
		$put($1.options, "format", "stacked"); /*5379*/
		$k[$j++] = 'args'; /*5381*/
		$k[$j++] = $1.barcode; /*5381*/
		$k[$j++] = $1.options; /*5381*/
		$0.databaromni(); /*5381*/
		var _Z = $k[--$j]; /*5381*/
		$1[$k[--$j]] = _Z; /*5381*/
		$put($1.args, "opt", $1.options); /*5383*/
		$k[$j++] = $1.args; /*5386*/
		if (!$1.dontdraw) { //no-else/*5386*/
			$0.renmatrix(); /*5386*/
		} /*5386*/
	};
	$0.databarstackedomni = function() {
		var $1 = {}; /*5416*/
		$1.options = $k[--$j]; /*5418*/
		$1.barcode = $k[--$j]; /*5419*/
		$1.dontdraw = false; /*5421*/
		$forall($1.options, function() {
			/*5432*/
			var _3 = $k[--$j]; /*5432*/
			$1[$k[--$j]] = _3; /*5432*/
		}); /*5432*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5437*/
			$k[$j++] = 'bwipp.databarstackedomniBadAI'; /*5436*/
			$k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; /*5436*/
			$0.raiseerror(); /*5436*/
		} /*5436*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5440*/
			$k[$j++] = 'bwipp.databarstackedomniBadLength'; /*5439*/
			$k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; /*5439*/
			$0.raiseerror(); /*5439*/
		} /*5439*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*5445*/
			var _C = $k[--$j]; /*5442*/
			if ((_C < 48) || (_C > 57)) { //no-else/*5444*/
				$k[$j++] = 'bwipp.databarstackedomniBadCharacter'; /*5443*/
				$k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; /*5443*/
				$0.raiseerror(); /*5443*/
			} /*5443*/
		}); /*5443*/
		$1.checksum = 0; /*5448*/
		for (var _D = 0; _D <= 12; _D += 1) {
			/*5452*/
			$1.i = _D; /*5450*/
			$k[$j++] = 'checksum'; /*5451*/
			$k[$j++] = $1.checksum; /*5451*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5451*/
			if (($1.i % 2) == 0) { //no-else/*5451*/
				var _J = $k[--$j]; /*5451*/
				$k[$j++] = _J * 3; /*5451*/
			} /*5451*/
			var _K = $k[--$j]; /*5451*/
			var _L = $k[--$j]; /*5451*/
			$1[$k[--$j]] = _L + _K; /*5451*/
		} /*5451*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5453*/
		if ($1.barcode.length == 18) { //no-else/*5458*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5457*/
				$k[$j++] = 'bwipp.databarstackedomniBadCheckDigit'; /*5456*/
				$k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; /*5456*/
				$0.raiseerror(); /*5456*/
			} /*5456*/
		} /*5456*/
		var _S = $s(18); /*5459*/
		$puti(_S, 0, $1.barcode); /*5460*/
		$put(_S, 17, $1.checksum + 48); /*5461*/
		$1.barcode = _S; /*5462*/
		$put($1.options, "dontdraw", true); /*5465*/
		$put($1.options, "format", "stackedomni"); /*5466*/
		$k[$j++] = 'args'; /*5468*/
		$k[$j++] = $1.barcode; /*5468*/
		$k[$j++] = $1.options; /*5468*/
		$0.databaromni(); /*5468*/
		var _Z = $k[--$j]; /*5468*/
		$1[$k[--$j]] = _Z; /*5468*/
		$put($1.args, "opt", $1.options); /*5470*/
		$k[$j++] = $1.args; /*5473*/
		if (!$1.dontdraw) { //no-else/*5473*/
			$0.renmatrix(); /*5473*/
		} /*5473*/
	};
	$0.databartruncated = function() {
		var $1 = {}; /*5503*/
		$1.options = $k[--$j]; /*5505*/
		$1.barcode = $k[--$j]; /*5506*/
		$1.dontdraw = false; /*5508*/
		$forall($1.options, function() {
			/*5519*/
			var _3 = $k[--$j]; /*5519*/
			$1[$k[--$j]] = _3; /*5519*/
		}); /*5519*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5524*/
			$k[$j++] = 'bwipp.databartruncatedBadAI'; /*5523*/
			$k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; /*5523*/
			$0.raiseerror(); /*5523*/
		} /*5523*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5527*/
			$k[$j++] = 'bwipp.databartruncatedBadLength'; /*5526*/
			$k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; /*5526*/
			$0.raiseerror(); /*5526*/
		} /*5526*/
		$forall($geti($1.barcode, 4, $1.barcode.length - 4), function() {
			/*5532*/
			var _C = $k[--$j]; /*5529*/
			if ((_C < 48) || (_C > 57)) { //no-else/*5531*/
				$k[$j++] = 'bwipp.databartruncatedBadCharacter'; /*5530*/
				$k[$j++] = "GS1 DataBar Truncated must contain only digits"; /*5530*/
				$0.raiseerror(); /*5530*/
			} /*5530*/
		}); /*5530*/
		$1.checksum = 0; /*5535*/
		for (var _D = 0; _D <= 12; _D += 1) {
			/*5539*/
			$1.i = _D; /*5537*/
			$k[$j++] = 'checksum'; /*5538*/
			$k[$j++] = $1.checksum; /*5538*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5538*/
			if (($1.i % 2) == 0) { //no-else/*5538*/
				var _J = $k[--$j]; /*5538*/
				$k[$j++] = _J * 3; /*5538*/
			} /*5538*/
			var _K = $k[--$j]; /*5538*/
			var _L = $k[--$j]; /*5538*/
			$1[$k[--$j]] = _L + _K; /*5538*/
		} /*5538*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5540*/
		if ($1.barcode.length == 18) { //no-else/*5545*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5544*/
				$k[$j++] = 'bwipp.databartruncatedBadCheckDigit'; /*5543*/
				$k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; /*5543*/
				$0.raiseerror(); /*5543*/
			} /*5543*/
		} /*5543*/
		var _S = $s(18); /*5546*/
		$puti(_S, 0, $1.barcode); /*5547*/
		$put(_S, 17, $1.checksum + 48); /*5548*/
		$1.barcode = _S; /*5549*/
		$put($1.options, "dontdraw", true); /*5552*/
		$put($1.options, "format", "truncated"); /*5553*/
		$k[$j++] = 'args'; /*5555*/
		$k[$j++] = $1.barcode; /*5555*/
		$k[$j++] = $1.options; /*5555*/
		$0.databaromni(); /*5555*/
		var _Z = $k[--$j]; /*5555*/
		$1[$k[--$j]] = _Z; /*5555*/
		$put($1.args, "opt", $1.options); /*5557*/
		$k[$j++] = $1.args; /*5560*/
		if (!$1.dontdraw) { //no-else/*5560*/
			$0.renlinear(); /*5560*/
		} /*5560*/
	};
	$0.databarlimited = function() {
		var $1 = {}; /*5589*/
		$1.options = $k[--$j]; /*5591*/
		$1.barcode = $k[--$j]; /*5592*/
		$1.dontdraw = false; /*5594*/
		$1.height = 10 / 72; /*5595*/
		$1.linkage = false; /*5596*/
		$forall($1.options, function() {
			/*5607*/
			var _3 = $k[--$j]; /*5607*/
			$1[$k[--$j]] = _3; /*5607*/
		}); /*5607*/
		$1.height = +$1.height; /*5609*/
		if ($ne($geti($1.barcode, 0, 4), "(01)")) { //no-else/*5614*/
			$k[$j++] = 'bwipp.databarlimitedBadAI'; /*5613*/
			$k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; /*5613*/
			$0.raiseerror(); /*5613*/
		} /*5613*/
		if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //no-else/*5617*/
			$k[$j++] = 'bwipp.databarlimitedBadLength'; /*5616*/
			$k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; /*5616*/
			$0.raiseerror(); /*5616*/
		} /*5616*/
		var _B = $get($1.barcode, 4); /*5618*/
		if ((_B < 48) || (_B > 49)) { //no-else/*5620*/
			$k[$j++] = 'bwipp.databarlimitedBadStartDigit'; /*5619*/
			$k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; /*5619*/
			$0.raiseerror(); /*5619*/
		} /*5619*/
		$forall($geti($1.barcode, 5, $1.barcode.length - 5), function() {
			/*5625*/
			var _F = $k[--$j]; /*5622*/
			if ((_F < 48) || (_F > 57)) { //no-else/*5624*/
				$k[$j++] = 'bwipp.databarlimitedBadCharacter'; /*5623*/
				$k[$j++] = "GS1 DataBar Limited must contain only digits"; /*5623*/
				$0.raiseerror(); /*5623*/
			} /*5623*/
		}); /*5623*/
		$1.checksum = 0; /*5628*/
		for (var _G = 0; _G <= 12; _G += 1) {
			/*5632*/
			$1.i = _G; /*5630*/
			$k[$j++] = 'checksum'; /*5631*/
			$k[$j++] = $1.checksum; /*5631*/
			$k[$j++] = $get($1.barcode, $1.i + 4) - 48; /*5631*/
			if (($1.i % 2) == 0) { //no-else/*5631*/
				var _M = $k[--$j]; /*5631*/
				$k[$j++] = _M * 3; /*5631*/
			} /*5631*/
			var _N = $k[--$j]; /*5631*/
			var _O = $k[--$j]; /*5631*/
			$1[$k[--$j]] = _O + _N; /*5631*/
		} /*5631*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*5633*/
		if ($1.barcode.length == 18) { //no-else/*5638*/
			if ($get($1.barcode, 17) != ($1.checksum + 48)) { //no-else/*5637*/
				$k[$j++] = 'bwipp.databarlimitedBadCheckDigit'; /*5636*/
				$k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; /*5636*/
				$0.raiseerror(); /*5636*/
			} /*5636*/
		} /*5636*/
		var _V = $s(18); /*5639*/
		$puti(_V, 0, $1.barcode); /*5640*/
		$put(_V, 17, $1.checksum + 48); /*5641*/
		$1.barcode = _V; /*5642*/
		$k[$j++] = Infinity; /*5647*/
		$forall($geti($1.barcode, 4, 13), function() {
			/*5646*/
			var _a = $k[--$j]; /*5646*/
			$k[$j++] = _a - 48; /*5646*/
		}); /*5646*/
		$1.binval = $a(); /*5647*/
		if ($1.linkage) { //no-else/*5654*/
			$1.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); /*5649*/
			for (var _g = 0, _f = $1.binval.length - 1; _g <= _f; _g += 1) {
				/*5653*/
				$1.i = _g; /*5651*/
				$put($1.binval, $1.i, $get($1.binval, $1.i) + $get($1.linkval, $1.i)); /*5652*/
			} /*5652*/
		} /*5652*/
		$1.txt = $a($1.barcode.length); /*5657*/
		for (var _t = 0, _s = $1.barcode.length - 1; _t <= _s; _t += 1) {
			/*5661*/
			$1.i = _t; /*5659*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*5660*/
		} /*5660*/
		$1.ncr = function() {
			var _10 = $k[--$j]; /*5664*/
			var _11 = $k[--$j]; /*5664*/
			var _12 = _11 - _10; /*5664*/
			if (_10 < (_11 - _10)) { //no-else/*5664*/
				var _ = _12; /*5664*/
				_12 = _10; /*5664*/
				_10 = _; /*5664*/
			} /*5664*/
			$k[$j++] = _12; /*5671*/
			$k[$j++] = 1; /*5671*/
			$k[$j++] = 1; /*5671*/
			for (var _14 = _11, _13 = _10 + 1; _14 >= _13; _14 -= 1) {
				/*5671*/
				var _15 = $k[--$j]; /*5667*/
				var _16 = $k[--$j]; /*5668*/
				var _17 = $k[--$j]; /*5668*/
				$k[$j++] = _17; /*5670*/
				$k[$j++] = _16; /*5670*/
				$k[$j++] = _15 * _14; /*5670*/
				if ($le(_16, _17)) { //no-else/*5670*/
					var _18 = $k[--$j]; /*5669*/
					var _19 = $k[--$j]; /*5669*/
					$k[$j++] = _19 + 1; /*5669*/
					$k[$j++] = ~~(_18 / _19); /*5669*/
				} /*5669*/
			} /*5669*/
			for (;;) {
				/*5675*/
				var _1A = $k[--$j]; /*5673*/
				var _1B = $k[--$j]; /*5673*/
				var _1C = $k[--$j]; /*5673*/
				$k[$j++] = _1C; /*5673*/
				$k[$j++] = _1B; /*5673*/
				$k[$j++] = _1A; /*5673*/
				if ($gt(_1B, _1C)) { //no-else/*5673*/
					break; /*5673*/
				} /*5673*/
				var _1D = $k[--$j]; /*5674*/
				var _1E = $k[--$j]; /*5674*/
				$k[$j++] = _1E + 1; /*5674*/
				$k[$j++] = ~~(_1D / _1E); /*5674*/
			} /*5674*/
			var _1F = $k[--$j]; /*5676*/
			var _1G = $k[--$j]; /*5676*/
			var _1H = $k[--$j]; /*5676*/
			$k[$j++] = _1F; /*5676*/
		}; /*5677*/
		$1.getRSSwidths = function() {
			$1.oe = $k[--$j]; /*5680*/
			$1.el = $k[--$j]; /*5681*/
			$1.mw = $k[--$j]; /*5682*/
			$1.nm = $k[--$j]; /*5683*/
			$1.val = $k[--$j]; /*5684*/
			$1.out = $a($1.el); /*5685*/
			$1.mask = 0; /*5686*/
			for (var _1R = 0, _1Q = $1.el - 2; _1R <= _1Q; _1R += 1) {
				/*5713*/
				$1.bar = _1R; /*5688*/
				$1.ew = 1; /*5689*/
				var _1T = $1.bar; /*5690*/
				$1.mask = $1.mask | ((_1T < 0 ? 1 >>> -_1T : 1 << _1T)); /*5690*/
				for (;;) {
					/*5709*/
					$k[$j++] = 'sval'; /*5691*/
					$k[$j++] = ($1.nm - $1.ew) - 1; /*5691*/
					$k[$j++] = ($1.el - $1.bar) - 2; /*5691*/
					$1.ncr(); /*5691*/
					var _1Y = $k[--$j]; /*5691*/
					$1[$k[--$j]] = _1Y; /*5691*/
					if (($1.oe && ($1.mask == 0)) && (((($1.nm - $1.ew) - ($1.el * 2)) + ($1.bar * 2)) >= -2)) { //no-else/*5694*/
						$k[$j++] = 'sval'; /*5693*/
						$k[$j++] = $1.sval; /*5693*/
						$k[$j++] = (($1.nm - $1.ew) - $1.el) + $1.bar; /*5693*/
						$k[$j++] = ($1.el - $1.bar) - 2; /*5693*/
						$1.ncr(); /*5693*/
						var _1n = $k[--$j]; /*5693*/
						var _1o = $k[--$j]; /*5693*/
						$1[$k[--$j]] = _1o - _1n; /*5693*/
					} /*5693*/
					if (($1.el - $1.bar) > 2) {
						/*5703*/
						$1.lval = 0; /*5696*/
						for (var _1y = ((($1.nm - $1.ew) - $1.el) + $1.bar) + 2, _1x = $1.mw + 1; _1y >= _1x; _1y -= 1) {
							/*5700*/
							$k[$j++] = (($1.nm - _1y) - $1.ew) - 1; /*5698*/
							$k[$j++] = ($1.el - $1.bar) - 3; /*5698*/
							$1.ncr(); /*5698*/
							$1.lval = $k[--$j] + $1.lval; /*5699*/
						} /*5699*/
						$1.sval = $1.sval - ($1.lval * (($1.el - $1.bar) - 1)); /*5701*/
					} else {
						/*5703*/
						if (($1.nm - $1.ew) > $1.mw) { //no-else/*5703*/
							$1.sval = $1.sval - 1; /*5703*/
						} /*5703*/
					} /*5703*/
					$1.val = $1.val - $1.sval; /*5705*/
					if ($1.val < 0) { //no-else/*5706*/
						break; /*5706*/
					} /*5706*/
					$1.ew = $1.ew + 1; /*5707*/
					var _2I = $1.bar; /*5708*/
					$1.mask = $1.mask & (~((_2I < 0 ? 1 >>> -_2I : 1 << _2I))); /*5708*/
				} /*5708*/
				$1.val = $1.val + $1.sval; /*5710*/
				$1.nm = $1.nm - $1.ew; /*5711*/
				$put($1.out, $1.bar, $1.ew); /*5712*/
			} /*5712*/
			$put($1.out, $1.el - 1, $1.nm); /*5714*/
			$k[$j++] = $1.out; /*5715*/
		}; /*5716*/
		for (var _2U = 0; _2U <= 11; _2U += 1) {
			/*5722*/
			$1.i = _2U; /*5719*/
			var _2V = $1.binval; /*5720*/
			var _2W = $1.i; /*5720*/
			$put(_2V, _2W + 1, $get(_2V, _2W + 1) + (($get($1.binval, $1.i) % 2013571) * 10)); /*5720*/
			$put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 2013571)); /*5721*/
		} /*5721*/
		$1.d2 = $get($1.binval, 12) % 2013571; /*5723*/
		var _2i = $1.binval; /*5724*/
		$put(_2i, 12, ~~($get(_2i, 12) / 2013571)); /*5724*/
		$1.d1 = 0; /*5726*/
		$1.i = true; /*5727*/
		for (var _2k = 0; _2k <= 12; _2k += 1) {
			/*5737*/
			$1.j = _2k; /*5729*/
			var _2n = $get($1.binval, $1.j); /*5730*/
			$k[$j++] = _2n; /*5736*/
			if ((_2n == 0) && $1.i) {
				/*5735*/
				$j--; /*5732*/
			} else {
				/*5735*/
				$1.i = false; /*5734*/
				$1.d1 = $1.d1 + ($k[--$j] * (~~Math.pow(10, 12 - $1.j))); /*5735*/
			} /*5735*/
		} /*5735*/
		$1.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); /*5747*/
		$1.i = 0; /*5749*/
		for (;;) {
			/*5759*/
			if ($1.d1 <= $get($1.tab267, $1.i)) { //no-else/*5757*/
				$forall($geti($1.tab267, $1.i + 1, 7)); /*5751*/
				$1.d1te = $k[--$j]; /*5752*/
				$1.d1to = $k[--$j]; /*5752*/
				$1.d1mwe = $k[--$j]; /*5753*/
				$1.d1mwo = $k[--$j]; /*5753*/
				$1.d1ele = $k[--$j]; /*5754*/
				$1.d1elo = $k[--$j]; /*5754*/
				$1.d1gs = $k[--$j]; /*5755*/
				break; /*5756*/
			} /*5756*/
			$1.i = $1.i + 8; /*5758*/
		} /*5758*/
		$1.i = 0; /*5761*/
		for (;;) {
			/*5771*/
			if ($1.d2 <= $get($1.tab267, $1.i)) { //no-else/*5769*/
				$forall($geti($1.tab267, $1.i + 1, 7)); /*5763*/
				$1.d2te = $k[--$j]; /*5764*/
				$1.d2to = $k[--$j]; /*5764*/
				$1.d2mwe = $k[--$j]; /*5765*/
				$1.d2mwo = $k[--$j]; /*5765*/
				$1.d2ele = $k[--$j]; /*5766*/
				$1.d2elo = $k[--$j]; /*5766*/
				$1.d2gs = $k[--$j]; /*5767*/
				break; /*5768*/
			} /*5768*/
			$1.i = $1.i + 8; /*5770*/
		} /*5770*/
		$k[$j++] = 'd1wo'; /*5773*/
		$k[$j++] = ~~(($1.d1 - $1.d1gs) / $1.d1te); /*5773*/
		$k[$j++] = $1.d1elo; /*5773*/
		$k[$j++] = $1.d1mwo; /*5773*/
		$k[$j++] = 7; /*5773*/
		$k[$j++] = false; /*5773*/
		$1.getRSSwidths(); /*5773*/
		var _3S = $k[--$j]; /*5773*/
		$1[$k[--$j]] = _3S; /*5773*/
		$k[$j++] = 'd1we'; /*5774*/
		$k[$j++] = ($1.d1 - $1.d1gs) % $1.d1te; /*5774*/
		$k[$j++] = $1.d1ele; /*5774*/
		$k[$j++] = $1.d1mwe; /*5774*/
		$k[$j++] = 7; /*5774*/
		$k[$j++] = true; /*5774*/
		$1.getRSSwidths(); /*5774*/
		var _3Z = $k[--$j]; /*5774*/
		$1[$k[--$j]] = _3Z; /*5774*/
		$k[$j++] = 'd2wo'; /*5775*/
		$k[$j++] = ~~(($1.d2 - $1.d2gs) / $1.d2te); /*5775*/
		$k[$j++] = $1.d2elo; /*5775*/
		$k[$j++] = $1.d2mwo; /*5775*/
		$k[$j++] = 7; /*5775*/
		$k[$j++] = false; /*5775*/
		$1.getRSSwidths(); /*5775*/
		var _3g = $k[--$j]; /*5775*/
		$1[$k[--$j]] = _3g; /*5775*/
		$k[$j++] = 'd2we'; /*5776*/
		$k[$j++] = ($1.d2 - $1.d2gs) % $1.d2te; /*5776*/
		$k[$j++] = $1.d2ele; /*5776*/
		$k[$j++] = $1.d2mwe; /*5776*/
		$k[$j++] = 7; /*5776*/
		$k[$j++] = true; /*5776*/
		$1.getRSSwidths(); /*5776*/
		var _3n = $k[--$j]; /*5776*/
		$1[$k[--$j]] = _3n; /*5776*/
		$1.d1w = $a(14); /*5778*/
		for (var _3q = 0; _3q <= 6; _3q += 1) {
			/*5783*/
			$1.i = _3q; /*5780*/
			$put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); /*5781*/
			$put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); /*5782*/
		} /*5782*/
		$1.d2w = $a(14); /*5785*/
		for (var _42 = 0; _42 <= 6; _42 += 1) {
			/*5790*/
			$1.i = _42; /*5787*/
			$put($1.d2w, $1.i * 2, $get($1.d2wo, $1.i)); /*5788*/
			$put($1.d2w, ($1.i * 2) + 1, $get($1.d2we, $1.i)); /*5789*/
		} /*5789*/
		$k[$j++] = Infinity; /*5795*/
		var _4D = $1.d1w; /*5793*/
		for (var _4E = 0, _4F = _4D.length; _4E < _4F; _4E++) {
			/*5793*/
			$k[$j++] = $get(_4D, _4E); /*5793*/
		} /*5793*/
		var _4H = $1.d2w; /*5794*/
		for (var _4I = 0, _4J = _4H.length; _4I < _4J; _4I++) {
			/*5794*/
			$k[$j++] = $get(_4H, _4I); /*5794*/
		} /*5794*/
		$1.widths = $a(); /*5795*/
		$1.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); /*5800*/
		$k[$j++] = Infinity; /*5816*/
		for (var _4N = 0; _4N <= 43; _4N += 1) {
			/*5803*/
			$k[$j++] = _4N; /*5803*/
		} /*5803*/
		$k[$j++] = 45; /*5805*/
		$k[$j++] = 52; /*5805*/
		$k[$j++] = 57; /*5805*/
		for (var _4O = 63; _4O <= 66; _4O += 1) {
			/*5805*/
			$k[$j++] = _4O; /*5805*/
		} /*5805*/
		for (var _4P = 73; _4P <= 79; _4P += 1) {
			/*5806*/
			$k[$j++] = _4P; /*5806*/
		} /*5806*/
		$k[$j++] = 82; /*5808*/
		for (var _4Q = 126; _4Q <= 130; _4Q += 1) {
			/*5808*/
			$k[$j++] = _4Q; /*5808*/
		} /*5808*/
		$k[$j++] = 132; /*5810*/
		for (var _4R = 141; _4R <= 146; _4R += 1) {
			/*5810*/
			$k[$j++] = _4R; /*5810*/
		} /*5810*/
		for (var _4S = 210; _4S <= 217; _4S += 1) {
			/*5811*/
			$k[$j++] = _4S; /*5811*/
		} /*5811*/
		$k[$j++] = 220; /*5813*/
		for (var _4T = 316; _4T <= 320; _4T += 1) {
			/*5813*/
			$k[$j++] = _4T; /*5813*/
		} /*5813*/
		$k[$j++] = 322; /*5815*/
		$k[$j++] = 323; /*5815*/
		$k[$j++] = 326; /*5815*/
		$k[$j++] = 337; /*5815*/
		$1.checkseq = $a(); /*5816*/
		$1.checksum = 0; /*5818*/
		for (var _4V = 0; _4V <= 27; _4V += 1) {
			/*5822*/
			$1.i = _4V; /*5820*/
			$1.checksum = $1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i)); /*5821*/
		} /*5821*/
		$1.checksum = $1.checksum % 89; /*5823*/
		$1.seq = $get($1.checkseq, $1.checksum); /*5824*/
		$k[$j++] = 'swidths'; /*5825*/
		$k[$j++] = ~~($1.seq / 21); /*5825*/
		$k[$j++] = 8; /*5825*/
		$k[$j++] = 3; /*5825*/
		$k[$j++] = 6; /*5825*/
		$k[$j++] = false; /*5825*/
		$1.getRSSwidths(); /*5825*/
		var _4i = $k[--$j]; /*5825*/
		$1[$k[--$j]] = _4i; /*5825*/
		$k[$j++] = 'bwidths'; /*5826*/
		$k[$j++] = $1.seq % 21; /*5826*/
		$k[$j++] = 8; /*5826*/
		$k[$j++] = 3; /*5826*/
		$k[$j++] = 6; /*5826*/
		$k[$j++] = false; /*5826*/
		$1.getRSSwidths(); /*5826*/
		var _4l = $k[--$j]; /*5826*/
		$1[$k[--$j]] = _4l; /*5826*/
		$1.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); /*5828*/
		for (var _4o = 0; _4o <= 5; _4o += 1) {
			/*5833*/
			$1.i = _4o; /*5830*/
			$put($1.checkwidths, $1.i * 2, $get($1.swidths, $1.i)); /*5831*/
			$put($1.checkwidths, ($1.i * 2) + 1, $get($1.bwidths, $1.i)); /*5832*/
		} /*5832*/
		$k[$j++] = Infinity; /*5837*/
		var _4z = $1.d1w; /*5836*/
		$k[$j++] = 1; /*5836*/
		for (var _50 = 0, _51 = _4z.length; _50 < _51; _50++) {
			/*5836*/
			$k[$j++] = $get(_4z, _50); /*5836*/
		} /*5836*/
		var _53 = $1.checkwidths; /*5836*/
		for (var _54 = 0, _55 = _53.length; _54 < _55; _54++) {
			/*5836*/
			$k[$j++] = $get(_53, _54); /*5836*/
		} /*5836*/
		var _57 = $1.d2w; /*5836*/
		for (var _58 = 0, _59 = _57.length; _58 < _59; _58++) {
			/*5836*/
			$k[$j++] = $get(_57, _58); /*5836*/
		} /*5836*/
		$k[$j++] = 1; /*5836*/
		$k[$j++] = 1; /*5836*/
		$1.sbs = $a(); /*5837*/
		$k[$j++] = Infinity; /*5847*/
		var _5C = $1.sbs; /*5842*/
		$k[$j++] = Infinity; /*5844*/
		for (var _5E = 0, _5F = ~~(($1.sbs.length + 1) / 2); _5E < _5F; _5E++) {
			/*5843*/
			$k[$j++] = $1.height; /*5843*/
		} /*5843*/
		var _5H = $a(); /*5844*/
		$k[$j++] = Infinity; /*5845*/
		for (var _5J = 0, _5K = ~~(($1.sbs.length + 1) / 2); _5J < _5K; _5J++) {
			/*5844*/
			$k[$j++] = 0; /*5844*/
		} /*5844*/
		var _5L = $a(); /*5845*/
		$k[$j++] = 'ren'; /*5847*/
		$k[$j++] = $0.renlinear; /*5847*/
		$k[$j++] = 'sbs'; /*5847*/
		$k[$j++] = _5C; /*5847*/
		$k[$j++] = 'bhs'; /*5847*/
		$k[$j++] = _5H; /*5847*/
		$k[$j++] = 'bbs'; /*5847*/
		$k[$j++] = _5L; /*5847*/
		$k[$j++] = 'txt'; /*5847*/
		$k[$j++] = $1.txt; /*5847*/
		$k[$j++] = 'textxalign'; /*5847*/
		$k[$j++] = "center"; /*5847*/
		$k[$j++] = 'opt'; /*5847*/
		$k[$j++] = $1.options; /*5847*/
		var _5O = $d(); /*5847*/
		$k[$j++] = _5O; /*5850*/
		if (!$1.dontdraw) { //no-else/*5850*/
			$0.renlinear(); /*5850*/
		} /*5850*/
	};
	$0.databarexpanded = function() {
		var $1 = {}; /*5880*/
		$1.options = $k[--$j]; /*5882*/
		$1.barcode = $k[--$j]; /*5883*/
		$1.dontdraw = false; /*5885*/
		$1.height = 34 / 72; /*5886*/
		$1.format = "expanded"; /*5887*/
		$1.segments = -1; /*5888*/
		$1.linkage = false; /*5889*/
		$1.barxmult = 34; /*5890*/
		$forall($1.options, function() {
			/*5901*/
			var _3 = $k[--$j]; /*5901*/
			$1[$k[--$j]] = _3; /*5901*/
		}); /*5901*/
		$1.height = +$1.height; /*5903*/
		$1.segments = ~~$1.segments; /*5904*/
		$1.barxmult = ~~$1.barxmult; /*5905*/
		if ($1.segments == -1) { //no-else/*5909*/
			var _A = $eq($1.format, "expandedstacked") ? 4 : 22; /*5908*/
			$1.segments = _A; /*5908*/
		} /*5908*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*5913*/
			$1.out = $s($1.in.length); /*5914*/
			$1.j = 0; /*5915*/
			$k[$j++] = $1.in; /*5929*/
			for (;;) {
				/*5929*/
				$search($k[--$j], "^"); /*5918*/
				if ($k[--$j]) {
					/*5927*/
					var _H = $k[--$j]; /*5919*/
					$puti($1.out, $1.j, _H); /*5919*/
					$1.j = (_H.length + $1.j) + 1; /*5920*/
					$j--; /*5921*/
					var _L = $k[--$j]; /*5922*/
					$put($1.out, $1.j - 1, ~~$z($geti(_L, 0, 3))); /*5922*/
					$k[$j++] = $geti(_L, 3, _L.length - 3); /*5923*/
				} else {
					/*5927*/
					var _Q = $k[--$j]; /*5925*/
					$puti($1.out, $1.j, _Q); /*5925*/
					$1.j = _Q.length + $1.j; /*5926*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*5927*/
					break; /*5927*/
				} /*5927*/
			} /*5927*/
		}; /*5930*/
		$1.ais = $a([]); /*5933*/
		$1.vals = $a([]); /*5934*/
		var _Z = $1.barcode; /*5935*/
		$k[$j++] = $geti(_Z, 1, _Z.length - 1); /*5948*/
		for (;;) {
			/*5948*/
			var _b = $k[--$j]; /*5937*/
			$k[$j++] = _b; /*5937*/
			if ($eq(_b, "")) { //no-else/*5937*/
				break; /*5937*/
			} /*5937*/
			$search($k[--$j], ")"); /*5938*/
			$j--; /*5938*/
			var _d = $k[--$j]; /*5939*/
			var _e = $k[--$j]; /*5939*/
			var _f = $k[--$j]; /*5940*/
			$k[$j++] = _d; /*5940*/
			$search(_f, "("); /*5940*/
			if ($k[--$j]) {
				/*5943*/
				var _h = $k[--$j]; /*5941*/
				var _i = $k[--$j]; /*5941*/
				var _j = $k[--$j]; /*5941*/
				var _k = $k[--$j]; /*5941*/
				$k[$j++] = _j; /*5941*/
				$k[$j++] = _k; /*5941*/
				$k[$j++] = _h; /*5941*/
			} else {
				/*5943*/
				var _l = $k[--$j]; /*5943*/
				var _m = $k[--$j]; /*5943*/
				$k[$j++] = ""; /*5943*/
				$k[$j++] = _m; /*5943*/
				$k[$j++] = _l; /*5943*/
			} /*5943*/
			$k[$j++] = Infinity; /*5945*/
			$aload($1.ais); /*5945*/
			var _p = $k[$j - 1 - ($counttomark() + 2)]; /*5945*/
			$k[$j++] = _p; /*5945*/
			$1.ais = $a(); /*5945*/
			$k[$j++] = Infinity; /*5946*/
			$aload($1.vals); /*5946*/
			var _t = $k[$j - 1 - ($counttomark() + 1)]; /*5946*/
			$k[$j++] = _t; /*5946*/
			$1.expand(); /*5946*/
			$1.vals = $a(); /*5946*/
			$j -= 2; /*5947*/
		} /*5947*/
		$j--; /*5949*/
		for (;;) {
			/*6036*/
			if ($1.ais.length == 2) { //no-else/*5961*/
				if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3103")) { //no-else/*5960*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 32767)) { //no-else/*5959*/
						$k[$j++] = "0100"; /*5958*/
						$k[$j++] = false; /*5958*/
						break; /*5958*/
					} /*5958*/
				} /*5958*/
			} /*5958*/
			if ($1.ais.length == 2) { //no-else/*5970*/
				if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3202")) { //no-else/*5969*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 9999)) { //no-else/*5968*/
						$k[$j++] = "0101"; /*5967*/
						$k[$j++] = false; /*5967*/
						break; /*5967*/
					} /*5967*/
				} /*5967*/
			} /*5967*/
			if ($1.ais.length == 2) { //no-else/*5979*/
				if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3203")) { //no-else/*5978*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 22767)) { //no-else/*5977*/
						$k[$j++] = "0101"; /*5976*/
						$k[$j++] = false; /*5976*/
						break; /*5976*/
					} /*5976*/
				} /*5976*/
			} /*5976*/
			var _1Q = $1.ais.length; /*5982*/
			if ((_1Q == 2) || (_1Q == 3)) { //no-else/*6012*/
				$k[$j++] = 'ai310x'; /*5983*/
				$k[$j++] = false; /*5983*/
				for (var _1R = 3100; _1R <= 3109; _1R += 1) {
					/*5983*/
					var _1W = $k[--$j]; /*5983*/
					$k[$j++] = _1W || $eq($cvrs($s(4), _1R, 10), $get($1.ais, 1)); /*5983*/
				} /*5983*/
				var _1X = $k[--$j]; /*5983*/
				$1[$k[--$j]] = _1X; /*5983*/
				$k[$j++] = 'ai320x'; /*5984*/
				$k[$j++] = false; /*5984*/
				for (var _1Z = 3200; _1Z <= 3209; _1Z += 1) {
					/*5984*/
					var _1e = $k[--$j]; /*5984*/
					$k[$j++] = _1e || $eq($cvrs($s(4), _1Z, 10), $get($1.ais, 1)); /*5984*/
				} /*5984*/
				var _1f = $k[--$j]; /*5984*/
				$1[$k[--$j]] = _1f; /*5984*/
				if ($1.ais.length == 3) {
					/*5988*/
					var _1i = $a(["11", "13", "15", "17"]); /*5986*/
					$k[$j++] = 'aibad'; /*5986*/
					$k[$j++] = true; /*5986*/
					for (var _1j = 0, _1k = _1i.length; _1j < _1k; _1j++) {
						/*5986*/
						var _1o = $k[--$j]; /*5986*/
						$k[$j++] = _1o && $ne($get(_1i, _1j), $get($1.ais, 2)); /*5986*/
					} /*5986*/
					var _1p = $k[--$j]; /*5986*/
					$1[$k[--$j]] = _1p; /*5986*/
				} else {
					/*5988*/
					$1.aibad = false; /*5988*/
				} /*5988*/
				if (($eq($get($1.ais, 0), "01") && ($1.ai310x || $1.ai320x)) && (!$1.aibad)) { //no-else/*6011*/
					if ($1.ais.length == 3) {
						/*6008*/
						if (($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 99999)) && ((~~$z($get($1.vals, 2))) <= 999999)) { //no-else/*6003*/
							if ($1.ai310x && $eq($get($1.ais, 2), "11")) { //no-else/*5995*/
								$k[$j++] = "0111000"; /*5995*/
								$k[$j++] = false; /*5995*/
								break; /*5995*/
							} /*5995*/
							if ($1.ai320x && $eq($get($1.ais, 2), "11")) { //no-else/*5996*/
								$k[$j++] = "0111001"; /*5996*/
								$k[$j++] = false; /*5996*/
								break; /*5996*/
							} /*5996*/
							if ($1.ai310x && $eq($get($1.ais, 2), "13")) { //no-else/*5997*/
								$k[$j++] = "0111010"; /*5997*/
								$k[$j++] = false; /*5997*/
								break; /*5997*/
							} /*5997*/
							if ($1.ai320x && $eq($get($1.ais, 2), "13")) { //no-else/*5998*/
								$k[$j++] = "0111011"; /*5998*/
								$k[$j++] = false; /*5998*/
								break; /*5998*/
							} /*5998*/
							if ($1.ai310x && $eq($get($1.ais, 2), "15")) { //no-else/*5999*/
								$k[$j++] = "0111100"; /*5999*/
								$k[$j++] = false; /*5999*/
								break; /*5999*/
							} /*5999*/
							if ($1.ai320x && $eq($get($1.ais, 2), "15")) { //no-else/*6000*/
								$k[$j++] = "0111101"; /*6000*/
								$k[$j++] = false; /*6000*/
								break; /*6000*/
							} /*6000*/
							if ($1.ai310x && $eq($get($1.ais, 2), "17")) { //no-else/*6001*/
								$k[$j++] = "0111110"; /*6001*/
								$k[$j++] = false; /*6001*/
								break; /*6001*/
							} /*6001*/
							if ($1.ai320x && $eq($get($1.ais, 2), "17")) { //no-else/*6002*/
								$k[$j++] = "0111111"; /*6002*/
								$k[$j++] = false; /*6002*/
								break; /*6002*/
							} /*6002*/
						} /*6002*/
					} else {
						/*6008*/
						if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ((~~$z($get($1.vals, 1))) <= 99999)) { //no-else/*6009*/
							if ($1.ai310x) { //no-else/*6007*/
								$k[$j++] = "0111000"; /*6007*/
								$k[$j++] = false; /*6007*/
								break; /*6007*/
							} /*6007*/
							if ($1.ai320x) { //no-else/*6008*/
								$k[$j++] = "0111001"; /*6008*/
								$k[$j++] = false; /*6008*/
								break; /*6008*/
							} /*6008*/
						} /*6008*/
					} /*6008*/
				} /*6008*/
			} /*6008*/
			if ($1.ais.length >= 2) { //no-else/*6020*/
				$k[$j++] = 'ai392x'; /*6016*/
				$k[$j++] = false; /*6016*/
				for (var _2a = 3920; _2a <= 3923; _2a += 1) {
					/*6016*/
					var _2f = $k[--$j]; /*6016*/
					$k[$j++] = _2f || $eq($cvrs($s(4), _2a, 10), $get($1.ais, 1)); /*6016*/
				} /*6016*/
				var _2g = $k[--$j]; /*6016*/
				$1[$k[--$j]] = _2g; /*6016*/
				if ($eq($get($1.ais, 0), "01") && $1.ai392x) { //no-else/*6019*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //no-else/*6018*/
						$k[$j++] = "01100"; /*6018*/
						$k[$j++] = true; /*6018*/
						break; /*6018*/
					} /*6018*/
				} /*6018*/
			} /*6018*/
			if ($1.ais.length >= 2) { //no-else/*6028*/
				$k[$j++] = 'ai393x'; /*6024*/
				$k[$j++] = false; /*6024*/
				for (var _2p = 3930; _2p <= 3933; _2p += 1) {
					/*6024*/
					var _2u = $k[--$j]; /*6024*/
					$k[$j++] = _2u || $eq($cvrs($s(4), _2p, 10), $get($1.ais, 1)); /*6024*/
				} /*6024*/
				var _2v = $k[--$j]; /*6024*/
				$1[$k[--$j]] = _2v; /*6024*/
				if ($eq($get($1.ais, 0), "01") && $1.ai393x) { //no-else/*6027*/
					if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //no-else/*6026*/
						$k[$j++] = "01101"; /*6026*/
						$k[$j++] = true; /*6026*/
						break; /*6026*/
					} /*6026*/
				} /*6026*/
			} /*6026*/
			if ($eq($get($1.ais, 0), "01")) { //no-else/*6031*/
				$k[$j++] = "1"; /*6031*/
				$k[$j++] = true; /*6031*/
				break; /*6031*/
			} /*6031*/
			$k[$j++] = "00"; /*6034*/
			$k[$j++] = true; /*6034*/
			break; /*6034*/
		} /*6034*/
		$1.gpfallow = $k[--$j]; /*6037*/
		$1.method = $k[--$j]; /*6038*/
		$1.conv12to40 = function() {
			var _38 = $strcpy($s(40), "0000000000000000000000000000000000000000"); /*6041*/
			var _39 = $k[--$j]; /*6042*/
			var _3D = $cvrs($s(10), ~~$z($geti(_39, 0, 3)), 2); /*6042*/
			$puti($geti(_38, 0, 10), 10 - _3D.length, _3D); /*6042*/
			var _3H = $cvrs($s(10), ~~$z($geti(_39, 3, 3)), 2); /*6043*/
			$puti($geti(_38, 10, 10), 10 - _3H.length, _3H); /*6043*/
			var _3L = $cvrs($s(10), ~~$z($geti(_39, 6, 3)), 2); /*6044*/
			$puti($geti(_38, 20, 10), 10 - _3L.length, _3L); /*6044*/
			var _3P = $cvrs($s(10), ~~$z($geti(_39, 9, 3)), 2); /*6045*/
			$puti($geti(_38, 30, 10), 10 - _3P.length, _3P); /*6045*/
			$k[$j++] = _38; /*6046*/
		}; /*6047*/
		$1.conv13to44 = function() {
			var _3R = $strcpy($s(44), "00000000000000000000000000000000000000000000"); /*6050*/
			var _3S = $k[--$j]; /*6051*/
			var _3W = $cvrs($s(4), ~~$z($geti(_3S, 0, 1)), 2); /*6051*/
			$puti($geti(_3R, 0, 4), 4 - _3W.length, _3W); /*6051*/
			$k[$j++] = _3R; /*6052*/
			$k[$j++] = _3R; /*6052*/
			$k[$j++] = $geti(_3S, 1, 12); /*6052*/
			$1.conv12to40(); /*6052*/
			var _3Y = $k[--$j]; /*6052*/
			$puti($k[--$j], 4, _3Y); /*6052*/
		}; /*6053*/
		$1.tobin = function() {
			var _3b = $s($k[--$j]); /*6056*/
			$k[$j++] = _3b; /*6056*/
			for (var _3d = 0, _3c = _3b.length - 1; _3d <= _3c; _3d += 1) {
				/*6056*/
				var _3e = $k[--$j]; /*6056*/
				$put(_3e, _3d, 48); /*6056*/
				$k[$j++] = _3e; /*6056*/
			} /*6056*/
			var _3f = $k[--$j]; /*6057*/
			var _3i = $cvrs($s(_3f.length), $k[--$j], 2); /*6057*/
			$puti(_3f, _3f.length - _3i.length, _3i); /*6057*/
			$k[$j++] = _3f; /*6057*/
		}; /*6058*/
		if ($eq($1.method, "00")) { //no-else/*6063*/
			$1.cdf = $a([]); /*6061*/
			$1.gpf = $a([]); /*6062*/
		} /*6062*/
		if ($eq($1.method, "1")) { //no-else/*6071*/
			$k[$j++] = 'cdf'; /*6066*/
			$k[$j++] = $geti($get($1.vals, 0), 0, 13); /*6066*/
			$1.conv13to44(); /*6066*/
			var _3q = $k[--$j]; /*6066*/
			$1[$k[--$j]] = _3q; /*6066*/
			$k[$j++] = Infinity; /*6067*/
			var _3s = $1.cdf; /*6067*/
			for (var _3t = 0, _3u = _3s.length; _3t < _3u; _3t++) {
				/*6067*/
				$k[$j++] = $get(_3s, _3t) - 48; /*6067*/
			} /*6067*/
			$1.cdf = $a(); /*6067*/
			$1.gpf = $a([]); /*6068*/
			$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*6069*/
			$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*6070*/
		} /*6070*/
		if ($eq($1.method, "0100")) { //no-else/*6081*/
			$1.cdf = $s(55); /*6074*/
			$k[$j++] = $1.cdf; /*6075*/
			$k[$j++] = 0; /*6075*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6075*/
			$1.conv12to40(); /*6075*/
			var _4A = $k[--$j]; /*6075*/
			var _4B = $k[--$j]; /*6075*/
			$puti($k[--$j], _4B, _4A); /*6075*/
			$k[$j++] = $1.cdf; /*6076*/
			$k[$j++] = 40; /*6076*/
			$k[$j++] = ~~$z($get($1.vals, 1)); /*6076*/
			$k[$j++] = 15; /*6076*/
			$1.tobin(); /*6076*/
			var _4G = $k[--$j]; /*6076*/
			var _4H = $k[--$j]; /*6076*/
			$puti($k[--$j], _4H, _4G); /*6076*/
			$k[$j++] = Infinity; /*6077*/
			var _4J = $1.cdf; /*6077*/
			for (var _4K = 0, _4L = _4J.length; _4K < _4L; _4K++) {
				/*6077*/
				$k[$j++] = $get(_4J, _4K) - 48; /*6077*/
			} /*6077*/
			$1.cdf = $a(); /*6077*/
			$1.gpf = $a([]); /*6078*/
			$1.ais = $a([]); /*6079*/
			$1.vals = $a([]); /*6080*/
		} /*6080*/
		if ($eq($1.method, "0101")) { //no-else/*6096*/
			$1.cdf = $s(55); /*6084*/
			$k[$j++] = $1.cdf; /*6085*/
			$k[$j++] = 0; /*6085*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6085*/
			$1.conv12to40(); /*6085*/
			var _4X = $k[--$j]; /*6085*/
			var _4Y = $k[--$j]; /*6085*/
			$puti($k[--$j], _4Y, _4X); /*6085*/
			if ($eq($get($1.ais, 1), "3202")) {
				/*6089*/
				$k[$j++] = ~~$z($get($1.vals, 1)); /*6087*/
				$k[$j++] = 15; /*6087*/
				$1.tobin(); /*6087*/
			} else {
				/*6089*/
				$k[$j++] = (~~$z($get($1.vals, 1))) + 10000; /*6089*/
				$k[$j++] = 15; /*6089*/
				$1.tobin(); /*6089*/
			} /*6089*/
			$puti($1.cdf, 40, $k[--$j]); /*6091*/
			$k[$j++] = Infinity; /*6092*/
			var _4i = $1.cdf; /*6092*/
			for (var _4j = 0, _4k = _4i.length; _4j < _4k; _4j++) {
				/*6092*/
				$k[$j++] = $get(_4i, _4j) - 48; /*6092*/
			} /*6092*/
			$1.cdf = $a(); /*6092*/
			$1.gpf = $a([]); /*6093*/
			$1.ais = $a([]); /*6094*/
			$1.vals = $a([]); /*6095*/
		} /*6095*/
		if ($1.method.length == 7) { //no-else/*6117*/
			$1.cdf = $s(76); /*6099*/
			$k[$j++] = $1.cdf; /*6100*/
			$k[$j++] = 0; /*6100*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6100*/
			$1.conv12to40(); /*6100*/
			var _4w = $k[--$j]; /*6100*/
			var _4x = $k[--$j]; /*6100*/
			$puti($k[--$j], _4x, _4w); /*6100*/
			var _4z = $s(6); /*6101*/
			$puti(_4z, 0, $geti($get($1.ais, 1), 3, 1)); /*6101*/
			$puti(_4z, 1, $geti($get($1.vals, 1), 1, 5)); /*6102*/
			$k[$j++] = ~~$z(_4z); /*6102*/
			$k[$j++] = 20; /*6102*/
			$1.tobin(); /*6102*/
			$puti($1.cdf, 40, $k[--$j]); /*6103*/
			if ($1.ais.length == 3) {
				/*6110*/
				var _5A = $get($1.vals, 2); /*6105*/
				$k[$j++] = ((~~$z($geti(_5A, 0, 2))) * 384) + ((((~~$z($geti(_5A, 2, 2))) - 1) * 32) + (~~$z($geti(_5A, 4, 2)))); /*6108*/
			} else {
				/*6110*/
				$k[$j++] = 38400; /*6110*/
			} /*6110*/
			$k[$j++] = 16; /*6112*/
			$1.tobin(); /*6112*/
			$puti($1.cdf, 60, $k[--$j]); /*6112*/
			$k[$j++] = Infinity; /*6113*/
			var _5G = $1.cdf; /*6113*/
			for (var _5H = 0, _5I = _5G.length; _5H < _5I; _5H++) {
				/*6113*/
				$k[$j++] = $get(_5G, _5H) - 48; /*6113*/
			} /*6113*/
			$1.cdf = $a(); /*6113*/
			$1.gpf = $a([]); /*6114*/
			$1.ais = $a([]); /*6115*/
			$1.vals = $a([]); /*6116*/
		} /*6116*/
		if ($eq($1.method, "01100")) { //no-else/*6127*/
			$1.cdf = $s(42); /*6120*/
			$k[$j++] = $1.cdf; /*6121*/
			$k[$j++] = 0; /*6121*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6121*/
			$1.conv12to40(); /*6121*/
			var _5U = $k[--$j]; /*6121*/
			var _5V = $k[--$j]; /*6121*/
			$puti($k[--$j], _5V, _5U); /*6121*/
			$k[$j++] = $1.cdf; /*6122*/
			$k[$j++] = 40; /*6122*/
			$k[$j++] = ~~$z($geti($get($1.ais, 1), 3, 1)); /*6122*/
			$k[$j++] = 2; /*6122*/
			$1.tobin(); /*6122*/
			var _5b = $k[--$j]; /*6122*/
			var _5c = $k[--$j]; /*6122*/
			$puti($k[--$j], _5c, _5b); /*6122*/
			$k[$j++] = Infinity; /*6123*/
			var _5e = $1.cdf; /*6123*/
			for (var _5f = 0, _5g = _5e.length; _5f < _5g; _5f++) {
				/*6123*/
				$k[$j++] = $get(_5e, _5f) - 48; /*6123*/
			} /*6123*/
			$1.cdf = $a(); /*6123*/
			$k[$j++] = Infinity; /*6124*/
			$forall($get($1.vals, 1)); /*6124*/
			$1.gpf = $a(); /*6124*/
			$1.ais = $geti($1.ais, 2, $1.ais.length - 2); /*6125*/
			$1.vals = $geti($1.vals, 2, $1.vals.length - 2); /*6126*/
		} /*6126*/
		if ($eq($1.method, "01101")) { //no-else/*6138*/
			$1.cdf = $s(52); /*6130*/
			$k[$j++] = $1.cdf; /*6131*/
			$k[$j++] = 0; /*6131*/
			$k[$j++] = $geti($get($1.vals, 0), 1, 12); /*6131*/
			$1.conv12to40(); /*6131*/
			var _5y = $k[--$j]; /*6131*/
			var _5z = $k[--$j]; /*6131*/
			$puti($k[--$j], _5z, _5y); /*6131*/
			$k[$j++] = $1.cdf; /*6132*/
			$k[$j++] = 40; /*6132*/
			$k[$j++] = ~~$z($geti($get($1.ais, 1), 3, 1)); /*6132*/
			$k[$j++] = 2; /*6132*/
			$1.tobin(); /*6132*/
			var _65 = $k[--$j]; /*6132*/
			var _66 = $k[--$j]; /*6132*/
			$puti($k[--$j], _66, _65); /*6132*/
			$k[$j++] = $1.cdf; /*6133*/
			$k[$j++] = 42; /*6133*/
			$k[$j++] = ~~$z($geti($get($1.vals, 1), 0, 3)); /*6133*/
			$k[$j++] = 10; /*6133*/
			$1.tobin(); /*6133*/
			var _6C = $k[--$j]; /*6133*/
			var _6D = $k[--$j]; /*6133*/
			$puti($k[--$j], _6D, _6C); /*6133*/
			$k[$j++] = Infinity; /*6134*/
			var _6F = $1.cdf; /*6134*/
			for (var _6G = 0, _6H = _6F.length; _6G < _6H; _6G++) {
				/*6134*/
				$k[$j++] = $get(_6F, _6G) - 48; /*6134*/
			} /*6134*/
			$1.cdf = $a(); /*6134*/
			$k[$j++] = Infinity; /*6135*/
			var _6L = $get($1.vals, 1); /*6135*/
			$forall($geti(_6L, 3, _6L.length - 3)); /*6135*/
			$1.gpf = $a(); /*6135*/
			$1.ais = $geti($1.ais, 2, $1.ais.length - 2); /*6136*/
			$1.vals = $geti($1.vals, 2, $1.vals.length - 2); /*6137*/
		} /*6137*/
		if ($1.gpfallow) {
			/*6144*/
			$1.vlf = $a(2); /*6142*/
		} else {
			/*6144*/
			$1.vlf = $a([]); /*6144*/
		} /*6144*/
		$1.aifixed = new Map; /*6150*/
		$k[$j++] = Infinity; /*6152*/
		for (var _6X = 0; _6X <= 4; _6X += 1) {
			/*6152*/
			$k[$j++] = _6X; /*6152*/
		} /*6152*/
		var _6Y = $a(); /*6152*/
		for (var _6Z = 0, _6a = _6Y.length; _6Z < _6a; _6Z++) {
			/*6155*/
			var _6d = $strcpy($s(2), "00"); /*6154*/
			$put(_6d, 1, $get(_6Y, _6Z) + 48); /*6154*/
			$put($1.aifixed, _6d, _6d); /*6154*/
		} /*6154*/
		$k[$j++] = Infinity; /*6160*/
		for (var _6f = 11; _6f <= 20; _6f += 1) {
			/*6157*/
			$k[$j++] = _6f; /*6157*/
		} /*6157*/
		$k[$j++] = 23; /*6159*/
		for (var _6g = 31; _6g <= 36; _6g += 1) {
			/*6159*/
			$k[$j++] = _6g; /*6159*/
		} /*6159*/
		$k[$j++] = 41; /*6160*/
		var _6h = $a(); /*6160*/
		for (var _6i = 0, _6j = _6h.length; _6i < _6j; _6i++) {
			/*6163*/
			var _6m = $cvrs($s(2), $get(_6h, _6i), 10); /*6162*/
			$put($1.aifixed, _6m, _6m); /*6162*/
		} /*6162*/
		$1.fnc1 = -1; /*6165*/
		$1.lnumeric = -2; /*6165*/
		$1.lalphanumeric = -3; /*6165*/
		$1.liso646 = -4; /*6165*/
		$k[$j++] = Infinity; /*6177*/
		for (var _6o = 0; _6o <= 119; _6o += 1) {
			/*6176*/
			var _6q = $strcpy($s(2), "00"); /*6169*/
			var _6s = $cvrs($s(2), _6o, 11); /*6169*/
			$puti(_6q, 2 - _6s.length, _6s); /*6170*/
			$k[$j++] = _6o; /*6171*/
			$k[$j++] = _6q; /*6171*/
			if ($get(_6q, 0) == 65) { //no-else/*6171*/
				var _6u = $k[--$j]; /*6171*/
				$put(_6u, 0, 94); /*6171*/
				$k[$j++] = _6u; /*6171*/
			} /*6171*/
			var _6v = $k[--$j]; /*6172*/
			$k[$j++] = _6v; /*6172*/
			if ($get(_6v, 1) == 65) { //no-else/*6172*/
				var _6x = $k[--$j]; /*6172*/
				$put(_6x, 1, 94); /*6172*/
				$k[$j++] = _6x; /*6172*/
			} /*6172*/
			var _6y = $k[--$j]; /*6173*/
			var _71 = $strcpy($s(7), "0000000"); /*6174*/
			var _73 = $cvrs($s(7), $k[--$j] + 8, 2); /*6174*/
			$puti(_71, 7 - _73.length, _73); /*6175*/
			$k[$j++] = _6y; /*6175*/
			$k[$j++] = _71; /*6175*/
		} /*6175*/
		$k[$j++] = $1.lalphanumeric; /*6177*/
		$k[$j++] = "0000"; /*6177*/
		$1.numeric = $d(); /*6178*/
		$k[$j++] = Infinity; /*6187*/
		for (var _76 = 48; _76 <= 57; _76 += 1) {
			/*6181*/
			$k[$j++] = _76; /*6181*/
			$k[$j++] = _76 - 43; /*6181*/
			$k[$j++] = 5; /*6181*/
			$1.tobin(); /*6181*/
		} /*6181*/
		$k[$j++] = $1.fnc1; /*6183*/
		$k[$j++] = "01111"; /*6183*/
		for (var _78 = 65; _78 <= 90; _78 += 1) {
			/*6183*/
			$k[$j++] = _78; /*6183*/
			$k[$j++] = _78 - 33; /*6183*/
			$k[$j++] = 6; /*6183*/
			$1.tobin(); /*6183*/
		} /*6183*/
		$k[$j++] = 42; /*6185*/
		$k[$j++] = "111010"; /*6185*/
		for (var _79 = 44; _79 <= 47; _79 += 1) {
			/*6185*/
			$k[$j++] = _79; /*6185*/
			$k[$j++] = _79 + 15; /*6185*/
			$k[$j++] = 6; /*6185*/
			$1.tobin(); /*6185*/
		} /*6185*/
		$k[$j++] = $1.lnumeric; /*6187*/
		$k[$j++] = "000"; /*6187*/
		$k[$j++] = $1.liso646; /*6187*/
		$k[$j++] = "00100"; /*6187*/
		$1.alphanumeric = $d(); /*6188*/
		$k[$j++] = Infinity; /*6202*/
		for (var _7D = 48; _7D <= 57; _7D += 1) {
			/*6191*/
			$k[$j++] = _7D; /*6191*/
			$k[$j++] = _7D - 43; /*6191*/
			$k[$j++] = 5; /*6191*/
			$1.tobin(); /*6191*/
		} /*6191*/
		$k[$j++] = $1.fnc1; /*6193*/
		$k[$j++] = "01111"; /*6193*/
		for (var _7F = 65; _7F <= 90; _7F += 1) {
			/*6193*/
			$k[$j++] = _7F; /*6193*/
			$k[$j++] = _7F - 1; /*6193*/
			$k[$j++] = 7; /*6193*/
			$1.tobin(); /*6193*/
		} /*6193*/
		for (var _7G = 97; _7G <= 122; _7G += 1) {
			/*6194*/
			$k[$j++] = _7G; /*6194*/
			$k[$j++] = _7G - 7; /*6194*/
			$k[$j++] = 7; /*6194*/
			$1.tobin(); /*6194*/
		} /*6194*/
		$k[$j++] = 33; /*6197*/
		$k[$j++] = "11101000"; /*6197*/
		$k[$j++] = 34; /*6197*/
		$k[$j++] = "11101001"; /*6197*/
		for (var _7H = 37; _7H <= 47; _7H += 1) {
			/*6197*/
			$k[$j++] = _7H; /*6197*/
			$k[$j++] = _7H + 197; /*6197*/
			$k[$j++] = 8; /*6197*/
			$1.tobin(); /*6197*/
		} /*6197*/
		for (var _7I = 58; _7I <= 63; _7I += 1) {
			/*6198*/
			$k[$j++] = _7I; /*6198*/
			$k[$j++] = _7I + 187; /*6198*/
			$k[$j++] = 8; /*6198*/
			$1.tobin(); /*6198*/
		} /*6198*/
		$k[$j++] = 95; /*6202*/
		$k[$j++] = "11111011"; /*6202*/
		$k[$j++] = 32; /*6202*/
		$k[$j++] = "11111100"; /*6202*/
		$k[$j++] = $1.lnumeric; /*6202*/
		$k[$j++] = "000"; /*6202*/
		$k[$j++] = $1.lalphanumeric; /*6202*/
		$k[$j++] = "00100"; /*6202*/
		$1.iso646 = $d(); /*6203*/
		for (var _7O = 0, _7N = $1.ais.length - 1; _7O <= _7N; _7O += 1) {
			/*6221*/
			$1.i = _7O; /*6207*/
			$1.ai = $get($1.ais, $1.i); /*6208*/
			$1.val = $get($1.vals, $1.i); /*6209*/
			var _7Y = $a(($1.gpf.length + $1.ai.length) + $1.val.length); /*6210*/
			$puti(_7Y, 0, $1.gpf); /*6211*/
			$k[$j++] = _7Y; /*6212*/
			$k[$j++] = _7Y; /*6212*/
			$k[$j++] = $1.gpf.length; /*6212*/
			$k[$j++] = $1.ai; /*6212*/
			$k[$j++] = Infinity; /*6212*/
			var _7c = $k[--$j]; /*6212*/
			var _7d = $k[--$j]; /*6212*/
			$k[$j++] = _7c; /*6212*/
			$forall(_7d); /*6212*/
			var _7e = $a(); /*6212*/
			var _7f = $k[--$j]; /*6212*/
			$puti($k[--$j], _7f, _7e); /*6212*/
			var _7h = $k[--$j]; /*6213*/
			$k[$j++] = _7h; /*6213*/
			$k[$j++] = _7h; /*6213*/
			$k[$j++] = $1.gpf.length + $1.ai.length; /*6213*/
			$k[$j++] = $1.val; /*6213*/
			$k[$j++] = Infinity; /*6213*/
			var _7l = $k[--$j]; /*6213*/
			var _7m = $k[--$j]; /*6213*/
			$k[$j++] = _7l; /*6213*/
			$forall(_7m); /*6213*/
			var _7n = $a(); /*6213*/
			var _7o = $k[--$j]; /*6213*/
			$puti($k[--$j], _7o, _7n); /*6213*/
			$1.gpf = $k[--$j]; /*6214*/
			var _7w = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*6215*/
			if (($1.i != ($1.ais.length - 1)) && (!_7w)) { //no-else/*6220*/
				var _7y = $a($1.gpf.length + 1); /*6216*/
				$puti(_7y, 0, $1.gpf); /*6217*/
				$put(_7y, $1.gpf.length, $1.fnc1); /*6218*/
				$1.gpf = _7y; /*6219*/
			} /*6219*/
		} /*6219*/
		$1.rembits = function() {
			var _82 = $k[--$j]; /*6225*/
			var _83 = 48; /*6227*/
			var _84 = (~~Math.ceil(_82 / 12)) * 12; /*6227*/
			if (((~~Math.ceil(_82 / 12)) * 12) < 48) { //no-else/*6227*/
				var _ = _83; /*6227*/
				_83 = _84; /*6227*/
				_84 = _; /*6227*/
			} /*6227*/
			var _85 = ~~(_84 / 12); /*6228*/
			$k[$j++] = _82; /*6232*/
			$k[$j++] = _84; /*6232*/
			$k[$j++] = _85; /*6232*/
			if ((_85 % $1.segments) == 1) {
				/*6231*/
				var _87 = $k[--$j]; /*6229*/
				var _88 = $k[--$j]; /*6229*/
				$k[$j++] = (_87 + 1) * 12; /*6229*/
			} else {
				/*6231*/
				$j--; /*6231*/
			} /*6231*/
			var _89 = $k[--$j]; /*6233*/
			var _8A = $k[--$j]; /*6233*/
			$k[$j++] = _89 - _8A; /*6233*/
		}; /*6234*/
		$1.encode = function() {
			var _8B = $k[--$j]; /*6237*/
			$k[$j++] = _8B; /*6237*/
			if ($ne(_8B, 'raw')) {
				/*6237*/
				var _8C = $k[--$j]; /*6237*/
				var _8E = $get(_8C, $k[--$j]); /*6237*/
				$k[$j++] = _8E; /*6237*/
			} else {
				/*6237*/
				$j--; /*6237*/
			} /*6237*/
			$k[$j++] = Infinity; /*6238*/
			var _8F = $k[--$j]; /*6238*/
			var _8G = $k[--$j]; /*6238*/
			$k[$j++] = _8F; /*6238*/
			$forall(_8G, function() {
				/*6238*/
				var _8H = $k[--$j]; /*6238*/
				$k[$j++] = _8H - 48; /*6238*/
			}); /*6238*/
			var _8I = $a(); /*6238*/
			$puti($1.gpfenc, $1.j, _8I); /*6240*/
			$1.j = _8I.length + $1.j; /*6241*/
		}; /*6242*/
		$k[$j++] = Infinity; /*6245*/
		for (var _8N = 0, _8O = $1.gpf.length; _8N < _8O; _8N++) {
			/*6245*/
			$k[$j++] = 0; /*6245*/
		} /*6245*/
		$k[$j++] = 0; /*6245*/
		$k[$j++] = -1; /*6245*/
		$1.numericruns = $a(); /*6245*/
		$k[$j++] = Infinity; /*6246*/
		for (var _8R = 0, _8S = $1.gpf.length; _8R < _8S; _8R++) {
			/*6246*/
			$k[$j++] = 0; /*6246*/
		} /*6246*/
		$k[$j++] = 0; /*6246*/
		$1.alphanumericruns = $a(); /*6246*/
		$k[$j++] = Infinity; /*6247*/
		for (var _8V = 0, _8W = $1.gpf.length; _8V < _8W; _8V++) {
			/*6247*/
			$k[$j++] = 0; /*6247*/
		} /*6247*/
		$k[$j++] = 9999; /*6247*/
		$1.nextiso646only = $a(); /*6247*/
		for (var _8Z = $1.gpf.length - 1; _8Z >= 0; _8Z -= 1) {
			/*6269*/
			$1.i = _8Z; /*6249*/
			var _8e = $strcpy($s(2), "00"); /*6251*/
			var _8h = $get($1.gpf, $1.i); /*6252*/
			$k[$j++] = $get($1.gpf, $1.i); /*6252*/
			$k[$j++] = _8e; /*6252*/
			$k[$j++] = _8e; /*6252*/
			$k[$j++] = 0; /*6252*/
			$k[$j++] = _8h; /*6252*/
			if (_8h == $1.fnc1) { //no-else/*6252*/
				$j--; /*6252*/
				$k[$j++] = 94; /*6252*/
			} /*6252*/
			var _8j = $k[--$j]; /*6252*/
			var _8k = $k[--$j]; /*6252*/
			$put($k[--$j], _8k, _8j); /*6252*/
			if ($1.i < ($1.gpf.length - 1)) { //no-else/*6253*/
				var _8o = $k[--$j]; /*6253*/
				var _8r = $get($1.gpf, $1.i + 1); /*6253*/
				$k[$j++] = _8o; /*6253*/
				$k[$j++] = _8o; /*6253*/
				$k[$j++] = 1; /*6253*/
				$k[$j++] = _8r; /*6253*/
				if (_8r == $1.fnc1) { //no-else/*6253*/
					$j--; /*6253*/
					$k[$j++] = 94; /*6253*/
				} /*6253*/
				var _8t = $k[--$j]; /*6253*/
				var _8u = $k[--$j]; /*6253*/
				$put($k[--$j], _8u, _8t); /*6253*/
			} /*6253*/
			var _8y = $get($1.numeric, $k[--$j]) !== undefined; /*6254*/
			if (_8y) {
				/*6257*/
				$put($1.numericruns, $1.i, $get($1.numericruns, $1.i + 2) + 2); /*6255*/
			} else {
				/*6257*/
				$put($1.numericruns, $1.i, 0); /*6257*/
			} /*6257*/
			var _96 = $k[--$j]; /*6259*/
			var _98 = $get($1.alphanumeric, _96) !== undefined; /*6259*/
			$k[$j++] = _96; /*6263*/
			if (_98) {
				/*6262*/
				$put($1.alphanumericruns, $1.i, $get($1.alphanumericruns, $1.i + 1) + 1); /*6260*/
			} else {
				/*6262*/
				$put($1.alphanumericruns, $1.i, 0); /*6262*/
			} /*6262*/
			var _9G = $k[--$j]; /*6264*/
			var _9I = $get($1.iso646, _9G) !== undefined; /*6264*/
			var _9K = $get($1.alphanumeric, _9G) !== undefined; /*6264*/
			if (_9I && (!_9K)) {
				/*6267*/
				$put($1.nextiso646only, $1.i, 0); /*6265*/
			} else {
				/*6267*/
				$put($1.nextiso646only, $1.i, $get($1.nextiso646only, $1.i + 1) + 1); /*6267*/
			} /*6267*/
		} /*6267*/
		$1.gpfenc = $a(252); /*6272*/
		$1.i = 0; /*6273*/
		$1.j = 0; /*6273*/
		$1.mode = "numeric"; /*6273*/
		for (;;) {
			/*6363*/
			if ($1.i == $1.gpf.length) { //no-else/*6275*/
				break; /*6275*/
			} /*6275*/
			for (;;) {
				/*6362*/
				if ($eq($1.mode, "numeric")) { //no-else/*6311*/
					if ($1.i <= ($1.gpf.length - 2)) {
						/*6308*/
						var _9Y = $s(2); /*6280*/
						var _9b = $get($1.gpf, $1.i); /*6281*/
						$k[$j++] = _9Y; /*6281*/
						$k[$j++] = _9Y; /*6281*/
						$k[$j++] = 0; /*6281*/
						$k[$j++] = _9b; /*6281*/
						if (_9b == $1.fnc1) { //no-else/*6281*/
							$j--; /*6281*/
							$k[$j++] = 94; /*6281*/
						} /*6281*/
						var _9d = $k[--$j]; /*6281*/
						var _9e = $k[--$j]; /*6281*/
						$put($k[--$j], _9e, _9d); /*6281*/
						var _9g = $k[--$j]; /*6282*/
						var _9j = $get($1.gpf, $1.i + 1); /*6282*/
						$k[$j++] = _9g; /*6282*/
						$k[$j++] = _9g; /*6282*/
						$k[$j++] = 1; /*6282*/
						$k[$j++] = _9j; /*6282*/
						if (_9j == $1.fnc1) { //no-else/*6282*/
							$j--; /*6282*/
							$k[$j++] = 94; /*6282*/
						} /*6282*/
						var _9l = $k[--$j]; /*6282*/
						var _9m = $k[--$j]; /*6282*/
						$put($k[--$j], _9m, _9l); /*6282*/
						var _9o = $k[--$j]; /*6283*/
						var _9q = $get($1.numeric, _9o) !== undefined; /*6283*/
						$k[$j++] = _9o; /*6287*/
						if (_9q) { //no-else/*6287*/
							$k[$j++] = $1.numeric; /*6284*/
							$1.encode(); /*6284*/
							$1.i = $1.i + 2; /*6285*/
							break; /*6286*/
						} /*6286*/
						$j--; /*6288*/
						$k[$j++] = $1.lalphanumeric; /*6289*/
						$k[$j++] = $1.numeric; /*6289*/
						$1.encode(); /*6289*/
						$1.mode = "alphanumeric"; /*6290*/
						break; /*6291*/
					} else {
						/*6308*/
						var _9x = $get($1.gpf, $1.i); /*6293*/
						if ((_9x < 48) || (_9x > 57)) { //no-else/*6297*/
							$k[$j++] = $1.lalphanumeric; /*6294*/
							$k[$j++] = $1.numeric; /*6294*/
							$1.encode(); /*6294*/
							$1.mode = "alphanumeric"; /*6295*/
							break; /*6296*/
						} /*6296*/
						$k[$j++] = 'rem'; /*6298*/
						$k[$j++] = ((((12 + 1) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.j; /*6298*/
						$1.rembits(); /*6298*/
						var _A4 = $k[--$j]; /*6298*/
						$1[$k[--$j]] = _A4; /*6298*/
						if (($1.rem >= 4) && ($1.rem <= 6)) {
							/*6308*/
							var _AB = $geti($strcpy($s(6), "000000"), 0, $1.rem); /*6300*/
							var _AG = $cvrs($s(4), $get($1.gpf, $1.i) - 47, 2); /*6301*/
							$puti(_AB, 4 - _AG.length, _AG); /*6302*/
							$k[$j++] = _AB; /*6302*/
							$k[$j++] = 'raw'; /*6302*/
							$1.encode(); /*6302*/
							$1.i = $1.i + 1; /*6303*/
							break; /*6304*/
						} else {
							/*6308*/
							var _AI = $s(2); /*6306*/
							$put(_AI, 0, $get($1.gpf, $1.i)); /*6306*/
							$put(_AI, 1, 94); /*6306*/
							$k[$j++] = _AI; /*6306*/
							$k[$j++] = $1.numeric; /*6306*/
							$1.encode(); /*6306*/
							$1.i = $1.i + 1; /*6307*/
							break; /*6308*/
						} /*6308*/
					} /*6308*/
				} /*6308*/
				if ($eq($1.mode, "alphanumeric")) { //no-else/*6338*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*6319*/
						$k[$j++] = $1.fnc1; /*6315*/
						$k[$j++] = $1.alphanumeric; /*6315*/
						$1.encode(); /*6315*/
						$1.mode = "numeric"; /*6316*/
						$1.i = $1.i + 1; /*6317*/
						break; /*6318*/
					} /*6318*/
					var _AY = $get($1.gpf, $1.i); /*6320*/
					var _Aa = $get($1.iso646, _AY) !== undefined; /*6320*/
					var _Ac = $get($1.alphanumeric, _AY) !== undefined; /*6320*/
					if (_Aa && (!_Ac)) { //no-else/*6324*/
						$k[$j++] = $1.liso646; /*6321*/
						$k[$j++] = $1.alphanumeric; /*6321*/
						$1.encode(); /*6321*/
						$1.mode = "iso646"; /*6322*/
						break; /*6323*/
					} /*6323*/
					if ($get($1.numericruns, $1.i) >= 6) { //no-else/*6329*/
						$k[$j++] = $1.lnumeric; /*6326*/
						$k[$j++] = $1.alphanumeric; /*6326*/
						$1.encode(); /*6326*/
						$1.mode = "numeric"; /*6327*/
						break; /*6328*/
					} /*6328*/
					var _Am = $get($1.numericruns, $1.i); /*6330*/
					if ((_Am >= 4) && ((_Am + $1.i) == $1.gpf.length)) { //no-else/*6334*/
						$k[$j++] = $1.lnumeric; /*6331*/
						$k[$j++] = $1.alphanumeric; /*6331*/
						$1.encode(); /*6331*/
						$1.mode = "numeric"; /*6332*/
						break; /*6333*/
					} /*6333*/
					$k[$j++] = $get($1.gpf, $1.i); /*6335*/
					$k[$j++] = $1.alphanumeric; /*6335*/
					$1.encode(); /*6335*/
					$1.i = $1.i + 1; /*6336*/
					break; /*6337*/
				} /*6337*/
				if ($eq($1.mode, "iso646")) { //no-else/*6360*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*6346*/
						$k[$j++] = $1.fnc1; /*6342*/
						$k[$j++] = $1.iso646; /*6342*/
						$1.encode(); /*6342*/
						$1.mode = "numeric"; /*6343*/
						$1.i = $1.i + 1; /*6344*/
						break; /*6345*/
					} /*6345*/
					if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*6351*/
						$k[$j++] = $1.lnumeric; /*6348*/
						$k[$j++] = $1.iso646; /*6348*/
						$1.encode(); /*6348*/
						$1.mode = "numeric"; /*6349*/
						break; /*6350*/
					} /*6350*/
					if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*6356*/
						$k[$j++] = $1.lalphanumeric; /*6353*/
						$k[$j++] = $1.iso646; /*6353*/
						$1.encode(); /*6353*/
						$1.mode = "alphanumeric"; /*6354*/
						break; /*6355*/
					} /*6355*/
					$k[$j++] = $get($1.gpf, $1.i); /*6357*/
					$k[$j++] = $1.iso646; /*6357*/
					$1.encode(); /*6357*/
					$1.i = $1.i + 1; /*6358*/
					break; /*6359*/
				} /*6359*/
			} /*6359*/
		} /*6359*/
		$1.gpf = $geti($1.gpfenc, 0, $1.j); /*6364*/
		var _BW = ((((1 + 12) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.gpf.length; /*6368*/
		$k[$j++] = _BW; /*6368*/
		$k[$j++] = _BW; /*6368*/
		$1.rembits(); /*6368*/
		var _BX = $k[--$j]; /*6368*/
		$1.pad = $a(_BX); /*6368*/
		$k[$j++] = _BX; /*6375*/
		if ($1.vlf.length != 0) {
			/*6374*/
			var _Ba = $k[--$j]; /*6370*/
			var _Bc = ~~(($k[--$j] + _Ba) / 12); /*6371*/
			$put($1.vlf, 0, _Bc % 2); /*6371*/
			var _Be = (_Bc <= 14) ? 0 : 1; /*6372*/
			$put($1.vlf, 1, _Be); /*6372*/
		} else {
			/*6374*/
			$j -= 2; /*6374*/
		} /*6374*/
		if ($1.pad.length > 0) { //no-else/*6384*/
			for (var _Bj = 0, _Bi = $1.pad.length - 1; _Bj <= _Bi; _Bj += 5) {
				/*6380*/
				$1.i = _Bj; /*6378*/
				var _Bk = $1.pad; /*6379*/
				var _Bl = $1.i; /*6379*/
				var _Bm = $a([0, 0, 1, 0, 0]); /*6379*/
				var _Bn = $1.pad; /*6379*/
				var _Bo = $1.i; /*6379*/
				var _Bp = 5; /*6379*/
				var _Bq = _Bn.length - _Bo; /*6379*/
				if ((_Bn.length - _Bo) > 5) { //no-else/*6379*/
					var _ = _Bp; /*6379*/
					_Bp = _Bq; /*6379*/
					_Bq = _; /*6379*/
				} /*6379*/
				$puti(_Bk, _Bl, $geti(_Bm, 0, _Bq)); /*6379*/
			} /*6379*/
			if ($eq($1.mode, "numeric")) { //no-else/*6383*/
				$k[$j++] = Infinity; /*6382*/
				$k[$j++] = 0; /*6382*/
				$k[$j++] = 0; /*6382*/
				$k[$j++] = 0; /*6382*/
				$k[$j++] = 0; /*6382*/
				$aload($1.pad); /*6382*/
				$1.pad = $geti($a(), 0, $1.pad.length); /*6382*/
			} /*6382*/
		} /*6382*/
		$k[$j++] = Infinity; /*6394*/
		var _By = $1.linkage ? 1 : 0; /*6388*/
		$k[$j++] = _By; /*6389*/
		$forall($1.method, function() {
			/*6389*/
			var _C0 = $k[--$j]; /*6389*/
			$k[$j++] = _C0 - 48; /*6389*/
		}); /*6389*/
		$aload($1.vlf); /*6390*/
		$aload($1.cdf); /*6391*/
		$aload($1.gpf); /*6392*/
		$aload($1.pad); /*6393*/
		$1.binval = $a(); /*6394*/
		$1.datalen = ~~($1.binval.length / 12); /*6395*/
		$1.ncr = function() {
			var _C7 = $k[--$j]; /*6398*/
			var _C8 = $k[--$j]; /*6398*/
			var _C9 = _C8 - _C7; /*6398*/
			if (_C7 < (_C8 - _C7)) { //no-else/*6398*/
				var _ = _C9; /*6398*/
				_C9 = _C7; /*6398*/
				_C7 = _; /*6398*/
			} /*6398*/
			$k[$j++] = _C9; /*6405*/
			$k[$j++] = 1; /*6405*/
			$k[$j++] = 1; /*6405*/
			for (var _CB = _C8, _CA = _C7 + 1; _CB >= _CA; _CB -= 1) {
				/*6405*/
				var _CC = $k[--$j]; /*6401*/
				var _CD = $k[--$j]; /*6402*/
				var _CE = $k[--$j]; /*6402*/
				$k[$j++] = _CE; /*6404*/
				$k[$j++] = _CD; /*6404*/
				$k[$j++] = _CC * _CB; /*6404*/
				if ($le(_CD, _CE)) { //no-else/*6404*/
					var _CF = $k[--$j]; /*6403*/
					var _CG = $k[--$j]; /*6403*/
					$k[$j++] = _CG + 1; /*6403*/
					$k[$j++] = ~~(_CF / _CG); /*6403*/
				} /*6403*/
			} /*6403*/
			for (;;) {
				/*6409*/
				var _CH = $k[--$j]; /*6407*/
				var _CI = $k[--$j]; /*6407*/
				var _CJ = $k[--$j]; /*6407*/
				$k[$j++] = _CJ; /*6407*/
				$k[$j++] = _CI; /*6407*/
				$k[$j++] = _CH; /*6407*/
				if ($gt(_CI, _CJ)) { //no-else/*6407*/
					break; /*6407*/
				} /*6407*/
				var _CK = $k[--$j]; /*6408*/
				var _CL = $k[--$j]; /*6408*/
				$k[$j++] = _CL + 1; /*6408*/
				$k[$j++] = ~~(_CK / _CL); /*6408*/
			} /*6408*/
			var _CM = $k[--$j]; /*6410*/
			var _CN = $k[--$j]; /*6410*/
			var _CO = $k[--$j]; /*6410*/
			$k[$j++] = _CM; /*6410*/
		}; /*6411*/
		$1.getRSSwidths = function() {
			$1.oe = $k[--$j]; /*6414*/
			$1.el = $k[--$j]; /*6415*/
			$1.mw = $k[--$j]; /*6416*/
			$1.nm = $k[--$j]; /*6417*/
			$1.val = $k[--$j]; /*6418*/
			$1.out = $a($1.el); /*6419*/
			$1.mask = 0; /*6420*/
			for (var _CY = 0, _CX = $1.el - 2; _CY <= _CX; _CY += 1) {
				/*6447*/
				$1.bar = _CY; /*6422*/
				$1.ew = 1; /*6423*/
				var _Ca = $1.bar; /*6424*/
				$1.mask = $1.mask | ((_Ca < 0 ? 1 >>> -_Ca : 1 << _Ca)); /*6424*/
				for (;;) {
					/*6443*/
					$k[$j++] = 'sval'; /*6425*/
					$k[$j++] = ($1.nm - $1.ew) - 1; /*6425*/
					$k[$j++] = ($1.el - $1.bar) - 2; /*6425*/
					$1.ncr(); /*6425*/
					var _Cf = $k[--$j]; /*6425*/
					$1[$k[--$j]] = _Cf; /*6425*/
					if (($1.oe && ($1.mask == 0)) && (((($1.nm - $1.ew) - ($1.el * 2)) + ($1.bar * 2)) >= -2)) { //no-else/*6428*/
						$k[$j++] = 'sval'; /*6427*/
						$k[$j++] = $1.sval; /*6427*/
						$k[$j++] = (($1.nm - $1.ew) - $1.el) + $1.bar; /*6427*/
						$k[$j++] = ($1.el - $1.bar) - 2; /*6427*/
						$1.ncr(); /*6427*/
						var _Cu = $k[--$j]; /*6427*/
						var _Cv = $k[--$j]; /*6427*/
						$1[$k[--$j]] = _Cv - _Cu; /*6427*/
					} /*6427*/
					if (($1.el - $1.bar) > 2) {
						/*6437*/
						$1.lval = 0; /*6430*/
						for (var _D5 = ((($1.nm - $1.ew) - $1.el) + $1.bar) + 2, _D4 = $1.mw + 1; _D5 >= _D4; _D5 -= 1) {
							/*6434*/
							$k[$j++] = (($1.nm - _D5) - $1.ew) - 1; /*6432*/
							$k[$j++] = ($1.el - $1.bar) - 3; /*6432*/
							$1.ncr(); /*6432*/
							$1.lval = $k[--$j] + $1.lval; /*6433*/
						} /*6433*/
						$1.sval = $1.sval - ($1.lval * (($1.el - $1.bar) - 1)); /*6435*/
					} else {
						/*6437*/
						if (($1.nm - $1.ew) > $1.mw) { //no-else/*6437*/
							$1.sval = $1.sval - 1; /*6437*/
						} /*6437*/
					} /*6437*/
					$1.val = $1.val - $1.sval; /*6439*/
					if ($1.val < 0) { //no-else/*6440*/
						break; /*6440*/
					} /*6440*/
					$1.ew = $1.ew + 1; /*6441*/
					var _DP = $1.bar; /*6442*/
					$1.mask = $1.mask & (~((_DP < 0 ? 1 >>> -_DP : 1 << _DP))); /*6442*/
				} /*6442*/
				$1.val = $1.val + $1.sval; /*6444*/
				$1.nm = $1.nm - $1.ew; /*6445*/
				$put($1.out, $1.bar, $1.ew); /*6446*/
			} /*6446*/
			$put($1.out, $1.el - 1, $1.nm); /*6448*/
			$k[$j++] = $1.out; /*6449*/
		}; /*6450*/
		$1.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); /*6458*/
		$1.dxw = $a($1.datalen); /*6460*/
		for (var _Dg = 0, _Df = $1.datalen - 1; _Dg <= _Df; _Dg += 1) {
			/*6501*/
			$1.x = _Dg; /*6464*/
			$1.d = $geti($1.binval, $1.x * 12, 12); /*6466*/
			$k[$j++] = 'd'; /*6467*/
			$k[$j++] = 0; /*6467*/
			for (var _Dk = 0; _Dk <= 11; _Dk += 1) {
				/*6467*/
				$1.j = _Dk; /*6467*/
				var _Dp = $k[--$j]; /*6467*/
				$k[$j++] = _Dp + ((~~Math.pow(2, 11 - $1.j)) * $get($1.d, $1.j)); /*6467*/
			} /*6467*/
			var _Dq = $k[--$j]; /*6467*/
			$1[$k[--$j]] = _Dq; /*6467*/
			$1.j = 0; /*6469*/
			for (;;) {
				/*6479*/
				if ($le($1.d, $get($1.tab174, $1.j))) { //no-else/*6477*/
					$forall($geti($1.tab174, $1.j + 1, 7)); /*6471*/
					$1.dte = $k[--$j]; /*6472*/
					$1.dto = $k[--$j]; /*6472*/
					$1.dmwe = $k[--$j]; /*6473*/
					$1.dmwo = $k[--$j]; /*6473*/
					$1.dele = $k[--$j]; /*6474*/
					$1.delo = $k[--$j]; /*6474*/
					$1.dgs = $k[--$j]; /*6475*/
					break; /*6476*/
				} /*6476*/
				$1.j = $1.j + 8; /*6478*/
			} /*6478*/
			$k[$j++] = 'dwo'; /*6481*/
			$k[$j++] = ~~(($1.d - $1.dgs) / $1.dte); /*6481*/
			$k[$j++] = $1.delo; /*6481*/
			$k[$j++] = $1.dmwo; /*6481*/
			$k[$j++] = 4; /*6481*/
			$k[$j++] = true; /*6481*/
			$1.getRSSwidths(); /*6481*/
			var _EC = $k[--$j]; /*6481*/
			$1[$k[--$j]] = _EC; /*6481*/
			$k[$j++] = 'dwe'; /*6482*/
			$k[$j++] = ($1.d - $1.dgs) % $1.dte; /*6482*/
			$k[$j++] = $1.dele; /*6482*/
			$k[$j++] = $1.dmwe; /*6482*/
			$k[$j++] = 4; /*6482*/
			$k[$j++] = false; /*6482*/
			$1.getRSSwidths(); /*6482*/
			var _EJ = $k[--$j]; /*6482*/
			$1[$k[--$j]] = _EJ; /*6482*/
			$1.dw = $a(8); /*6484*/
			if (($1.x % 2) == 0) {
				/*6495*/
				for (var _EN = 0; _EN <= 3; _EN += 1) {
					/*6490*/
					$1.j = _EN; /*6487*/
					$put($1.dw, 7 - ($1.j * 2), $get($1.dwo, $1.j)); /*6488*/
					$put($1.dw, 6 - ($1.j * 2), $get($1.dwe, $1.j)); /*6489*/
				} /*6489*/
			} else {
				/*6495*/
				for (var _EY = 0; _EY <= 3; _EY += 1) {
					/*6496*/
					$1.j = _EY; /*6493*/
					$put($1.dw, $1.j * 2, $get($1.dwo, $1.j)); /*6494*/
					$put($1.dw, ($1.j * 2) + 1, $get($1.dwe, $1.j)); /*6495*/
				} /*6495*/
			} /*6495*/
			$put($1.dxw, $1.x, $1.dw); /*6499*/
		} /*6499*/
		$1.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); /*6510*/
		$1.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); /*6523*/
		$1.seq = $get($1.finderseq, ~~(($1.datalen - 2) / 2)); /*6525*/
		$1.fxw = $a($1.seq.length); /*6526*/
		for (var _F5 = 0, _F4 = $1.seq.length - 1; _F5 <= _F4; _F5 += 1) {
			/*6530*/
			$1.x = _F5; /*6528*/
			$put($1.fxw, $1.x, $geti($1.finderwidths, $get($1.seq, $1.x) * 5, 5)); /*6529*/
		} /*6529*/
		$1.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); /*6557*/
		$k[$j++] = Infinity; /*6561*/
		$forall($1.seq, function() {
			/*6560*/
			$aload($geti($1.checkweights, $k[--$j] * 16, 16)); /*6560*/
		}); /*6560*/
		var _FI = $a(); /*6561*/
		$1.checkweightseq = $geti(_FI, 8, _FI.length - 8); /*6561*/
		$k[$j++] = Infinity; /*6565*/
		var _FK = $1.dxw; /*6564*/
		for (var _FL = 0, _FM = _FK.length; _FL < _FM; _FL++) {
			/*6564*/
			$forall($get(_FK, _FL)); /*6564*/
		} /*6564*/
		$1.widths = $a(); /*6565*/
		$1.checksum = 0; /*6567*/
		for (var _FR = 0, _FQ = $1.widths.length - 1; _FR <= _FQ; _FR += 1) {
			/*6571*/
			$1.i = _FR; /*6569*/
			$1.checksum = $1.checksum + ($get($1.widths, $1.i) * $get($1.checkweightseq, $1.i)); /*6570*/
		} /*6570*/
		$1.checksum = ($1.checksum % 211) + (($1.datalen - 3) * 211); /*6572*/
		$1.i = 0; /*6574*/
		for (;;) {
			/*6584*/
			if ($1.checksum <= $get($1.tab174, $1.i)) { //no-else/*6582*/
				$forall($geti($1.tab174, $1.i + 1, 7)); /*6576*/
				$1.cte = $k[--$j]; /*6577*/
				$1.cto = $k[--$j]; /*6577*/
				$1.cmwe = $k[--$j]; /*6578*/
				$1.cmwo = $k[--$j]; /*6578*/
				$1.cele = $k[--$j]; /*6579*/
				$1.celo = $k[--$j]; /*6579*/
				$1.cgs = $k[--$j]; /*6580*/
				break; /*6581*/
			} /*6581*/
			$1.i = $1.i + 8; /*6583*/
		} /*6583*/
		$k[$j++] = 'cwo'; /*6586*/
		$k[$j++] = ~~(($1.checksum - $1.cgs) / $1.cte); /*6586*/
		$k[$j++] = $1.celo; /*6586*/
		$k[$j++] = $1.cmwo; /*6586*/
		$k[$j++] = 4; /*6586*/
		$k[$j++] = true; /*6586*/
		$1.getRSSwidths(); /*6586*/
		var _Fv = $k[--$j]; /*6586*/
		$1[$k[--$j]] = _Fv; /*6586*/
		$k[$j++] = 'cwe'; /*6587*/
		$k[$j++] = ($1.checksum - $1.cgs) % $1.cte; /*6587*/
		$k[$j++] = $1.cele; /*6587*/
		$k[$j++] = $1.cmwe; /*6587*/
		$k[$j++] = 4; /*6587*/
		$k[$j++] = false; /*6587*/
		$1.getRSSwidths(); /*6587*/
		var _G2 = $k[--$j]; /*6587*/
		$1[$k[--$j]] = _G2; /*6587*/
		$1.cw = $a(8); /*6589*/
		for (var _G5 = 0; _G5 <= 3; _G5 += 1) {
			/*6594*/
			$1.i = _G5; /*6591*/
			$put($1.cw, $1.i * 2, $get($1.cwo, $1.i)); /*6592*/
			$put($1.cw, ($1.i * 2) + 1, $get($1.cwe, $1.i)); /*6593*/
		} /*6593*/
		var _GG = $a(22); /*6596*/
		$put(_GG, 0, $1.cw); /*6597*/
		$puti(_GG, 1, $1.dxw); /*6597*/
		$1.dxw = $geti(_GG, 0, $1.datalen + 1); /*6598*/
		$1.datalen = $1.dxw.length; /*6599*/
		$1.rows = $a(~~Math.ceil($1.datalen / $1.segments)); /*6602*/
		$1.numrows = $1.rows.length; /*6603*/
		for (var _GS = 0, _GR = $1.numrows - 1; _GS <= _GR; _GS += 1) {
			/*6618*/
			$1.r = _GS; /*6605*/
			$k[$j++] = Infinity; /*6606*/
			if ((($1.segments % 4) != 0) && (($1.r % 2) == 1)) { //no-else/*6607*/
				$k[$j++] = 0; /*6607*/
			} /*6607*/
			$k[$j++] = 1; /*6615*/
			$k[$j++] = 1; /*6615*/
			for (var _GX = 0, _GW = $1.segments - 1; _GX <= _GW; _GX += 1) {
				/*6615*/
				$1.pos = _GX + ($1.r * $1.segments); /*6610*/
				if ($1.pos < $1.datalen) { //no-else/*6614*/
					$forall($get($1.dxw, $1.pos)); /*6612*/
					if (($1.pos % 2) == 0) { //no-else/*6613*/
						$forall($get($1.fxw, ~~($1.pos / 2))); /*6613*/
					} /*6613*/
				} /*6613*/
			} /*6613*/
			var _Gj = $counttomark() + 2; /*6617*/
			$k[$j++] = 1; /*6617*/
			$k[$j++] = 1; /*6617*/
			$astore($a(_Gj)); /*6617*/
			$put($1.rows, $1.r, $k[--$j]); /*6617*/
			$j--; /*6617*/
		} /*6617*/
		if ($ne($1.format, "expandedstacked")) {
			/*6742*/
			var _Gq = $get($1.rows, 0); /*6623*/
			$1.sbs = $geti(_Gq, 1, _Gq.length - 1); /*6623*/
			$k[$j++] = Infinity; /*6633*/
			$k[$j++] = 1; /*6631*/
			for (var _Gu = 0, _Gt = $1.datalen - 1; _Gu <= _Gt; _Gu += 1) {
				/*6631*/
				$1.i = _Gu; /*6628*/
				$forall($get($1.dxw, $1.i)); /*6629*/
				if (($1.i % 2) == 0) { //no-else/*6630*/
					$forall($get($1.fxw, ~~($1.i / 2))); /*6630*/
				} /*6630*/
			} /*6630*/
			$k[$j++] = 1; /*6632*/
			$k[$j++] = 1; /*6632*/
			$1.sbs = $a(); /*6633*/
			$k[$j++] = Infinity; /*6640*/
			var _H3 = $1.sbs; /*6637*/
			$k[$j++] = Infinity; /*6639*/
			for (var _H5 = 0, _H6 = ~~(($1.sbs.length + 1) / 2); _H5 < _H6; _H5++) {
				/*6638*/
				$k[$j++] = $1.height; /*6638*/
			} /*6638*/
			var _H8 = $a(); /*6639*/
			$k[$j++] = Infinity; /*6640*/
			for (var _HA = 0, _HB = ~~(($1.sbs.length + 1) / 2); _HA < _HB; _HA++) {
				/*6639*/
				$k[$j++] = 0; /*6639*/
			} /*6639*/
			var _HC = $a(); /*6640*/
			$k[$j++] = 'ren'; /*6640*/
			$k[$j++] = $0.renlinear; /*6640*/
			$k[$j++] = 'sbs'; /*6640*/
			$k[$j++] = _H3; /*6640*/
			$k[$j++] = 'bhs'; /*6640*/
			$k[$j++] = _H8; /*6640*/
			$k[$j++] = 'bbs'; /*6640*/
			$k[$j++] = _HC; /*6640*/
			$k[$j++] = 'opt'; /*6640*/
			$k[$j++] = $1.options; /*6640*/
			var _HE = $d(); /*6640*/
			$k[$j++] = _HE; /*6643*/
			if (!$1.dontdraw) { //no-else/*6643*/
				$0.renlinear(); /*6643*/
			} /*6643*/
		} else {
			/*6742*/
			$1.seps = $a($1.numrows); /*6647*/
			for (var _HK = 0, _HJ = $1.numrows - 1; _HK <= _HJ; _HK += 1) {
				/*6703*/
				$1.r = _HK; /*6650*/
				$1.row = $get($1.rows, $1.r); /*6651*/
				$k[$j++] = Infinity; /*6654*/
				for (var _HQ = 0, _HP = $1.row.length - 1; _HQ <= _HP; _HQ += 2) {
					/*6659*/
					$1.i = _HQ; /*6656*/
					for (var _HU = 0, _HV = $get($1.row, $1.i); _HU < _HV; _HU++) {
						/*6657*/
						$k[$j++] = 0; /*6657*/
					} /*6657*/
					if ($1.i < ($1.row.length - 1)) { //no-else/*6658*/
						for (var _Hb = 0, _Hc = $get($1.row, $1.i + 1); _Hb < _Hc; _Hb++) {
							/*6658*/
							$k[$j++] = 1; /*6658*/
						} /*6658*/
					} /*6658*/
				} /*6658*/
				$astore($a($counttomark())); /*6660*/
				$1.row = $k[--$j]; /*6660*/
				$j--; /*6660*/
				$k[$j++] = Infinity; /*6663*/
				$forall($1.row, function() {
					/*6663*/
					var _Hh = $k[--$j]; /*6663*/
					$k[$j++] = 1 - _Hh; /*6663*/
				}); /*6663*/
				$1.sep = $a(); /*6663*/
				$puti($1.sep, 0, $a([0, 0, 0, 0])); /*6664*/
				$puti($1.sep, $1.row.length - 4, $a([0, 0, 0, 0])); /*6665*/
				$k[$j++] = Infinity; /*6669*/
				for (var _Hq = 19, _Hp = $1.row.length - 13; _Hq <= _Hp; _Hq += 98) {
					/*6667*/
					$k[$j++] = _Hq; /*6667*/
				} /*6667*/
				for (var _Ht = 68, _Hs = $1.row.length - 13; _Ht <= _Hs; _Ht += 98) {
					/*6668*/
					$k[$j++] = _Ht; /*6668*/
				} /*6668*/
				$1.finderpos = $a(); /*6669*/
				var _Hv = $1.finderpos; /*6670*/
				for (var _Hw = 0, _Hx = _Hv.length; _Hw < _Hx; _Hw++) {
					/*6684*/
					var _Hy = $get(_Hv, _Hw); /*6684*/
					for (var _I0 = _Hy, _Hz = _Hy + 14; _I0 <= _Hz; _I0 += 1) {
						/*6683*/
						$1.i = _I0; /*6672*/
						if ($get($1.row, $1.i) == 0) {
							/*6680*/
							if ($get($1.row, $1.i - 1) == 1) {
								/*6677*/
								$k[$j++] = 1; /*6675*/
							} else {
								/*6677*/
								var _IA = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*6677*/
								$k[$j++] = _IA; /*6677*/
							} /*6677*/
						} else {
							/*6680*/
							$k[$j++] = 0; /*6680*/
						} /*6680*/
						$put($1.sep, $1.i, $k[--$j]); /*6682*/
					} /*6682*/
				} /*6682*/
				if ((($1.segments % 4) == 0) && (($1.r % 2) == 1)) { //no-else/*6698*/
					if (($get($1.rows, $1.r).length != $get($1.rows, 0).length) && (($1.finderpos.length % 2) == 1)) {
						/*6696*/
						$k[$j++] = Infinity; /*6690*/
						$k[$j++] = 0; /*6690*/
						$aload($1.row); /*6690*/
						$1.row = $a(); /*6690*/
						$k[$j++] = Infinity; /*6691*/
						$k[$j++] = 0; /*6691*/
						$aload($1.sep); /*6691*/
						$1.sep = $a(); /*6691*/
					} else {
						/*6696*/
						for (var _IR = $1.row.length - 1; _IR >= 0; _IR -= 1) {
							/*6693*/
							$k[$j++] = $get($1.row, _IR); /*6693*/
						} /*6693*/
						$astore($1.row); /*6694*/
						$j--; /*6694*/
						for (var _IW = $1.sep.length - 1; _IW >= 0; _IW -= 1) {
							/*6695*/
							$k[$j++] = $get($1.sep, _IW); /*6695*/
						} /*6695*/
						$astore($1.sep); /*6696*/
						$j--; /*6696*/
					} /*6696*/
				} /*6696*/
				$put($1.rows, $1.r, $1.row); /*6700*/
				$put($1.seps, $1.r, $1.sep); /*6701*/
			} /*6701*/
			$1.pixx = $get($1.rows, 0).length; /*6706*/
			$k[$j++] = Infinity; /*6707*/
			for (var _Ij = 0, _Ik = $1.pixx; _Ij < _Ik; _Ij++) {
				/*6707*/
				$k[$j++] = 0; /*6707*/
			} /*6707*/
			var _Il = $a(); /*6707*/
			$puti(_Il, 0, $get($1.rows, $1.numrows - 1)); /*6707*/
			$put($1.rows, $1.numrows - 1, _Il); /*6708*/
			$k[$j++] = Infinity; /*6709*/
			for (var _Is = 0, _It = $1.pixx; _Is < _It; _Is++) {
				/*6709*/
				$k[$j++] = 0; /*6709*/
			} /*6709*/
			var _Iu = $a(); /*6709*/
			$puti(_Iu, 0, $get($1.seps, $1.numrows - 1)); /*6709*/
			$put($1.seps, $1.numrows - 1, _Iu); /*6710*/
			$k[$j++] = Infinity; /*6713*/
			for (var _J1 = 0, _J2 = (~~($1.pixx / 2)) + 1; _J1 < _J2; _J1++) {
				/*6713*/
				$k[$j++] = 0; /*6713*/
				$k[$j++] = 1; /*6713*/
			} /*6713*/
			$1.sep = $geti($a(), 0, $1.pixx); /*6713*/
			$puti($1.sep, 0, $a([0, 0, 0, 0])); /*6714*/
			$puti($1.sep, $1.pixx - 4, $a([0, 0, 0, 0])); /*6715*/
			$k[$j++] = Infinity; /*6730*/
			for (var _JD = 0, _JC = $1.numrows - 1; _JD <= _JC; _JD += 1) {
				/*6729*/
				$1.r = _JD; /*6720*/
				if ($1.r != 0) { //no-else/*6723*/
					$aload($get($1.seps, $1.r)); /*6722*/
				} /*6722*/
				for (var _JJ = 0, _JK = $1.barxmult; _JJ < _JK; _JJ++) {
					/*6724*/
					$aload($get($1.rows, $1.r)); /*6724*/
				} /*6724*/
				if ($1.r != ($1.numrows - 1)) { //no-else/*6728*/
					$aload($get($1.seps, $1.r)); /*6726*/
					$aload($1.sep); /*6727*/
				} /*6727*/
			} /*6727*/
			$1.pixs = $a(); /*6730*/
			var _Jd = new Map([
				["ren", $0.renmatrix],
				["pixs", $1.pixs],
				["pixx", $1.pixx],
				["pixy", ~~($1.pixs.length / $1.pixx)],
				["height", (~~($1.pixs.length / $1.pixx)) / 72],
				["width", $1.pixx / 72],
				["opt", $1.options]
			]); /*6739*/
			$k[$j++] = _Jd; /*6742*/
			if (!$1.dontdraw) { //no-else/*6742*/
				$0.renmatrix(); /*6742*/
			} /*6742*/
		} /*6742*/
	};
	$0.databarexpandedstacked = function() {
		var $1 = {}; /*6774*/
		$1.options = $k[--$j]; /*6776*/
		$1.barcode = $k[--$j]; /*6777*/
		$1.dontdraw = false; /*6779*/
		$forall($1.options, function() {
			/*6790*/
			var _3 = $k[--$j]; /*6790*/
			$1[$k[--$j]] = _3; /*6790*/
		}); /*6790*/
		$put($1.options, "dontdraw", true); /*6793*/
		$put($1.options, "format", "expandedstacked"); /*6794*/
		$k[$j++] = 'args'; /*6796*/
		$k[$j++] = $1.barcode; /*6796*/
		$k[$j++] = $1.options; /*6796*/
		$0.databarexpanded(); /*6796*/
		var _9 = $k[--$j]; /*6796*/
		$1[$k[--$j]] = _9; /*6796*/
		$put($1.args, "opt", $1.options); /*6798*/
		$k[$j++] = $1.args; /*6801*/
		if (!$1.dontdraw) { //no-else/*6801*/
			$0.renmatrix(); /*6801*/
		} /*6801*/
	};
	$0.gs1northamericancoupon = function() {
		var $1 = {}; /*6831*/
		$1.options = $k[--$j]; /*6833*/
		$1.barcode = $k[--$j]; /*6834*/
		$1.dontdraw = false; /*6836*/
		$1.includetext = false; /*6838*/
		$1.coupontextfont = 'Helvetica'; /*6839*/
		$1.coupontextsize = 9; /*6840*/
		$1.coupontextxoffset = "unset"; /*6841*/
		$1.coupontextyoffset = "unset"; /*6842*/
		$forall($1.options, function() {
			/*6853*/
			var _3 = $k[--$j]; /*6853*/
			$1[$k[--$j]] = _3; /*6853*/
		}); /*6853*/
		$1.coupontextfont = "" + $1.coupontextfont; /*6855*/
		$1.coupontextsize = +$1.coupontextsize; /*6856*/
		if ($ne($1.coupontextxoffset, "unset")) { //no-else/*6857*/
			$1.coupontextxoffset = +$1.coupontextxoffset; /*6857*/
		} /*6857*/
		if ($ne($1.coupontextyoffset, "unset")) { //no-else/*6858*/
			$1.coupontextyoffset = +$1.coupontextyoffset; /*6858*/
		} /*6858*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*6862*/
			$1.out = $s($1.in.length); /*6863*/
			$1.j = 0; /*6864*/
			$k[$j++] = $1.in; /*6878*/
			for (;;) {
				/*6878*/
				$search($k[--$j], "^"); /*6867*/
				if ($k[--$j]) {
					/*6876*/
					var _H = $k[--$j]; /*6868*/
					$puti($1.out, $1.j, _H); /*6868*/
					$1.j = (_H.length + $1.j) + 1; /*6869*/
					$j--; /*6870*/
					var _L = $k[--$j]; /*6871*/
					$put($1.out, $1.j - 1, ~~$z($geti(_L, 0, 3))); /*6871*/
					$k[$j++] = $geti(_L, 3, _L.length - 3); /*6872*/
				} else {
					/*6876*/
					var _Q = $k[--$j]; /*6874*/
					$puti($1.out, $1.j, _Q); /*6874*/
					$1.j = _Q.length + $1.j; /*6875*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*6876*/
					break; /*6876*/
				} /*6876*/
			} /*6876*/
		}; /*6879*/
		$1.ais = $a([]); /*6882*/
		$1.vals = $a([]); /*6883*/
		var _Z = $1.barcode; /*6884*/
		$k[$j++] = $geti(_Z, 1, _Z.length - 1); /*6897*/
		for (;;) {
			/*6897*/
			var _b = $k[--$j]; /*6886*/
			$k[$j++] = _b; /*6886*/
			if ($eq(_b, "")) { //no-else/*6886*/
				break; /*6886*/
			} /*6886*/
			$search($k[--$j], ")"); /*6887*/
			$j--; /*6887*/
			var _d = $k[--$j]; /*6888*/
			var _e = $k[--$j]; /*6888*/
			var _f = $k[--$j]; /*6889*/
			$k[$j++] = _d; /*6889*/
			$search(_f, "("); /*6889*/
			if ($k[--$j]) {
				/*6892*/
				var _h = $k[--$j]; /*6890*/
				var _i = $k[--$j]; /*6890*/
				var _j = $k[--$j]; /*6890*/
				var _k = $k[--$j]; /*6890*/
				$k[$j++] = _j; /*6890*/
				$k[$j++] = _k; /*6890*/
				$k[$j++] = _h; /*6890*/
			} else {
				/*6892*/
				var _l = $k[--$j]; /*6892*/
				var _m = $k[--$j]; /*6892*/
				$k[$j++] = ""; /*6892*/
				$k[$j++] = _m; /*6892*/
				$k[$j++] = _l; /*6892*/
			} /*6892*/
			$k[$j++] = Infinity; /*6894*/
			$aload($1.ais); /*6894*/
			var _p = $k[$j - 1 - ($counttomark() + 2)]; /*6894*/
			$k[$j++] = _p; /*6894*/
			$1.ais = $a(); /*6894*/
			$k[$j++] = Infinity; /*6895*/
			$aload($1.vals); /*6895*/
			var _t = $k[$j - 1 - ($counttomark() + 1)]; /*6895*/
			$k[$j++] = _t; /*6895*/
			$1.expand(); /*6895*/
			$1.vals = $a(); /*6895*/
			$j -= 2; /*6896*/
		} /*6896*/
		$j--; /*6898*/
		if ($1.ais.length != 1) { //no-else/*6903*/
			$k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure'; /*6902*/
			$k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; /*6902*/
			$0.raiseerror(); /*6902*/
		} /*6902*/
		if ($ne($get($1.ais, 0), "8110")) { //no-else/*6906*/
			$k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure'; /*6905*/
			$k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; /*6905*/
			$0.raiseerror(); /*6905*/
		} /*6905*/
		$1.val = $get($1.vals, 0); /*6909*/
		$1.vli = $get($1.val, 0) - 48; /*6910*/
		if (($1.vli < 0) || ($1.vli > 6)) { //no-else/*6913*/
			$k[$j++] = 'bwipp.gs1northamericancouponBadVLI'; /*6912*/
			$k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; /*6912*/
			$0.raiseerror(); /*6912*/
		} /*6912*/
		$1.gcp = $geti($1.val, 1, $1.vli + 6); /*6914*/
		$1.cod = $geti($1.val, $1.vli + 7, 6); /*6915*/
		$1.coupontext = $s($1.gcp.length + 7); /*6916*/
		$puti($1.coupontext, 0, $1.gcp); /*6917*/
		$puti($1.coupontext, $1.gcp.length, "-"); /*6918*/
		$puti($1.coupontext, $1.gcp.length + 1, $1.cod); /*6919*/
		$put($1.options, "dontdraw", true); /*6922*/
		$k[$j++] = 'args'; /*6924*/
		$k[$j++] = $1.barcode; /*6924*/
		$k[$j++] = $1.options; /*6924*/
		$0.databarexpandedstacked(); /*6924*/
		var _1M = $k[--$j]; /*6924*/
		$1[$k[--$j]] = _1M; /*6924*/
		if ($1.includetext) { //no-else/*6943*/
			if ($1.coupontextxoffset == "unset") { //no-else/*6930*/
				$1.coupontextxoffset = 0; /*6929*/
			} /*6929*/
			if ($1.coupontextyoffset == "unset") { //no-else/*6933*/
				$1.coupontextyoffset = ($get($1.args, "height") * 72) + 3; /*6932*/
			} /*6932*/
			var _1U = $get($1.args, "txt") !== undefined; /*6934*/
			if (_1U) {
				/*6941*/
				$1.txt = $get($1.args, "txt"); /*6935*/
				$1.newtxt = $a($1.txt.length + 1); /*6936*/
				$puti($1.newtxt, 0, $1.txt); /*6937*/
				$put($1.newtxt, $1.newtxt.length - 1, $a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])); /*6938*/
				$put($1.args, "txt", $1.newtxt); /*6939*/
			} else {
				/*6941*/
				$put($1.args, "txt", $a([$a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])])); /*6941*/
			} /*6941*/
		} /*6941*/
		$put($1.args, "opt", $1.options); /*6945*/
		$k[$j++] = $1.args; /*6948*/
		if (!$1.dontdraw) { //no-else/*6948*/
			$0.renmatrix(); /*6948*/
		} /*6948*/
	};
	$0.pharmacode = function() {
		var $1 = {}; /*6977*/
		$1.options = $k[--$j]; /*6979*/
		$1.barcode = $k[--$j]; /*6980*/
		$1.dontdraw = false; /*6982*/
		$1.height = (8 * 2.835) / 72; /*6983*/
		$1.nwidth = 0.5 * 2.835; /*6984*/
		$1.wwidth = 1.5 * 2.835; /*6985*/
		$1.swidth = 1 * 2.835; /*6986*/
		$forall($1.options, function() {
			/*6997*/
			var _3 = $k[--$j]; /*6997*/
			$1[$k[--$j]] = _3; /*6997*/
		}); /*6997*/
		$1.height = +$1.height; /*6999*/
		$1.nwidth = +$1.nwidth; /*7000*/
		$1.wwidth = +$1.wwidth; /*7001*/
		$1.swidth = +$1.swidth; /*7002*/
		if (($1.barcode.length < 1) || ($1.barcode.length > 6)) { //no-else/*7007*/
			$k[$j++] = 'bwipp.pharmacodeBadLength'; /*7006*/
			$k[$j++] = "Pharmacode must be 1 to 6 digits"; /*7006*/
			$0.raiseerror(); /*7006*/
		} /*7006*/
		$forall($1.barcode, function() {
			/*7012*/
			var _C = $k[--$j]; /*7009*/
			if ((_C < 48) || (_C > 57)) { //no-else/*7011*/
				$k[$j++] = 'bwipp.pharmacodeBadCharacter'; /*7010*/
				$k[$j++] = "Pharmacode must contain only digits"; /*7010*/
				$0.raiseerror(); /*7010*/
			} /*7010*/
		}); /*7010*/
		var _E = ~~$z($1.barcode); /*7013*/
		if ((_E < 3) || (_E > 131070)) { //no-else/*7015*/
			$k[$j++] = 'bwipp.pharmacodeBadValue'; /*7014*/
			$k[$j++] = "Pharmacode value must be between 3 and 131070"; /*7014*/
			$0.raiseerror(); /*7014*/
		} /*7014*/
		$1.txt = $a($1.barcode.length); /*7018*/
		for (var _J = 0, _I = $1.barcode.length - 1; _J <= _I; _J += 1) {
			/*7022*/
			$1.i = _J; /*7020*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*7021*/
		} /*7021*/
		$1.barcode = $cvrs($s(17), (~~$z($1.barcode)) + 1, 2); /*7025*/
		$1.barcode = $geti($1.barcode, 1, $1.barcode.length - 1); /*7026*/
		$1.barlen = $1.barcode.length; /*7028*/
		$1.sbs = $a($1.barlen * 2); /*7029*/
		for (var _b = 0, _a = $1.barlen - 1; _b <= _a; _b += 1) {
			/*7040*/
			$1.i = _b; /*7032*/
			$1.enc = $geti($1.barcode, $1.i, 1); /*7033*/
			if ($eq($1.enc, "0")) {
				/*7037*/
				$put($1.sbs, $1.i * 2, $1.nwidth); /*7035*/
			} else {
				/*7037*/
				$put($1.sbs, $1.i * 2, $1.wwidth); /*7037*/
			} /*7037*/
			$put($1.sbs, ($1.i * 2) + 1, $1.swidth); /*7039*/
		} /*7039*/
		$k[$j++] = Infinity; /*7050*/
		var _p = $1.sbs; /*7045*/
		$k[$j++] = Infinity; /*7047*/
		for (var _r = 0, _s = ~~(($1.sbs.length + 1) / 2); _r < _s; _r++) {
			/*7046*/
			$k[$j++] = $1.height; /*7046*/
		} /*7046*/
		var _u = $a(); /*7047*/
		$k[$j++] = Infinity; /*7048*/
		for (var _w = 0, _x = ~~(($1.sbs.length + 1) / 2); _w < _x; _w++) {
			/*7047*/
			$k[$j++] = 0; /*7047*/
		} /*7047*/
		var _y = $a(); /*7048*/
		$k[$j++] = 'ren'; /*7050*/
		$k[$j++] = $0.renlinear; /*7050*/
		$k[$j++] = 'sbs'; /*7050*/
		$k[$j++] = _p; /*7050*/
		$k[$j++] = 'bhs'; /*7050*/
		$k[$j++] = _u; /*7050*/
		$k[$j++] = 'bbs'; /*7050*/
		$k[$j++] = _y; /*7050*/
		$k[$j++] = 'txt'; /*7050*/
		$k[$j++] = $1.txt; /*7050*/
		$k[$j++] = 'textxalign'; /*7050*/
		$k[$j++] = "center"; /*7050*/
		$k[$j++] = 'opt'; /*7050*/
		$k[$j++] = $1.options; /*7050*/
		var _11 = $d(); /*7050*/
		$k[$j++] = _11; /*7053*/
		if (!$1.dontdraw) { //no-else/*7053*/
			$0.renlinear(); /*7053*/
		} /*7053*/
	};
	$0.pharmacode2 = function() {
		var $1 = {}; /*7082*/
		$1.options = $k[--$j]; /*7084*/
		$1.barcode = $k[--$j]; /*7085*/
		$1.dontdraw = false; /*7087*/
		$1.includetext = false; /*7088*/
		$1.height = 4; /*7089*/
		$forall($1.options, function() {
			/*7100*/
			var _3 = $k[--$j]; /*7100*/
			$1[$k[--$j]] = _3; /*7100*/
		}); /*7100*/
		$1.height = +$1.height; /*7102*/
		if (($1.barcode.length < 1) || ($1.barcode.length > 8)) { //no-else/*7107*/
			$k[$j++] = 'bwipp.pharmacode2BadLength'; /*7106*/
			$k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; /*7106*/
			$0.raiseerror(); /*7106*/
		} /*7106*/
		$forall($1.barcode, function() {
			/*7112*/
			var _9 = $k[--$j]; /*7109*/
			if ((_9 < 48) || (_9 > 57)) { //no-else/*7111*/
				$k[$j++] = 'bwipp.pharmacode2badCharacter'; /*7110*/
				$k[$j++] = "Two-track Pharmacode must contain only digits"; /*7110*/
				$0.raiseerror(); /*7110*/
			} /*7110*/
		}); /*7110*/
		var _B = ~~$z($1.barcode); /*7113*/
		if ((_B < 4) || (_B > 64570080)) { //no-else/*7115*/
			$k[$j++] = 'bwipp.pharmacode2badValue'; /*7114*/
			$k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; /*7114*/
			$0.raiseerror(); /*7114*/
		} /*7114*/
		$1.txt = $a($1.barcode.length); /*7118*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*7122*/
			$1.i = _G; /*7120*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*7121*/
		} /*7121*/
		$1.encstr = $s(16); /*7124*/
		$1.bhs = $a(16); /*7125*/
		$1.bbs = $a(16); /*7126*/
		$1.sbs = $a(32); /*7127*/
		$1.bar = (1 / 25.4) * $1.height; /*7128*/
		$1.spc = (1 / 25.4) * 72; /*7129*/
		$1.i = 15; /*7132*/
		$1.val = ~~$z($1.barcode); /*7133*/
		for (;;) {
			/*7140*/
			if ($1.val == 0) { //no-else/*7135*/
				break; /*7135*/
			} /*7135*/
			var _V = $1.val % 3; /*7136*/
			$1.val = ~~(($1.val - $get($a([3, 1, 2]), _V)) / 3); /*7137*/
			$put($1.encstr, $1.i, $get($a([2, 0, 1]), _V)); /*7138*/
			$1.i = $1.i - 1; /*7139*/
		} /*7139*/
		$1.encstr = $geti($1.encstr, $1.i + 1, 15 - $1.i); /*7141*/
		for (var _k = 0, _j = $1.encstr.length - 1; _k <= _j; _k += 1) {
			/*7149*/
			$1.i = _k; /*7145*/
			var _n = $get($1.encstr, $1.i); /*7146*/
			$put($1.bhs, $1.i, $1.bar * $get($a([1, 1, 2]), _n)); /*7147*/
			$put($1.bbs, $1.i, $get($a([0, $1.bar, 0]), _n)); /*7148*/
		} /*7148*/
		$k[$j++] = Infinity; /*7160*/
		var _y = $1.bhs; /*7154*/
		var _z = $1.bbs; /*7155*/
		$k[$j++] = Infinity; /*7157*/
		for (var _11 = 0, _12 = $1.encstr.length * 2; _11 < _12; _11++) {
			/*7156*/
			$k[$j++] = $1.spc; /*7156*/
		} /*7156*/
		var _14 = $a(); /*7157*/
		$k[$j++] = 'ren'; /*7160*/
		$k[$j++] = $0.renlinear; /*7160*/
		$k[$j++] = 'bhs'; /*7160*/
		$k[$j++] = _y; /*7160*/
		$k[$j++] = 'bbs'; /*7160*/
		$k[$j++] = _z; /*7160*/
		$k[$j++] = 'sbs'; /*7160*/
		$k[$j++] = _14; /*7160*/
		$k[$j++] = 'txt'; /*7160*/
		$k[$j++] = $1.txt; /*7160*/
		$k[$j++] = 'textxalign'; /*7160*/
		$k[$j++] = "center"; /*7160*/
		$k[$j++] = 'textyoffset'; /*7160*/
		$k[$j++] = 4; /*7160*/
		$k[$j++] = 'opt'; /*7160*/
		$k[$j++] = $1.options; /*7160*/
		var _17 = $d(); /*7160*/
		$k[$j++] = _17; /*7163*/
		if (!$1.dontdraw) { //no-else/*7163*/
			$0.renlinear(); /*7163*/
		} /*7163*/
	};
	$0.code2of5 = function() {
		var $1 = {}; /*7192*/
		$1.options = $k[--$j]; /*7194*/
		$1.barcode = $k[--$j]; /*7195*/
		$1.dontdraw = false; /*7197*/
		$1.includecheck = false; /*7198*/
		$1.validatecheck = false; /*7199*/
		$1.includetext = false; /*7200*/
		$1.includecheckintext = false; /*7201*/
		$1.textfont = 'Courier'; /*7202*/
		$1.textsize = 10; /*7203*/
		$1.textyoffset = -8.5; /*7204*/
		$1.height = 1; /*7205*/
		$1.version = "industrial"; /*7206*/
		$forall($1.options, function() {
			/*7217*/
			var _3 = $k[--$j]; /*7217*/
			$1[$k[--$j]] = _3; /*7217*/
		}); /*7217*/
		$1.textfont = "" + $1.textfont; /*7219*/
		$1.textsize = +$1.textsize; /*7220*/
		$1.textyoffset = +$1.textyoffset; /*7221*/
		$1.height = +$1.height; /*7222*/
		$forall($1.barcode, function() {
			/*7229*/
			var _A = $k[--$j]; /*7226*/
			if ((_A < 48) || (_A > 57)) { //no-else/*7228*/
				$k[$j++] = 'bwipp.code2of5badCharacter'; /*7227*/
				$k[$j++] = "Code 25 must contain only digits"; /*7227*/
				$0.raiseerror(); /*7227*/
			} /*7227*/
		}); /*7227*/
		$k[$j++] = 'barlen'; /*7231*/
		$k[$j++] = $1.barcode.length; /*7231*/
		if ($1.validatecheck) { //no-else/*7231*/
			var _D = $k[--$j]; /*7231*/
			$k[$j++] = _D - 1; /*7231*/
		} /*7231*/
		var _E = $k[--$j]; /*7231*/
		$1[$k[--$j]] = _E; /*7231*/
		$1.checksum = 0; /*7233*/
		for (var _I = 0, _H = $1.barlen - 1; _I <= _H; _I += 1) {
			/*7237*/
			$1.i = _I; /*7235*/
			$k[$j++] = 'checksum'; /*7236*/
			$k[$j++] = $1.checksum; /*7236*/
			$k[$j++] = $get($1.barcode, $1.i) - 48; /*7236*/
			if ((($1.barlen - $1.i) % 2) != 0) { //no-else/*7236*/
				var _P = $k[--$j]; /*7236*/
				$k[$j++] = _P * 3; /*7236*/
			} /*7236*/
			var _Q = $k[--$j]; /*7236*/
			var _R = $k[--$j]; /*7236*/
			$1[$k[--$j]] = _R + _Q; /*7236*/
		} /*7236*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*7238*/
		if ($1.validatecheck) { //no-else/*7245*/
			if ($get($1.barcode, $1.barlen) != ($1.checksum + 48)) { //no-else/*7242*/
				$k[$j++] = 'bwipp.code2of5badCheckDigit'; /*7241*/
				$k[$j++] = "Incorrect Code 25 check digit provided"; /*7241*/
				$0.raiseerror(); /*7241*/
			} /*7241*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*7243*/
			$1.includecheck = true; /*7244*/
		} /*7244*/
		var _h = new Map([
			["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
			["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
			["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
			["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
			["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
		]); /*7269*/
		$1.versions = _h; /*7271*/
		var _k = $get($1.versions, $1.version) !== undefined; /*7272*/
		if (!_k) { //no-else/*7274*/
			$k[$j++] = 'bwipp.code2of5badVersion'; /*7273*/
			$k[$j++] = "Unrecognised Code 25 version"; /*7273*/
			$0.raiseerror(); /*7273*/
		} /*7273*/
		$1.encs = $get($1.versions, $1.version); /*7275*/
		$1.cs = $get($1.encs, 0).length; /*7277*/
		$k[$j++] = 'cw'; /*7278*/
		$k[$j++] = 0; /*7278*/
		$forall($get($1.encs, 0), function() {
			/*7278*/
			var _s = $k[--$j]; /*7278*/
			var _t = $k[--$j]; /*7278*/
			$k[$j++] = _t + (_s - 48); /*7278*/
		}); /*7278*/
		var _u = $k[--$j]; /*7278*/
		$1[$k[--$j]] = _u; /*7278*/
		var _w = $1.encs; /*7279*/
		$1.ss = $get(_w, _w.length - 2).length; /*7279*/
		var _y = $1.encs; /*7280*/
		$k[$j++] = 'sw'; /*7280*/
		$k[$j++] = 0; /*7280*/
		$forall($get(_y, _y.length - 2), function() {
			/*7280*/
			var _10 = $k[--$j]; /*7280*/
			var _11 = $k[--$j]; /*7280*/
			$k[$j++] = _11 + (_10 - 48); /*7280*/
		}); /*7280*/
		var _12 = $k[--$j]; /*7280*/
		$1[$k[--$j]] = _12; /*7280*/
		$1.barchars = "0123456789"; /*7283*/
		$k[$j++] = 'sbs'; /*7285*/
		$k[$j++] = $1.barlen; /*7285*/
		if ($1.includecheck) { //no-else/*7285*/
			var _16 = $k[--$j]; /*7285*/
			$k[$j++] = _16 + 1; /*7285*/
		} /*7285*/
		var _1B = $s((($k[--$j] * $1.cs) + $1.ss) + $1.ss); /*7285*/
		$1[$k[--$j]] = _1B; /*7285*/
		$k[$j++] = 'txt'; /*7286*/
		$k[$j++] = $1.barlen; /*7286*/
		if ($1.includecheck) { //no-else/*7286*/
			var _1F = $k[--$j]; /*7286*/
			$k[$j++] = _1F + 1; /*7286*/
		} /*7286*/
		var _1H = $a($k[--$j]); /*7286*/
		$1[$k[--$j]] = _1H; /*7286*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*7289*/
		for (var _1O = 0, _1N = $1.barlen - 1; _1O <= _1N; _1O += 1) {
			/*7300*/
			$1.i = _1O; /*7291*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*7293*/
			$j--; /*7294*/
			$1.indx = $k[--$j].length; /*7295*/
			$j -= 2; /*7296*/
			$1.enc = $get($1.encs, $1.indx); /*7297*/
			$puti($1.sbs, ($1.i * $1.cs) + $1.ss, $1.enc); /*7298*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * $1.cw) + $1.sw, $1.textyoffset, $1.textfont, $1.textsize])); /*7299*/
		} /*7299*/
		if ($1.includecheck) {
			/*7312*/
			$puti($1.sbs, ($1.barlen * $1.cs) + $1.ss, $get($1.encs, $1.checksum)); /*7304*/
			$puti($1.sbs, (($1.barlen * $1.cs) + $1.cs) + $1.ss, $get($1.encs, 11)); /*7305*/
			if ($1.includecheckintext) {
				/*7309*/
				$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($1.barlen * $1.cw) + $1.sw, $1.textyoffset, $1.textfont, $1.textsize])); /*7307*/
			} else {
				/*7309*/
				$put($1.txt, $1.barlen, $a([" ", ($1.barlen * $1.cw) + $1.sw, $1.textyoffset, $1.textfont, $1.textsize])); /*7309*/
			} /*7309*/
		} else {
			/*7312*/
			$puti($1.sbs, ($1.barlen * $1.cs) + $1.ss, $get($1.encs, 11)); /*7312*/
		} /*7312*/
		$k[$j++] = Infinity; /*7324*/
		$k[$j++] = Infinity; /*7319*/
		$forall($1.sbs, function() {
			/*7318*/
			var _2W = $k[--$j]; /*7318*/
			$k[$j++] = _2W - 48; /*7318*/
		}); /*7318*/
		var _2X = $a(); /*7319*/
		$k[$j++] = Infinity; /*7320*/
		for (var _2Z = 0, _2a = ~~(($1.sbs.length + 1) / 2); _2Z < _2a; _2Z++) {
			/*7319*/
			$k[$j++] = $1.height; /*7319*/
		} /*7319*/
		var _2c = $a(); /*7320*/
		$k[$j++] = Infinity; /*7321*/
		for (var _2e = 0, _2f = ~~(($1.sbs.length + 1) / 2); _2e < _2f; _2e++) {
			/*7320*/
			$k[$j++] = 0; /*7320*/
		} /*7320*/
		var _2g = $a(); /*7321*/
		$k[$j++] = 'ren'; /*7323*/
		$k[$j++] = $0.renlinear; /*7323*/
		$k[$j++] = 'sbs'; /*7323*/
		$k[$j++] = _2X; /*7323*/
		$k[$j++] = 'bhs'; /*7323*/
		$k[$j++] = _2c; /*7323*/
		$k[$j++] = 'bbs'; /*7323*/
		$k[$j++] = _2g; /*7323*/
		if ($1.includetext) { //no-else/*7323*/
			$k[$j++] = 'txt'; /*7322*/
			$k[$j++] = $1.txt; /*7322*/
		} /*7322*/
		$k[$j++] = 'opt'; /*7324*/
		$k[$j++] = $1.options; /*7324*/
		var _2k = $d(); /*7324*/
		$k[$j++] = _2k; /*7327*/
		if (!$1.dontdraw) { //no-else/*7327*/
			$0.renlinear(); /*7327*/
		} /*7327*/
	};
	$0.industrial2of5 = function() {
		var $1 = {}; /*7357*/
		$1.options = $k[--$j]; /*7359*/
		$1.barcode = $k[--$j]; /*7360*/
		$1.dontdraw = false; /*7362*/
		$1.includetext = false; /*7363*/
		$1.textfont = 'Courier'; /*7364*/
		$1.textsize = 10; /*7365*/
		$1.textxoffset = 0; /*7366*/
		$1.textyoffset = -8.5; /*7367*/
		$1.height = 1; /*7368*/
		$forall($1.options, function() {
			/*7379*/
			var _3 = $k[--$j]; /*7379*/
			$1[$k[--$j]] = _3; /*7379*/
		}); /*7379*/
		$1.textfont = "" + $1.textfont; /*7381*/
		$1.textsize = +$1.textsize; /*7382*/
		$1.textxoffset = +$1.textxoffset; /*7383*/
		$1.textyoffset = +$1.textyoffset; /*7384*/
		$1.height = +$1.height; /*7385*/
		$put($1.options, "dontdraw", true); /*7388*/
		$put($1.options, "version", "industrial"); /*7389*/
		$k[$j++] = 'args'; /*7391*/
		$k[$j++] = $1.barcode; /*7391*/
		$k[$j++] = $1.options; /*7391*/
		$0.code2of5(); /*7391*/
		var _E = $k[--$j]; /*7391*/
		$1[$k[--$j]] = _E; /*7391*/
		$put($1.args, "opt", $1.options); /*7393*/
		$k[$j++] = $1.args; /*7396*/
		if (!$1.dontdraw) { //no-else/*7396*/
			$0.renlinear(); /*7396*/
		} /*7396*/
	};
	$0.iata2of5 = function() {
		var $1 = {}; /*7426*/
		$1.options = $k[--$j]; /*7428*/
		$1.barcode = $k[--$j]; /*7429*/
		$1.dontdraw = false; /*7431*/
		$1.includetext = false; /*7432*/
		$1.textfont = 'Courier'; /*7433*/
		$1.textsize = 10; /*7434*/
		$1.textxoffset = 0; /*7435*/
		$1.textyoffset = -8.5; /*7436*/
		$1.height = 1; /*7437*/
		$forall($1.options, function() {
			/*7448*/
			var _3 = $k[--$j]; /*7448*/
			$1[$k[--$j]] = _3; /*7448*/
		}); /*7448*/
		$1.textfont = "" + $1.textfont; /*7450*/
		$1.textsize = +$1.textsize; /*7451*/
		$1.textxoffset = +$1.textxoffset; /*7452*/
		$1.textyoffset = +$1.textyoffset; /*7453*/
		$1.height = +$1.height; /*7454*/
		$put($1.options, "dontdraw", true); /*7457*/
		$put($1.options, "version", "iata"); /*7458*/
		$k[$j++] = 'args'; /*7460*/
		$k[$j++] = $1.barcode; /*7460*/
		$k[$j++] = $1.options; /*7460*/
		$0.code2of5(); /*7460*/
		var _E = $k[--$j]; /*7460*/
		$1[$k[--$j]] = _E; /*7460*/
		$put($1.args, "opt", $1.options); /*7462*/
		$k[$j++] = $1.args; /*7465*/
		if (!$1.dontdraw) { //no-else/*7465*/
			$0.renlinear(); /*7465*/
		} /*7465*/
	};
	$0.matrix2of5 = function() {
		var $1 = {}; /*7495*/
		$1.options = $k[--$j]; /*7497*/
		$1.barcode = $k[--$j]; /*7498*/
		$1.dontdraw = false; /*7500*/
		$1.includetext = false; /*7501*/
		$1.textfont = 'Courier'; /*7502*/
		$1.textsize = 10; /*7503*/
		$1.textxoffset = 0; /*7504*/
		$1.textyoffset = -8.5; /*7505*/
		$1.height = 1; /*7506*/
		$forall($1.options, function() {
			/*7517*/
			var _3 = $k[--$j]; /*7517*/
			$1[$k[--$j]] = _3; /*7517*/
		}); /*7517*/
		$1.textfont = "" + $1.textfont; /*7519*/
		$1.textsize = +$1.textsize; /*7520*/
		$1.textxoffset = +$1.textxoffset; /*7521*/
		$1.textyoffset = +$1.textyoffset; /*7522*/
		$1.height = +$1.height; /*7523*/
		$put($1.options, "dontdraw", true); /*7526*/
		$put($1.options, "version", "matrix"); /*7527*/
		$k[$j++] = 'args'; /*7529*/
		$k[$j++] = $1.barcode; /*7529*/
		$k[$j++] = $1.options; /*7529*/
		$0.code2of5(); /*7529*/
		var _E = $k[--$j]; /*7529*/
		$1[$k[--$j]] = _E; /*7529*/
		$put($1.args, "opt", $1.options); /*7531*/
		$k[$j++] = $1.args; /*7534*/
		if (!$1.dontdraw) { //no-else/*7534*/
			$0.renlinear(); /*7534*/
		} /*7534*/
	};
	$0.coop2of5 = function() {
		var $1 = {}; /*7564*/
		$1.options = $k[--$j]; /*7566*/
		$1.barcode = $k[--$j]; /*7567*/
		$1.dontdraw = false; /*7569*/
		$1.includetext = false; /*7570*/
		$1.textfont = 'Courier'; /*7571*/
		$1.textsize = 10; /*7572*/
		$1.textxoffset = 0; /*7573*/
		$1.textyoffset = -8.5; /*7574*/
		$1.height = 1; /*7575*/
		$forall($1.options, function() {
			/*7586*/
			var _3 = $k[--$j]; /*7586*/
			$1[$k[--$j]] = _3; /*7586*/
		}); /*7586*/
		$1.textfont = "" + $1.textfont; /*7588*/
		$1.textsize = +$1.textsize; /*7589*/
		$1.textxoffset = +$1.textxoffset; /*7590*/
		$1.textyoffset = +$1.textyoffset; /*7591*/
		$1.height = +$1.height; /*7592*/
		$put($1.options, "dontdraw", true); /*7595*/
		$put($1.options, "version", "coop"); /*7596*/
		$k[$j++] = 'args'; /*7598*/
		$k[$j++] = $1.barcode; /*7598*/
		$k[$j++] = $1.options; /*7598*/
		$0.code2of5(); /*7598*/
		var _E = $k[--$j]; /*7598*/
		$1[$k[--$j]] = _E; /*7598*/
		$put($1.args, "opt", $1.options); /*7600*/
		$k[$j++] = $1.args; /*7603*/
		if (!$1.dontdraw) { //no-else/*7603*/
			$0.renlinear(); /*7603*/
		} /*7603*/
	};
	$0.datalogic2of5 = function() {
		var $1 = {}; /*7633*/
		$1.options = $k[--$j]; /*7635*/
		$1.barcode = $k[--$j]; /*7636*/
		$1.dontdraw = false; /*7638*/
		$1.includetext = false; /*7639*/
		$1.textfont = 'Courier'; /*7640*/
		$1.textsize = 10; /*7641*/
		$1.textxoffset = 0; /*7642*/
		$1.textyoffset = -8.5; /*7643*/
		$1.height = 1; /*7644*/
		$forall($1.options, function() {
			/*7655*/
			var _3 = $k[--$j]; /*7655*/
			$1[$k[--$j]] = _3; /*7655*/
		}); /*7655*/
		$1.textfont = "" + $1.textfont; /*7657*/
		$1.textsize = +$1.textsize; /*7658*/
		$1.textxoffset = +$1.textxoffset; /*7659*/
		$1.textyoffset = +$1.textyoffset; /*7660*/
		$1.height = +$1.height; /*7661*/
		$put($1.options, "dontdraw", true); /*7664*/
		$put($1.options, "version", "datalogic"); /*7665*/
		$k[$j++] = 'args'; /*7667*/
		$k[$j++] = $1.barcode; /*7667*/
		$k[$j++] = $1.options; /*7667*/
		$0.code2of5(); /*7667*/
		var _E = $k[--$j]; /*7667*/
		$1[$k[--$j]] = _E; /*7667*/
		$put($1.args, "opt", $1.options); /*7669*/
		$k[$j++] = $1.args; /*7672*/
		if (!$1.dontdraw) { //no-else/*7672*/
			$0.renlinear(); /*7672*/
		} /*7672*/
	};
	$0.code11 = function() {
		var $1 = {}; /*7701*/
		$1.options = $k[--$j]; /*7703*/
		$1.barcode = $k[--$j]; /*7704*/
		$1.dontdraw = false; /*7706*/
		$1.includecheck = false; /*7707*/
		$1.validatecheck = false; /*7708*/
		$1.includetext = false; /*7709*/
		$1.includecheckintext = false; /*7710*/
		$1.textfont = 'Courier'; /*7711*/
		$1.textsize = 10; /*7712*/
		$1.textyoffset = -8.5; /*7713*/
		$1.height = 1; /*7714*/
		$forall($1.options, function() {
			/*7725*/
			var _3 = $k[--$j]; /*7725*/
			$1[$k[--$j]] = _3; /*7725*/
		}); /*7725*/
		$1.textfont = "" + $1.textfont; /*7727*/
		$1.textsize = +$1.textsize; /*7728*/
		$1.textyoffset = +$1.textyoffset; /*7729*/
		$1.height = +$1.height; /*7730*/
		$1.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); /*7737*/
		$1.barchars = "0123456789-"; /*7740*/
		$1.charvals = new Map; /*7741*/
		for (var _A = 0; _A <= 10; _A += 1) {
			/*7742*/
			$put($1.charvals, $geti($1.barchars, _A, 1), _A); /*7742*/
		} /*7742*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*7749*/
			var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; /*7746*/
			if (!_K) { //no-else/*7748*/
				$k[$j++] = 'bwipp.code11badCharacter'; /*7747*/
				$k[$j++] = "Code 11 must contain only digits and dashes"; /*7747*/
				$0.raiseerror(); /*7747*/
			} /*7747*/
		} /*7747*/
		$1.barlen = $1.barcode.length; /*7751*/
		if ($1.validatecheck) { //no-else/*7757*/
			if ($1.barlen == 11) { //no-else/*7755*/
				$k[$j++] = 'bwipp.code11badLength'; /*7754*/
				$k[$j++] = "Code 11 cannot be 11 characters using check digits"; /*7754*/
				$0.raiseerror(); /*7754*/
			} /*7754*/
			var _Q = ($1.barlen <= 10) ? 1 : 2; /*7756*/
			$1.barlen = $1.barlen - _Q; /*7756*/
		} /*7756*/
		$k[$j++] = 'numchecks'; /*7759*/
		if ($1.includecheck || $1.validatecheck) {
			/*7759*/
			var _U = ($1.barlen >= 10) ? 2 : 1; /*7759*/
			$k[$j++] = _U; /*7759*/
		} else {
			/*7759*/
			$k[$j++] = 0; /*7759*/
		} /*7759*/
		var _V = $k[--$j]; /*7759*/
		$1[$k[--$j]] = _V; /*7759*/
		$1.checksum1 = 0; /*7760*/
		$1.checksum2 = 0; /*7760*/
		for (var _Z = 0, _Y = $1.barlen - 1; _Z <= _Y; _Z += 1) {
			/*7766*/
			$1.i = _Z; /*7762*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*7763*/
			$1.checksum1 = $1.checksum1 + ((((($1.barlen - $1.i) - 1) % 10) + 1) * $1.indx); /*7764*/
			$1.checksum2 = $1.checksum2 + (((($1.barlen - $1.i) % 9) + 1) * $1.indx); /*7765*/
		} /*7765*/
		$1.checksum1 = $1.checksum1 % 11; /*7767*/
		$1.checksum2 = ($1.checksum2 + $1.checksum1) % 11; /*7768*/
		if ($1.validatecheck) { //no-else/*7782*/
			if ($1.numchecks == 1) {
				/*7777*/
				if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) { //no-else/*7773*/
					$k[$j++] = 'bwipp.code11badCheckDigit'; /*7772*/
					$k[$j++] = "Incorrect Code 11 check digit provided"; /*7772*/
					$0.raiseerror(); /*7772*/
				} /*7772*/
			} else {
				/*7777*/
				if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $1.barlen + 1) != $get($1.barchars, $1.checksum2))) { //no-else/*7778*/
					$k[$j++] = 'bwipp.code11badCheckDigits'; /*7777*/
					$k[$j++] = "Incorrect Code 11 check digits provided"; /*7777*/
					$0.raiseerror(); /*7777*/
				} /*7777*/
			} /*7777*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*7780*/
			$1.includecheck = true; /*7781*/
		} /*7781*/
		$1.sbs = $s((($1.barlen + $1.numchecks) * 6) + 12); /*7784*/
		$1.txt = $a($1.barlen + $1.numchecks); /*7785*/
		$puti($1.sbs, 0, $get($1.encs, 11)); /*7788*/
		$1.xpos = 8; /*7790*/
		for (var _1O = 0, _1N = $1.barlen - 1; _1O <= _1N; _1O += 1) {
			/*7800*/
			$1.i = _1O; /*7792*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*7793*/
			$1.enc = $get($1.encs, $1.indx); /*7794*/
			$puti($1.sbs, ($1.i * 6) + 6, $1.enc); /*7795*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7796*/
			for (var _1k = 0; _1k <= 5; _1k += 1) {
				/*7799*/
				$1.xpos = ($get($1.enc, _1k) - 48) + $1.xpos; /*7798*/
			} /*7798*/
		} /*7798*/
		if ($1.includecheck) {
			/*7829*/
			if ($1.barlen >= 10) {
				/*7826*/
				$puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); /*7805*/
				$puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, $1.checksum2)); /*7806*/
				if ($1.includecheckintext) {
					/*7816*/
					$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7808*/
					$1.enc = $get($1.encs, $1.checksum1); /*7809*/
					for (var _2E = 0; _2E <= 5; _2E += 1) {
						/*7812*/
						$1.xpos = ($get($1.enc, _2E) - 48) + $1.xpos; /*7811*/
					} /*7811*/
					$put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum2, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7813*/
				} else {
					/*7816*/
					$put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7815*/
					$put($1.txt, $1.barlen + 1, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7816*/
				} /*7816*/
				$puti($1.sbs, ($1.barlen * 6) + 18, $get($1.encs, 11)); /*7818*/
			} else {
				/*7826*/
				$puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); /*7820*/
				if ($1.includecheckintext) {
					/*7824*/
					$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7822*/
				} else {
					/*7824*/
					$put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7824*/
				} /*7824*/
				$puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, 11)); /*7826*/
			} /*7826*/
		} else {
			/*7829*/
			$puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, 11)); /*7829*/
		} /*7829*/
		$k[$j++] = Infinity; /*7841*/
		$k[$j++] = Infinity; /*7836*/
		var _3F = $1.sbs; /*7835*/
		for (var _3G = 0, _3H = _3F.length; _3G < _3H; _3G++) {
			/*7835*/
			$k[$j++] = $get(_3F, _3G) - 48; /*7835*/
		} /*7835*/
		var _3J = $a(); /*7836*/
		$k[$j++] = Infinity; /*7837*/
		for (var _3L = 0, _3M = ~~(($1.sbs.length + 1) / 2); _3L < _3M; _3L++) {
			/*7836*/
			$k[$j++] = $1.height; /*7836*/
		} /*7836*/
		var _3O = $a(); /*7837*/
		$k[$j++] = Infinity; /*7838*/
		for (var _3Q = 0, _3R = ~~(($1.sbs.length + 1) / 2); _3Q < _3R; _3Q++) {
			/*7837*/
			$k[$j++] = 0; /*7837*/
		} /*7837*/
		var _3S = $a(); /*7838*/
		$k[$j++] = 'ren'; /*7840*/
		$k[$j++] = $0.renlinear; /*7840*/
		$k[$j++] = 'sbs'; /*7840*/
		$k[$j++] = _3J; /*7840*/
		$k[$j++] = 'bhs'; /*7840*/
		$k[$j++] = _3O; /*7840*/
		$k[$j++] = 'bbs'; /*7840*/
		$k[$j++] = _3S; /*7840*/
		if ($1.includetext) { //no-else/*7840*/
			$k[$j++] = 'txt'; /*7839*/
			$k[$j++] = $1.txt; /*7839*/
		} /*7839*/
		$k[$j++] = 'opt'; /*7841*/
		$k[$j++] = $1.options; /*7841*/
		var _3W = $d(); /*7841*/
		$k[$j++] = _3W; /*7844*/
		if (!$1.dontdraw) { //no-else/*7844*/
			$0.renlinear(); /*7844*/
		} /*7844*/
	};
	$0.bc412 = function() {
		var $1 = {}; /*7873*/
		$1.options = $k[--$j]; /*7875*/
		$1.barcode = $k[--$j]; /*7876*/
		$1.dontdraw = false; /*7878*/
		$1.includecheck = false; /*7879*/
		$1.validatecheck = false; /*7880*/
		$1.includetext = false; /*7881*/
		$1.includecheckintext = false; /*7882*/
		$1.includestartstop = false; /*7883*/
		$1.semi = false; /*7884*/
		$1.textfont = 'Courier'; /*7885*/
		$1.textsize = 10; /*7886*/
		$1.textyoffset = -8.5; /*7887*/
		$1.height = 1; /*7888*/
		$forall($1.options, function() {
			/*7899*/
			var _3 = $k[--$j]; /*7899*/
			$1[$k[--$j]] = _3; /*7899*/
		}); /*7899*/
		$1.textfont = "" + $1.textfont; /*7901*/
		$1.textsize = +$1.textsize; /*7902*/
		$1.textyoffset = +$1.textyoffset; /*7903*/
		$1.height = +$1.height; /*7904*/
		if ($1.semi) { //no-else/*7909*/
			$1.includecheck = true; /*7907*/
			$1.includestartstop = true; /*7908*/
		} /*7908*/
		$1.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; /*7912*/
		$1.charvals = new Map; /*7913*/
		for (var _A = 0; _A <= 34; _A += 1) {
			/*7914*/
			$put($1.charvals, $geti($1.barchars, _A, 1), _A); /*7914*/
		} /*7914*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*7921*/
			var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; /*7918*/
			if (!_K) { //no-else/*7920*/
				$k[$j++] = 'bwipp.bc412badCharacter'; /*7919*/
				$k[$j++] = "BC412 must contain only digits and capital letters except O"; /*7919*/
				$0.raiseerror(); /*7919*/
			} /*7919*/
		} /*7919*/
		$k[$j++] = 'barlen'; /*7923*/
		$k[$j++] = $1.barcode.length; /*7923*/
		if ($1.validatecheck) { //no-else/*7923*/
			var _N = $k[--$j]; /*7923*/
			$k[$j++] = _N - 1; /*7923*/
		} /*7923*/
		var _O = $k[--$j]; /*7923*/
		$1[$k[--$j]] = _O; /*7923*/
		$1.checksum = 0; /*7925*/
		for (var _S = 0, _R = $1.barlen - 1; _S <= _R; _S += 1) {
			/*7929*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _S, 1)) + $1.checksum; /*7928*/
		} /*7928*/
		$1.checksum = $1.checksum % 35; /*7930*/
		if ($1.validatecheck) { //no-else/*7937*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*7934*/
				$k[$j++] = 'bwipp.bc412badCheckDigit'; /*7933*/
				$k[$j++] = "Incorrect BC412 check digit provided"; /*7933*/
				$0.raiseerror(); /*7933*/
			} /*7933*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*7935*/
			$1.includecheck = true; /*7936*/
		} /*7936*/
		$1.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111212", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); /*7949*/
		$1.sbs = $s((($1.barlen + 1) * 8) + 5); /*7951*/
		if ($1.includecheck) {
			/*7955*/
			$1.txt = $a($1.barlen + 1); /*7953*/
		} else {
			/*7955*/
			$1.txt = $a($1.barlen); /*7955*/
		} /*7955*/
		if ($1.includestartstop) {
			/*7965*/
			$puti($1.sbs, 0, $get($1.encs, 35)); /*7960*/
			$1.pos = 2; /*7961*/
			$1.txtpos = 3; /*7962*/
		} else {
			/*7965*/
			$1.pos = 0; /*7964*/
			$1.txtpos = 0; /*7965*/
		} /*7965*/
		for (var _x = 0, _w = $1.barlen - 1; _x <= _w; _x += 1) {
			/*7974*/
			$1.i = _x; /*7969*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*7970*/
			$puti($1.sbs, $1.pos, $get($1.encs, $1.indx)); /*7971*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7972*/
			$1.pos = $1.pos + 8; /*7973*/
		} /*7973*/
		if ($1.includecheck) { //no-else/*7985*/
			$puti($1.sbs, $1.pos, $get($1.encs, $1.checksum)); /*7978*/
			if ($1.includecheckintext) {
				/*7982*/
				$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($1.barlen * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7980*/
			} else {
				/*7982*/
				$put($1.txt, $1.barlen, $a(["", ($1.barlen * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); /*7982*/
			} /*7982*/
			$1.pos = $1.pos + 8; /*7984*/
		} /*7984*/
		if ($1.includestartstop) { //no-else/*7991*/
			$puti($1.sbs, $1.pos, $get($1.encs, 36)); /*7989*/
			$1.pos = $1.pos + 2; /*7990*/
		} /*7990*/
		$1.sbs = $geti($1.sbs, 0, $1.pos); /*7994*/
		$k[$j++] = Infinity; /*8003*/
		$k[$j++] = Infinity; /*7998*/
		$forall($1.sbs, function() {
			/*7997*/
			var _1v = $k[--$j]; /*7997*/
			$k[$j++] = _1v - 48; /*7997*/
		}); /*7997*/
		var _1w = $a(); /*7998*/
		$k[$j++] = Infinity; /*7999*/
		for (var _1y = 0, _1z = ~~(($1.sbs.length + 1) / 2); _1y < _1z; _1y++) {
			/*7998*/
			$k[$j++] = $1.height; /*7998*/
		} /*7998*/
		var _21 = $a(); /*7999*/
		$k[$j++] = Infinity; /*8000*/
		for (var _23 = 0, _24 = ~~(($1.sbs.length + 1) / 2); _23 < _24; _23++) {
			/*7999*/
			$k[$j++] = 0; /*7999*/
		} /*7999*/
		var _25 = $a(); /*8000*/
		$k[$j++] = 'ren'; /*8002*/
		$k[$j++] = $0.renlinear; /*8002*/
		$k[$j++] = 'sbs'; /*8002*/
		$k[$j++] = _1w; /*8002*/
		$k[$j++] = 'bhs'; /*8002*/
		$k[$j++] = _21; /*8002*/
		$k[$j++] = 'bbs'; /*8002*/
		$k[$j++] = _25; /*8002*/
		if ($1.includetext) { //no-else/*8002*/
			$k[$j++] = 'txt'; /*8001*/
			$k[$j++] = $1.txt; /*8001*/
		} /*8001*/
		$k[$j++] = 'opt'; /*8003*/
		$k[$j++] = $1.options; /*8003*/
		var _29 = $d(); /*8003*/
		$k[$j++] = _29; /*8006*/
		if (!$1.dontdraw) { //no-else/*8006*/
			$0.renlinear(); /*8006*/
		} /*8006*/
	};
	$0.rationalizedCodabar = function() {
		var $1 = {}; /*8035*/
		$1.options = $k[--$j]; /*8037*/
		$1.barcode = $k[--$j]; /*8038*/
		$1.dontdraw = false; /*8040*/
		$1.altstartstop = false; /*8041*/
		$1.includecheck = false; /*8042*/
		$1.validatecheck = false; /*8043*/
		$1.includetext = false; /*8044*/
		$1.includecheckintext = false; /*8045*/
		$1.textfont = 'Courier'; /*8046*/
		$1.textsize = 10; /*8047*/
		$1.textyoffset = -8.5; /*8048*/
		$1.height = 1; /*8049*/
		$forall($1.options, function() {
			/*8060*/
			var _3 = $k[--$j]; /*8060*/
			$1[$k[--$j]] = _3; /*8060*/
		}); /*8060*/
		$1.textfont = "" + $1.textfont; /*8062*/
		$1.textsize = +$1.textsize; /*8063*/
		$1.textyoffset = +$1.textyoffset; /*8064*/
		$1.height = +$1.height; /*8065*/
		$1.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); /*8073*/
		if ($1.altstartstop) {
			/*8079*/
			$1.barchars = "0123456789-$:/.+TN*E"; /*8077*/
		} else {
			/*8079*/
			$1.barchars = "0123456789-$:/.+ABCD"; /*8079*/
		} /*8079*/
		$1.charvals = new Map; /*8081*/
		for (var _B = 0; _B <= 19; _B += 1) {
			/*8082*/
			$put($1.charvals, $geti($1.barchars, _B, 1), _B); /*8082*/
		} /*8082*/
		$1.bodyvals = new Map; /*8083*/
		for (var _F = 0; _F <= 15; _F += 1) {
			/*8084*/
			$put($1.bodyvals, $geti($1.barchars, _F, 1), _F); /*8084*/
		} /*8084*/
		$1.ssvals = new Map; /*8085*/
		for (var _J = 16; _J <= 19; _J += 1) {
			/*8086*/
			$put($1.ssvals, $geti($1.barchars, _J, 1), _J); /*8086*/
		} /*8086*/
		var _Q = $get($1.ssvals, $geti($1.barcode, 0, 1)) !== undefined; /*8089*/
		var _V = $get($1.ssvals, $geti($1.barcode, $1.barcode.length - 1, 1)) !== undefined; /*8090*/
		if ((!_Q) || (!_V)) { //no-else/*8096*/
			if ($1.altstartstop) {
				/*8094*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop'; /*8092*/
				$k[$j++] = "Codabar start and stop characters must be one of E N T or *"; /*8092*/
				$0.raiseerror(); /*8092*/
			} else {
				/*8094*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadStartStop'; /*8094*/
				$k[$j++] = "Codabar start and stop characters must be one of A B C or D"; /*8094*/
				$0.raiseerror(); /*8094*/
			} /*8094*/
		} /*8094*/
		for (var _Z = 1, _Y = $1.barcode.length - 2; _Z <= _Y; _Z += 1) {
			/*8101*/
			var _d = $get($1.bodyvals, $geti($1.barcode, _Z, 1)) !== undefined; /*8098*/
			if (!_d) { //no-else/*8100*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadCharacter'; /*8099*/
				$k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; /*8099*/
				$0.raiseerror(); /*8099*/
			} /*8099*/
		} /*8099*/
		$k[$j++] = 'barlen'; /*8103*/
		$k[$j++] = $1.barcode.length; /*8103*/
		if ($1.validatecheck) { //no-else/*8103*/
			var _g = $k[--$j]; /*8103*/
			$k[$j++] = _g - 1; /*8103*/
		} /*8103*/
		var _h = $k[--$j]; /*8103*/
		$1[$k[--$j]] = _h; /*8103*/
		$1.checksum = 0; /*8105*/
		for (var _l = 0, _k = $1.barlen - 2; _l <= _k; _l += 1) {
			/*8109*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _l, 1)) + $1.checksum; /*8108*/
		} /*8108*/
		$1.checksum = $get($1.charvals, $geti($1.barcode, $1.barcode.length - 1, 1)) + $1.checksum; /*8111*/
		$1.checksum = (16 - ($1.checksum % 16)) % 16; /*8112*/
		if ($1.validatecheck) { //no-else/*8122*/
			if ($get($1.barcode, $1.barlen - 1) != $get($1.barchars, $1.checksum)) { //no-else/*8116*/
				$k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit'; /*8115*/
				$k[$j++] = "Incorrect Codabar check digit provided"; /*8115*/
				$0.raiseerror(); /*8115*/
			} /*8115*/
			var _16 = $s($1.barlen); /*8117*/
			$puti(_16, 0, $geti($1.barcode, 0, $1.barlen - 1)); /*8118*/
			$puti(_16, $1.barlen - 1, $geti($1.barcode, $1.barlen, 1)); /*8119*/
			$1.barcode = _16; /*8120*/
			$1.includecheck = true; /*8121*/
		} /*8121*/
		$k[$j++] = 'sbs'; /*8124*/
		$k[$j++] = $1.barlen; /*8124*/
		if ($1.includecheck) { //no-else/*8124*/
			var _1G = $k[--$j]; /*8124*/
			$k[$j++] = _1G + 1; /*8124*/
		} /*8124*/
		var _1I = $s($k[--$j] * 8); /*8124*/
		$1[$k[--$j]] = _1I; /*8124*/
		$k[$j++] = 'txt'; /*8125*/
		$k[$j++] = $1.barlen; /*8125*/
		if ($1.includecheck) { //no-else/*8125*/
			var _1M = $k[--$j]; /*8125*/
			$k[$j++] = _1M + 1; /*8125*/
		} /*8125*/
		var _1O = $a($k[--$j]); /*8125*/
		$1[$k[--$j]] = _1O; /*8125*/
		$1.xpos = 0; /*8127*/
		for (var _1S = 0, _1R = $1.barlen - 2; _1S <= _1R; _1S += 1) {
			/*8137*/
			$1.i = _1S; /*8129*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*8130*/
			$1.enc = $get($1.encs, $1.indx); /*8131*/
			$puti($1.sbs, $1.i * 8, $1.enc); /*8132*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8133*/
			for (var _1o = 0; _1o <= 7; _1o += 1) {
				/*8136*/
				$1.xpos = ($get($1.enc, _1o) - 48) + $1.xpos; /*8135*/
			} /*8135*/
		} /*8135*/
		if ($1.includecheck) {
			/*8161*/
			$puti($1.sbs, ($1.barlen * 8) - 8, $get($1.encs, $1.checksum)); /*8142*/
			if ($1.includecheckintext) {
				/*8146*/
				$put($1.txt, $1.barlen - 1, $a([$geti($1.barchars, $1.checksum, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8144*/
			} else {
				/*8146*/
				$put($1.txt, $1.barlen - 1, $a([" ", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8146*/
			} /*8146*/
			for (var _2G = 0; _2G <= 7; _2G += 1) {
				/*8150*/
				$1.xpos = ($get($get($1.encs, $1.checksum), _2G) - 48) + $1.xpos; /*8149*/
			} /*8149*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.barlen - 1, 1)); /*8152*/
			$1.enc = $get($1.encs, $1.indx); /*8153*/
			$puti($1.sbs, $1.barlen * 8, $1.enc); /*8154*/
			$put($1.txt, $1.barlen, $a([$geti($1.barcode, $1.barlen - 1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8155*/
		} else {
			/*8161*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.barlen - 1, 1)); /*8158*/
			$1.enc = $get($1.encs, $1.indx); /*8159*/
			$puti($1.sbs, ($1.barlen * 8) - 8, $1.enc); /*8160*/
			$put($1.txt, $1.barlen - 1, $a([$geti($1.barcode, $1.barlen - 1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); /*8161*/
		} /*8161*/
		$k[$j++] = Infinity; /*8173*/
		$k[$j++] = Infinity; /*8168*/
		$forall($1.sbs, function() {
			/*8167*/
			var _33 = $k[--$j]; /*8167*/
			$k[$j++] = _33 - 48; /*8167*/
		}); /*8167*/
		var _34 = $a(); /*8168*/
		$k[$j++] = Infinity; /*8169*/
		for (var _36 = 0, _37 = ~~(($1.sbs.length + 1) / 2); _36 < _37; _36++) {
			/*8168*/
			$k[$j++] = $1.height; /*8168*/
		} /*8168*/
		var _39 = $a(); /*8169*/
		$k[$j++] = Infinity; /*8170*/
		for (var _3B = 0, _3C = ~~(($1.sbs.length + 1) / 2); _3B < _3C; _3B++) {
			/*8169*/
			$k[$j++] = 0; /*8169*/
		} /*8169*/
		var _3D = $a(); /*8170*/
		$k[$j++] = 'ren'; /*8172*/
		$k[$j++] = $0.renlinear; /*8172*/
		$k[$j++] = 'sbs'; /*8172*/
		$k[$j++] = _34; /*8172*/
		$k[$j++] = 'bhs'; /*8172*/
		$k[$j++] = _39; /*8172*/
		$k[$j++] = 'bbs'; /*8172*/
		$k[$j++] = _3D; /*8172*/
		if ($1.includetext) { //no-else/*8172*/
			$k[$j++] = 'txt'; /*8171*/
			$k[$j++] = $1.txt; /*8171*/
		} /*8171*/
		$k[$j++] = 'opt'; /*8173*/
		$k[$j++] = $1.options; /*8173*/
		var _3H = $d(); /*8173*/
		$k[$j++] = _3H; /*8176*/
		if (!$1.dontdraw) { //no-else/*8176*/
			$0.renlinear(); /*8176*/
		} /*8176*/
	};
	$0.onecode = function() {
		var $1 = {}; /*8205*/
		$1.options = $k[--$j]; /*8207*/
		$1.barcode = $k[--$j]; /*8208*/
		$1.dontdraw = false; /*8210*/
		$1.height = 0.15; /*8211*/
		$forall($1.options, function() {
			/*8222*/
			var _3 = $k[--$j]; /*8222*/
			$1[$k[--$j]] = _3; /*8222*/
		}); /*8222*/
		$1.height = +$1.height; /*8224*/
		$1.barlen = $1.barcode.length; /*8226*/
		$k[$j++] = Infinity; /*8235*/
		var _9 = $eq($geti($1.barcode, 5, 1), "9") ? 14 : 11; /*8232*/
		$k[$j++] = 2; /*8235*/
		$k[$j++] = 2; /*8235*/
		$k[$j++] = 5; /*8235*/
		$k[$j++] = 5; /*8235*/
		$k[$j++] = _9; /*8235*/
		$k[$j++] = _9; /*8235*/
		$k[$j++] = 20; /*8235*/
		$k[$j++] = 20; /*8235*/
		$k[$j++] = 25; /*8235*/
		$k[$j++] = 25; /*8235*/
		$k[$j++] = 29; /*8235*/
		$k[$j++] = 29; /*8235*/
		$1.txtdict = $d(); /*8236*/
		$1.txt = $a($1.barlen + 6); /*8237*/
		$1.spacecnt = 0; /*8238*/
		for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) {
			/*8246*/
			$1.i = _F; /*8240*/
			var _I = $get($1.txtdict, $1.i) !== undefined; /*8241*/
			if (_I) { //no-else/*8244*/
				$put($1.txt, $1.i + $1.spacecnt, $a([" ", 0, 0, "", 0])); /*8242*/
				$1.spacecnt = $1.spacecnt + 1; /*8243*/
			} /*8243*/
			$put($1.txt, $1.i + $1.spacecnt, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*8245*/
		} /*8245*/
		$1.txt = $geti($1.txt, 0, $1.barcode.length + $1.spacecnt); /*8247*/
		$1.normalize = function() {
			$1.base = $k[--$j]; /*8250*/
			$1.num = $k[--$j]; /*8251*/
			for (var _c = $1.num.length - 1; _c >= 1; _c -= 1) {
				/*8256*/
				$1.i = _c; /*8253*/
				var _d = $1.num; /*8254*/
				var _e = $1.i; /*8254*/
				$put(_d, _e - 1, $get(_d, _e - 1) + (~~($get($1.num, $1.i) / $1.base))); /*8254*/
				$put($1.num, $1.i, $get($1.num, $1.i) % $1.base); /*8255*/
			} /*8255*/
			for (;;) {
				/*8262*/
				if ($lt($get($1.num, 0), $1.base)) { //no-else/*8258*/
					break; /*8258*/
				} /*8258*/
				$k[$j++] = Infinity; /*8259*/
				$k[$j++] = 0; /*8259*/
				$forall($1.num); /*8259*/
				$1.num = $a(); /*8259*/
				$put($1.num, 0, $get($1.num, 0) + (~~($get($1.num, 1) / $1.base))); /*8260*/
				$put($1.num, 1, $get($1.num, 1) % $1.base); /*8261*/
			} /*8261*/
			$k[$j++] = Infinity; /*8264*/
			$1.i = true; /*8264*/
			var _15 = $1.num; /*8264*/
			for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) {
				/*8264*/
				var _18 = $get(_15, _16); /*8264*/
				$k[$j++] = _18; /*8264*/
				if ((_18 == 0) && $1.i) {
					/*8264*/
					$j--; /*8264*/
				} else {
					/*8264*/
					$1.i = false; /*8264*/
				} /*8264*/
			} /*8264*/
			$1.num = $a(); /*8264*/
			if ($1.num.length == 0) { //no-else/*8265*/
				$1.num = $a([0]); /*8265*/
			} /*8265*/
			$k[$j++] = $1.num; /*8266*/
		}; /*8267*/
		$1.bigadd = function() {
			var _1E = $k[--$j]; /*8270*/
			var _1F = $k[--$j]; /*8270*/
			$1.offset = Math.abs(_1E.length - _1F.length); /*8271*/
			if (_1E.length < _1F.length) { //no-else/*8272*/
				var _ = _1E; /*8272*/
				_1E = _1F; /*8272*/
				_1F = _; /*8272*/
			} /*8272*/
			$1.a = _1E; /*8273*/
			$1.b = _1F; /*8273*/
			for (var _1I = 0, _1H = $1.b.length - 1; _1I <= _1H; _1I += 1) {
				/*8276*/
				var _1J = $1.a; /*8275*/
				var _1K = $1.offset; /*8275*/
				$put(_1J, _1I + _1K, $get(_1J, _1I + _1K) + $get($1.b, _1I)); /*8275*/
			} /*8275*/
			$k[$j++] = $1.a; /*8277*/
		}; /*8278*/
		if ($1.barlen == 20) { //no-else/*8281*/
			$k[$j++] = $a([0]); /*8281*/
		} /*8281*/
		if ($1.barlen == 25) { //no-else/*8282*/
			$k[$j++] = $a([1]); /*8282*/
		} /*8282*/
		if ($1.barlen == 29) { //no-else/*8283*/
			$k[$j++] = $a([1, 0, 0, 0, 0, 1]); /*8283*/
		} /*8283*/
		if ($1.barlen == 31) { //no-else/*8284*/
			$k[$j++] = $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1]); /*8284*/
		} /*8284*/
		var _1X = $k[--$j]; /*8285*/
		$k[$j++] = 'binval'; /*8285*/
		$k[$j++] = _1X; /*8285*/
		$k[$j++] = Infinity; /*8285*/
		$forall($geti($1.barcode, 20, $1.barlen - 20), function() {
			/*8285*/
			var _1b = $k[--$j]; /*8285*/
			$k[$j++] = _1b - 48; /*8285*/
		}); /*8285*/
		var _1c = $a(); /*8285*/
		$k[$j++] = _1c; /*8285*/
		$1.bigadd(); /*8285*/
		var _1d = $k[--$j]; /*8285*/
		$1[$k[--$j]] = _1d; /*8285*/
		$k[$j++] = Infinity; /*8286*/
		var _1f = $1.binval; /*8286*/
		for (var _1g = 0, _1h = _1f.length; _1g < _1h; _1g++) {
			/*8286*/
			$k[$j++] = $get(_1f, _1g); /*8286*/
		} /*8286*/
		$k[$j++] = $get($1.barcode, 0) - 48; /*8286*/
		$1.binval = $a(); /*8286*/
		$k[$j++] = Infinity; /*8287*/
		var _1m = $1.binval; /*8287*/
		for (var _1n = 0, _1o = _1m.length; _1n < _1o; _1n++) {
			/*8287*/
			$k[$j++] = $get(_1m, _1n) * 5; /*8287*/
		} /*8287*/
		var _1q = $a(); /*8287*/
		$k[$j++] = 'binval'; /*8287*/
		$k[$j++] = _1q; /*8287*/
		$k[$j++] = $a([$get($1.barcode, 1) - 48]); /*8287*/
		$1.bigadd(); /*8287*/
		$k[$j++] = 10; /*8287*/
		$1.normalize(); /*8287*/
		var _1u = $k[--$j]; /*8287*/
		$1[$k[--$j]] = _1u; /*8287*/
		$k[$j++] = Infinity; /*8288*/
		var _1w = $1.binval; /*8288*/
		for (var _1x = 0, _1y = _1w.length; _1x < _1y; _1x++) {
			/*8288*/
			$k[$j++] = $get(_1w, _1x); /*8288*/
		} /*8288*/
		$forall($geti($1.barcode, 2, 18), function() {
			/*8288*/
			var _22 = $k[--$j]; /*8288*/
			$k[$j++] = _22 - 48; /*8288*/
		}); /*8288*/
		$1.binval = $a(); /*8288*/
		$1.bytes = $a(13); /*8291*/
		$k[$j++] = Infinity; /*8292*/
		var _25 = $1.binval; /*8292*/
		for (var _26 = 0, _27 = _25.length; _26 < _27; _26++) {
			/*8292*/
			$k[$j++] = $get(_25, _26); /*8292*/
		} /*8292*/
		$1.bintmp = $a(); /*8292*/
		for (var _2A = 12; _2A >= 0; _2A -= 1) {
			/*8302*/
			$1.i = _2A; /*8294*/
			for (var _2D = 0, _2C = $1.bintmp.length - 2; _2D <= _2C; _2D += 1) {
				/*8299*/
				$1.j = _2D; /*8296*/
				var _2E = $1.bintmp; /*8297*/
				var _2F = $1.j; /*8297*/
				$put(_2E, _2F + 1, $get(_2E, _2F + 1) + (($get($1.bintmp, $1.j) % 256) * 10)); /*8297*/
				$put($1.bintmp, $1.j, ~~($get($1.bintmp, $1.j) / 256)); /*8298*/
			} /*8298*/
			$put($1.bytes, $1.i, $get($1.bintmp, $1.bintmp.length - 1) % 256); /*8300*/
			var _2U = $1.bintmp; /*8301*/
			var _2V = $1.bintmp; /*8301*/
			$put(_2U, _2V.length - 1, ~~($get(_2U, _2V.length - 1) / 256)); /*8301*/
		} /*8301*/
		$1.fcs = 2047; /*8305*/
		$1.dat = $get($1.bytes, 0) << 5; /*8306*/
		for (var _2Z = 0, _2a = 6; _2Z < _2a; _2Z++) {
			/*8315*/
			if ((($1.fcs ^ $1.dat) & 1024) != 0) {
				/*8311*/
				$1.fcs = ($1.fcs << 1) ^ 3893; /*8309*/
			} else {
				/*8311*/
				$1.fcs = $1.fcs << 1; /*8311*/
			} /*8311*/
			$1.fcs = $1.fcs & 2047; /*8313*/
			$1.dat = $1.dat << 1; /*8314*/
		} /*8314*/
		for (var _2h = 1; _2h <= 12; _2h += 1) {
			/*8327*/
			$1.dat = $get($1.bytes, _2h) << 3; /*8317*/
			for (var _2k = 0, _2l = 8; _2k < _2l; _2k++) {
				/*8326*/
				if ((($1.fcs ^ $1.dat) & 1024) != 0) {
					/*8322*/
					$1.fcs = ($1.fcs << 1) ^ 3893; /*8320*/
				} else {
					/*8322*/
					$1.fcs = $1.fcs << 1; /*8322*/
				} /*8322*/
				$1.fcs = $1.fcs & 2047; /*8324*/
				$1.dat = $1.dat << 1; /*8325*/
			} /*8325*/
		} /*8325*/
		$1.codewords = $a(10); /*8330*/
		for (var _2t = 9; _2t >= 0; _2t -= 1) {
			/*8345*/
			$1.i = _2t; /*8332*/
			if ($1.i == 9) {
				/*8336*/
				$1.b = 636; /*8334*/
			} else {
				/*8336*/
				$1.b = 1365; /*8336*/
			} /*8336*/
			for (var _2x = 0, _2w = $1.binval.length - 2; _2x <= _2w; _2x += 1) {
				/*8342*/
				$1.j = _2x; /*8339*/
				var _2y = $1.binval; /*8340*/
				var _2z = $1.j; /*8340*/
				$put(_2y, _2z + 1, $get(_2y, _2z + 1) + (($get($1.binval, $1.j) % $1.b) * 10)); /*8340*/
				$put($1.binval, $1.j, ~~($get($1.binval, $1.j) / $1.b)); /*8341*/
			} /*8341*/
			$put($1.codewords, $1.i, $get($1.binval, $1.binval.length - 1) % $1.b); /*8343*/
			var _3H = $1.binval; /*8344*/
			var _3I = $1.binval; /*8344*/
			$put(_3H, _3I.length - 1, ~~($get(_3H, _3I.length - 1) / $1.b)); /*8344*/
		} /*8344*/
		$put($1.codewords, 9, $get($1.codewords, 9) * 2); /*8348*/
		if (($1.fcs & 1024) != 0) { //no-else/*8351*/
			$put($1.codewords, 0, $get($1.codewords, 0) + 659); /*8350*/
		} /*8350*/
		$1.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); /*8441*/
		$1.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); /*8450*/
		$1.chars = $a(10); /*8452*/
		for (var _3V = 0; _3V <= 9; _3V += 1) {
			/*8461*/
			$1.i = _3V; /*8454*/
			var _3Y = $get($1.codewords, $1.i); /*8455*/
			$k[$j++] = _3Y; /*8459*/
			if (_3Y <= 1286) {
				/*8458*/
				var _3b = $get($1.tab513, $k[--$j]); /*8456*/
				$k[$j++] = _3b; /*8456*/
			} else {
				/*8458*/
				var _3e = $get($1.tab213, $k[--$j] - 1287); /*8458*/
				$k[$j++] = _3e; /*8458*/
			} /*8458*/
			$put($1.chars, $1.i, $k[--$j]); /*8460*/
		} /*8460*/
		for (var _3i = 9; _3i >= 0; _3i -= 1) {
			/*8468*/
			$1.i = _3i; /*8464*/
			if (((~~Math.pow(2, $1.i)) & $1.fcs) != 0) { //no-else/*8467*/
				$put($1.chars, $1.i, $get($1.chars, $1.i) ^ 8191); /*8466*/
			} /*8466*/
		} /*8466*/
		$1.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); /*8485*/
		$1.bbs = $a(65); /*8487*/
		$1.bhs = $a(65); /*8488*/
		for (var _3t = 0; _3t <= 64; _3t += 1) {
			/*8509*/
			$1.i = _3t; /*8490*/
			$1.dec = ($get($1.chars, $get($1.barmap, $1.i * 4)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 1)))) != 0; /*8491*/
			$1.asc = ($get($1.chars, $get($1.barmap, ($1.i * 4) + 2)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 3)))) != 0; /*8492*/
			if ((!$1.dec) && (!$1.asc)) { //no-else/*8496*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*8494*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*8495*/
			} /*8495*/
			if ((!$1.dec) && $1.asc) { //no-else/*8500*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*8498*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*8499*/
			} /*8499*/
			if ($1.dec && (!$1.asc)) { //no-else/*8504*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*8502*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*8503*/
			} /*8503*/
			if ($1.dec && $1.asc) { //no-else/*8508*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*8506*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*8507*/
			} /*8507*/
		} /*8507*/
		$k[$j++] = Infinity; /*8522*/
		var _4g = $1.bbs; /*8514*/
		var _4h = $1.bhs; /*8515*/
		$k[$j++] = Infinity; /*8517*/
		for (var _4j = 0, _4k = $1.bhs.length - 1; _4j < _4k; _4j++) {
			/*8516*/
			$k[$j++] = 1.44; /*8516*/
			$k[$j++] = 1.872; /*8516*/
		} /*8516*/
		$k[$j++] = 1.44; /*8516*/
		var _4l = $a(); /*8517*/
		$k[$j++] = 'ren'; /*8522*/
		$k[$j++] = $0.renlinear; /*8522*/
		$k[$j++] = 'bbs'; /*8522*/
		$k[$j++] = _4g; /*8522*/
		$k[$j++] = 'bhs'; /*8522*/
		$k[$j++] = _4h; /*8522*/
		$k[$j++] = 'sbs'; /*8522*/
		$k[$j++] = _4l; /*8522*/
		$k[$j++] = 'txt'; /*8522*/
		$k[$j++] = $1.txt; /*8522*/
		$k[$j++] = 'textxalign'; /*8522*/
		$k[$j++] = "left"; /*8522*/
		$k[$j++] = 'textfont'; /*8522*/
		$k[$j++] = 'Helvetica'; /*8522*/
		$k[$j++] = 'textyoffset'; /*8522*/
		$k[$j++] = 1; /*8522*/
		$k[$j++] = 'textxoffset'; /*8522*/
		$k[$j++] = -0.3; /*8522*/
		$k[$j++] = 'opt'; /*8522*/
		$k[$j++] = $1.options; /*8522*/
		var _4o = $d(); /*8522*/
		$k[$j++] = _4o; /*8525*/
		if (!$1.dontdraw) { //no-else/*8525*/
			$0.renlinear(); /*8525*/
		} /*8525*/
	};
	$0.postnet = function() {
		var $1 = {}; /*8554*/
		$1.options = $k[--$j]; /*8556*/
		$1.barcode = $k[--$j]; /*8557*/
		$1.dontdraw = false; /*8559*/
		$1.includetext = false; /*8560*/
		$1.validatecheck = false; /*8561*/
		$1.includecheckintext = false; /*8562*/
		$1.textfont = 'Courier'; /*8563*/
		$1.textsize = 10; /*8564*/
		$1.textyoffset = -8.5; /*8565*/
		$1.height = 0.125; /*8566*/
		$forall($1.options, function() {
			/*8577*/
			var _3 = $k[--$j]; /*8577*/
			$1[$k[--$j]] = _3; /*8577*/
		}); /*8577*/
		$1.textfont = "" + $1.textfont; /*8579*/
		$1.textsize = +$1.textsize; /*8580*/
		$1.textyoffset = +$1.textyoffset; /*8581*/
		$1.height = +$1.height; /*8582*/
		$k[$j++] = 'barlen'; /*8584*/
		$k[$j++] = $1.barcode.length; /*8584*/
		if ($1.validatecheck) { //no-else/*8584*/
			var _B = $k[--$j]; /*8584*/
			$k[$j++] = _B - 1; /*8584*/
		} /*8584*/
		var _C = $k[--$j]; /*8584*/
		$1[$k[--$j]] = _C; /*8584*/
		if ((($1.barlen != 5) && ($1.barlen != 9)) && ($1.barlen != 11)) { //no-else/*8589*/
			$k[$j++] = 'bwipp.postnetBadLength'; /*8588*/
			$k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; /*8588*/
			$0.raiseerror(); /*8588*/
		} /*8588*/
		$forall($1.barcode, function() {
			/*8594*/
			var _I = $k[--$j]; /*8591*/
			if ((_I < 48) || (_I > 57)) { //no-else/*8593*/
				$k[$j++] = 'bwipp.postnetBadCharacter'; /*8592*/
				$k[$j++] = "USPS POSTNET must contain only digits"; /*8592*/
				$0.raiseerror(); /*8592*/
			} /*8592*/
		}); /*8592*/
		$1.barchars = "0123456789"; /*8597*/
		$1.checksum = 0; /*8599*/
		for (var _L = 0, _K = $1.barlen - 1; _L <= _K; _L += 1) {
			/*8603*/
			$1.i = _L; /*8601*/
			$1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); /*8602*/
		} /*8602*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*8604*/
		if ($1.validatecheck) { //no-else/*8610*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*8608*/
				$k[$j++] = 'bwipp.postnetBadCheckDigit'; /*8607*/
				$k[$j++] = "Incorrect USPS POSTNET check digit provided"; /*8607*/
				$0.raiseerror(); /*8607*/
			} /*8607*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*8609*/
		} /*8609*/
		$1.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); /*8617*/
		$1.bhs = $a(($1.barlen * 5) + 7); /*8619*/
		$1.txt = $a($1.barlen + 1); /*8620*/
		$1.enc = $get($1.encs, 10); /*8623*/
		$1.heights = $a($1.enc.length); /*8624*/
		for (var _m = 0, _l = $1.enc.length - 1; _m <= _l; _m += 1) {
			/*8628*/
			$1.j = _m; /*8626*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8627*/
		} /*8627*/
		$puti($1.bhs, 0, $1.heights); /*8629*/
		for (var _x = 0, _w = $1.barlen - 1; _x <= _w; _x += 1) {
			/*8641*/
			$1.i = _x; /*8632*/
			$1.enc = $get($1.encs, $get($1.barcode, $1.i) - 48); /*8633*/
			$1.heights = $a($1.enc.length); /*8634*/
			for (var _17 = 0, _16 = $1.enc.length - 1; _17 <= _16; _17 += 1) {
				/*8638*/
				$1.j = _17; /*8636*/
				$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8637*/
			} /*8637*/
			$puti($1.bhs, ($1.i * 5) + 1, $1.heights); /*8639*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8640*/
		} /*8640*/
		$1.enc = $get($1.encs, $1.checksum); /*8644*/
		$1.heights = $a($1.enc.length); /*8645*/
		for (var _1Y = 0, _1X = $1.enc.length - 1; _1Y <= _1X; _1Y += 1) {
			/*8649*/
			$1.j = _1Y; /*8647*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8648*/
		} /*8648*/
		$puti($1.bhs, ($1.barlen * 5) + 1, $1.heights); /*8650*/
		if ($1.includecheckintext) {
			/*8655*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), (($1.barlen * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8653*/
		} else {
			/*8655*/
			$put($1.txt, $1.barlen, $a([" ", ((($1.barlen * 5) + 1) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); /*8655*/
		} /*8655*/
		$1.enc = $get($1.encs, 11); /*8659*/
		$1.heights = $a($1.enc.length); /*8660*/
		for (var _26 = 0, _25 = $1.enc.length - 1; _26 <= _25; _26 += 1) {
			/*8664*/
			$1.j = _26; /*8662*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8663*/
		} /*8663*/
		$puti($1.bhs, ($1.barlen * 5) + 6, $1.heights); /*8665*/
		$k[$j++] = Infinity; /*8676*/
		var _2G = $1.bhs; /*8670*/
		$k[$j++] = Infinity; /*8672*/
		for (var _2I = 0, _2J = $1.bhs.length; _2I < _2J; _2I++) {
			/*8671*/
			$k[$j++] = 0; /*8671*/
		} /*8671*/
		var _2K = $a(); /*8672*/
		$k[$j++] = Infinity; /*8673*/
		for (var _2M = 0, _2N = $1.bhs.length - 1; _2M < _2N; _2M++) {
			/*8672*/
			$k[$j++] = 1.44; /*8672*/
			$k[$j++] = 1.872; /*8672*/
		} /*8672*/
		$k[$j++] = 1.44; /*8672*/
		var _2O = $a(); /*8673*/
		$k[$j++] = 'ren'; /*8675*/
		$k[$j++] = $0.renlinear; /*8675*/
		$k[$j++] = 'bhs'; /*8675*/
		$k[$j++] = _2G; /*8675*/
		$k[$j++] = 'bbs'; /*8675*/
		$k[$j++] = _2K; /*8675*/
		$k[$j++] = 'sbs'; /*8675*/
		$k[$j++] = _2O; /*8675*/
		if ($1.includetext) { //no-else/*8675*/
			$k[$j++] = 'txt'; /*8674*/
			$k[$j++] = $1.txt; /*8674*/
		} /*8674*/
		$k[$j++] = 'opt'; /*8676*/
		$k[$j++] = $1.options; /*8676*/
		var _2S = $d(); /*8676*/
		$k[$j++] = _2S; /*8679*/
		if (!$1.dontdraw) { //no-else/*8679*/
			$0.renlinear(); /*8679*/
		} /*8679*/
	};
	$0.planet = function() {
		var $1 = {}; /*8708*/
		$1.options = $k[--$j]; /*8710*/
		$1.barcode = $k[--$j]; /*8711*/
		$1.dontdraw = false; /*8713*/
		$1.includetext = false; /*8714*/
		$1.validatecheck = false; /*8715*/
		$1.includecheckintext = false; /*8716*/
		$1.textfont = 'Courier'; /*8717*/
		$1.textsize = 10; /*8718*/
		$1.textyoffset = -8.5; /*8719*/
		$1.height = 0.125; /*8720*/
		$forall($1.options, function() {
			/*8731*/
			var _3 = $k[--$j]; /*8731*/
			$1[$k[--$j]] = _3; /*8731*/
		}); /*8731*/
		$1.textfont = "" + $1.textfont; /*8733*/
		$1.textsize = +$1.textsize; /*8734*/
		$1.textyoffset = +$1.textyoffset; /*8735*/
		$1.height = +$1.height; /*8736*/
		$k[$j++] = 'barlen'; /*8738*/
		$k[$j++] = $1.barcode.length; /*8738*/
		if ($1.validatecheck) { //no-else/*8738*/
			var _B = $k[--$j]; /*8738*/
			$k[$j++] = _B - 1; /*8738*/
		} /*8738*/
		var _C = $k[--$j]; /*8738*/
		$1[$k[--$j]] = _C; /*8738*/
		if (($1.barlen != 11) && ($1.barlen != 13)) { //no-else/*8743*/
			$k[$j++] = 'bwipp.planetBadLength'; /*8742*/
			$k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; /*8742*/
			$0.raiseerror(); /*8742*/
		} /*8742*/
		$forall($1.barcode, function() {
			/*8748*/
			var _H = $k[--$j]; /*8745*/
			if ((_H < 48) || (_H > 57)) { //no-else/*8747*/
				$k[$j++] = 'bwipp.planetBadCharacter'; /*8746*/
				$k[$j++] = "USPS PLANET must contain only digits"; /*8746*/
				$0.raiseerror(); /*8746*/
			} /*8746*/
		}); /*8746*/
		$1.barchars = "0123456789"; /*8751*/
		$1.checksum = 0; /*8754*/
		for (var _K = 0, _J = $1.barlen - 1; _K <= _J; _K += 1) {
			/*8758*/
			$1.i = _K; /*8756*/
			$1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); /*8757*/
		} /*8757*/
		$1.checksum = (10 - ($1.checksum % 10)) % 10; /*8759*/
		if ($1.validatecheck) { //no-else/*8765*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*8763*/
				$k[$j++] = 'bwipp.planetBadCheckDigit'; /*8762*/
				$k[$j++] = "Incorrect USPS PLANET check digit provided"; /*8762*/
				$0.raiseerror(); /*8762*/
			} /*8762*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*8764*/
		} /*8764*/
		$1.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); /*8772*/
		$1.bhs = $a(($1.barlen * 5) + 7); /*8774*/
		$1.txt = $a($1.barlen + 1); /*8775*/
		$1.enc = $get($1.encs, 10); /*8778*/
		$1.heights = $a($1.enc.length); /*8779*/
		for (var _l = 0, _k = $1.enc.length - 1; _l <= _k; _l += 1) {
			/*8783*/
			$1.j = _l; /*8781*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8782*/
		} /*8782*/
		$puti($1.bhs, 0, $1.heights); /*8784*/
		for (var _w = 0, _v = $1.barlen - 1; _w <= _v; _w += 1) {
			/*8796*/
			$1.i = _w; /*8787*/
			$1.enc = $get($1.encs, $get($1.barcode, $1.i) - 48); /*8788*/
			$1.heights = $a($1.enc.length); /*8789*/
			for (var _16 = 0, _15 = $1.enc.length - 1; _16 <= _15; _16 += 1) {
				/*8793*/
				$1.j = _16; /*8791*/
				$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8792*/
			} /*8792*/
			$puti($1.bhs, ($1.i * 5) + 1, $1.heights); /*8794*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8795*/
		} /*8795*/
		$1.enc = $get($1.encs, $1.checksum); /*8799*/
		$1.heights = $a($1.enc.length); /*8800*/
		for (var _1X = 0, _1W = $1.enc.length - 1; _1X <= _1W; _1X += 1) {
			/*8804*/
			$1.j = _1X; /*8802*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8803*/
		} /*8803*/
		$puti($1.bhs, ($1.barlen * 5) + 1, $1.heights); /*8805*/
		if ($1.includecheckintext) {
			/*8810*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), (($1.barlen * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8808*/
		} else {
			/*8810*/
			$put($1.txt, $1.barlen, $a([" ", ((($1.barlen * 5) + 1) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); /*8810*/
		} /*8810*/
		$1.enc = $get($1.encs, 11); /*8814*/
		$1.heights = $a($1.enc.length); /*8815*/
		for (var _25 = 0, _24 = $1.enc.length - 1; _25 <= _24; _25 += 1) {
			/*8819*/
			$1.j = _25; /*8817*/
			$put($1.heights, $1.j, ((~~$z($geti($1.enc, $1.j, 1))) * $1.height) / 5); /*8818*/
		} /*8818*/
		$puti($1.bhs, ($1.barlen * 5) + 6, $1.heights); /*8820*/
		$k[$j++] = Infinity; /*8831*/
		var _2F = $1.bhs; /*8825*/
		$k[$j++] = Infinity; /*8827*/
		for (var _2H = 0, _2I = $1.bhs.length; _2H < _2I; _2H++) {
			/*8826*/
			$k[$j++] = 0; /*8826*/
		} /*8826*/
		var _2J = $a(); /*8827*/
		$k[$j++] = Infinity; /*8828*/
		for (var _2L = 0, _2M = $1.bhs.length - 1; _2L < _2M; _2L++) {
			/*8827*/
			$k[$j++] = 1.44; /*8827*/
			$k[$j++] = 1.872; /*8827*/
		} /*8827*/
		$k[$j++] = 1.44; /*8827*/
		var _2N = $a(); /*8828*/
		$k[$j++] = 'ren'; /*8830*/
		$k[$j++] = $0.renlinear; /*8830*/
		$k[$j++] = 'bhs'; /*8830*/
		$k[$j++] = _2F; /*8830*/
		$k[$j++] = 'bbs'; /*8830*/
		$k[$j++] = _2J; /*8830*/
		$k[$j++] = 'sbs'; /*8830*/
		$k[$j++] = _2N; /*8830*/
		if ($1.includetext) { //no-else/*8830*/
			$k[$j++] = 'txt'; /*8829*/
			$k[$j++] = $1.txt; /*8829*/
		} /*8829*/
		$k[$j++] = 'opt'; /*8831*/
		$k[$j++] = $1.options; /*8831*/
		var _2R = $d(); /*8831*/
		$k[$j++] = _2R; /*8834*/
		if (!$1.dontdraw) { //no-else/*8834*/
			$0.renlinear(); /*8834*/
		} /*8834*/
	};
	$0.royalmail = function() {
		var $1 = {}; /*8863*/
		$1.options = $k[--$j]; /*8865*/
		$1.barcode = $k[--$j]; /*8866*/
		$1.dontdraw = false; /*8868*/
		$1.includetext = false; /*8869*/
		$1.validatecheck = false; /*8870*/
		$1.includecheckintext = false; /*8871*/
		$1.textfont = 'Courier'; /*8872*/
		$1.textsize = 10; /*8873*/
		$1.textyoffset = -8.5; /*8874*/
		$1.height = 0.175; /*8875*/
		$forall($1.options, function() {
			/*8886*/
			var _3 = $k[--$j]; /*8886*/
			$1[$k[--$j]] = _3; /*8886*/
		}); /*8886*/
		$1.textfont = "" + $1.textfont; /*8888*/
		$1.textsize = +$1.textsize; /*8889*/
		$1.textyoffset = +$1.textyoffset; /*8890*/
		$1.height = +$1.height; /*8891*/
		$1.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; /*8894*/
		$1.charvals = new Map; /*8895*/
		for (var _9 = 0; _9 <= 35; _9 += 1) {
			/*8896*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*8896*/
		} /*8896*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*8903*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*8900*/
			if (!_J) { //no-else/*8902*/
				$k[$j++] = 'bwipp.royalmailBadCharacter'; /*8901*/
				$k[$j++] = "RM4SCC must contain only capital letters and digits"; /*8901*/
				$0.raiseerror(); /*8901*/
			} /*8901*/
		} /*8901*/
		$k[$j++] = 'barlen'; /*8905*/
		$k[$j++] = $1.barcode.length; /*8905*/
		if ($1.validatecheck) { //no-else/*8905*/
			var _M = $k[--$j]; /*8905*/
			$k[$j++] = _M - 1; /*8905*/
		} /*8905*/
		var _N = $k[--$j]; /*8905*/
		$1[$k[--$j]] = _N; /*8905*/
		$1.checksumrow = 0; /*8907*/
		$1.checksumcol = 0; /*8908*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*8914*/
			$1.i = _R; /*8910*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*8911*/
			$1.checksumrow = $1.checksumrow + (~~($1.indx / 6)); /*8912*/
			$1.checksumcol = $1.checksumcol + ($1.indx % 6); /*8913*/
		} /*8913*/
		$1.checksum = (($1.checksumrow % 6) * 6) + ($1.checksumcol % 6); /*8915*/
		if ($1.validatecheck) { //no-else/*8921*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*8919*/
				$k[$j++] = 'bwipp.royalmailBadCheckDigit'; /*8918*/
				$k[$j++] = "Incorrect RM4SCC check digit provided"; /*8918*/
				$0.raiseerror(); /*8918*/
			} /*8918*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*8920*/
		} /*8920*/
		$1.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); /*8932*/
		$1.encstr = $s(($1.barlen * 4) + 6); /*8934*/
		$1.txt = $a($1.barlen + 1); /*8935*/
		$puti($1.encstr, 0, $get($1.encs, 36)); /*8938*/
		for (var _x = 0, _w = $1.barlen - 1; _x <= _w; _x += 1) {
			/*8945*/
			$1.i = _x; /*8941*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*8942*/
			$puti($1.encstr, ($1.i * 4) + 1, $get($1.encs, $1.indx)); /*8943*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8944*/
		} /*8944*/
		$puti($1.encstr, ($1.barlen * 4) + 1, $get($1.encs, $1.checksum)); /*8948*/
		if ($1.includecheckintext) {
			/*8952*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), (($1.barlen * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8950*/
		} else {
			/*8952*/
			$put($1.txt, $1.barlen, $a([" ", (($1.barlen * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*8952*/
		} /*8952*/
		$puti($1.encstr, ($1.barlen * 4) + 5, $get($1.encs, 37)); /*8956*/
		$1.bbs = $a($1.encstr.length); /*8958*/
		$1.bhs = $a($1.encstr.length); /*8959*/
		for (var _1p = 0, _1o = $1.encstr.length - 1; _1p <= _1o; _1p += 1) {
			/*8979*/
			$1.i = _1p; /*8961*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*8962*/
			if ($eq($1.enc, "0")) { //no-else/*8966*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*8964*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*8965*/
			} /*8965*/
			if ($eq($1.enc, "1")) { //no-else/*8970*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*8968*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*8969*/
			} /*8969*/
			if ($eq($1.enc, "2")) { //no-else/*8974*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*8972*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*8973*/
			} /*8973*/
			if ($eq($1.enc, "3")) { //no-else/*8978*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*8976*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*8977*/
			} /*8977*/
		} /*8977*/
		$k[$j++] = Infinity; /*8990*/
		var _2L = $1.bbs; /*8984*/
		var _2M = $1.bhs; /*8985*/
		$k[$j++] = Infinity; /*8987*/
		for (var _2O = 0, _2P = $1.bhs.length - 1; _2O < _2P; _2O++) {
			/*8986*/
			$k[$j++] = 1.44; /*8986*/
			$k[$j++] = 1.872; /*8986*/
		} /*8986*/
		$k[$j++] = 1.44; /*8986*/
		var _2Q = $a(); /*8987*/
		$k[$j++] = 'ren'; /*8989*/
		$k[$j++] = $0.renlinear; /*8989*/
		$k[$j++] = 'bbs'; /*8989*/
		$k[$j++] = _2L; /*8989*/
		$k[$j++] = 'bhs'; /*8989*/
		$k[$j++] = _2M; /*8989*/
		$k[$j++] = 'sbs'; /*8989*/
		$k[$j++] = _2Q; /*8989*/
		if ($1.includetext) { //no-else/*8989*/
			$k[$j++] = 'txt'; /*8988*/
			$k[$j++] = $1.txt; /*8988*/
		} /*8988*/
		$k[$j++] = 'opt'; /*8990*/
		$k[$j++] = $1.options; /*8990*/
		var _2U = $d(); /*8990*/
		$k[$j++] = _2U; /*8993*/
		if (!$1.dontdraw) { //no-else/*8993*/
			$0.renlinear(); /*8993*/
		} /*8993*/
	};
	$0.auspost = function() {
		var $1 = {}; /*9022*/
		$1.options = $k[--$j]; /*9024*/
		$1.barcode = $k[--$j]; /*9025*/
		$1.dontdraw = false; /*9027*/
		$1.includetext = false; /*9028*/
		$1.textfont = 'Courier'; /*9029*/
		$1.textsize = 10; /*9030*/
		$1.textyoffset = -8.5; /*9031*/
		$1.height = 0.175; /*9032*/
		$1.custinfoenc = "character"; /*9033*/
		$forall($1.options, function() {
			/*9044*/
			var _3 = $k[--$j]; /*9044*/
			$1[$k[--$j]] = _3; /*9044*/
		}); /*9044*/
		$1.textfont = "" + $1.textfont; /*9046*/
		$1.textsize = +$1.textsize; /*9047*/
		$1.textyoffset = +$1.textyoffset; /*9048*/
		$1.height = +$1.height; /*9049*/
		$1.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); /*9063*/
		$1.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; /*9066*/
		$1.barlen = $1.barcode.length; /*9068*/
		if ($eq($geti($1.barcode, 0, 2), "11")) { //no-else/*9069*/
			$k[$j++] = 37; /*9069*/
		} /*9069*/
		if ($eq($geti($1.barcode, 0, 2), "45")) { //no-else/*9070*/
			$k[$j++] = 37; /*9070*/
		} /*9070*/
		if ($eq($geti($1.barcode, 0, 2), "59")) { //no-else/*9071*/
			$k[$j++] = 52; /*9071*/
		} /*9071*/
		if ($eq($geti($1.barcode, 0, 2), "62")) { //no-else/*9072*/
			$k[$j++] = 67; /*9072*/
		} /*9072*/
		$1.encstr = $s($k[--$j]); /*9073*/
		$1.txt = $a($1.barlen - 2); /*9074*/
		$puti($1.encstr, 0, $get($1.encs, 74)); /*9077*/
		for (var _Q = 0; _Q <= 1; _Q += 1) {
			/*9084*/
			$1.i = _Q; /*9081*/
			$puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, (~~$z($geti($1.barcode, $1.i, 1))) + 64)); /*9083*/
		} /*9083*/
		for (var _Y = 2; _Y <= 9; _Y += 1) {
			/*9092*/
			$1.i = _Y; /*9088*/
			$puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, (~~$z($geti($1.barcode, $1.i, 1))) + 64)); /*9090*/
			$put($1.txt, $1.i - 2, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 2) * 2) + 6) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9091*/
		} /*9091*/
		if ($eq($1.custinfoenc, "numeric")) {
			/*9114*/
			for (var _t = 0, _s = $1.barlen - 11; _t <= _s; _t += 1) {
				/*9101*/
				$1.i = _t; /*9097*/
				$puti($1.encstr, ($1.i * 2) + 22, $get($1.encs, (~~$z($geti($1.barcode, $1.i + 10, 1))) + 64)); /*9099*/
				$put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 2) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9100*/
			} /*9100*/
			$1.ciflen = ($1.barlen - 10) * 2; /*9102*/
		} else {
			/*9114*/
			for (var _1E = 0, _1D = $1.barlen - 11; _1E <= _1D; _1E += 1) {
				/*9113*/
				$1.i = _1E; /*9105*/
				$search($1.barchars, $geti($1.barcode, $1.i + 10, 1)); /*9106*/
				$j--; /*9107*/
				$1.indx = $k[--$j].length; /*9108*/
				$j -= 2; /*9109*/
				$1.enc = $get($1.encs, $1.indx); /*9110*/
				$puti($1.encstr, ($1.i * 3) + 22, $1.enc); /*9111*/
				$put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 3) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9112*/
			} /*9112*/
			$1.ciflen = ($1.barlen - 10) * 3; /*9114*/
		} /*9114*/
		for (var _1e = 22 + $1.ciflen, _1d = $1.encstr.length - 14; _1e <= _1d; _1e += 1) {
			/*9120*/
			$puti($1.encstr, _1e, $get($1.encs, 75)); /*9119*/
		} /*9119*/
		$1.rstable = $a(64 * 64); /*9123*/
		$k[$j++] = $1.rstable; /*9124*/
		$k[$j++] = 0; /*9124*/
		$k[$j++] = Infinity; /*9124*/
		for (var _1k = 0, _1l = 64; _1k < _1l; _1k++) {
			/*9124*/
			$k[$j++] = 0; /*9124*/
		} /*9124*/
		var _1m = $a(); /*9124*/
		var _1n = $k[--$j]; /*9124*/
		$puti($k[--$j], _1n, _1m); /*9124*/
		$k[$j++] = $1.rstable; /*9125*/
		$k[$j++] = 64; /*9125*/
		$k[$j++] = Infinity; /*9125*/
		for (var _1q = 0; _1q <= 63; _1q += 1) {
			/*9125*/
			$k[$j++] = _1q; /*9125*/
		} /*9125*/
		var _1r = $a(); /*9125*/
		var _1s = $k[--$j]; /*9125*/
		$puti($k[--$j], _1s, _1r); /*9125*/
		$1.prev = 1; /*9126*/
		for (var _1u = 0, _1v = 64; _1u < _1v; _1u++) {
			/*9141*/
			$1.next = $1.prev << 1; /*9128*/
			if (($1.next & 64) != 0) { //no-else/*9131*/
				$1.next = $1.next ^ 67; /*9130*/
			} /*9130*/
			for (var _1z = 0; _1z <= 63; _1z += 1) {
				/*9139*/
				$1.j = _1z; /*9133*/
				$1.nextcell = function() {
					$k[$j++] = $1.rstable; /*9134*/
					$k[$j++] = (64 * $1.next) + $1.j; /*9134*/
				}; /*9134*/
				$1.nextcell(); /*9135*/
				var _27 = $k[--$j]; /*9135*/
				$put($k[--$j], _27, $get($1.rstable, (64 * $1.prev) + $1.j) << 1); /*9135*/
				$1.nextcell(); /*9136*/
				var _29 = $k[--$j]; /*9136*/
				if (($get($k[--$j], _29) & 64) != 0) { //no-else/*9138*/
					$1.nextcell(); /*9137*/
					$1.nextcell(); /*9137*/
					var _2C = $k[--$j]; /*9137*/
					var _2E = $get($k[--$j], _2C); /*9137*/
					var _2F = $k[--$j]; /*9137*/
					$put($k[--$j], _2F, _2E ^ 67); /*9137*/
				} /*9137*/
			} /*9137*/
			$1.prev = $1.next; /*9140*/
		} /*9140*/
		$1.rscodes = $a((~~(($1.encstr.length - 16) / 3)) + 4); /*9144*/
		$k[$j++] = $1.rscodes; /*9145*/
		$k[$j++] = 0; /*9145*/
		$k[$j++] = Infinity; /*9145*/
		for (var _2L = 0, _2M = 4; _2L < _2M; _2L++) {
			/*9145*/
			$k[$j++] = 0; /*9145*/
		} /*9145*/
		var _2N = $a(); /*9145*/
		var _2O = $k[--$j]; /*9145*/
		$puti($k[--$j], _2O, _2N); /*9145*/
		for (var _2S = 2, _2R = $1.encstr.length - 16; _2S <= _2R; _2S += 3) {
			/*9153*/
			$1.i = _2S; /*9147*/
			$put($1.rscodes, ($1.rscodes.length - (~~(($1.i - 2) / 3))) - 1, (((~~$z($geti($1.encstr, $1.i, 1))) * 16) + ((~~$z($geti($1.encstr, $1.i + 1, 1))) * 4)) + (~~$z($geti($1.encstr, $1.i + 2, 1)))); /*9152*/
		} /*9152*/
		for (var _2g = $1.rscodes.length - 5; _2g >= 0; _2g -= 1) {
			/*9162*/
			$1.i = _2g; /*9155*/
			for (var _2h = 0; _2h <= 4; _2h += 1) {
				/*9161*/
				$1.j = _2h; /*9157*/
				$put($1.rscodes, $1.i + $1.j, $xo($get($1.rscodes, $1.i + $1.j), $get($1.rstable, (64 * $get($a([48, 17, 29, 30, 1]), $1.j)) + $get($1.rscodes, $1.i + 4)))); /*9160*/
			} /*9160*/
		} /*9160*/
		$1.checkcode = $strcpy($s(12), "000000000000"); /*9163*/
		for (var _2z = 0; _2z <= 3; _2z += 1) {
			/*9168*/
			$1.i = _2z; /*9165*/
			$1.enc = $cvrs($s(3), $get($1.rscodes, 3 - $1.i), 4); /*9166*/
			$puti($1.checkcode, ($1.i * 3) + (3 - $1.enc.length), $1.enc); /*9167*/
		} /*9167*/
		$puti($1.encstr, $1.encstr.length - 14, $1.checkcode); /*9171*/
		$puti($1.encstr, $1.encstr.length - 2, $get($1.encs, 74)); /*9172*/
		$1.bbs = $a($1.encstr.length); /*9174*/
		$1.bhs = $a($1.encstr.length); /*9175*/
		for (var _3M = 0, _3L = $1.encstr.length - 1; _3M <= _3L; _3M += 1) {
			/*9195*/
			$1.i = _3M; /*9177*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*9178*/
			if ($eq($1.enc, "0")) { //no-else/*9182*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9180*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*9181*/
			} /*9181*/
			if ($eq($1.enc, "1")) { //no-else/*9186*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9184*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9185*/
			} /*9185*/
			if ($eq($1.enc, "2")) { //no-else/*9190*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9188*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9189*/
			} /*9189*/
			if ($eq($1.enc, "3")) { //no-else/*9194*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9192*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*9193*/
			} /*9193*/
		} /*9193*/
		$k[$j++] = Infinity; /*9206*/
		var _3s = $1.bbs; /*9200*/
		var _3t = $1.bhs; /*9201*/
		$k[$j++] = Infinity; /*9203*/
		for (var _3v = 0, _3w = $1.bhs.length - 1; _3v < _3w; _3v++) {
			/*9202*/
			$k[$j++] = 1.44; /*9202*/
			$k[$j++] = 1.872; /*9202*/
		} /*9202*/
		$k[$j++] = 1.44; /*9202*/
		var _3x = $a(); /*9203*/
		$k[$j++] = 'ren'; /*9205*/
		$k[$j++] = $0.renlinear; /*9205*/
		$k[$j++] = 'bbs'; /*9205*/
		$k[$j++] = _3s; /*9205*/
		$k[$j++] = 'bhs'; /*9205*/
		$k[$j++] = _3t; /*9205*/
		$k[$j++] = 'sbs'; /*9205*/
		$k[$j++] = _3x; /*9205*/
		if ($1.includetext) { //no-else/*9205*/
			$k[$j++] = 'txt'; /*9204*/
			$k[$j++] = $1.txt; /*9204*/
		} /*9204*/
		$k[$j++] = 'opt'; /*9206*/
		$k[$j++] = $1.options; /*9206*/
		var _41 = $d(); /*9206*/
		$k[$j++] = _41; /*9209*/
		if (!$1.dontdraw) { //no-else/*9209*/
			$0.renlinear(); /*9209*/
		} /*9209*/
	};
	$0.kix = function() {
		var $1 = {}; /*9238*/
		$1.options = $k[--$j]; /*9240*/
		$1.barcode = $k[--$j]; /*9241*/
		$1.dontdraw = false; /*9243*/
		$1.includetext = false; /*9244*/
		$1.textfont = 'Courier'; /*9245*/
		$1.textsize = 10; /*9246*/
		$1.textyoffset = -8.5; /*9247*/
		$1.height = 0.175; /*9248*/
		$forall($1.options, function() {
			/*9259*/
			var _3 = $k[--$j]; /*9259*/
			$1[$k[--$j]] = _3; /*9259*/
		}); /*9259*/
		$1.textfont = "" + $1.textfont; /*9261*/
		$1.textsize = +$1.textsize; /*9262*/
		$1.textyoffset = +$1.textyoffset; /*9263*/
		$1.height = +$1.height; /*9264*/
		$1.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); /*9274*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; /*9277*/
		$1.charvals = new Map; /*9278*/
		for (var _A = 0; _A <= 35; _A += 1) {
			/*9279*/
			$put($1.charvals, $geti($1.barchars, _A, 1), _A); /*9279*/
		} /*9279*/
		for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) {
			/*9286*/
			var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; /*9283*/
			if (!_K) { //no-else/*9285*/
				$k[$j++] = 'bwipp.kixBadCharacter'; /*9284*/
				$k[$j++] = "KIX must contain only capital letters and digits"; /*9284*/
				$0.raiseerror(); /*9284*/
			} /*9284*/
		} /*9284*/
		$1.barlen = $1.barcode.length; /*9288*/
		$1.encstr = $s($1.barlen * 4); /*9289*/
		$1.txt = $a($1.barlen); /*9290*/
		for (var _S = 0, _R = $1.barlen - 1; _S <= _R; _S += 1) {
			/*9297*/
			$1.i = _S; /*9293*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*9294*/
			$puti($1.encstr, $1.i * 4, $get($1.encs, $1.indx)); /*9295*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 4) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9296*/
		} /*9296*/
		$1.bbs = $a($1.encstr.length); /*9299*/
		$1.bhs = $a($1.encstr.length); /*9300*/
		for (var _t = 0, _s = $1.encstr.length - 1; _t <= _s; _t += 1) {
			/*9320*/
			$1.i = _t; /*9302*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*9303*/
			if ($eq($1.enc, "0")) { //no-else/*9307*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9305*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*9306*/
			} /*9306*/
			if ($eq($1.enc, "1")) { //no-else/*9311*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9309*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9310*/
			} /*9310*/
			if ($eq($1.enc, "2")) { //no-else/*9315*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*9313*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*9314*/
			} /*9314*/
			if ($eq($1.enc, "3")) { //no-else/*9319*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*9317*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*9318*/
			} /*9318*/
		} /*9318*/
		$k[$j++] = Infinity; /*9331*/
		var _1P = $1.bbs; /*9325*/
		var _1Q = $1.bhs; /*9326*/
		$k[$j++] = Infinity; /*9328*/
		for (var _1S = 0, _1T = $1.bhs.length - 1; _1S < _1T; _1S++) {
			/*9327*/
			$k[$j++] = 1.44; /*9327*/
			$k[$j++] = 1.872; /*9327*/
		} /*9327*/
		$k[$j++] = 1.44; /*9327*/
		var _1U = $a(); /*9328*/
		$k[$j++] = 'ren'; /*9330*/
		$k[$j++] = $0.renlinear; /*9330*/
		$k[$j++] = 'bbs'; /*9330*/
		$k[$j++] = _1P; /*9330*/
		$k[$j++] = 'bhs'; /*9330*/
		$k[$j++] = _1Q; /*9330*/
		$k[$j++] = 'sbs'; /*9330*/
		$k[$j++] = _1U; /*9330*/
		if ($1.includetext) { //no-else/*9330*/
			$k[$j++] = 'txt'; /*9329*/
			$k[$j++] = $1.txt; /*9329*/
		} /*9329*/
		$k[$j++] = 'opt'; /*9331*/
		$k[$j++] = $1.options; /*9331*/
		var _1Y = $d(); /*9331*/
		$k[$j++] = _1Y; /*9334*/
		if (!$1.dontdraw) { //no-else/*9334*/
			$0.renlinear(); /*9334*/
		} /*9334*/
	};
	$0.japanpost = function() {
		var $1 = {}; /*9363*/
		$1.options = $k[--$j]; /*9365*/
		$1.barcode = $k[--$j]; /*9366*/
		$1.dontdraw = false; /*9368*/
		$1.includetext = false; /*9369*/
		$1.includecheckintext = false; /*9370*/
		$1.textfont = 'Courier'; /*9371*/
		$1.textsize = 10; /*9372*/
		$1.textyoffset = -8.5; /*9373*/
		$1.height = 0.175; /*9374*/
		$forall($1.options, function() {
			/*9385*/
			var _3 = $k[--$j]; /*9385*/
			$1[$k[--$j]] = _3; /*9385*/
		}); /*9385*/
		$1.textfont = "" + $1.textfont; /*9387*/
		$1.textsize = +$1.textsize; /*9388*/
		$1.textyoffset = +$1.textyoffset; /*9389*/
		$1.height = +$1.height; /*9390*/
		$1.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); /*9398*/
		$1.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; /*9401*/
		$1.barlen = $1.barcode.length; /*9402*/
		$1.encstr = $s(((20 + 1) * 3) + 4); /*9404*/
		$1.digits = $a(20); /*9405*/
		$1.txt = $a($1.barlen + 1); /*9406*/
		$puti($1.encstr, 0, $get($1.encs, 19)); /*9409*/
		$1.checksum = 0; /*9411*/
		$1.j = 0; /*9412*/
		$1.i = 0; /*9412*/
		for (var _K = 0, _J = $1.barlen - 1; _K <= _J; _K += 1) {
			/*9446*/
			$1.i = _K; /*9414*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*9415*/
			$j--; /*9416*/
			$1.indx = $k[--$j].length; /*9417*/
			$j -= 2; /*9418*/
			if (($1.indx >= 11) && ($1.indx < 37)) { //no-else/*9429*/
				if ($1.j > 18) { //no-else/*9420*/
					break; /*9420*/
				} /*9420*/
				$1.digit = (~~(($1.indx - 1) / 10)) + 10; /*9424*/
				$puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); /*9425*/
				$1.checksum = $1.checksum + $1.digit; /*9426*/
				$put($1.digits, $1.j, $1.digit); /*9427*/
				$1.j = $1.j + 1; /*9428*/
			} /*9428*/
			if ($1.j > 19) { //no-else/*9430*/
				break; /*9430*/
			} /*9430*/
			$1.digit = 0; /*9431*/
			if ($1.indx == 37) { //no-else/*9434*/
				$1.digit = 14; /*9433*/
			} /*9433*/
			if (($1.indx >= 11) && ($1.indx < 37)) { //no-else/*9437*/
				$1.digit = ($1.indx - 1) % 10; /*9436*/
			} /*9436*/
			if ($1.indx < 11) { //no-else/*9440*/
				$1.digit = $1.indx; /*9439*/
			} /*9439*/
			$puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); /*9441*/
			$1.checksum = $1.checksum + $1.digit; /*9442*/
			$put($1.digits, $1.j, $1.digit); /*9443*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.j * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9444*/
			$1.j = $1.j + 1; /*9445*/
		} /*9445*/
		for (var _19 = $1.j, _18 = 20 - 1; _19 <= _18; _19 += 1) {
			/*9454*/
			$1.k = _19; /*9450*/
			$puti($1.encstr, ($1.k * 3) + 2, $get($1.encs, 14)); /*9451*/
			$1.checksum = $1.checksum + 14; /*9452*/
			$put($1.digits, $1.k, 14); /*9453*/
		} /*9453*/
		$1.checksum = 19 - ($1.checksum % 19); /*9457*/
		$puti($1.encstr, 2 + (20 * 3), $get($1.encs, $1.checksum)); /*9458*/
		$puti($1.encstr, 2 + (21 * 3), $get($1.encs, 20)); /*9461*/
		$1.checkdigit = " "; /*9462*/
		if ($1.includecheckintext) { //no-else/*9465*/
			$1.checkdigit = $geti($1.barchars, $1.checksum, 1); /*9464*/
		} /*9464*/
		$put($1.txt, $1.i + 1, $a([$1.checkdigit, ((20 * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); /*9466*/
		$puti($1.encstr, ((20 + 1) * 3) + 2, $get($1.encs, 20)); /*9469*/
		$1.bbs = $a((21 * 3) + 4); /*9471*/
		$1.bhs = $a($1.bbs.length); /*9472*/
		for (var _1i = 0, _1h = $1.bbs.length - 1; _1i <= _1h; _1i += 1) {
			/*9496*/
			$1.i = _1i; /*9474*/
			$1.enc = $geti($1.encstr, $1.i, 1); /*9475*/
			$1.bunit = 0; /*9476*/
			$1.hunit = 0; /*9477*/
			if ($eq($1.enc, "0")) { //no-else/*9481*/
				$1.bunit = 3; /*9479*/
				$1.hunit = 2; /*9480*/
			} /*9480*/
			if ($eq($1.enc, "1")) { //no-else/*9485*/
				$1.bunit = 0; /*9483*/
				$1.hunit = 5; /*9484*/
			} /*9484*/
			if ($eq($1.enc, "2")) { //no-else/*9489*/
				$1.bunit = 3; /*9487*/
				$1.hunit = 5; /*9488*/
			} /*9488*/
			if ($eq($1.enc, "3")) { //no-else/*9493*/
				$1.bunit = 0; /*9491*/
				$1.hunit = 8; /*9492*/
			} /*9492*/
			$put($1.bbs, $1.i, ($1.bunit * $1.height) / 8); /*9494*/
			$put($1.bhs, $1.i, ($1.hunit * $1.height) / 8); /*9495*/
		} /*9495*/
		$k[$j++] = Infinity; /*9507*/
		var _1y = $1.bbs; /*9501*/
		var _1z = $1.bhs; /*9502*/
		$k[$j++] = Infinity; /*9504*/
		for (var _21 = 0, _22 = $1.bhs.length - 1; _21 < _22; _21++) {
			/*9503*/
			$k[$j++] = 1.44; /*9503*/
			$k[$j++] = 1.872; /*9503*/
		} /*9503*/
		$k[$j++] = 1.44; /*9503*/
		var _23 = $a(); /*9504*/
		$k[$j++] = 'ren'; /*9506*/
		$k[$j++] = $0.renlinear; /*9506*/
		$k[$j++] = 'bbs'; /*9506*/
		$k[$j++] = _1y; /*9506*/
		$k[$j++] = 'bhs'; /*9506*/
		$k[$j++] = _1z; /*9506*/
		$k[$j++] = 'sbs'; /*9506*/
		$k[$j++] = _23; /*9506*/
		if ($1.includetext) { //no-else/*9506*/
			$k[$j++] = 'txt'; /*9505*/
			$k[$j++] = $1.txt; /*9505*/
		} /*9505*/
		$k[$j++] = 'opt'; /*9507*/
		$k[$j++] = $1.options; /*9507*/
		var _27 = $d(); /*9507*/
		$k[$j++] = _27; /*9510*/
		if (!$1.dontdraw) { //no-else/*9510*/
			$0.renlinear(); /*9510*/
		} /*9510*/
	};
	$0.msi = function() {
		var $1 = {}; /*9539*/
		$1.options = $k[--$j]; /*9541*/
		$1.barcode = $k[--$j]; /*9542*/
		$1.dontdraw = false; /*9544*/
		$1.includecheck = false; /*9545*/
		$1.includetext = false; /*9546*/
		$1.includecheckintext = false; /*9547*/
		$1.checktype = "mod10"; /*9548*/
		$1.badmod11 = false; /*9549*/
		$1.textfont = 'Courier'; /*9550*/
		$1.textsize = 10; /*9551*/
		$1.textyoffset = -8.5; /*9552*/
		$1.height = 1; /*9553*/
		$forall($1.options, function() {
			/*9564*/
			var _3 = $k[--$j]; /*9564*/
			$1[$k[--$j]] = _3; /*9564*/
		}); /*9564*/
		$1.textfont = "" + $1.textfont; /*9566*/
		$1.textsize = +$1.textsize; /*9567*/
		$1.textyoffset = +$1.textyoffset; /*9568*/
		$1.height = +$1.height; /*9569*/
		$1.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); /*9576*/
		$1.barchars = "0123456789"; /*9579*/
		$1.barlen = $1.barcode.length; /*9581*/
		$1.txtlen = $1.barlen; /*9582*/
		$1.mod10 = function() {
			$1.code = $k[--$j]; /*9585*/
			$k[$j++] = 0; /*9586*/
			$k[$j++] = 0; /*9586*/
			$forall($1.code, function() {
				/*9586*/
				var _E = $k[--$j]; /*9586*/
				var _F = $k[--$j]; /*9586*/
				var _G = $k[--$j]; /*9586*/
				$k[$j++] = (_E - 48) + (_F * 10); /*9586*/
				$k[$j++] = _G; /*9586*/
			}); /*9586*/
			$j--; /*9586*/
			var _H = $k[--$j]; /*9586*/
			$k[$j++] = _H * 2; /*9587*/
			$k[$j++] = 0; /*9587*/
			for (;;) {
				/*9587*/
				var _I = $k[--$j]; /*9587*/
				var _J = $k[--$j]; /*9587*/
				var _K = ~~(_J / 10); /*9587*/
				$k[$j++] = _I + (_J % 10); /*9587*/
				$k[$j++] = _K; /*9587*/
				if (_K == 0) { //no-else/*9587*/
					$j--; /*9587*/
					break; /*9587*/
				} /*9587*/
				var _L = $k[--$j]; /*9587*/
				var _M = $k[--$j]; /*9587*/
				$k[$j++] = _L; /*9587*/
				$k[$j++] = _M; /*9587*/
			} /*9587*/
			$k[$j++] = 0; /*9588*/
			$k[$j++] = 0; /*9588*/
			$forall($1.code, function() {
				/*9588*/
				var _O = $k[--$j]; /*9588*/
				var _P = $k[--$j]; /*9588*/
				var _Q = $k[--$j]; /*9588*/
				$k[$j++] = _P + (_O - 48); /*9588*/
				$k[$j++] = _Q; /*9588*/
			}); /*9588*/
			var _R = $k[--$j]; /*9588*/
			var _S = $k[--$j]; /*9588*/
			var _V = $s($1.code.length + 1); /*9590*/
			$puti(_V, 0, $1.code); /*9590*/
			$put(_V, $1.code.length, ((10 - (($k[--$j] + _R) % 10)) % 10) + 48); /*9590*/
			$k[$j++] = _V; /*9590*/
		}; /*9591*/
		$1.mod11 = function() {
			$1.code = $k[--$j]; /*9594*/
			$k[$j++] = $1.code.length - 1; /*9595*/
			$forall($1.code, function() {
				/*9595*/
				var _b = $k[--$j]; /*9595*/
				var _c = $k[--$j]; /*9595*/
				$k[$j++] = _b - 48; /*9595*/
				$k[$j++] = (_c % 6) + 2; /*9595*/
				$k[$j++] = _c - 1; /*9595*/
			}); /*9595*/
			$j--; /*9595*/
			$k[$j++] = 0; /*9596*/
			for (var _e = 0, _f = $1.code.length; _e < _f; _e++) {
				/*9596*/
				var _g = $k[--$j]; /*9596*/
				var _h = $k[--$j]; /*9596*/
				var _i = $k[--$j]; /*9596*/
				$k[$j++] = _g + (_i * _h); /*9596*/
			} /*9596*/
			var _k = (11 - ($k[--$j] % 11)) % 11; /*9598*/
			$k[$j++] = _k; /*9602*/
			if ((_k == 10) && $1.badmod11) {
				/*9601*/
				$j--; /*9599*/
				var _n = $s($1.code.length + 2); /*9599*/
				$puti(_n, 0, $1.code); /*9599*/
				$puti(_n, $1.code.length, "10"); /*9599*/
				$k[$j++] = _n; /*9599*/
			} else {
				/*9601*/
				var _r = $s($1.code.length + 1); /*9601*/
				$puti(_r, 0, $1.code); /*9601*/
				$put(_r, $1.code.length, $k[--$j] + 48); /*9601*/
				$k[$j++] = _r; /*9601*/
			} /*9601*/
		}; /*9603*/
		$1.ncrmod11 = function() {
			$1.code = $k[--$j]; /*9606*/
			$k[$j++] = $1.code.length - 1; /*9607*/
			$forall($1.code, function() {
				/*9607*/
				var _y = $k[--$j]; /*9607*/
				var _z = $k[--$j]; /*9607*/
				$k[$j++] = _y - 48; /*9607*/
				$k[$j++] = (_z % 8) + 2; /*9607*/
				$k[$j++] = _z - 1; /*9607*/
			}); /*9607*/
			$j--; /*9607*/
			$k[$j++] = 0; /*9608*/
			for (var _11 = 0, _12 = $1.code.length; _11 < _12; _11++) {
				/*9608*/
				var _13 = $k[--$j]; /*9608*/
				var _14 = $k[--$j]; /*9608*/
				var _15 = $k[--$j]; /*9608*/
				$k[$j++] = _13 + (_15 * _14); /*9608*/
			} /*9608*/
			var _17 = (11 - ($k[--$j] % 11)) % 11; /*9610*/
			$k[$j++] = _17; /*9614*/
			if ((_17 == 10) && $1.badmod11) {
				/*9613*/
				$j--; /*9611*/
				var _1A = $s($1.code.length + 2); /*9611*/
				$puti(_1A, 0, $1.code); /*9611*/
				$puti(_1A, $1.code.length, "10"); /*9611*/
				$k[$j++] = _1A; /*9611*/
			} else {
				/*9613*/
				var _1E = $s($1.code.length + 1); /*9613*/
				$puti(_1E, 0, $1.code); /*9613*/
				$put(_1E, $1.code.length, $k[--$j] + 48); /*9613*/
				$k[$j++] = _1E; /*9613*/
			} /*9613*/
		}; /*9615*/
		if ($1.includecheck) { //no-else/*9628*/
			if ($eq($1.checktype, "mod10")) { //no-else/*9619*/
				$k[$j++] = $1.barcode; /*9619*/
				$1.mod10(); /*9619*/
			} /*9619*/
			if ($eq($1.checktype, "mod1010")) { //no-else/*9620*/
				$k[$j++] = $1.barcode; /*9620*/
				$1.mod10(); /*9620*/
				$1.mod10(); /*9620*/
			} /*9620*/
			if ($eq($1.checktype, "mod11")) { //no-else/*9621*/
				$k[$j++] = $1.barcode; /*9621*/
				$1.mod11(); /*9621*/
			} /*9621*/
			if ($eq($1.checktype, "ncrmod11")) { //no-else/*9622*/
				$k[$j++] = $1.barcode; /*9622*/
				$1.ncrmod11(); /*9622*/
			} /*9622*/
			if ($eq($1.checktype, "mod1110")) { //no-else/*9623*/
				$k[$j++] = $1.barcode; /*9623*/
				$1.mod11(); /*9623*/
				$1.mod10(); /*9623*/
			} /*9623*/
			if ($eq($1.checktype, "ncrmod1110")) { //no-else/*9624*/
				$k[$j++] = $1.barcode; /*9624*/
				$1.ncrmod11(); /*9624*/
				$1.mod10(); /*9624*/
			} /*9624*/
			$1.barcode = $k[--$j]; /*9625*/
			$1.barlen = $1.barcode.length; /*9626*/
			if ($1.includecheckintext) { //no-else/*9627*/
				$1.txtlen = $1.barlen; /*9627*/
			} /*9627*/
		} /*9627*/
		$1.sbs = $s(($1.barlen * 8) + 5); /*9630*/
		$1.txt = $a($1.barlen); /*9631*/
		$puti($1.sbs, 0, $get($1.encs, 10)); /*9634*/
		for (var _1i = 0, _1h = $1.barlen - 1; _1i <= _1h; _1i += 1) {
			/*9646*/
			$1.i = _1i; /*9637*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*9639*/
			$j--; /*9640*/
			$1.indx = $k[--$j].length; /*9641*/
			$j -= 2; /*9642*/
			$1.enc = $get($1.encs, $1.indx); /*9643*/
			$puti($1.sbs, ($1.i * 8) + 2, $1.enc); /*9644*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + 3, $1.textyoffset, $1.textfont, $1.textsize])); /*9645*/
		} /*9645*/
		$puti($1.sbs, ($1.barlen * 8) + 2, $get($1.encs, 11)); /*9649*/
		$k[$j++] = Infinity; /*9660*/
		$k[$j++] = Infinity; /*9655*/
		var _28 = $1.sbs; /*9654*/
		for (var _29 = 0, _2A = _28.length; _29 < _2A; _29++) {
			/*9654*/
			$k[$j++] = $get(_28, _29) - 48; /*9654*/
		} /*9654*/
		var _2C = $a(); /*9655*/
		$k[$j++] = Infinity; /*9656*/
		for (var _2E = 0, _2F = ~~(($1.sbs.length + 1) / 2); _2E < _2F; _2E++) {
			/*9655*/
			$k[$j++] = $1.height; /*9655*/
		} /*9655*/
		var _2H = $a(); /*9656*/
		$k[$j++] = Infinity; /*9657*/
		for (var _2J = 0, _2K = ~~(($1.sbs.length + 1) / 2); _2J < _2K; _2J++) {
			/*9656*/
			$k[$j++] = 0; /*9656*/
		} /*9656*/
		var _2L = $a(); /*9657*/
		$k[$j++] = 'ren'; /*9659*/
		$k[$j++] = $0.renlinear; /*9659*/
		$k[$j++] = 'sbs'; /*9659*/
		$k[$j++] = _2C; /*9659*/
		$k[$j++] = 'bhs'; /*9659*/
		$k[$j++] = _2H; /*9659*/
		$k[$j++] = 'bbs'; /*9659*/
		$k[$j++] = _2L; /*9659*/
		if ($1.includetext) { //no-else/*9659*/
			$k[$j++] = 'txt'; /*9658*/
			$k[$j++] = $geti($1.txt, 0, $1.txtlen); /*9658*/
		} /*9658*/
		$k[$j++] = 'opt'; /*9660*/
		$k[$j++] = $1.options; /*9660*/
		var _2R = $d(); /*9660*/
		$k[$j++] = _2R; /*9663*/
		if (!$1.dontdraw) { //no-else/*9663*/
			$0.renlinear(); /*9663*/
		} /*9663*/
	};
	$0.plessey = function() {
		var $1 = {}; /*9692*/
		$1.options = $k[--$j]; /*9694*/
		$1.barcode = $k[--$j]; /*9695*/
		$1.dontdraw = false; /*9697*/
		$1.includetext = false; /*9698*/
		$1.validatecheck = false; /*9699*/
		$1.includecheckintext = false; /*9700*/
		$1.unidirectional = false; /*9701*/
		$1.textfont = 'Courier'; /*9702*/
		$1.textsize = 10; /*9703*/
		$1.textyoffset = -8.5; /*9704*/
		$1.height = 1; /*9705*/
		$forall($1.options, function() {
			/*9716*/
			var _3 = $k[--$j]; /*9716*/
			$1[$k[--$j]] = _3; /*9716*/
		}); /*9716*/
		$1.textfont = "" + $1.textfont; /*9718*/
		$1.textsize = +$1.textsize; /*9719*/
		$1.textyoffset = +$1.textyoffset; /*9720*/
		$1.height = +$1.height; /*9721*/
		$1.barchars = "0123456789ABCDEF"; /*9724*/
		$1.charvals = new Map; /*9725*/
		for (var _9 = 0; _9 <= 15; _9 += 1) {
			/*9726*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*9726*/
		} /*9726*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*9733*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*9730*/
			if (!_J) { //no-else/*9732*/
				$k[$j++] = 'bwipp.plesseyBadCharacter'; /*9731*/
				$k[$j++] = "Plessey must contain only digits and letters A B C D E F"; /*9731*/
				$0.raiseerror(); /*9731*/
			} /*9731*/
		} /*9731*/
		$k[$j++] = 'barlen'; /*9735*/
		$k[$j++] = $1.barcode.length; /*9735*/
		if ($1.validatecheck) { //no-else/*9735*/
			var _M = $k[--$j]; /*9735*/
			$k[$j++] = _M - 2; /*9735*/
		} /*9735*/
		var _N = $k[--$j]; /*9735*/
		$1[$k[--$j]] = _N; /*9735*/
		$1.checkbits = $a(($1.barlen * 4) + 8); /*9738*/
		$puti($1.checkbits, $1.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); /*9739*/
		for (var _W = 0, _V = $1.barlen - 1; _W <= _V; _W += 1) {
			/*9749*/
			$1.i = _W; /*9741*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*9742*/
			$puti($1.checkbits, $1.i * 4, $a([$1.indx & 1, ($1.indx >>> 1) & 1, ($1.indx >>> 2) & 1, $1.indx >>> 3])); /*9748*/
		} /*9748*/
		$1.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); /*9750*/
		for (var _m = 0, _l = ($1.barlen * 4) - 1; _m <= _l; _m += 1) {
			/*9759*/
			$1.i = _m; /*9752*/
			if ($get($1.checkbits, $1.i) == 1) { //no-else/*9758*/
				for (var _q = 0; _q <= 8; _q += 1) {
					/*9757*/
					$1.j = _q; /*9755*/
					$put($1.checkbits, $1.i + $1.j, $xo($get($1.checkbits, $1.i + $1.j), $get($1.checksalt, $1.j))); /*9756*/
				} /*9756*/
			} /*9756*/
		} /*9756*/
		$1.checkval = 0; /*9760*/
		for (var _11 = 0; _11 <= 7; _11 += 1) {
			/*9764*/
			$1.i = _11; /*9762*/
			$1.checkval = $1.checkval + ((~~Math.pow(2, $1.i)) * $get($1.checkbits, ($1.barlen * 4) + $1.i)); /*9763*/
		} /*9763*/
		$1.checksum1 = $1.checkval & 15; /*9765*/
		$1.checksum2 = $1.checkval >>> 4; /*9766*/
		if ($1.validatecheck) { //no-else/*9773*/
			if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $1.barlen + 1) != $get($1.barchars, $1.checksum2))) { //no-else/*9771*/
				$k[$j++] = 'bwipp.plesseyBadCheckDigits'; /*9770*/
				$k[$j++] = "Incorrect Plessey check digits provided"; /*9770*/
				$0.raiseerror(); /*9770*/
			} /*9770*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*9772*/
		} /*9772*/
		$1.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); /*9782*/
		var _1T = $1.unidirectional ? 27 : 33; /*9784*/
		$1.sbs = $s(($1.barlen * 8) + _1T); /*9784*/
		$1.txt = $a($1.barlen + 2); /*9785*/
		$puti($1.sbs, 0, $get($1.encs, 16)); /*9788*/
		for (var _1c = 0, _1b = $1.barlen - 1; _1c <= _1b; _1c += 1) {
			/*9795*/
			$1.i = _1c; /*9791*/
			$1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); /*9792*/
			$puti($1.sbs, ($1.i * 8) + 8, $get($1.encs, $1.indx)); /*9793*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9794*/
		} /*9794*/
		$puti($1.sbs, ($1.barlen * 8) + 8, $get($1.encs, $1.checksum1)); /*9798*/
		$puti($1.sbs, ($1.barlen * 8) + 16, $get($1.encs, $1.checksum2)); /*9799*/
		if ($1.includecheckintext) {
			/*9805*/
			$put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), ($1.barlen * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9801*/
			$put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum2, 1), (($1.barlen + 1) * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9802*/
		} else {
			/*9805*/
			$put($1.txt, $1.barlen, $a([" ", ($1.barlen * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9804*/
			$put($1.txt, $1.barlen + 1, $a([" ", (($1.barlen + 1) * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); /*9805*/
		} /*9805*/
		var _2k = $1.unidirectional ? 18 : 17; /*9809*/
		$puti($1.sbs, ($1.barlen * 8) + 24, $get($1.encs, _2k)); /*9809*/
		$k[$j++] = Infinity; /*9820*/
		$k[$j++] = Infinity; /*9815*/
		var _2m = $1.sbs; /*9814*/
		for (var _2n = 0, _2o = _2m.length; _2n < _2o; _2n++) {
			/*9814*/
			$k[$j++] = $get(_2m, _2n) - 48; /*9814*/
		} /*9814*/
		var _2q = $a(); /*9815*/
		$k[$j++] = Infinity; /*9816*/
		for (var _2s = 0, _2t = ~~(($1.sbs.length + 1) / 2); _2s < _2t; _2s++) {
			/*9815*/
			$k[$j++] = $1.height; /*9815*/
		} /*9815*/
		var _2v = $a(); /*9816*/
		$k[$j++] = Infinity; /*9817*/
		for (var _2x = 0, _2y = ~~(($1.sbs.length + 1) / 2); _2x < _2y; _2x++) {
			/*9816*/
			$k[$j++] = 0; /*9816*/
		} /*9816*/
		var _2z = $a(); /*9817*/
		$k[$j++] = 'ren'; /*9819*/
		$k[$j++] = $0.renlinear; /*9819*/
		$k[$j++] = 'sbs'; /*9819*/
		$k[$j++] = _2q; /*9819*/
		$k[$j++] = 'bhs'; /*9819*/
		$k[$j++] = _2v; /*9819*/
		$k[$j++] = 'bbs'; /*9819*/
		$k[$j++] = _2z; /*9819*/
		if ($1.includetext) { //no-else/*9819*/
			$k[$j++] = 'txt'; /*9818*/
			$k[$j++] = $1.txt; /*9818*/
		} /*9818*/
		$k[$j++] = 'opt'; /*9820*/
		$k[$j++] = $1.options; /*9820*/
		var _33 = $d(); /*9820*/
		$k[$j++] = _33; /*9823*/
		if (!$1.dontdraw) { //no-else/*9823*/
			$0.renlinear(); /*9823*/
		} /*9823*/
	};
	$0.telepen = function() {
		var $1 = {}; /*9852*/
		$1.options = $k[--$j]; /*9854*/
		$1.barcode = $k[--$j]; /*9855*/
		$1.numeric = false; /*9857*/
		$1.dontdraw = false; /*9858*/
		$1.includetext = false; /*9859*/
		$1.textfont = 'Courier'; /*9860*/
		$1.textsize = 10; /*9861*/
		$1.textyoffset = -8.5; /*9862*/
		$1.height = 1; /*9863*/
		$1.parse = false; /*9864*/
		$forall($1.options, function() {
			/*9875*/
			var _3 = $k[--$j]; /*9875*/
			$1[$k[--$j]] = _3; /*9875*/
		}); /*9875*/
		$1.textfont = "" + $1.textfont; /*9877*/
		$1.textsize = +$1.textsize; /*9878*/
		$1.textyoffset = +$1.textyoffset; /*9879*/
		$1.height = +$1.height; /*9880*/
		$1.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); /*9937*/
		$1.barlen = $1.barcode.length; /*9939*/
		$1.sbs = $s(($1.barlen * 16) + 48); /*9940*/
		$1.txt = $a($1.barlen); /*9941*/
		$1.enc = $get($1.encs, 95); /*9944*/
		$puti($1.sbs, 0, $1.enc); /*9945*/
		$1.l = $1.enc.length; /*9946*/
		$1.checksum = 0; /*9948*/
		$1.i = 0; /*9949*/
		$1.j = 0; /*9949*/
		for (;;) {
			/*9981*/
			if ($1.i == $1.barlen) { //no-else/*9951*/
				break; /*9951*/
			} /*9951*/
			if ($1.numeric) {
				/*9974*/
				if ($get($1.barcode, $1.i) > 16) {
					/*9965*/
					$1.np = $geti($1.barcode, $1.i, 2); /*9954*/
					if ($eq($geti($1.np, 1, 1), "X")) {
						/*9958*/
						$1.indx = (~~$z($geti($1.np, 0, 1))) + 17; /*9956*/
					} else {
						/*9958*/
						$1.indx = (~~$z($1.np)) + 27; /*9958*/
					} /*9958*/
					$put($1.txt, $1.j, $a([$1.np, ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*9960*/
					$1.i = $1.i + 2; /*9961*/
				} else {
					/*9965*/
					$1.indx = $get($1.barcode, $1.i); /*9963*/
					$put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*9964*/
					$1.i = $1.i + 1; /*9965*/
				} /*9965*/
			} else {
				/*9974*/
				$1.indx = $get($1.barcode, $1.i); /*9968*/
				if (($1.indx >= 32) && ($1.indx <= 126)) {
					/*9972*/
					$put($1.txt, $1.j, $a([$geti($1.barcode, $1.i, 1), ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*9970*/
				} else {
					/*9972*/
					$put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); /*9972*/
				} /*9972*/
				$1.i = $1.i + 1; /*9974*/
			} /*9974*/
			$1.checksum = $1.checksum + $1.indx; /*9976*/
			$1.enc = $get($1.encs, $1.indx); /*9977*/
			$puti($1.sbs, $1.l, $1.enc); /*9978*/
			$1.l = $1.l + $1.enc.length; /*9979*/
			$1.j = $1.j + 1; /*9980*/
		} /*9980*/
		$1.checksum = (127 - ($1.checksum % 127)) % 127; /*9984*/
		$1.enc = $get($1.encs, $1.checksum); /*9985*/
		$puti($1.sbs, $1.l, $1.enc); /*9986*/
		$1.l = $1.l + $1.enc.length; /*9987*/
		$1.enc = $get($1.encs, 122); /*9990*/
		$puti($1.sbs, $1.l, $1.enc); /*9991*/
		$1.l = $1.l + $1.enc.length; /*9992*/
		$1.sbs = $geti($1.sbs, 0, $1.l); /*9995*/
		$1.txt = $geti($1.txt, 0, $1.j); /*9996*/
		$k[$j++] = Infinity; /*10007*/
		$k[$j++] = Infinity; /*10002*/
		$forall($1.sbs, function() {
			/*10001*/
			var _1n = $k[--$j]; /*10001*/
			$k[$j++] = _1n - 48; /*10001*/
		}); /*10001*/
		var _1o = $a(); /*10002*/
		$k[$j++] = Infinity; /*10003*/
		for (var _1q = 0, _1r = ~~(($1.sbs.length + 1) / 2); _1q < _1r; _1q++) {
			/*10002*/
			$k[$j++] = $1.height; /*10002*/
		} /*10002*/
		var _1t = $a(); /*10003*/
		$k[$j++] = Infinity; /*10004*/
		for (var _1v = 0, _1w = ~~(($1.sbs.length + 1) / 2); _1v < _1w; _1v++) {
			/*10003*/
			$k[$j++] = 0; /*10003*/
		} /*10003*/
		var _1x = $a(); /*10004*/
		$k[$j++] = 'ren'; /*10006*/
		$k[$j++] = $0.renlinear; /*10006*/
		$k[$j++] = 'sbs'; /*10006*/
		$k[$j++] = _1o; /*10006*/
		$k[$j++] = 'bhs'; /*10006*/
		$k[$j++] = _1t; /*10006*/
		$k[$j++] = 'bbs'; /*10006*/
		$k[$j++] = _1x; /*10006*/
		if ($1.includetext) { //no-else/*10006*/
			$k[$j++] = 'txt'; /*10005*/
			$k[$j++] = $1.txt; /*10005*/
		} /*10005*/
		$k[$j++] = 'opt'; /*10007*/
		$k[$j++] = $1.options; /*10007*/
		var _21 = $d(); /*10007*/
		$k[$j++] = _21; /*10010*/
		if (!$1.dontdraw) { //no-else/*10010*/
			$0.renlinear(); /*10010*/
		} /*10010*/
	};
	$0.telepennumeric = function() {
		var $1 = {}; /*10040*/
		$1.options = $k[--$j]; /*10042*/
		$1.barcode = $k[--$j]; /*10043*/
		$1.dontdraw = false; /*10045*/
		$1.includetext = false; /*10046*/
		$1.textfont = 'Courier'; /*10047*/
		$1.textsize = 10; /*10048*/
		$1.textxoffset = 0; /*10049*/
		$1.textyoffset = -8.5; /*10050*/
		$1.height = 1; /*10051*/
		$forall($1.options, function() {
			/*10062*/
			var _3 = $k[--$j]; /*10062*/
			$1[$k[--$j]] = _3; /*10062*/
		}); /*10062*/
		$1.textfont = "" + $1.textfont; /*10064*/
		$1.textsize = +$1.textsize; /*10065*/
		$1.textxoffset = +$1.textxoffset; /*10066*/
		$1.textyoffset = +$1.textyoffset; /*10067*/
		$1.height = +$1.height; /*10068*/
		$put($1.options, "dontdraw", true); /*10071*/
		$put($1.options, "numeric", true); /*10072*/
		$k[$j++] = 'args'; /*10074*/
		$k[$j++] = $1.barcode; /*10074*/
		$k[$j++] = $1.options; /*10074*/
		$0.telepen(); /*10074*/
		var _E = $k[--$j]; /*10074*/
		$1[$k[--$j]] = _E; /*10074*/
		$put($1.args, "opt", $1.options); /*10076*/
		$k[$j++] = $1.args; /*10079*/
		if (!$1.dontdraw) { //no-else/*10079*/
			$0.renlinear(); /*10079*/
		} /*10079*/
	};
	$0.posicode = function() {
		var $1 = {}; /*10108*/
		$1.options = $k[--$j]; /*10110*/
		$1.barcode = $k[--$j]; /*10111*/
		$1.dontdraw = false; /*10113*/
		$1.includetext = false; /*10114*/
		$1.textfont = 'Courier'; /*10115*/
		$1.textsize = 10; /*10116*/
		$1.textxoffset = 0; /*10117*/
		$1.textyoffset = -8.5; /*10118*/
		$1.height = 1; /*10119*/
		$1.encoding = "auto"; /*10120*/
		$1.version = "a"; /*10121*/
		$1.checkoffset = 0; /*10122*/
		$1.raw = false; /*10123*/
		$1.parse = false; /*10124*/
		$1.parsefnc = false; /*10125*/
		$forall($1.options, function() {
			/*10136*/
			var _3 = $k[--$j]; /*10136*/
			$1[$k[--$j]] = _3; /*10136*/
		}); /*10136*/
		$1.textfont = "" + $1.textfont; /*10138*/
		$1.textsize = +$1.textsize; /*10139*/
		$1.textxoffset = +$1.textxoffset; /*10140*/
		$1.textyoffset = +$1.textyoffset; /*10141*/
		$1.encoding = "" + $1.encoding; /*10142*/
		$1.version = "" + $1.version; /*10143*/
		$1.checkoffset = ~~$1.checkoffset; /*10144*/
		$1.height = +$1.height; /*10145*/
		$1.barlen = $1.barcode.length; /*10168*/
		$1.la0 = -1; /*10171*/
		$1.la1 = -2; /*10171*/
		$1.la2 = -3; /*10171*/
		$1.sf0 = -4; /*10172*/
		$1.sf1 = -5; /*10172*/
		$1.sf2 = -6; /*10172*/
		$1.fn1 = -7; /*10173*/
		$1.fn2 = -8; /*10173*/
		$1.fn3 = -9; /*10173*/
		$1.fn4 = -10; /*10173*/
		var _1m = new Map([
			["normal", $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $1.fn1]), $a([$1.la1, $1.la0, $1.fn2]), $a([$1.sf1, $1.sf0, $1.fn3]), $a([$1.sf2, $1.sf2, $1.fn4])])],
			["limited", $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), $a(["5", -98, -98]), $a(["6", -98, -98]), $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])])]
		]); /*10211*/
		$k[$j++] = _1m; /*10214*/
		if ($eq($1.version, "a") || $eq($1.version, "b")) {
			/*10214*/
			$k[$j++] = 'normal'; /*10214*/
		} else {
			/*10214*/
			$k[$j++] = 'limited'; /*10214*/
		} /*10214*/
		var _1p = $k[--$j]; /*10214*/
		$1.charmaps = $get($k[--$j], _1p); /*10215*/
		var _1s = $1.charmaps; /*10219*/
		var _1t = $1.charmaps; /*10219*/
		var _1u = $1.charmaps; /*10219*/
		$1.charvals = $a([new Map, new Map, new Map]); /*10220*/
		for (var _1y = 0, _1x = $1.charmaps.length - 1; _1y <= _1x; _1y += 1) {
			/*10229*/
			$1.i = _1y; /*10222*/
			$1.encs = $get($1.charmaps, $1.i); /*10223*/
			for (var _22 = 0; _22 <= 2; _22 += 1) {
				/*10228*/
				$1.j = _22; /*10225*/
				var _25 = $get($1.encs, $1.j); /*10226*/
				$k[$j++] = _25; /*10226*/
				if ($eq($type(_25), 'stringtype')) { //no-else/*10226*/
					var _28 = $get($k[--$j], 0); /*10226*/
					$k[$j++] = _28; /*10226*/
				} /*10226*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*10227*/
			} /*10227*/
		} /*10227*/
		$1.set0 = $get($1.charvals, 0); /*10230*/
		$1.set1 = $get($1.charvals, 1); /*10231*/
		$1.set2 = $get($1.charvals, 2); /*10232*/
		if ($1.raw) { //no-else/*10234*/
			$1.encoding = "raw"; /*10234*/
		} /*10234*/
		if ($eq($1.encoding, "raw")) { //no-else/*10248*/
			$1.cws = $a($1.barlen); /*10237*/
			$1.i = 0; /*10238*/
			$1.j = 0; /*10238*/
			for (;;) {
				/*10245*/
				if ($1.i == $1.barlen) { //no-else/*10240*/
					break; /*10240*/
				} /*10240*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*10241*/
				$put($1.cws, $1.j, $1.cw); /*10242*/
				$1.i = $1.i + 4; /*10243*/
				$1.j = $1.j + 1; /*10244*/
			} /*10244*/
			$1.cws = $geti($1.cws, 0, $1.j); /*10246*/
			$1.text = ""; /*10247*/
		} /*10247*/
		if ($eq($1.encoding, "auto")) { //no-else/*10376*/
			var _2f = new Map([
				["FNC1", $1.fn1],
				["FNC2", $1.fn2],
				["FNC3", $1.fn3]
			]); /*10255*/
			$1.fncvals = _2f; /*10257*/
			$1.msg = $a($1.barlen); /*10260*/
			$1.text = $s($1.barlen); /*10261*/
			$1.i = 0; /*10262*/
			$1.j = 0; /*10262*/
			for (;;) {
				/*10278*/
				if ($1.i == $1.barlen) { //no-else/*10263*/
					break; /*10263*/
				} /*10263*/
				$1.char = $get($1.barcode, $1.i); /*10264*/
				$put($1.text, $1.j, $1.char); /*10265*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*10274*/
					if ($get($1.barcode, $1.i + 1) != 94) {
						/*10272*/
						$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*10268*/
						$puti($1.text, $1.j, " "); /*10269*/
						$1.i = $1.i + 4; /*10270*/
					} else {
						/*10272*/
						$1.i = $1.i + 1; /*10272*/
					} /*10272*/
				} /*10272*/
				$put($1.msg, $1.j, $1.char); /*10275*/
				$1.i = $1.i + 1; /*10276*/
				$1.j = $1.j + 1; /*10277*/
			} /*10277*/
			$1.msg = $geti($1.msg, 0, $1.j); /*10279*/
			$1.msglen = $1.msg.length; /*10280*/
			$1.text = $geti($1.text, 0, $1.j); /*10281*/
			$k[$j++] = Infinity; /*10284*/
			for (var _3L = 0, _3M = $1.msglen; _3L < _3M; _3L++) {
				/*10284*/
				$k[$j++] = 0; /*10284*/
			} /*10284*/
			$k[$j++] = 0; /*10284*/
			$1.numSA = $a(); /*10284*/
			$k[$j++] = Infinity; /*10285*/
			for (var _3P = 0, _3Q = $1.msglen; _3P < _3Q; _3P++) {
				/*10285*/
				$k[$j++] = 0; /*10285*/
			} /*10285*/
			$k[$j++] = 0; /*10285*/
			$1.numEA = $a(); /*10285*/
			for (var _3T = $1.msglen - 1; _3T >= 0; _3T -= 1) {
				/*10295*/
				$1.i = _3T; /*10287*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*10294*/
					if ($get($1.msg, $1.i) >= 128) {
						/*10292*/
						$put($1.numEA, $1.i, $get($1.numEA, $1.i + 1) + 1); /*10290*/
					} else {
						/*10292*/
						$put($1.numSA, $1.i, $get($1.numSA, $1.i + 1) + 1); /*10292*/
					} /*10292*/
				} /*10292*/
			} /*10292*/
			$1.ea = false; /*10298*/
			$1.msgtmp = $a([]); /*10298*/
			for (var _3n = 0, _3m = $1.msglen - 1; _3n <= _3m; _3n += 1) {
				/*10313*/
				$1.i = _3n; /*10300*/
				$1.c = $get($1.msg, $1.i); /*10301*/
				if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //no-else/*10311*/
					if ($1.ea) {
						/*10303*/
						$k[$j++] = $1.numSA; /*10303*/
					} else {
						/*10303*/
						$k[$j++] = $1.numEA; /*10303*/
					} /*10303*/
					var _3z = $get($k[--$j], $1.i); /*10303*/
					var _42 = ((_3z + $1.i) == $1.msglen) ? 3 : 5; /*10304*/
					if (_3z < _42) {
						/*10309*/
						$k[$j++] = Infinity; /*10306*/
						$aload($1.msgtmp); /*10306*/
						$k[$j++] = $1.fn4; /*10306*/
						$1.msgtmp = $a(); /*10306*/
					} else {
						/*10309*/
						$k[$j++] = Infinity; /*10308*/
						$aload($1.msgtmp); /*10308*/
						$k[$j++] = $1.fn4; /*10308*/
						$k[$j++] = $1.fn4; /*10308*/
						$1.msgtmp = $a(); /*10308*/
						$1.ea = !$1.ea; /*10309*/
					} /*10309*/
				} /*10309*/
				$k[$j++] = Infinity; /*10312*/
				$aload($1.msgtmp); /*10312*/
				if ($1.c >= 0) {
					/*10312*/
					$k[$j++] = $1.c & 127; /*10312*/
				} else {
					/*10312*/
					$k[$j++] = $1.c; /*10312*/
				} /*10312*/
				$1.msgtmp = $a(); /*10312*/
			} /*10312*/
			$1.msg = $1.msgtmp; /*10314*/
			$1.msglen = $1.msg.length; /*10315*/
			$1.enc = function() {
				var _4I = $k[--$j]; /*10319*/
				$put($1.cws, $1.j, $get(_4I, $k[--$j])); /*10319*/
				$1.j = $1.j + 1; /*10320*/
			}; /*10321*/
			$1.cws = $a($1.msglen * 2); /*10323*/
			$1.i = 0; /*10324*/
			$1.j = 0; /*10324*/
			$1.cset = "set0"; /*10324*/
			for (;;) {
				/*10374*/
				if ($1.i == $1.msglen) { //no-else/*10326*/
					break; /*10326*/
				} /*10326*/
				for (;;) {
					/*10372*/
					$1.char1 = $get($1.msg, $1.i); /*10331*/
					$k[$j++] = 'char2'; /*10332*/
					if (($1.i + 1) < $1.msglen) {
						/*10332*/
						$k[$j++] = $get($1.msg, $1.i + 1); /*10332*/
					} else {
						/*10332*/
						$k[$j++] = -99; /*10332*/
					} /*10332*/
					var _4a = $k[--$j]; /*10332*/
					$1[$k[--$j]] = _4a; /*10332*/
					var _4f = $get($1[$1.cset], $1.char1) !== undefined; /*10335*/
					if (_4f) { //no-else/*10339*/
						$k[$j++] = $1.char1; /*10336*/
						$k[$j++] = $1[$1.cset]; /*10336*/
						$1.enc(); /*10336*/
						$1.i = $1.i + 1; /*10337*/
						break; /*10338*/
					} /*10338*/
					var _4m = $get($1.set2, $1.char1) !== undefined; /*10342*/
					if (_4m) { //no-else/*10347*/
						$k[$j++] = $1.sf2; /*10343*/
						$k[$j++] = $1[$1.cset]; /*10343*/
						$1.enc(); /*10343*/
						$k[$j++] = $1.char1; /*10344*/
						$k[$j++] = $1.set2; /*10344*/
						$1.enc(); /*10344*/
						$1.i = $1.i + 1; /*10345*/
						break; /*10346*/
					} /*10346*/
					var _4w = $get($1[$1.cset], $1.char2) !== undefined; /*10350*/
					if (!_4w) {
						/*10368*/
						if ($eq($1.cset, "set0")) {
							/*10356*/
							$k[$j++] = $1.la1; /*10352*/
							$k[$j++] = $1[$1.cset]; /*10352*/
							$1.enc(); /*10352*/
							$1.cset = "set1"; /*10353*/
						} else {
							/*10356*/
							$k[$j++] = $1.la0; /*10355*/
							$k[$j++] = $1[$1.cset]; /*10355*/
							$1.enc(); /*10355*/
							$1.cset = "set0"; /*10356*/
						} /*10356*/
						break; /*10358*/
					} else {
						/*10368*/
						if ($eq($1.cset, "set0")) {
							/*10365*/
							$k[$j++] = $1.sf1; /*10361*/
							$k[$j++] = $1[$1.cset]; /*10361*/
							$1.enc(); /*10361*/
							$k[$j++] = $1.char1; /*10362*/
							$k[$j++] = $1.set1; /*10362*/
							$1.enc(); /*10362*/
						} else {
							/*10365*/
							$k[$j++] = $1.sf0; /*10364*/
							$k[$j++] = $1[$1.cset]; /*10364*/
							$1.enc(); /*10364*/
							$k[$j++] = $1.char1; /*10365*/
							$k[$j++] = $1.set0; /*10365*/
							$1.enc(); /*10365*/
						} /*10365*/
						$1.i = $1.i + 1; /*10367*/
						break; /*10368*/
					} /*10368*/
					break; /*10371*/
				} /*10371*/
			} /*10371*/
			$1.cws = $geti($1.cws, 0, $1.j); /*10375*/
		} /*10375*/
		var _5N = new Map([
			["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
			["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
			["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
			["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
		]); /*10422*/
		$1.encs = $get(_5N, $1.version); /*10425*/
		$1.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); /*10433*/
		$1.v = 0; /*10434*/
		$forall($1.cws, function() {
			/*10444*/
			$1.cw = $k[--$j]; /*10436*/
			for (var _5Y = 0, _5Z = 6; _5Y < _5Z; _5Y++) {
				/*10443*/
				if ((($1.cw ^ $1.v) & 1) != 0) { //no-else/*10440*/
					$1.v = $1.v ^ 7682; /*10439*/
				} /*10439*/
				$1.v = $1.v >>> 1; /*10441*/
				$1.cw = $1.cw >>> 1; /*10442*/
			} /*10442*/
		}); /*10442*/
		$1.v = $1.v + $1.checkoffset; /*10445*/
		if ($eq($1.version, "limiteda") || $eq($1.version, "limitedb")) {
			/*10453*/
			$1.v = $1.v & 1023; /*10448*/
			if (($1.v > 824) && ($1.v < 853)) { //no-else/*10451*/
				$1.v = $1.v + 292; /*10450*/
			} /*10450*/
		} else {
			/*10453*/
			$1.v = ($1.v & 1023) + 45; /*10453*/
		} /*10453*/
		$1.d = $a([2, 2, 2, 2, 2, 2]); /*10456*/
		$1.r = 0; /*10457*/
		$1.c = 0; /*10457*/
		$1.w = 0; /*10457*/
		$1.sum = 0; /*10457*/
		for (;;) {
			/*10476*/
			if ($1.sum == $1.v) { //no-else/*10459*/
				break; /*10459*/
			} /*10459*/
			$1.t = $1.sum + $get($get($1.c2w, $1.r), $1.c); /*10460*/
			if ($1.t == $1.v) { //no-else/*10465*/
				$1.w = $1.w + 1; /*10462*/
				$put($1.d, $1.r, $1.w + 2); /*10463*/
				$1.sum = $1.t; /*10464*/
			} /*10464*/
			if ($1.t > $1.v) { //no-else/*10470*/
				$put($1.d, $1.r, $1.w + 2); /*10467*/
				$1.r = $1.r + 1; /*10468*/
				$1.w = 0; /*10469*/
			} /*10469*/
			if ($1.t < $1.v) { //no-else/*10475*/
				$1.c = $1.c + 1; /*10472*/
				$1.w = $1.w + 1; /*10473*/
				$1.sum = $1.t; /*10474*/
			} /*10474*/
		} /*10474*/
		$k[$j++] = 20; /*10477*/
		for (var _6F = 0; _6F <= 4; _6F += 1) {
			/*10477*/
			var _6I = $k[--$j]; /*10477*/
			$k[$j++] = _6I - $get($1.d, _6F); /*10477*/
		} /*10477*/
		$put($1.d, 5, $k[--$j]); /*10478*/
		if ($eq($1.version, "b") || $eq($1.version, "limitedb")) { //no-else/*10481*/
			$k[$j++] = Infinity; /*10480*/
			var _6N = $1.d; /*10480*/
			for (var _6O = 0, _6P = _6N.length; _6O < _6P; _6O++) {
				/*10480*/
				$k[$j++] = $get(_6N, _6O) + 1; /*10480*/
			} /*10480*/
			$1.d = $a(); /*10480*/
		} /*10480*/
		$1.cbs = $strcpy($s(12), "111111111111"); /*10482*/
		for (var _6U = 5; _6U >= 0; _6U -= 1) {
			/*10486*/
			$1.i = _6U; /*10484*/
			$put($1.cbs, ((5 - $1.i) * 2) + 1, $get($1.d, $1.i) + 47); /*10485*/
		} /*10485*/
		$1.sbs = $s(($1.cws.length * 6) + 31); /*10489*/
		var _6e = $get($1.encs, $1.encs.length - 2); /*10490*/
		$puti($1.sbs, 0, _6e); /*10491*/
		$1.j = _6e.length; /*10492*/
		for (var _6i = 0, _6h = $1.cws.length - 1; _6i <= _6h; _6i += 1) {
			/*10497*/
			$1.i = _6i; /*10494*/
			$puti($1.sbs, $1.j, $get($1.encs, $get($1.cws, $1.i))); /*10495*/
			$1.j = $1.j + 6; /*10496*/
		} /*10496*/
		$puti($1.sbs, $1.j, $1.cbs); /*10498*/
		$1.j = $1.j + 12; /*10499*/
		var _6x = $get($1.encs, $1.encs.length - 1); /*10500*/
		$puti($1.sbs, $1.j, _6x); /*10501*/
		$1.j = _6x.length + $1.j; /*10502*/
		$1.sbs = $geti($1.sbs, 0, $1.j); /*10503*/
		$k[$j++] = Infinity; /*10513*/
		$k[$j++] = Infinity; /*10509*/
		$forall($1.sbs, function() {
			/*10508*/
			var _75 = $k[--$j]; /*10508*/
			$k[$j++] = _75 - 48; /*10508*/
		}); /*10508*/
		var _76 = $a(); /*10509*/
		$k[$j++] = Infinity; /*10510*/
		for (var _78 = 0, _79 = ~~(($1.sbs.length + 1) / 2); _78 < _79; _78++) {
			/*10509*/
			$k[$j++] = $1.height; /*10509*/
		} /*10509*/
		var _7B = $a(); /*10510*/
		$k[$j++] = Infinity; /*10511*/
		for (var _7D = 0, _7E = ~~(($1.sbs.length + 1) / 2); _7D < _7E; _7D++) {
			/*10510*/
			$k[$j++] = 0; /*10510*/
		} /*10510*/
		var _7F = $a(); /*10511*/
		$k[$j++] = 'ren'; /*10513*/
		$k[$j++] = $0.renlinear; /*10513*/
		$k[$j++] = 'sbs'; /*10513*/
		$k[$j++] = _76; /*10513*/
		$k[$j++] = 'bhs'; /*10513*/
		$k[$j++] = _7B; /*10513*/
		$k[$j++] = 'bbs'; /*10513*/
		$k[$j++] = _7F; /*10513*/
		$k[$j++] = 'txt'; /*10513*/
		$k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); /*10513*/
		$k[$j++] = 'textxalign'; /*10513*/
		$k[$j++] = "center"; /*10513*/
		$k[$j++] = 'opt'; /*10513*/
		$k[$j++] = $1.options; /*10513*/
		var _7O = $d(); /*10513*/
		$k[$j++] = _7O; /*10516*/
		if (!$1.dontdraw) { //no-else/*10516*/
			$0.renlinear(); /*10516*/
		} /*10516*/
	};
	$0.codablockf = function() {
		var $1 = {}; /*10545*/
		$1.options = $k[--$j]; /*10547*/
		$1.barcode = $k[--$j]; /*10548*/
		$1.dontdraw = false; /*10550*/
		$1.rows = -1; /*10551*/
		$1.columns = 8; /*10552*/
		$1.rowheight = 10; /*10553*/
		$1.sepheight = 1; /*10554*/
		$1.parse = false; /*10555*/
		$1.parsefnc = false; /*10556*/
		$forall($1.options, function() {
			/*10567*/
			var _3 = $k[--$j]; /*10567*/
			$1[$k[--$j]] = _3; /*10567*/
		}); /*10567*/
		$1.rows = ~~$1.rows; /*10569*/
		$1.columns = ~~$1.columns; /*10570*/
		$1.rowheight = ~~$1.rowheight; /*10571*/
		$1.sepheight = ~~$1.sepheight; /*10572*/
		if ((($1.columns >= 4) && ($1.columns <= 62)) && ((($1.rows >= 2) && ($1.rows <= 44)) || ($1.rows == -1))) { //no-else/*10575*/
			$1.c = $1.columns; /*10575*/
		} /*10575*/
		$1.barlen = $1.barcode.length; /*10598*/
		$1.swa = -1; /*10601*/
		$1.swb = -2; /*10601*/
		$1.swc = -3; /*10601*/
		$1.sft = -4; /*10601*/
		$1.fn1 = -5; /*10602*/
		$1.fn2 = -6; /*10602*/
		$1.fn3 = -7; /*10602*/
		$1.fn4 = -8; /*10602*/
		$1.sta = -9; /*10603*/
		$1.stp = -10; /*10603*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sft, $1.sft, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.sta, $1.sta, $1.sta]), $a([$1.stp, $1.stp, $1.stp])]); /*10643*/
		$1.charvals = $a([new Map, new Map, new Map]); /*10646*/
		for (var _2O = 0, _2N = $1.charmaps.length - 1; _2O <= _2N; _2O += 1) {
			/*10655*/
			$1.i = _2O; /*10648*/
			$1.encs = $get($1.charmaps, $1.i); /*10649*/
			for (var _2S = 0; _2S <= 2; _2S += 1) {
				/*10654*/
				$1.j = _2S; /*10651*/
				var _2V = $get($1.encs, $1.j); /*10652*/
				$k[$j++] = _2V; /*10652*/
				if ($eq($type(_2V), 'stringtype')) { //no-else/*10652*/
					var _2Y = $get($k[--$j], 0); /*10652*/
					$k[$j++] = _2Y; /*10652*/
				} /*10652*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*10653*/
			} /*10653*/
		} /*10653*/
		$1.seta = $get($1.charvals, 0); /*10656*/
		$1.setb = $get($1.charvals, 1); /*10657*/
		$1.setc = $get($1.charvals, 2); /*10658*/
		var _2m = new Map([
			["FNC1", $1.fn1],
			["FNC3", $1.fn3]
		]); /*10663*/
		$1.fncvals = _2m; /*10665*/
		$1.msg = $a($1.barlen); /*10666*/
		$1.i = 0; /*10667*/
		$1.j = 0; /*10667*/
		for (;;) {
			/*10681*/
			if ($1.i == $1.barlen) { //no-else/*10668*/
				break; /*10668*/
			} /*10668*/
			$1.char = $get($1.barcode, $1.i); /*10669*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*10677*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*10675*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*10672*/
					$1.i = $1.i + 4; /*10673*/
				} else {
					/*10675*/
					$1.i = $1.i + 1; /*10675*/
				} /*10675*/
			} /*10675*/
			$put($1.msg, $1.j, $1.char); /*10678*/
			$1.i = $1.i + 1; /*10679*/
			$1.j = $1.j + 1; /*10680*/
		} /*10680*/
		$1.msg = $geti($1.msg, 0, $1.j); /*10682*/
		$1.msglen = $1.msg.length; /*10683*/
		$1.msgtmp = $a([]); /*10686*/
		$forall($1.msg, function() {
			/*10690*/
			$1.char = $k[--$j]; /*10688*/
			$k[$j++] = Infinity; /*10689*/
			$aload($1.msgtmp); /*10689*/
			if ($1.char < 128) {
				/*10689*/
				$k[$j++] = $1.char; /*10689*/
			} else {
				/*10689*/
				$k[$j++] = $1.fn4; /*10689*/
				$k[$j++] = $1.char & 127; /*10689*/
			} /*10689*/
			$1.msgtmp = $a(); /*10689*/
		}); /*10689*/
		$1.msg = $1.msgtmp; /*10691*/
		$1.msglen = $1.msg.length; /*10692*/
		$1.numsscr = function() {
			$1.n = 0; /*10696*/
			$1.s = 0; /*10696*/
			$1.p = $k[--$j]; /*10697*/
			for (;;) {
				/*10708*/
				if ($1.p >= $1.msglen) { //no-else/*10698*/
					break; /*10698*/
				} /*10698*/
				var _3X = $get($1.msg, $1.p); /*10699*/
				var _3Z = $get($1.setc, _3X) !== undefined; /*10700*/
				$k[$j++] = _3X; /*10700*/
				if (!_3Z) { //no-else/*10700*/
					$j--; /*10700*/
					break; /*10700*/
				} /*10700*/
				if ($k[--$j] == $1.fn1) { //no-else/*10704*/
					if (($1.s % 2) == 0) {
						/*10703*/
						$1.s = $1.s + 1; /*10703*/
					} else {
						/*10703*/
						break; /*10703*/
					} /*10703*/
				} /*10703*/
				$1.n = $1.n + 1; /*10705*/
				$1.s = $1.s + 1; /*10706*/
				$1.p = $1.p + 1; /*10707*/
			} /*10707*/
			$k[$j++] = $1.n; /*10709*/
			$k[$j++] = $1.s; /*10709*/
		}; /*10710*/
		$1.enca = function() {
			$put($1.cws, $1.j, $get($1.seta, $k[--$j])); /*10714*/
			$1.j = $1.j + 1; /*10715*/
		}; /*10716*/
		$1.encb = function() {
			$put($1.cws, $1.j, $get($1.setb, $k[--$j])); /*10718*/
			$1.j = $1.j + 1; /*10719*/
		}; /*10720*/
		$1.encc = function() {
			var _3v = $k[--$j]; /*10722*/
			$k[$j++] = _3v; /*10726*/
			if ($ne($type(_3v), 'arraytype')) {
				/*10725*/
				var _3z = $get($1.setc, $k[--$j]); /*10723*/
				$k[$j++] = _3z; /*10723*/
			} else {
				/*10725*/
				$aload($k[--$j]); /*10725*/
				var _41 = $k[--$j]; /*10725*/
				var _42 = $k[--$j]; /*10725*/
				$k[$j++] = (_41 - 48) + ((_42 - 48) * 10); /*10725*/
			} /*10725*/
			$put($1.cws, $1.j, $k[--$j]); /*10727*/
			$1.j = $1.j + 1; /*10728*/
		}; /*10729*/
		$1.anotb = function() {
			var _47 = $k[--$j]; /*10732*/
			var _49 = $get($1.seta, _47) !== undefined; /*10732*/
			var _4B = $get($1.setb, _47) !== undefined; /*10732*/
			$k[$j++] = _49 && (!_4B); /*10732*/
		}; /*10732*/
		$1.bnota = function() {
			var _4C = $k[--$j]; /*10733*/
			var _4E = $get($1.setb, _4C) !== undefined; /*10733*/
			var _4G = $get($1.seta, _4C) !== undefined; /*10733*/
			$k[$j++] = _4E && (!_4G); /*10733*/
		}; /*10733*/
		$k[$j++] = Infinity; /*10736*/
		for (var _4I = 0, _4J = $1.msg.length; _4I < _4J; _4I++) {
			/*10736*/
			$k[$j++] = 0; /*10736*/
		} /*10736*/
		$k[$j++] = 9999; /*10736*/
		$1.nextanotb = $a(); /*10736*/
		$k[$j++] = Infinity; /*10737*/
		for (var _4M = 0, _4N = $1.msg.length; _4M < _4N; _4M++) {
			/*10737*/
			$k[$j++] = 0; /*10737*/
		} /*10737*/
		$k[$j++] = 9999; /*10737*/
		$1.nextbnota = $a(); /*10737*/
		for (var _4Q = $1.msg.length - 1; _4Q >= 0; _4Q -= 1) {
			/*10750*/
			$1.i = _4Q; /*10739*/
			$k[$j++] = $get($1.msg, $1.i); /*10740*/
			$1.anotb(); /*10740*/
			if ($k[--$j]) {
				/*10743*/
				$put($1.nextanotb, $1.i, 0); /*10741*/
			} else {
				/*10743*/
				$put($1.nextanotb, $1.i, $get($1.nextanotb, $1.i + 1) + 1); /*10743*/
			} /*10743*/
			$k[$j++] = $get($1.msg, $1.i); /*10745*/
			$1.bnota(); /*10745*/
			if ($k[--$j]) {
				/*10748*/
				$put($1.nextbnota, $1.i, 0); /*10746*/
			} else {
				/*10748*/
				$put($1.nextbnota, $1.i, $get($1.nextbnota, $1.i + 1) + 1); /*10748*/
			} /*10748*/
		} /*10748*/
		$1.abeforeb = function() {
			var _4n = $k[--$j]; /*10753*/
			$k[$j++] = $lt($get($1.nextanotb, _4n), $get($1.nextbnota, _4n)); /*10753*/
		}; /*10753*/
		$1.bbeforea = function() {
			var _4s = $k[--$j]; /*10754*/
			$k[$j++] = $lt($get($1.nextbnota, _4s), $get($1.nextanotb, _4s)); /*10754*/
		}; /*10754*/
		$1.padrow = function() {
			for (var _4y = 0, _4z = $k[--$j]; _4y < _4z; _4y++) {
				/*10764*/
				for (;;) {
					/*10763*/
					if ($eq($1.cset, "seta")) { //no-else/*10760*/
						$k[$j++] = $1.swc; /*10760*/
						$1.enca(); /*10760*/
						$1.cset = "setc"; /*10760*/
						break; /*10760*/
					} /*10760*/
					if ($eq($1.cset, "setb")) { //no-else/*10761*/
						$k[$j++] = $1.swc; /*10761*/
						$1.encb(); /*10761*/
						$1.cset = "setc"; /*10761*/
						break; /*10761*/
					} /*10761*/
					if ($eq($1.cset, "setc")) { //no-else/*10762*/
						$k[$j++] = $1.swb; /*10762*/
						$1.encc(); /*10762*/
						$1.cset = "setb"; /*10762*/
						break; /*10762*/
					} /*10762*/
				} /*10762*/
			} /*10762*/
		}; /*10765*/
		$k[$j++] = 'cws'; /*10768*/
		$k[$j++] = $1.c + 5; /*10768*/
		if ($1.rows != -1) {
			/*10768*/
			$k[$j++] = $1.rows; /*10768*/
		} else {
			/*10768*/
			$k[$j++] = 44; /*10768*/
		} /*10768*/
		var _59 = $k[--$j]; /*10768*/
		var _5B = $a($k[--$j] * _59); /*10768*/
		$1[$k[--$j]] = _5B; /*10768*/
		$1.i = 0; /*10770*/
		$1.j = 0; /*10770*/
		$1.r = 1; /*10770*/
		$1.lastrow = false; /*10771*/
		for (;;) {
			/*10939*/
			if ($1.lastrow) { //no-else/*10773*/
				break; /*10773*/
			} /*10773*/
			$k[$j++] = $1.sta; /*10776*/
			$1.enca(); /*10776*/
			if ($1.i < $1.msglen) {
				/*10777*/
				$k[$j++] = $1.i; /*10777*/
				$1.numsscr(); /*10777*/
			} else {
				/*10777*/
				$k[$j++] = -1; /*10777*/
				$k[$j++] = -1; /*10777*/
			} /*10777*/
			$1.nums = $k[--$j]; /*10777*/
			$1.nchars = $k[--$j]; /*10777*/
			for (;;) {
				/*10797*/
				if ($1.msglen == 0) { //no-else/*10783*/
					$k[$j++] = $1.swb; /*10780*/
					$1.enca(); /*10780*/
					$1.cset = "setb"; /*10781*/
					break; /*10782*/
				} /*10782*/
				if ($1.nums >= 2) { //no-else/*10788*/
					$k[$j++] = $1.swc; /*10785*/
					$1.enca(); /*10785*/
					$1.cset = "setc"; /*10786*/
					break; /*10787*/
				} /*10787*/
				$k[$j++] = $1.i; /*10789*/
				$1.abeforeb(); /*10789*/
				if ($k[--$j]) { //no-else/*10793*/
					$k[$j++] = $1.sft; /*10790*/
					$1.enca(); /*10790*/
					$1.cset = "seta"; /*10791*/
					break; /*10792*/
				} /*10792*/
				$k[$j++] = $1.swb; /*10794*/
				$1.enca(); /*10794*/
				$1.cset = "setb"; /*10795*/
				break; /*10796*/
			} /*10796*/
			$1.j = $1.j + 1; /*10798*/
			$1.endofrow = false; /*10801*/
			for (;;) {
				/*10924*/
				$1.rem = ($1.c + 3) - ($1.j % ($1.c + 5)); /*10802*/
				if (($1.i == $1.msglen) || $1.endofrow) { //no-else/*10804*/
					break; /*10804*/
				} /*10804*/
				$k[$j++] = $1.i; /*10806*/
				$1.numsscr(); /*10806*/
				$1.nums = $k[--$j]; /*10806*/
				$1.nchars = $k[--$j]; /*10806*/
				for (;;) {
					/*10922*/
					if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.nums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //no-else/*10844*/
						if ((($1.nums % 2) == 0) && ($1.rem >= 3)) { //no-else/*10826*/
							$k[$j++] = $1.swc; /*10814*/
							if ($eq($1.cset, "seta")) {
								/*10814*/
								$1.enca(); /*10814*/
							} else {
								/*10814*/
								$1.encb(); /*10814*/
							} /*10814*/
							$1.cset = "setc"; /*10815*/
							for (var _5n = 0, _5o = 2; _5n < _5o; _5n++) {
								/*10824*/
								if ($get($1.msg, $1.i) == $1.fn1) {
									/*10822*/
									$k[$j++] = $1.fn1; /*10818*/
									$1.encc(); /*10818*/
									$1.i = $1.i + 1; /*10819*/
								} else {
									/*10822*/
									$k[$j++] = $geti($1.msg, $1.i, 2); /*10821*/
									$1.encc(); /*10821*/
									$1.i = $1.i + 2; /*10822*/
								} /*10822*/
							} /*10822*/
							break; /*10825*/
						} /*10825*/
						if ((($1.nums % 2) != 0) && ($1.rem >= 4)) { //no-else/*10843*/
							$k[$j++] = $get($1.msg, $1.i); /*10829*/
							if ($eq($1.cset, "seta")) {
								/*10829*/
								$1.enca(); /*10829*/
							} else {
								/*10829*/
								$1.encb(); /*10829*/
							} /*10829*/
							$1.i = $1.i + 1; /*10830*/
							$k[$j++] = $1.swc; /*10831*/
							if ($eq($1.cset, "seta")) {
								/*10831*/
								$1.enca(); /*10831*/
							} else {
								/*10831*/
								$1.encb(); /*10831*/
							} /*10831*/
							$1.cset = "setc"; /*10832*/
							for (var _68 = 0, _69 = 2; _68 < _69; _68++) {
								/*10841*/
								if ($get($1.msg, $1.i) == $1.fn1) {
									/*10839*/
									$k[$j++] = $1.fn1; /*10835*/
									$1.encc(); /*10835*/
									$1.i = $1.i + 1; /*10836*/
								} else {
									/*10839*/
									$k[$j++] = $geti($1.msg, $1.i, 2); /*10838*/
									$1.encc(); /*10838*/
									$1.i = $1.i + 2; /*10839*/
								} /*10839*/
							} /*10839*/
							break; /*10842*/
						} /*10842*/
					} /*10842*/
					$k[$j++] = $eq($1.cset, "setb"); /*10845*/
					$k[$j++] = $get($1.msg, $1.i); /*10845*/
					$1.anotb(); /*10845*/
					var _6O = $k[--$j]; /*10845*/
					if (($k[--$j] && _6O) && ($1.rem >= 2)) { //no-else/*10860*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*10854*/
							$k[$j++] = $1.i + 1; /*10848*/
							$1.bbeforea(); /*10848*/
							if ($k[--$j]) { //no-else/*10853*/
								$k[$j++] = $1.sft; /*10849*/
								$1.encb(); /*10849*/
								$k[$j++] = $get($1.msg, $1.i); /*10850*/
								$1.enca(); /*10850*/
								$1.i = $1.i + 1; /*10851*/
								break; /*10852*/
							} /*10852*/
						} /*10852*/
						$k[$j++] = $1.swa; /*10855*/
						$1.encb(); /*10855*/
						$1.cset = "seta"; /*10856*/
						$k[$j++] = $get($1.msg, $1.i); /*10857*/
						$1.enca(); /*10857*/
						$1.i = $1.i + 1; /*10858*/
						break; /*10859*/
					} /*10859*/
					$k[$j++] = $eq($1.cset, "seta"); /*10861*/
					$k[$j++] = $get($1.msg, $1.i); /*10861*/
					$1.bnota(); /*10861*/
					var _6j = $k[--$j]; /*10861*/
					if (($k[--$j] && _6j) && ($1.rem >= 2)) { //no-else/*10876*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*10870*/
							$k[$j++] = $1.i + 1; /*10864*/
							$1.abeforeb(); /*10864*/
							if ($k[--$j]) { //no-else/*10869*/
								$k[$j++] = $1.sft; /*10865*/
								$1.enca(); /*10865*/
								$k[$j++] = $get($1.msg, $1.i); /*10866*/
								$1.encb(); /*10866*/
								$1.i = $1.i + 1; /*10867*/
								break; /*10868*/
							} /*10868*/
						} /*10868*/
						$k[$j++] = $1.swb; /*10871*/
						$1.enca(); /*10871*/
						$1.cset = "setb"; /*10872*/
						$k[$j++] = $get($1.msg, $1.i); /*10873*/
						$1.encb(); /*10873*/
						$1.i = $1.i + 1; /*10874*/
						break; /*10875*/
					} /*10875*/
					if (($eq($1.cset, "setc") && ($1.nums < 2)) && ($1.rem >= 2)) { //no-else/*10891*/
						$k[$j++] = $1.i; /*10879*/
						$1.abeforeb(); /*10879*/
						if ($k[--$j]) { //no-else/*10885*/
							$k[$j++] = $1.swa; /*10880*/
							$1.encc(); /*10880*/
							$1.cset = "seta"; /*10881*/
							$k[$j++] = $get($1.msg, $1.i); /*10882*/
							$1.enca(); /*10882*/
							$1.i = $1.i + 1; /*10883*/
							break; /*10884*/
						} /*10884*/
						$k[$j++] = $1.swb; /*10886*/
						$1.encc(); /*10886*/
						$1.cset = "setb"; /*10887*/
						$k[$j++] = $get($1.msg, $1.i); /*10888*/
						$1.encb(); /*10888*/
						$1.i = $1.i + 1; /*10889*/
						break; /*10890*/
					} /*10890*/
					var _7K = $get($1.seta, $get($1.msg, $1.i)) !== undefined; /*10894*/
					if (($eq($1.cset, "seta") && _7K) && ($1.rem >= 1)) { //no-else/*10899*/
						$k[$j++] = $get($1.msg, $1.i); /*10896*/
						$1.enca(); /*10896*/
						$1.i = $1.i + 1; /*10897*/
						break; /*10898*/
					} /*10898*/
					var _7V = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*10900*/
					if (($eq($1.cset, "setb") && _7V) && ($1.rem >= 1)) { //no-else/*10905*/
						$k[$j++] = $get($1.msg, $1.i); /*10902*/
						$1.encb(); /*10902*/
						$1.i = $1.i + 1; /*10903*/
						break; /*10904*/
					} /*10904*/
					if (($eq($1.cset, "setc") && ($1.nums >= 2)) && ($1.rem >= 1)) { //no-else/*10916*/
						if ($get($1.msg, $1.i) == $1.fn1) {
							/*10913*/
							$k[$j++] = $1.fn1; /*10909*/
							$1.encc(); /*10909*/
							$1.i = $1.i + 1; /*10910*/
						} else {
							/*10913*/
							$k[$j++] = $geti($1.msg, $1.i, 2); /*10912*/
							$1.encc(); /*10912*/
							$1.i = $1.i + 2; /*10913*/
						} /*10913*/
						break; /*10915*/
					} /*10915*/
					$1.endofrow = true; /*10919*/
					break; /*10920*/
				} /*10920*/
			} /*10920*/
			if ((((($1.r == $1.rows) || ($1.rows == -1)) && ($1.r > 1)) && ($1.i == $1.msglen)) && ($1.rem >= 2)) {
				/*10936*/
				$k[$j++] = $1.rem - 2; /*10928*/
				$1.padrow(); /*10928*/
				$1.j = $1.j + 3; /*10929*/
				$k[$j++] = $1.stp; /*10930*/
				$1.enca(); /*10930*/
				$1.lastrow = true; /*10931*/
			} else {
				/*10936*/
				$k[$j++] = $1.rem; /*10933*/
				$1.padrow(); /*10933*/
				$1.j = $1.j + 1; /*10934*/
				$k[$j++] = $1.stp; /*10935*/
				$1.enca(); /*10935*/
				$1.r = $1.r + 1; /*10936*/
			} /*10936*/
		} /*10936*/
		$1.cws = $geti($1.cws, 0, $1.j); /*10940*/
		$k[$j++] = Infinity; /*10947*/
		for (var _85 = 64; _85 <= 95; _85 += 1) {
			/*10944*/
			$k[$j++] = _85; /*10944*/
		} /*10944*/
		for (var _86 = 0; _86 <= 15; _86 += 1) {
			/*10945*/
			$k[$j++] = _86; /*10945*/
		} /*10945*/
		for (var _87 = 26; _87 <= 63; _87 += 1) {
			/*10946*/
			$k[$j++] = _87; /*10946*/
		} /*10946*/
		$1.abmap = $a(); /*10947*/
		$k[$j++] = Infinity; /*10948*/
		for (var _89 = 0; _89 <= 85; _89 += 1) {
			/*10948*/
			$k[$j++] = _89; /*10948*/
		} /*10948*/
		$1.cmap = $a(); /*10948*/
		$1.chkmsg = $a($1.msglen); /*10951*/
		$1.j = 0; /*10952*/
		for (var _8F = 0, _8E = $1.msglen - 1; _8F <= _8E; _8F += 1) {
			/*10958*/
			$1.i = _8F; /*10954*/
			$1.char = $get($1.msg, $1.i); /*10955*/
			if ($1.char >= 0) { //no-else/*10956*/
				$put($1.chkmsg, $1.j, $1.char); /*10956*/
				$1.j = $1.j + 1; /*10956*/
			} /*10956*/
			if (($1.char == $1.fn1) && ($1.i != 0)) { //no-else/*10957*/
				$put($1.chkmsg, $1.j, 29); /*10957*/
				$1.j = $1.j + 1; /*10957*/
			} /*10957*/
		} /*10957*/
		$1.t1 = 0; /*10959*/
		$1.t2 = 0; /*10959*/
		$1.k1 = 0; /*10959*/
		$1.k2 = 0; /*10959*/
		for (var _8W = 0, _8V = $1.j - 1; _8W <= _8V; _8W += 1) {
			/*10966*/
			$1.i = _8W; /*10961*/
			$1.t1 = ($get($1.chkmsg, $1.i) * $1.i) % 86; /*10962*/
			$1.t2 = ($1.t1 + $get($1.chkmsg, $1.i)) % 86; /*10963*/
			$1.k1 = ($1.k1 + $1.t2) % 86; /*10964*/
			$1.k2 = ($1.k2 + $1.t1) % 86; /*10965*/
		} /*10965*/
		$k[$j++] = $1.cws; /*10967*/
		$k[$j++] = $1.cws.length - 4; /*10967*/
		if ($ne($1.cset, "setc")) {
			/*10967*/
			$k[$j++] = $1.abmap; /*10967*/
		} else {
			/*10967*/
			$k[$j++] = $1.cmap; /*10967*/
		} /*10967*/
		var _8q = $get($k[--$j], $1.k1); /*10967*/
		var _8r = $k[--$j]; /*10967*/
		$put($k[--$j], _8r, _8q); /*10967*/
		$k[$j++] = $1.cws; /*10968*/
		$k[$j++] = $1.cws.length - 3; /*10968*/
		if ($ne($1.cset, "setc")) {
			/*10968*/
			$k[$j++] = $1.abmap; /*10968*/
		} else {
			/*10968*/
			$k[$j++] = $1.cmap; /*10968*/
		} /*10968*/
		var _90 = $get($k[--$j], $1.k2); /*10968*/
		var _91 = $k[--$j]; /*10968*/
		$put($k[--$j], _91, _90); /*10968*/
		var _93 = $1.cws; /*10971*/
		$k[$j++] = _93; /*10971*/
		$k[$j++] = 2; /*10971*/
		if ($get(_93, 2 - 1) != 99) {
			/*10971*/
			$k[$j++] = $1.abmap; /*10971*/
		} else {
			/*10971*/
			$k[$j++] = $1.cmap; /*10971*/
		} /*10971*/
		var _99 = $get($k[--$j], $1.r - 2); /*10971*/
		var _9A = $k[--$j]; /*10971*/
		$put($k[--$j], _9A, _99); /*10971*/
		for (var _9E = 1, _9D = $1.r - 1; _9E <= _9D; _9E += 1) {
			/*10975*/
			$1.i = _9E; /*10973*/
			var _9F = $1.cws; /*10974*/
			var _9G = $1.i; /*10974*/
			var _9H = $1.c; /*10974*/
			$k[$j++] = _9F; /*10974*/
			$k[$j++] = (_9G * (_9H + 5)) + 2; /*10974*/
			if ($get(_9F, ((_9G * (_9H + 5)) + 2) - 1) != 99) {
				/*10974*/
				$k[$j++] = $1.abmap; /*10974*/
			} else {
				/*10974*/
				$k[$j++] = $1.cmap; /*10974*/
			} /*10974*/
			var _9N = $get($k[--$j], $1.i + 42); /*10974*/
			var _9O = $k[--$j]; /*10974*/
			$put($k[--$j], _9O, _9N); /*10974*/
		} /*10974*/
		for (var _9S = 0, _9R = $1.r - 1; _9S <= _9R; _9S += 1) {
			/*10986*/
			$1.rcws = $geti($1.cws, _9S * ($1.c + 5), $1.c + 4); /*10979*/
			$1.csum = $get($1.rcws, 0); /*10980*/
			for (var _9b = 1, _9a = $1.rcws.length - 2; _9b <= _9a; _9b += 1) {
				/*10984*/
				$1.i = _9b; /*10982*/
				$1.csum = $1.csum + ($get($1.rcws, $1.i) * $1.i); /*10983*/
			} /*10983*/
			$put($1.rcws, $1.rcws.length - 1, $1.csum % 103); /*10985*/
		} /*10985*/
		$1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); /*11005*/
		$1.rowbits = $a($1.r); /*11008*/
		for (var _9p = 0, _9o = $1.r - 1; _9p <= _9o; _9p += 1) {
			/*11020*/
			$1.i = _9p; /*11010*/
			$k[$j++] = Infinity; /*11015*/
			$forall($geti($1.cws, $1.i * ($1.c + 5), $1.c + 5), function() {
				/*11014*/
				$forall($get($1.encs, $k[--$j]), function() {
					/*11013*/
					var _9y = $k[--$j]; /*11013*/
					$k[$j++] = _9y - 48; /*11013*/
				}); /*11013*/
			}); /*11013*/
			$1.sbs = $a(); /*11015*/
			$k[$j++] = Infinity; /*11016*/
			var _A0 = $1.sbs; /*11017*/
			$k[$j++] = 0; /*11017*/
			for (var _A1 = 0, _A2 = _A0.length; _A1 < _A2; _A1++) {
				/*11017*/
				var _A4 = $k[--$j]; /*11017*/
				var _A5 = (_A4 == 1) ? 0 : 1; /*11017*/
				$k[$j++] = _A4; /*11017*/
				for (var _A6 = 0, _A7 = $get(_A0, _A1); _A6 < _A7; _A6++) {
					/*11017*/
					$k[$j++] = _A5 /*11017*/
				} /*11017*/
			} /*11017*/
			$astore($a($counttomark() - 1)); /*11018*/
			var _AA = $k[--$j]; /*11018*/
			var _AB = $k[--$j]; /*11018*/
			var _AC = $k[--$j]; /*11018*/
			$put($1.rowbits, $1.i, _AA); /*11019*/
		} /*11019*/
		$1.symwid = ($1.c * 11) + 57; /*11023*/
		$k[$j++] = Infinity; /*11037*/
		for (var _AI = 0, _AJ = $1.symwid * $1.sepheight; _AI < _AJ; _AI++) {
			/*11025*/
			$k[$j++] = 1; /*11025*/
		} /*11025*/
		for (var _AM = 0, _AL = $1.r - 2; _AM <= _AL; _AM += 1) {
			/*11034*/
			$1.i = _AM; /*11027*/
			for (var _AO = 0, _AP = $1.rowheight; _AO < _AP; _AO++) {
				/*11028*/
				$aload($get($1.rowbits, $1.i)); /*11028*/
			} /*11028*/
			for (var _AU = 0, _AV = $1.sepheight; _AU < _AV; _AU++) {
				/*11033*/
				$k[$j++] = 1; /*11031*/
				$k[$j++] = 1; /*11031*/
				$k[$j++] = 0; /*11031*/
				$k[$j++] = 1; /*11031*/
				$k[$j++] = 0; /*11031*/
				$k[$j++] = 0; /*11031*/
				$k[$j++] = 0; /*11031*/
				$k[$j++] = 0; /*11031*/
				$k[$j++] = 1; /*11031*/
				$k[$j++] = 0; /*11031*/
				$k[$j++] = 0; /*11031*/
				for (var _AX = 0, _AY = $1.symwid - 24; _AX < _AY; _AX++) {
					/*11031*/
					$k[$j++] = 1; /*11031*/
				} /*11031*/
				$k[$j++] = 1; /*11032*/
				$k[$j++] = 1; /*11032*/
				$k[$j++] = 0; /*11032*/
				$k[$j++] = 0; /*11032*/
				$k[$j++] = 0; /*11032*/
				$k[$j++] = 1; /*11032*/
				$k[$j++] = 1; /*11032*/
				$k[$j++] = 1; /*11032*/
				$k[$j++] = 0; /*11032*/
				$k[$j++] = 1; /*11032*/
				$k[$j++] = 0; /*11032*/
				$k[$j++] = 1; /*11032*/
				$k[$j++] = 1; /*11032*/
			} /*11032*/
		} /*11032*/
		for (var _Aa = 0, _Ab = $1.rowheight; _Aa < _Ab; _Aa++) {
			/*11035*/
			$aload($get($1.rowbits, $1.r - 1)); /*11035*/
		} /*11035*/
		for (var _Ah = 0, _Ai = $1.symwid * $1.sepheight; _Ah < _Ai; _Ah++) {
			/*11036*/
			$k[$j++] = 1; /*11036*/
		} /*11036*/
		$1.pixs = $a(); /*11037*/
		var _As = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.symwid],
			["pixy", ~~($1.pixs.length / $1.symwid)],
			["height", (~~($1.pixs.length / $1.symwid)) / 72],
			["width", $1.symwid / 72],
			["opt", $1.options]
		]); /*11047*/
		$k[$j++] = _As; /*11050*/
		if (!$1.dontdraw) { //no-else/*11050*/
			$0.renmatrix(); /*11050*/
		} /*11050*/
	};
	$0.code16k = function() {
		var $1 = {}; /*11079*/
		$1.options = $k[--$j]; /*11081*/
		$1.barcode = $k[--$j]; /*11082*/
		$1.dontdraw = false; /*11084*/
		$1.mode = -1; /*11085*/
		$1.pos = -1; /*11086*/
		$1.rows = 0; /*11087*/
		$1.rowheight = 8; /*11088*/
		$1.sepheight = 1; /*11089*/
		$1.encoding = "auto"; /*11090*/
		$1.raw = false; /*11091*/
		$1.parse = false; /*11092*/
		$1.parsefnc = false; /*11093*/
		$forall($1.options, function() {
			/*11104*/
			var _3 = $k[--$j]; /*11104*/
			$1[$k[--$j]] = _3; /*11104*/
		}); /*11104*/
		$1.mode = ~~$1.mode; /*11106*/
		$1.pos = ~~$1.pos; /*11107*/
		$1.rows = ~~$1.rows; /*11108*/
		$1.rowheight = ~~$1.rowheight; /*11109*/
		$1.sepheight = ~~$1.sepheight; /*11110*/
		if ($1.pos != -1) { //no-else/*11112*/
			$1.rows = 16; /*11112*/
		} /*11112*/
		$1.barlen = $1.barcode.length; /*11135*/
		$1.swa = -1; /*11138*/
		$1.swb = -2; /*11138*/
		$1.swc = -3; /*11138*/
		$1.sa1 = -4; /*11139*/
		$1.sb1 = -5; /*11139*/
		$1.sc1 = -6; /*11139*/
		$1.sa2 = -7; /*11140*/
		$1.sb2 = -8; /*11140*/
		$1.sc2 = -9; /*11140*/
		$1.pad = -10; /*11141*/
		$1.sb3 = -11; /*11141*/
		$1.sc3 = -12; /*11141*/
		$1.fn1 = -13; /*11142*/
		$1.fn2 = -14; /*11142*/
		$1.fn3 = -15; /*11142*/
		$1.fn4 = -16; /*11142*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sb1, $1.sa1, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.pad, $1.pad, $1.pad]), $a([$1.sb2, $1.sa2, $1.sb1]), $a([$1.sc2, $1.sc2, $1.sb2]), $a([$1.sc3, $1.sc3, $1.sb3])]); /*11183*/
		$1.charvals = $a([new Map, new Map, new Map]); /*11186*/
		for (var _2S = 0, _2R = $1.charmaps.length - 1; _2S <= _2R; _2S += 1) {
			/*11195*/
			$1.i = _2S; /*11188*/
			$1.encs = $get($1.charmaps, $1.i); /*11189*/
			for (var _2W = 0; _2W <= 2; _2W += 1) {
				/*11194*/
				$1.j = _2W; /*11191*/
				var _2Z = $get($1.encs, $1.j); /*11192*/
				$k[$j++] = _2Z; /*11192*/
				if ($eq($type(_2Z), 'stringtype')) { //no-else/*11192*/
					var _2c = $get($k[--$j], 0); /*11192*/
					$k[$j++] = _2c; /*11192*/
				} /*11192*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*11193*/
			} /*11193*/
		} /*11193*/
		$1.seta = $get($1.charvals, 0); /*11196*/
		$1.setb = $get($1.charvals, 1); /*11197*/
		$1.setc = $get($1.charvals, 2); /*11198*/
		if ($1.raw) { //no-else/*11200*/
			$1.encoding = "raw"; /*11200*/
		} /*11200*/
		if ($eq($1.encoding, "raw")) { //no-else/*11214*/
			$1.cws = $a($1.barlen); /*11203*/
			$1.i = 0; /*11204*/
			$1.j = 0; /*11204*/
			for (;;) {
				/*11211*/
				if ($1.i == $1.barlen) { //no-else/*11206*/
					break; /*11206*/
				} /*11206*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*11207*/
				$put($1.cws, $1.j, $1.cw); /*11208*/
				$1.i = $1.i + 4; /*11209*/
				$1.j = $1.j + 1; /*11210*/
			} /*11210*/
			$1.cws = $geti($1.cws, 0, $1.j); /*11212*/
			$1.text = ""; /*11213*/
		} /*11213*/
		if ($eq($1.encoding, "auto")) { //no-else/*11677*/
			var _39 = new Map([
				["FNC1", $1.fn1],
				["FNC2", $1.fn2],
				["FNC3", $1.fn3]
			]); /*11221*/
			$1.fncvals = _39; /*11223*/
			$1.msg = $a($1.barlen); /*11224*/
			$1.i = 0; /*11225*/
			$1.j = 0; /*11225*/
			for (;;) {
				/*11239*/
				if ($1.i == $1.barlen) { //no-else/*11226*/
					break; /*11226*/
				} /*11226*/
				$1.char = $get($1.barcode, $1.i); /*11227*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*11235*/
					if ($get($1.barcode, $1.i + 1) != 94) {
						/*11233*/
						$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*11230*/
						$1.i = $1.i + 4; /*11231*/
					} else {
						/*11233*/
						$1.i = $1.i + 1; /*11233*/
					} /*11233*/
				} /*11233*/
				$put($1.msg, $1.j, $1.char); /*11236*/
				$1.i = $1.i + 1; /*11237*/
				$1.j = $1.j + 1; /*11238*/
			} /*11238*/
			$1.msg = $geti($1.msg, 0, $1.j); /*11240*/
			$1.msglen = $1.msg.length; /*11241*/
			$k[$j++] = Infinity; /*11244*/
			for (var _3f = 0, _3g = $1.msglen; _3f < _3g; _3f++) {
				/*11244*/
				$k[$j++] = 0; /*11244*/
			} /*11244*/
			$k[$j++] = 0; /*11244*/
			$1.numSA = $a(); /*11244*/
			$k[$j++] = Infinity; /*11245*/
			for (var _3j = 0, _3k = $1.msglen; _3j < _3k; _3j++) {
				/*11245*/
				$k[$j++] = 0; /*11245*/
			} /*11245*/
			$k[$j++] = 0; /*11245*/
			$1.numEA = $a(); /*11245*/
			for (var _3n = $1.msglen - 1; _3n >= 0; _3n -= 1) {
				/*11255*/
				$1.i = _3n; /*11247*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*11254*/
					if ($get($1.msg, $1.i) >= 128) {
						/*11252*/
						$put($1.numEA, $1.i, $get($1.numEA, $1.i + 1) + 1); /*11250*/
					} else {
						/*11252*/
						$put($1.numSA, $1.i, $get($1.numSA, $1.i + 1) + 1); /*11252*/
					} /*11252*/
				} /*11252*/
			} /*11252*/
			$1.ea = false; /*11258*/
			$1.msgtmp = $a([]); /*11258*/
			for (var _47 = 0, _46 = $1.msglen - 1; _47 <= _46; _47 += 1) {
				/*11273*/
				$1.i = _47; /*11260*/
				$1.c = $get($1.msg, $1.i); /*11261*/
				if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //no-else/*11271*/
					if ($1.ea) {
						/*11263*/
						$k[$j++] = $1.numSA; /*11263*/
					} else {
						/*11263*/
						$k[$j++] = $1.numEA; /*11263*/
					} /*11263*/
					var _4J = $get($k[--$j], $1.i); /*11263*/
					var _4M = ((_4J + $1.i) == $1.msglen) ? 3 : 5; /*11264*/
					if (_4J < _4M) {
						/*11269*/
						$k[$j++] = Infinity; /*11266*/
						$aload($1.msgtmp); /*11266*/
						$k[$j++] = $1.fn4; /*11266*/
						$1.msgtmp = $a(); /*11266*/
					} else {
						/*11269*/
						$k[$j++] = Infinity; /*11268*/
						$aload($1.msgtmp); /*11268*/
						$k[$j++] = $1.fn4; /*11268*/
						$k[$j++] = $1.fn4; /*11268*/
						$1.msgtmp = $a(); /*11268*/
						$1.ea = !$1.ea; /*11269*/
					} /*11269*/
				} /*11269*/
				$k[$j++] = Infinity; /*11272*/
				$aload($1.msgtmp); /*11272*/
				if ($1.c >= 0) {
					/*11272*/
					$k[$j++] = $1.c & 127; /*11272*/
				} else {
					/*11272*/
					$k[$j++] = $1.c; /*11272*/
				} /*11272*/
				$1.msgtmp = $a(); /*11272*/
			} /*11272*/
			$1.msg = $1.msgtmp; /*11274*/
			$1.msglen = $1.msg.length; /*11275*/
			$1.numsscr = function() {
				$1.n = 0; /*11279*/
				$1.s = 0; /*11279*/
				$1.p = $k[--$j]; /*11280*/
				for (;;) {
					/*11291*/
					if ($1.p >= $1.msglen) { //no-else/*11281*/
						break; /*11281*/
					} /*11281*/
					var _4h = $get($1.msg, $1.p); /*11282*/
					var _4j = $get($1.setc, _4h) !== undefined; /*11283*/
					$k[$j++] = _4h; /*11283*/
					if (!_4j) { //no-else/*11283*/
						$j--; /*11283*/
						break; /*11283*/
					} /*11283*/
					if ($k[--$j] == $1.fn1) { //no-else/*11287*/
						if (($1.s % 2) == 0) {
							/*11286*/
							$1.s = $1.s + 1; /*11286*/
						} else {
							/*11286*/
							break; /*11286*/
						} /*11286*/
					} /*11286*/
					$1.n = $1.n + 1; /*11288*/
					$1.s = $1.s + 1; /*11289*/
					$1.p = $1.p + 1; /*11290*/
				} /*11290*/
				$k[$j++] = $1.n; /*11292*/
				$k[$j++] = $1.s; /*11292*/
			}; /*11293*/
			$1.enca = function() {
				$put($1.cws, $1.j, $get($1.seta, $k[--$j])); /*11297*/
				$1.j = $1.j + 1; /*11298*/
			}; /*11299*/
			$1.encb = function() {
				$put($1.cws, $1.j, $get($1.setb, $k[--$j])); /*11301*/
				$1.j = $1.j + 1; /*11302*/
			}; /*11303*/
			$1.encc = function() {
				var _55 = $k[--$j]; /*11305*/
				$k[$j++] = _55; /*11309*/
				if ($ne($type(_55), 'arraytype')) {
					/*11308*/
					var _59 = $get($1.setc, $k[--$j]); /*11306*/
					$k[$j++] = _59; /*11306*/
				} else {
					/*11308*/
					$aload($k[--$j]); /*11308*/
					var _5B = $k[--$j]; /*11308*/
					var _5C = $k[--$j]; /*11308*/
					$k[$j++] = (_5B - 48) + ((_5C - 48) * 10); /*11308*/
				} /*11308*/
				$put($1.cws, $1.j, $k[--$j]); /*11310*/
				$1.j = $1.j + 1; /*11311*/
			}; /*11312*/
			$1.anotb = function() {
				var _5H = $k[--$j]; /*11315*/
				var _5J = $get($1.seta, _5H) !== undefined; /*11315*/
				var _5L = $get($1.setb, _5H) !== undefined; /*11315*/
				$k[$j++] = _5J && (!_5L); /*11315*/
			}; /*11315*/
			$1.bnota = function() {
				var _5M = $k[--$j]; /*11316*/
				var _5O = $get($1.setb, _5M) !== undefined; /*11316*/
				var _5Q = $get($1.seta, _5M) !== undefined; /*11316*/
				$k[$j++] = _5O && (!_5Q); /*11316*/
			}; /*11316*/
			$k[$j++] = Infinity; /*11319*/
			for (var _5S = 0, _5T = $1.msg.length; _5S < _5T; _5S++) {
				/*11319*/
				$k[$j++] = 0; /*11319*/
			} /*11319*/
			$k[$j++] = 9999; /*11319*/
			$1.nextanotb = $a(); /*11319*/
			$k[$j++] = Infinity; /*11320*/
			for (var _5W = 0, _5X = $1.msg.length; _5W < _5X; _5W++) {
				/*11320*/
				$k[$j++] = 0; /*11320*/
			} /*11320*/
			$k[$j++] = 9999; /*11320*/
			$1.nextbnota = $a(); /*11320*/
			for (var _5a = $1.msg.length - 1; _5a >= 0; _5a -= 1) {
				/*11333*/
				$1.i = _5a; /*11322*/
				$k[$j++] = $get($1.msg, $1.i); /*11323*/
				$1.anotb(); /*11323*/
				if ($k[--$j]) {
					/*11326*/
					$put($1.nextanotb, $1.i, 0); /*11324*/
				} else {
					/*11326*/
					$put($1.nextanotb, $1.i, $get($1.nextanotb, $1.i + 1) + 1); /*11326*/
				} /*11326*/
				$k[$j++] = $get($1.msg, $1.i); /*11328*/
				$1.bnota(); /*11328*/
				if ($k[--$j]) {
					/*11331*/
					$put($1.nextbnota, $1.i, 0); /*11329*/
				} else {
					/*11331*/
					$put($1.nextbnota, $1.i, $get($1.nextbnota, $1.i + 1) + 1); /*11331*/
				} /*11331*/
			} /*11331*/
			$1.abeforeb = function() {
				var _5x = $k[--$j]; /*11336*/
				$k[$j++] = $lt($get($1.nextanotb, _5x), $get($1.nextbnota, _5x)); /*11336*/
			}; /*11336*/
			$1.bbeforea = function() {
				var _62 = $k[--$j]; /*11337*/
				$k[$j++] = $lt($get($1.nextbnota, _62), $get($1.nextanotb, _62)); /*11337*/
			}; /*11337*/
			$1.cws = $a(($1.barcode.length * 2) + 3); /*11339*/
			$1.i = 0; /*11342*/
			$1.j = 0; /*11342*/
			for (;;) {
				/*11432*/
				if ($1.pos != -1) { //no-else/*11353*/
					$put($1.cws, 0, (~~($1.pos / 10)) - 1); /*11347*/
					$put($1.cws, 1, ($1.pos % 10) - 1); /*11348*/
					$1.j = 2; /*11349*/
					$1.cset = "setb"; /*11350*/
					$1.mode = 7; /*11351*/
					break; /*11352*/
				} /*11352*/
				if ($1.msglen == 0) { //no-else/*11359*/
					$1.cset = "setb"; /*11356*/
					$1.mode = 1; /*11357*/
					break; /*11358*/
				} /*11358*/
				if ($1.msglen >= 2) { //no-else/*11368*/
					$k[$j++] = $get($1.msg, 0) == $1.fn1; /*11362*/
					$k[$j++] = 1; /*11362*/
					$1.numsscr(); /*11362*/
					var _6J = $k[--$j]; /*11362*/
					var _6K = $k[--$j]; /*11362*/
					if ($k[--$j] && (_6J >= 2)) { //no-else/*11367*/
						$1.cset = "setc"; /*11363*/
						$1.mode = 4; /*11364*/
						$1.i = 1; /*11365*/
						break; /*11366*/
					} /*11366*/
				} /*11366*/
				if ($get($1.msg, 0) == $1.fn1) { //no-else/*11375*/
					$1.cset = "setb"; /*11371*/
					$1.mode = 3; /*11372*/
					$1.i = 1; /*11373*/
					break; /*11374*/
				} /*11374*/
				if ($1.msglen >= 2) { //no-else/*11421*/
					$k[$j++] = 0; /*11378*/
					$1.numsscr(); /*11378*/
					var _6Q = $k[--$j]; /*11378*/
					var _6R = $k[--$j]; /*11378*/
					if ((_6Q >= 2) && ((_6Q % 2) == 0)) { //no-else/*11382*/
						$1.cset = "setc"; /*11379*/
						$1.mode = 2; /*11380*/
						break; /*11381*/
					} /*11381*/
					$k[$j++] = 0; /*11384*/
					$1.numsscr(); /*11384*/
					var _6S = $k[--$j]; /*11384*/
					var _6T = $k[--$j]; /*11384*/
					if ((_6S >= 3) && ((_6S % 2) == 1)) { //no-else/*11390*/
						$k[$j++] = $get($1.msg, 0); /*11385*/
						$1.encb(); /*11385*/
						$1.cset = "setc"; /*11386*/
						$1.mode = 5; /*11387*/
						$1.i = 1; /*11388*/
						break; /*11389*/
					} /*11389*/
					var _6Z = $get($1.setb, $get($1.msg, 0)) !== undefined; /*11392*/
					$k[$j++] = _6Z; /*11393*/
					$k[$j++] = 1; /*11393*/
					$1.numsscr(); /*11393*/
					var _6a = $k[--$j]; /*11393*/
					var _6b = $k[--$j]; /*11393*/
					if ($k[--$j] && ((_6a >= 2) && ((_6a % 2) == 0))) { //no-else/*11399*/
						$k[$j++] = $get($1.msg, 0); /*11394*/
						$1.encb(); /*11394*/
						$1.cset = "setc"; /*11395*/
						$1.mode = 5; /*11396*/
						$1.i = 1; /*11397*/
						break; /*11398*/
					} /*11398*/
					var _6i = $get($1.setb, $get($1.msg, 0)) !== undefined; /*11401*/
					$k[$j++] = _6i; /*11402*/
					$k[$j++] = 1; /*11402*/
					$1.numsscr(); /*11402*/
					var _6j = $k[--$j]; /*11402*/
					var _6k = $k[--$j]; /*11402*/
					if ($k[--$j] && ((_6j >= 3) && ((_6j % 2) == 1))) { //no-else/*11409*/
						$k[$j++] = $get($1.msg, 0); /*11403*/
						$1.encb(); /*11403*/
						$k[$j++] = $get($1.msg, 1); /*11404*/
						$1.encb(); /*11404*/
						$1.cset = "setc"; /*11405*/
						$1.mode = 6; /*11406*/
						$1.i = 2; /*11407*/
						break; /*11408*/
					} /*11408*/
					var _6t = $get($1.setb, $get($1.msg, 0)) !== undefined; /*11411*/
					var _6x = $get($1.setb, $get($1.msg, 1)) !== undefined; /*11412*/
					$k[$j++] = _6t && _6x; /*11413*/
					$k[$j++] = 2; /*11413*/
					$1.numsscr(); /*11413*/
					var _6y = $k[--$j]; /*11413*/
					var _6z = $k[--$j]; /*11413*/
					if ($k[--$j] && ((_6y >= 2) && ((_6y % 2) == 0))) { //no-else/*11420*/
						$k[$j++] = $get($1.msg, 0); /*11414*/
						$1.encb(); /*11414*/
						$k[$j++] = $get($1.msg, 1); /*11415*/
						$1.encb(); /*11415*/
						$1.cset = "setc"; /*11416*/
						$1.mode = 6; /*11417*/
						$1.i = 2; /*11418*/
						break; /*11419*/
					} /*11419*/
				} /*11419*/
				$k[$j++] = 0; /*11423*/
				$1.abeforeb(); /*11423*/
				if ($k[--$j]) { //no-else/*11427*/
					$1.cset = "seta"; /*11424*/
					$1.mode = 0; /*11425*/
					break; /*11426*/
				} /*11426*/
				$1.cset = "setb"; /*11429*/
				$1.mode = 1; /*11430*/
				break; /*11431*/
			} /*11431*/
			for (;;) {
				/*11675*/
				if ($1.i == $1.msglen) { //no-else/*11435*/
					break; /*11435*/
				} /*11435*/
				$k[$j++] = $1.i; /*11437*/
				$1.numsscr(); /*11437*/
				$1.nums = $k[--$j]; /*11437*/
				$1.nchars = $k[--$j]; /*11437*/
				for (;;) {
					/*11673*/
					if ($eq($1.cset, "seta")) { //no-else/*11514*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11451*/
							$k[$j++] = $get($1.msg, $1.i); /*11444*/
							$1.bnota(); /*11444*/
							$k[$j++] = $1.i + 1; /*11445*/
							$1.abeforeb(); /*11445*/
							var _7I = $k[--$j]; /*11445*/
							if (($k[--$j] && _7I)) { //no-else/*11450*/
								$k[$j++] = $1.sb1; /*11446*/
								$1.enca(); /*11446*/
								$k[$j++] = $get($1.msg, $1.i); /*11447*/
								$1.encb(); /*11447*/
								$1.i = $1.i + 1; /*11448*/
								break; /*11449*/
							} /*11449*/
						} /*11449*/
						if ($1.i < ($1.msglen - 2)) { //no-else/*11463*/
							$k[$j++] = $get($1.msg, $1.i); /*11454*/
							$1.bnota(); /*11454*/
							$k[$j++] = $get($1.msg, $1.i + 1); /*11455*/
							$1.bnota(); /*11455*/
							var _7X = $k[--$j]; /*11455*/
							var _7Y = $k[--$j]; /*11455*/
							$k[$j++] = $an(_7Y, _7X); /*11456*/
							$k[$j++] = $1.i + 2; /*11456*/
							$1.abeforeb(); /*11456*/
							var _7a = $k[--$j]; /*11456*/
							if (($k[--$j] && _7a)) { //no-else/*11462*/
								$k[$j++] = $1.sb2; /*11457*/
								$1.enca(); /*11457*/
								$k[$j++] = $get($1.msg, $1.i); /*11458*/
								$1.encb(); /*11458*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11459*/
								$1.encb(); /*11459*/
								$1.i = $1.i + 2; /*11460*/
								break; /*11461*/
							} /*11461*/
						} /*11461*/
						$k[$j++] = $get($1.msg, $1.i); /*11465*/
						$1.bnota(); /*11465*/
						if ($k[--$j]) { //no-else/*11469*/
							$k[$j++] = $1.swb; /*11466*/
							$1.enca(); /*11466*/
							$1.cset = "setb"; /*11467*/
							break; /*11468*/
						} /*11468*/
						if ($1.i < ($1.msglen - 4)) { //no-else/*11486*/
							var _7w = $get($1.seta, $get($1.msg, $1.i + 4)) !== undefined; /*11473*/
							if (($1.nums == 4) && _7w) { //no-else/*11485*/
								$k[$j++] = $1.sc2; /*11474*/
								$1.enca(); /*11474*/
								for (var _7y = 0, _7z = 2; _7y < _7z; _7y++) {
									/*11483*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11481*/
										$k[$j++] = $1.fn1; /*11477*/
										$1.encc(); /*11477*/
										$1.i = $1.i + 1; /*11478*/
									} else {
										/*11481*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11480*/
										$1.encc(); /*11480*/
										$1.i = $1.i + 2; /*11481*/
									} /*11481*/
								} /*11481*/
								break; /*11484*/
							} /*11484*/
						} /*11484*/
						if ($1.i < ($1.msglen - 6)) { //no-else/*11503*/
							var _8H = $get($1.seta, $get($1.msg, $1.i + 6)) !== undefined; /*11490*/
							if (($1.nums == 6) && _8H) { //no-else/*11502*/
								$k[$j++] = $1.sc3; /*11491*/
								$1.enca(); /*11491*/
								for (var _8J = 0, _8K = 3; _8J < _8K; _8J++) {
									/*11500*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11498*/
										$k[$j++] = $1.fn1; /*11494*/
										$1.encc(); /*11494*/
										$1.i = $1.i + 1; /*11495*/
									} else {
										/*11498*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11497*/
										$1.encc(); /*11497*/
										$1.i = $1.i + 2; /*11498*/
									} /*11498*/
								} /*11498*/
								break; /*11501*/
							} /*11501*/
						} /*11501*/
						if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //no-else/*11509*/
							$k[$j++] = $1.swc; /*11506*/
							$1.enca(); /*11506*/
							$1.cset = "setc"; /*11507*/
							break; /*11508*/
						} /*11508*/
						$k[$j++] = $get($1.msg, $1.i); /*11511*/
						$1.enca(); /*11511*/
						$1.i = $1.i + 1; /*11512*/
						break; /*11513*/
					} /*11513*/
					if ($eq($1.cset, "setb")) { //no-else/*11588*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11525*/
							$k[$j++] = $get($1.msg, $1.i); /*11518*/
							$1.anotb(); /*11518*/
							$k[$j++] = $1.i + 1; /*11519*/
							$1.bbeforea(); /*11519*/
							var _8j = $k[--$j]; /*11519*/
							if (($k[--$j] && _8j)) { //no-else/*11524*/
								$k[$j++] = $1.sa1; /*11520*/
								$1.encb(); /*11520*/
								$k[$j++] = $get($1.msg, $1.i); /*11521*/
								$1.enca(); /*11521*/
								$1.i = $1.i + 1; /*11522*/
								break; /*11523*/
							} /*11523*/
						} /*11523*/
						if ($1.i < ($1.msglen - 2)) { //no-else/*11537*/
							$k[$j++] = $get($1.msg, $1.i); /*11528*/
							$1.anotb(); /*11528*/
							$k[$j++] = $get($1.msg, $1.i + 1); /*11529*/
							$1.anotb(); /*11529*/
							var _8y = $k[--$j]; /*11529*/
							var _8z = $k[--$j]; /*11529*/
							$k[$j++] = $an(_8z, _8y); /*11530*/
							$k[$j++] = $1.i + 2; /*11530*/
							$1.bbeforea(); /*11530*/
							var _91 = $k[--$j]; /*11530*/
							if (($k[--$j] && _91)) { //no-else/*11536*/
								$k[$j++] = $1.sa2; /*11531*/
								$1.encb(); /*11531*/
								$k[$j++] = $get($1.msg, $1.i); /*11532*/
								$1.enca(); /*11532*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11533*/
								$1.enca(); /*11533*/
								$1.i = $1.i + 2; /*11534*/
								break; /*11535*/
							} /*11535*/
						} /*11535*/
						$k[$j++] = $get($1.msg, $1.i); /*11539*/
						$1.anotb(); /*11539*/
						if ($k[--$j]) { //no-else/*11543*/
							$k[$j++] = $1.swa; /*11540*/
							$1.encb(); /*11540*/
							$1.cset = "seta"; /*11541*/
							break; /*11542*/
						} /*11542*/
						if ($1.i < ($1.msglen - 4)) { //no-else/*11560*/
							var _9N = $get($1.setb, $get($1.msg, $1.i + 4)) !== undefined; /*11547*/
							if (($1.nums == 4) && _9N) { //no-else/*11559*/
								$k[$j++] = $1.sc2; /*11548*/
								$1.encb(); /*11548*/
								for (var _9P = 0, _9Q = 2; _9P < _9Q; _9P++) {
									/*11557*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11555*/
										$k[$j++] = $1.fn1; /*11551*/
										$1.encc(); /*11551*/
										$1.i = $1.i + 1; /*11552*/
									} else {
										/*11555*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11554*/
										$1.encc(); /*11554*/
										$1.i = $1.i + 2; /*11555*/
									} /*11555*/
								} /*11555*/
								break; /*11558*/
							} /*11558*/
						} /*11558*/
						if ($1.i < ($1.msglen - 6)) { //no-else/*11577*/
							var _9i = $get($1.setb, $get($1.msg, $1.i + 6)) !== undefined; /*11564*/
							if (($1.nums == 6) && _9i) { //no-else/*11576*/
								$k[$j++] = $1.sc3; /*11565*/
								$1.encb(); /*11565*/
								for (var _9k = 0, _9l = 3; _9k < _9l; _9k++) {
									/*11574*/
									if ($get($1.msg, $1.i) == $1.fn1) {
										/*11572*/
										$k[$j++] = $1.fn1; /*11568*/
										$1.encc(); /*11568*/
										$1.i = $1.i + 1; /*11569*/
									} else {
										/*11572*/
										$k[$j++] = $geti($1.msg, $1.i, 2); /*11571*/
										$1.encc(); /*11571*/
										$1.i = $1.i + 2; /*11572*/
									} /*11572*/
								} /*11572*/
								break; /*11575*/
							} /*11575*/
						} /*11575*/
						if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //no-else/*11583*/
							$k[$j++] = $1.swc; /*11580*/
							$1.encb(); /*11580*/
							$1.cset = "setc"; /*11581*/
							break; /*11582*/
						} /*11582*/
						$k[$j++] = $get($1.msg, $1.i); /*11585*/
						$1.encb(); /*11585*/
						$1.i = $1.i + 1; /*11586*/
						break; /*11587*/
					} /*11587*/
					if ($eq($1.cset, "setc")) { //no-else/*11671*/
						if ($1.nums >= 2) { //no-else/*11600*/
							if ($get($1.msg, $1.i) == $1.fn1) {
								/*11597*/
								$k[$j++] = $1.fn1; /*11593*/
								$1.encc(); /*11593*/
								$1.i = $1.i + 1; /*11594*/
							} else {
								/*11597*/
								$k[$j++] = $geti($1.msg, $1.i, 2); /*11596*/
								$1.encc(); /*11596*/
								$1.i = $1.i + 2; /*11597*/
							} /*11597*/
							break; /*11599*/
						} /*11599*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11610*/
							var _AL = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11603*/
							$k[$j++] = _AL; /*11604*/
							$k[$j++] = $1.i + 1; /*11604*/
							$1.numsscr(); /*11604*/
							var _AN = $k[--$j]; /*11604*/
							var _AO = $k[--$j]; /*11604*/
							if ($k[--$j] && ((_AN >= 2) && ((_AN % 2) == 0))) { //no-else/*11609*/
								$k[$j++] = $1.sb1; /*11605*/
								$1.encc(); /*11605*/
								$k[$j++] = $get($1.msg, $1.i); /*11606*/
								$1.encb(); /*11606*/
								$1.i = $1.i + 1; /*11607*/
								break; /*11608*/
							} /*11608*/
						} /*11608*/
						if ($1.i < ($1.msglen - 1)) { //no-else/*11621*/
							var _Ab = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11613*/
							$k[$j++] = _Ab; /*11614*/
							$k[$j++] = $1.i + 1; /*11614*/
							$1.numsscr(); /*11614*/
							var _Ad = $k[--$j]; /*11614*/
							var _Ae = $k[--$j]; /*11614*/
							if ($k[--$j] && ((_Ad >= 3) && ((_Ad % 2) == 1))) { //no-else/*11620*/
								$k[$j++] = $1.sb2; /*11615*/
								$1.encc(); /*11615*/
								$k[$j++] = $get($1.msg, $1.i); /*11616*/
								$1.encb(); /*11616*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11617*/
								$1.encb(); /*11617*/
								$1.i = $1.i + 2; /*11618*/
								break; /*11619*/
							} /*11619*/
						} /*11619*/
						if ($1.i < ($1.msglen - 2)) { //no-else/*11633*/
							var _Au = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11624*/
							var _Az = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; /*11625*/
							$k[$j++] = _Au && _Az; /*11626*/
							$k[$j++] = $1.i + 2; /*11626*/
							$1.numsscr(); /*11626*/
							var _B1 = $k[--$j]; /*11626*/
							var _B2 = $k[--$j]; /*11626*/
							if ($k[--$j] && ((_B1 >= 2) && ((_B1 % 2) == 0))) { //no-else/*11632*/
								$k[$j++] = $1.sb2; /*11627*/
								$1.encc(); /*11627*/
								$k[$j++] = $get($1.msg, $1.i); /*11628*/
								$1.encb(); /*11628*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11629*/
								$1.encb(); /*11629*/
								$1.i = $1.i + 2; /*11630*/
								break; /*11631*/
							} /*11631*/
						} /*11631*/
						if ($1.i < ($1.msglen - 3)) { //no-else/*11646*/
							var _BI = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11636*/
							var _BN = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; /*11637*/
							$k[$j++] = _BI && _BN; /*11638*/
							$k[$j++] = $1.i + 2; /*11638*/
							$1.numsscr(); /*11638*/
							var _BP = $k[--$j]; /*11638*/
							var _BQ = $k[--$j]; /*11638*/
							if ($k[--$j] && ((_BP >= 3) && ((_BP % 2) == 1))) { //no-else/*11645*/
								$k[$j++] = $1.sb3; /*11639*/
								$1.encc(); /*11639*/
								$k[$j++] = $get($1.msg, $1.i); /*11640*/
								$1.encb(); /*11640*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11641*/
								$1.encb(); /*11641*/
								$k[$j++] = $get($1.msg, $1.i + 2); /*11642*/
								$1.encb(); /*11642*/
								$1.i = $1.i + 3; /*11643*/
								break; /*11644*/
							} /*11644*/
						} /*11644*/
						if ($1.i < ($1.msglen - 3)) { //no-else/*11660*/
							var _Bj = $get($1.setb, $get($1.msg, $1.i)) !== undefined; /*11649*/
							var _Bo = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; /*11650*/
							var _Bt = $get($1.setb, $get($1.msg, $1.i + 2)) !== undefined; /*11651*/
							$k[$j++] = (_Bj && _Bo) && _Bt; /*11652*/
							$k[$j++] = $1.i + 3; /*11652*/
							$1.numsscr(); /*11652*/
							var _Bv = $k[--$j]; /*11652*/
							var _Bw = $k[--$j]; /*11652*/
							if ($k[--$j] && ((_Bv >= 2) && ((_Bv % 2) == 0))) { //no-else/*11659*/
								$k[$j++] = $1.sb3; /*11653*/
								$1.encc(); /*11653*/
								$k[$j++] = $get($1.msg, $1.i); /*11654*/
								$1.encb(); /*11654*/
								$k[$j++] = $get($1.msg, $1.i + 1); /*11655*/
								$1.encb(); /*11655*/
								$k[$j++] = $get($1.msg, $1.i + 2); /*11656*/
								$1.encb(); /*11656*/
								$1.i = $1.i + 3; /*11657*/
								break; /*11658*/
							} /*11658*/
						} /*11658*/
						$k[$j++] = $1.i; /*11662*/
						$1.abeforeb(); /*11662*/
						if ($k[--$j]) { //no-else/*11666*/
							$k[$j++] = $1.swa; /*11663*/
							$1.encc(); /*11663*/
							$1.cset = "seta"; /*11664*/
							break; /*11665*/
						} /*11665*/
						$k[$j++] = $1.swb; /*11668*/
						$1.encc(); /*11668*/
						$1.cset = "setb"; /*11669*/
						break; /*11670*/
					} /*11670*/
					break; /*11672*/
				} /*11672*/
			} /*11672*/
			$1.cws = $geti($1.cws, 0, $1.j); /*11676*/
		} /*11676*/
		$1.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); /*11697*/
		$1.urows = $1.rows; /*11700*/
		$1.i = 0; /*11701*/
		for (;;) {
			/*11711*/
			$1.m = $get($1.metrics, $1.i); /*11703*/
			$1.r = $get($1.m, 0); /*11704*/
			$1.dcws = $get($1.m, 1); /*11705*/
			$1.okay = true; /*11706*/
			if (($1.urows != 0) && ($1.urows != $1.r)) { //no-else/*11707*/
				$1.okay = false; /*11707*/
			} /*11707*/
			if ($1.cws.length > $1.dcws) { //no-else/*11708*/
				$1.okay = false; /*11708*/
			} /*11708*/
			if ($1.okay) { //no-else/*11709*/
				break; /*11709*/
			} /*11709*/
			$1.i = $1.i + 1; /*11710*/
		} /*11710*/
		$k[$j++] = Infinity; /*11714*/
		$aload($1.cws); /*11714*/
		for (var _Co = 0, _Cp = $1.dcws - $1.cws.length; _Co < _Cp; _Co++) {
			/*11714*/
			$k[$j++] = 103; /*11714*/
		} /*11714*/
		$1.cws = $a(); /*11714*/
		$k[$j++] = Infinity; /*11717*/
		$k[$j++] = (($1.r - 2) * 7) + $1.mode; /*11717*/
		$aload($1.cws); /*11717*/
		$1.cws = $a(); /*11717*/
		$k[$j++] = 0; /*11720*/
		for (var _Cx = 0, _Cw = $1.dcws; _Cx <= _Cw; _Cx += 1) {
			/*11720*/
			var _D0 = $k[--$j]; /*11720*/
			$k[$j++] = _D0 + ((_Cx + 2) * $get($1.cws, _Cx)); /*11720*/
		} /*11720*/
		$1.c1 = $k[--$j] % 107; /*11721*/
		$k[$j++] = 0; /*11722*/
		for (var _D4 = 0, _D3 = $1.dcws; _D4 <= _D3; _D4 += 1) {
			/*11722*/
			var _D7 = $k[--$j]; /*11722*/
			$k[$j++] = _D7 + ((_D4 + 1) * $get($1.cws, _D4)); /*11722*/
		} /*11722*/
		$1.c2 = ($k[--$j] + ($1.c1 * ($1.dcws + 2))) % 107; /*11723*/
		$k[$j++] = Infinity; /*11724*/
		$aload($1.cws); /*11724*/
		$k[$j++] = $1.c1; /*11724*/
		$k[$j++] = $1.c2; /*11724*/
		$1.cws = $a(); /*11724*/
		$1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); /*11744*/
		$1.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); /*11750*/
		$1.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); /*11754*/
		$1.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); /*11758*/
		if (($1.pos == -1) || (((~~($1.pos / 10)) % 2) == 1)) {
			/*11762*/
			$1.stopencs = $1.stopencsodd; /*11760*/
		} else {
			/*11762*/
			$1.stopencs = $1.stopencseven; /*11762*/
		} /*11762*/
		$1.rowbits = $a($1.r); /*11766*/
		for (var _DR = 0, _DQ = $1.r - 1; _DR <= _DQ; _DR += 1) {
			/*11783*/
			$1.i = _DR; /*11768*/
			$k[$j++] = Infinity; /*11778*/
			$k[$j++] = 10; /*11771*/
			$forall($get($1.startencs, $1.i), function() {
				/*11771*/
				var _DV = $k[--$j]; /*11771*/
				$k[$j++] = _DV - 48; /*11771*/
			}); /*11771*/
			$k[$j++] = 1; /*11775*/
			$forall($geti($1.cws, $1.i * 5, 5), function() {
				/*11775*/
				$forall($get($1.encs, $k[--$j]), function() {
					/*11774*/
					var _Dc = $k[--$j]; /*11774*/
					$k[$j++] = _Dc - 48; /*11774*/
				}); /*11774*/
			}); /*11774*/
			$forall($get($1.stopencs, $1.i), function() {
				/*11776*/
				var _Dg = $k[--$j]; /*11776*/
				$k[$j++] = _Dg - 48; /*11776*/
			}); /*11776*/
			$k[$j++] = 1; /*11777*/
			$1.sbs = $a(); /*11778*/
			$k[$j++] = Infinity; /*11779*/
			var _Di = $1.sbs; /*11780*/
			$k[$j++] = 1; /*11780*/
			for (var _Dj = 0, _Dk = _Di.length; _Dj < _Dk; _Dj++) {
				/*11780*/
				var _Dm = $k[--$j]; /*11780*/
				var _Dn = (_Dm == 0) ? 1 : 0; /*11780*/
				$k[$j++] = _Dm; /*11780*/
				for (var _Do = 0, _Dp = $get(_Di, _Dj); _Do < _Dp; _Do++) {
					/*11780*/
					$k[$j++] = _Dn /*11780*/
				} /*11780*/
			} /*11780*/
			$astore($a($counttomark() - 1)); /*11781*/
			var _Ds = $k[--$j]; /*11781*/
			var _Dt = $k[--$j]; /*11781*/
			var _Du = $k[--$j]; /*11781*/
			$put($1.rowbits, $1.i, _Ds); /*11782*/
		} /*11782*/
		$k[$j++] = Infinity; /*11795*/
		for (var _Dy = 0, _Dz = 81 * $1.sepheight; _Dy < _Dz; _Dy++) {
			/*11787*/
			$k[$j++] = 1; /*11787*/
		} /*11787*/
		for (var _E2 = 0, _E1 = $1.r - 2; _E2 <= _E1; _E2 += 1) {
			/*11792*/
			$1.i = _E2; /*11789*/
			for (var _E4 = 0, _E5 = $1.rowheight; _E4 < _E5; _E4++) {
				/*11790*/
				$aload($get($1.rowbits, $1.i)); /*11790*/
			} /*11790*/
			for (var _EA = 0, _EB = $1.sepheight; _EA < _EB; _EA++) {
				/*11791*/
				for (var _EC = 0, _ED = 10; _EC < _ED; _EC++) {
					/*11791*/
					$k[$j++] = 0; /*11791*/
				} /*11791*/
				for (var _EE = 0, _EF = 70; _EE < _EF; _EE++) {
					/*11791*/
					$k[$j++] = 1; /*11791*/
				} /*11791*/
				$k[$j++] = 0; /*11791*/
			} /*11791*/
		} /*11791*/
		for (var _EH = 0, _EI = $1.rowheight; _EH < _EI; _EH++) {
			/*11793*/
			$aload($get($1.rowbits, $1.r - 1)); /*11793*/
		} /*11793*/
		for (var _EN = 0, _EO = 81 * $1.sepheight; _EN < _EO; _EN++) {
			/*11794*/
			$k[$j++] = 1; /*11794*/
		} /*11794*/
		$1.pixs = $a(); /*11795*/
		var _EU = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", 81],
			["pixy", ~~($1.pixs.length / 81)],
			["height", (~~($1.pixs.length / 81)) / 72],
			["width", 81 / 72],
			["opt", $1.options]
		]); /*11805*/
		$k[$j++] = _EU; /*11808*/
		if (!$1.dontdraw) { //no-else/*11808*/
			$0.renmatrix(); /*11808*/
		} /*11808*/
	};
	$0.code49 = function() {
		var $1 = {}; /*11837*/
		$1.options = $k[--$j]; /*11839*/
		$1.barcode = $k[--$j]; /*11840*/
		$1.dontdraw = false; /*11842*/
		$1.mode = -1; /*11843*/
		$1.pos = -1; /*11844*/
		$1.rows = 0; /*11845*/
		$1.rowheight = 8; /*11846*/
		$1.sepheight = 1; /*11847*/
		$1.parse = false; /*11848*/
		$1.parsefnc = false; /*11849*/
		$forall($1.options, function() {
			/*11860*/
			var _3 = $k[--$j]; /*11860*/
			$1[$k[--$j]] = _3; /*11860*/
		}); /*11860*/
		$1.mode = ~~$1.mode; /*11862*/
		$1.pos = ~~$1.pos; /*11863*/
		$1.rows = ~~$1.rows; /*11864*/
		$1.rowheight = ~~$1.rowheight; /*11865*/
		$1.sepheight = ~~$1.sepheight; /*11866*/
		$1.barlen = $1.barcode.length; /*11889*/
		$1.s1 = -1; /*11892*/
		$1.s2 = -2; /*11892*/
		$1.fn1 = -3; /*11892*/
		$1.fn2 = -4; /*11892*/
		$1.fn3 = -5; /*11892*/
		$1.ns = -6; /*11892*/
		var _E = new Map([
			["FNC1", $1.fn1],
			["FNC2", $1.fn2],
			["FNC3", $1.fn3]
		]); /*11896*/
		$1.fncvals = _E; /*11897*/
		$1.msg = $a($1.barlen); /*11898*/
		$1.i = 0; /*11899*/
		$1.j = 0; /*11899*/
		for (;;) {
			/*11913*/
			if ($1.i == $1.barlen) { //no-else/*11900*/
				break; /*11900*/
			} /*11900*/
			$1.char = $get($1.barcode, $1.i); /*11901*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*11909*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*11907*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*11904*/
					$1.i = $1.i + 4; /*11905*/
				} else {
					/*11907*/
					$1.i = $1.i + 1; /*11907*/
				} /*11907*/
			} /*11907*/
			$put($1.msg, $1.j, $1.char); /*11910*/
			$1.i = $1.i + 1; /*11911*/
			$1.j = $1.j + 1; /*11912*/
		} /*11912*/
		$1.msg = $geti($1.msg, 0, $1.j); /*11914*/
		$1.msglen = $1.msg.length; /*11915*/
		$1.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $1.s1, $1.s2, $1.fn1, $1.fn2, $1.fn3, $1.ns]); /*11924*/
		$1.charvals = new Map; /*11927*/
		for (var _q = 0; _q <= 48; _q += 1) {
			/*11933*/
			$1.i = _q; /*11929*/
			var _t = $get($1.charmap, $1.i); /*11930*/
			$k[$j++] = _t; /*11931*/
			if ($eq($type(_t), 'stringtype')) { //no-else/*11931*/
				var _w = $get($k[--$j], 0); /*11931*/
				$k[$j++] = _w; /*11931*/
			} /*11931*/
			$put($1.charvals, $k[--$j], $1.i); /*11932*/
		} /*11932*/
		$1.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); /*11945*/
		for (var _11 = 0; _11 <= 127; _11 += 1) {
			/*11955*/
			$1.i = _11; /*11947*/
			var _14 = $get($1.combos, $1.i); /*11948*/
			$1.c1 = $get(_14, 0); /*11948*/
			$1.c2 = $get(_14, 1); /*11948*/
			if ($1.c1 == 49) { //no-else/*11951*/
				$put($1.charvals, $1.i, $a([$get($1.charvals, $1.s1), $get($1.charvals, $1.c2)])); /*11950*/
			} /*11950*/
			if ($1.c1 == 50) { //no-else/*11954*/
				$put($1.charvals, $1.i, $a([$get($1.charvals, $1.s2), $get($1.charvals, $1.c2)])); /*11953*/
			} /*11953*/
		} /*11953*/
		$1.encodealpha = function() {
			var _1T = $get($1.charvals, $k[--$j]); /*11958*/
			$k[$j++] = _1T; /*11959*/
			if ($ne($type(_1T), 'arraytype')) { //no-else/*11959*/
				$astore($a(1)); /*11959*/
			} /*11959*/
			var _1W = $k[--$j]; /*11960*/
			$puti($1.cws, $1.j, _1W); /*11960*/
			$1.j = _1W.length + $1.j; /*11961*/
		}; /*11962*/
		$1.base48 = function() {
			var _1a = $k[--$j]; /*11965*/
			$k[$j++] = 0; /*11965*/
			$forall(_1a, function() {
				/*11965*/
				var _1b = $k[--$j]; /*11965*/
				var _1c = $k[--$j]; /*11965*/
				$k[$j++] = (_1b - 48) + (_1c * 10); /*11965*/
			}); /*11965*/
			$k[$j++] = Infinity; /*11966*/
			var _1d = $k[--$j]; /*11966*/
			var _1e = $k[--$j]; /*11966*/
			var _1f = $k[--$j]; /*11966*/
			$k[$j++] = _1d; /*11966*/
			$k[$j++] = _1e; /*11966*/
			for (var _1g = 0, _1h = _1f - 1; _1g < _1h; _1g++) {
				/*11966*/
				var _1i = $k[--$j]; /*11966*/
				$k[$j++] = _1i % 48; /*11966*/
				$k[$j++] = ~~(_1i / 48); /*11966*/
			} /*11966*/
			var _1j = $a(); /*11966*/
			$k[$j++] = _1j; /*11967*/
			$k[$j++] = Infinity; /*11967*/
			var _1k = $k[--$j]; /*11967*/
			var _1l = $k[--$j]; /*11967*/
			$k[$j++] = _1k; /*11967*/
			$k[$j++] = _1l; /*11967*/
			for (var _1m = _1l.length - 1; _1m >= 0; _1m -= 1) {
				/*11967*/
				var _1n = $k[--$j]; /*11967*/
				$k[$j++] = $get(_1n, _1m); /*11967*/
				$k[$j++] = _1n; /*11967*/
			} /*11967*/
			$j--; /*11967*/
			var _1p = $a(); /*11967*/
			$puti($1.cws, $1.j, _1p); /*11968*/
			$1.j = _1p.length + $1.j; /*11969*/
		}; /*11970*/
		$1.encodenumeric = function() {
			$1.nums = $k[--$j]; /*11973*/
			var _1v = $1.nums.length; /*11974*/
			var _1w = _1v % 5; /*11974*/
			$k[$j++] = 'pre'; /*11974*/
			$k[$j++] = _1v; /*11974*/
			$k[$j++] = _1w; /*11974*/
			if (_1w != 2) {
				/*11974*/
				var _1x = $k[--$j]; /*11974*/
				var _1y = $k[--$j]; /*11974*/
				$k[$j++] = _1y - _1x; /*11974*/
			} else {
				/*11974*/
				var _1z = $k[--$j]; /*11974*/
				var _20 = $k[--$j]; /*11974*/
				$k[$j++] = (_20 - _1z) - 5; /*11974*/
			} /*11974*/
			var _21 = $k[--$j]; /*11974*/
			$1[$k[--$j]] = _21; /*11974*/
			for (var _25 = 0, _24 = $1.pre - 1; _25 <= _24; _25 += 5) {
				/*11975*/
				$k[$j++] = 3; /*11975*/
				$k[$j++] = $geti($1.nums, _25, 5); /*11975*/
				$1.base48(); /*11975*/
			} /*11975*/
			$1.nums = $geti($1.nums, $1.pre, $1.nums.length - $1.pre); /*11976*/
			var _2E = $1.nums.length; /*11978*/
			$k[$j++] = _2E; /*11978*/
			if (_2E == 1) { //no-else/*11978*/
				$k[$j++] = $get($1.nums, $1.i); /*11978*/
				$1.encodealpha(); /*11978*/
			} /*11978*/
			var _2I = $k[--$j]; /*11979*/
			$k[$j++] = _2I; /*11979*/
			if (_2I == 3) { //no-else/*11979*/
				$k[$j++] = 2; /*11979*/
				$k[$j++] = $1.nums; /*11979*/
				$1.base48(); /*11979*/
			} /*11979*/
			var _2K = $k[--$j]; /*11980*/
			$k[$j++] = _2K; /*11980*/
			if (_2K == 4) { //no-else/*11980*/
				$k[$j++] = 3; /*11980*/
				$k[$j++] = Infinity; /*11980*/
				$k[$j++] = 49; /*11980*/
				$k[$j++] = 48; /*11980*/
				$aload($1.nums); /*11980*/
				var _2M = $a(); /*11980*/
				$k[$j++] = _2M; /*11980*/
				$1.base48(); /*11980*/
			} /*11980*/
			if ($k[--$j] == 7) { //no-else/*11984*/
				$k[$j++] = 3; /*11982*/
				$k[$j++] = Infinity; /*11982*/
				$k[$j++] = 49; /*11982*/
				$k[$j++] = 48; /*11982*/
				$aload($geti($1.nums, 0, 4)); /*11982*/
				var _2Q = $a(); /*11982*/
				$k[$j++] = _2Q; /*11982*/
				$1.base48(); /*11982*/
				$k[$j++] = 2; /*11983*/
				$k[$j++] = $geti($1.nums, 4, 3); /*11983*/
				$1.base48(); /*11983*/
			} /*11983*/
		}; /*11985*/
		$k[$j++] = Infinity; /*11988*/
		for (var _2U = 0, _2V = $1.msglen; _2U < _2V; _2U++) {
			/*11988*/
			$k[$j++] = 0; /*11988*/
		} /*11988*/
		$k[$j++] = 0; /*11988*/
		$1.numericruns = $a(); /*11988*/
		for (var _2Y = $1.msglen - 1; _2Y >= 0; _2Y -= 1) {
			/*11997*/
			$1.i = _2Y; /*11990*/
			var _2b = $get($1.msg, $1.i); /*11991*/
			if ((_2b >= 48) && (_2b <= 57)) {
				/*11995*/
				$put($1.numericruns, $1.i, $get($1.numericruns, $1.i + 1) + 1); /*11993*/
			} else {
				/*11995*/
				$put($1.numericruns, $1.i, 0); /*11995*/
			} /*11995*/
		} /*11995*/
		if ($1.mode == -1) { //no-else/*12009*/
			for (;;) {
				/*12008*/
				if ($1.pos != -1) { //no-else/*12002*/
					$1.mode = 3; /*12002*/
					break; /*12002*/
				} /*12002*/
				if ($get($1.numericruns, 0) >= 5) { //no-else/*12003*/
					$1.mode = 2; /*12003*/
					break; /*12003*/
				} /*12003*/
				var _2q = $get($1.charvals, $get($1.msg, 0)); /*12004*/
				$k[$j++] = _2q; /*12005*/
				if ($ne($type(_2q), 'arraytype')) { //no-else/*12005*/
					$j--; /*12005*/
					$1.mode = 0; /*12005*/
					break; /*12005*/
				} /*12005*/
				var _2u = ($get($k[--$j], 0) == 43) ? 4 : 5; /*12006*/
				$1.mode = _2u; /*12006*/
				break; /*12007*/
			} /*12007*/
		} /*12007*/
		$1.cws = $a(($1.msglen * 2) + 1); /*12011*/
		$1.method = "alpha"; /*12012*/
		$1.i = -1; /*12012*/
		$1.j = -1; /*12012*/
		if (($1.mode == 0) || ($1.mode == 1)) { //no-else/*12015*/
			$1.method = "alpha"; /*12015*/
			$1.i = 0; /*12015*/
			$1.j = 0; /*12015*/
		} /*12015*/
		if ($1.mode == 2) { //no-else/*12016*/
			$1.method = "numeric"; /*12016*/
			$1.i = 0; /*12016*/
			$1.j = 0; /*12016*/
		} /*12016*/
		if ($1.mode == 3) { //no-else/*12030*/
			$1.posval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); /*12027*/
			$k[$j++] = $1.cws; /*12028*/
			$k[$j++] = 0; /*12028*/
			for (var _33 = 0; _33 <= 43; _33 += 1) {
				/*12028*/
				$k[$j++] = _33; /*12028*/
				if ($get($1.posval, _33) != $1.pos) { //no-else/*12028*/
					$j--; /*12028*/
				} /*12028*/
			} /*12028*/
			var _37 = $k[--$j]; /*12028*/
			var _38 = $k[--$j]; /*12028*/
			$put($k[--$j], _38, _37 + 1); /*12028*/
			$1.method = "alpha"; /*12029*/
			$1.i = 0; /*12029*/
			$1.j = 1; /*12029*/
		} /*12029*/
		if (($1.mode == 4) || ($1.mode == 5)) { //no-else/*12034*/
			$put($1.cws, 0, $get($get($1.charvals, $get($1.msg, 0)), 1)); /*12032*/
			$1.method = "alpha"; /*12033*/
			$1.i = 1; /*12033*/
			$1.j = 1; /*12033*/
		} /*12033*/
		for (;;) {
			/*12061*/
			if ($1.i == $1.msglen) { //no-else/*12038*/
				break; /*12038*/
			} /*12038*/
			for (;;) {
				/*12060*/
				if ($eq($1.method, "alpha")) { //no-else/*12049*/
					if ($get($1.numericruns, $1.i) >= 5) { //no-else/*12045*/
						$k[$j++] = $1.ns; /*12042*/
						$1.encodealpha(); /*12042*/
						$1.method = "numeric"; /*12043*/
						break; /*12044*/
					} /*12044*/
					$k[$j++] = $get($1.msg, $1.i); /*12046*/
					$1.encodealpha(); /*12046*/
					$1.i = $1.i + 1; /*12047*/
					break; /*12048*/
				} /*12048*/
				if ($eq($1.method, "numeric")) { //no-else/*12059*/
					if ($get($1.numericruns, $1.i) < 5) { //no-else/*12055*/
						$k[$j++] = $1.ns; /*12052*/
						$1.encodealpha(); /*12052*/
						$1.method = "alpha"; /*12053*/
						break; /*12054*/
					} /*12054*/
					$k[$j++] = $geti($1.msg, $1.i, $get($1.numericruns, $1.i)); /*12056*/
					$1.encodenumeric(); /*12056*/
					$1.i = $1.i + $get($1.numericruns, $1.i); /*12057*/
					break; /*12058*/
				} /*12058*/
			} /*12058*/
		} /*12058*/
		$1.cws = $geti($1.cws, 0, $1.j); /*12062*/
		$1.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); /*12074*/
		$1.urows = $1.rows; /*12077*/
		$1.i = 0; /*12078*/
		for (;;) {
			/*12088*/
			$1.m = $get($1.metrics, $1.i); /*12080*/
			$1.r = $get($1.m, 0); /*12081*/
			$1.dcws = $get($1.m, 1); /*12082*/
			$1.okay = true; /*12083*/
			if (($1.urows != 0) && ($1.urows != $1.r)) { //no-else/*12084*/
				$1.okay = false; /*12084*/
			} /*12084*/
			if ($1.cws.length > $1.dcws) { //no-else/*12085*/
				$1.okay = false; /*12085*/
			} /*12085*/
			if ($1.okay) { //no-else/*12086*/
				break; /*12086*/
			} /*12086*/
			$1.i = $1.i + 1; /*12087*/
		} /*12087*/
		$k[$j++] = Infinity; /*12091*/
		$aload($1.cws); /*12091*/
		for (var _4B = 0, _4C = $1.dcws - $1.cws.length; _4B < _4C; _4B++) {
			/*12091*/
			$k[$j++] = 48; /*12091*/
		} /*12091*/
		$1.cws = $a(); /*12091*/
		$1.ccs = $a($1.r * 8); /*12094*/
		$1.j = 0; /*12095*/
		for (var _4I = 0, _4H = $1.r - 2; _4I <= _4H; _4I += 1) {
			/*12102*/
			$1.i = _4I; /*12097*/
			$1.cc = $geti($1.cws, $1.j, 7); /*12098*/
			$puti($1.ccs, $1.i * 8, $1.cc); /*12099*/
			$k[$j++] = $1.ccs; /*12100*/
			$k[$j++] = ($1.i * 8) + 7; /*12100*/
			$k[$j++] = 0; /*12100*/
			$forall($1.cc, function() {
				/*12100*/
				var _4S = $k[--$j]; /*12100*/
				var _4T = $k[--$j]; /*12100*/
				$k[$j++] = _4T + _4S; /*12100*/
			}); /*12100*/
			var _4U = $k[--$j]; /*12100*/
			var _4V = $k[--$j]; /*12100*/
			$put($k[--$j], _4V, _4U % 49); /*12100*/
			$1.j = $1.j + 7; /*12101*/
		} /*12101*/
		if ($1.j < $1.dcws) { //no-else/*12105*/
			$puti($1.ccs, $1.ccs.length - 8, $geti($1.cws, $1.j, $1.dcws - $1.j)); /*12104*/
		} /*12104*/
		$1.cr7 = (($1.r - 2) * 7) + $1.mode; /*12108*/
		$put($1.ccs, $1.ccs.length - 2, $1.cr7); /*12109*/
		var _4m = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); /*12113*/
		$k[$j++] = _4m; /*12114*/
		$k[$j++] = _4m; /*12114*/
		$k[$j++] = Infinity; /*12114*/
		var _4n = $k[--$j]; /*12114*/
		var _4p = $geti($k[--$j], 0, 32); /*12114*/
		$k[$j++] = _4n; /*12114*/
		$k[$j++] = 20; /*12114*/
		$aload(_4p); /*12114*/
		$1.weightx = $a(); /*12114*/
		var _4r = $k[--$j]; /*12115*/
		$k[$j++] = _4r; /*12115*/
		$k[$j++] = _4r; /*12115*/
		$k[$j++] = Infinity; /*12115*/
		var _4s = $k[--$j]; /*12115*/
		var _4u = $geti($k[--$j], 1, 32); /*12115*/
		$k[$j++] = _4s; /*12115*/
		$k[$j++] = 16; /*12115*/
		$aload(_4u); /*12115*/
		$1.weighty = $a(); /*12115*/
		$k[$j++] = Infinity; /*12116*/
		var _4w = $k[--$j]; /*12116*/
		var _4y = $geti($k[--$j], 2, 32); /*12116*/
		$k[$j++] = _4w; /*12116*/
		$k[$j++] = 38; /*12116*/
		$aload(_4y); /*12116*/
		$1.weightz = $a(); /*12116*/
		$1.calccheck = function() {
			$1.weights = $k[--$j]; /*12118*/
			$1.score = 0; /*12119*/
			for (var _53 = 0, _52 = (~~((($1.r - 1) * 8) / 2)) - 1; _53 <= _52; _53 += 1) {
				/*12124*/
				$1.i = _53; /*12121*/
				$1.score = ((($get($1.ccs, $1.i * 2) * 49) + $get($1.ccs, ($1.i * 2) + 1)) * $get($1.weights, $1.i + 1)) + $1.score; /*12123*/
			} /*12123*/
			$k[$j++] = $1.score; /*12125*/
		}; /*12126*/
		$1.lastrow = $geti($1.ccs, $1.ccs.length - 8, 8); /*12127*/
		if ($1.r >= 7) { //no-else/*12134*/
			$k[$j++] = $1.cr7 * $get($1.weightz, 0); /*12131*/
			$k[$j++] = $1.weightz; /*12131*/
			$1.calccheck(); /*12131*/
			var _5N = $k[--$j]; /*12131*/
			var _5P = ($k[--$j] + _5N) % 2401; /*12132*/
			$k[$j++] = ~~(_5P / 49); /*12132*/
			$k[$j++] = _5P % 49; /*12132*/
			$astore($a(2)); /*12132*/
			$puti($1.lastrow, 0, $k[--$j]); /*12133*/
		} /*12133*/
		$1.wr1 = ($get($1.lastrow, 0) * 49) + $get($1.lastrow, 1); /*12135*/
		$k[$j++] = $1.cr7 * $get($1.weighty, 0); /*12138*/
		$k[$j++] = $1.weighty; /*12138*/
		$1.calccheck(); /*12138*/
		var _5b = $k[--$j]; /*12138*/
		var _5h = (($k[--$j] + _5b) + ($1.wr1 * $get($1.weighty, ($1.r * 4) - 3))) % 2401; /*12140*/
		$1.wr2 = _5h; /*12140*/
		$k[$j++] = ~~(_5h / 49); /*12141*/
		$k[$j++] = _5h % 49; /*12141*/
		$astore($a(2)); /*12141*/
		$puti($1.lastrow, 2, $k[--$j]); /*12142*/
		$k[$j++] = $1.cr7 * $get($1.weightx, 0); /*12145*/
		$k[$j++] = $1.weightx; /*12145*/
		$1.calccheck(); /*12145*/
		var _5p = $k[--$j]; /*12145*/
		var _5z = ((($k[--$j] + _5p) + ($1.wr1 * $get($1.weightx, ($1.r * 4) - 3))) + ($1.wr2 * $get($1.weightx, ($1.r * 4) - 2))) % 2401; /*12149*/
		$k[$j++] = ~~(_5z / 49); /*12149*/
		$k[$j++] = _5z % 49; /*12149*/
		$astore($a(2)); /*12149*/
		$puti($1.lastrow, 4, $k[--$j]); /*12150*/
		$k[$j++] = 0; /*12153*/
		$forall($geti($1.ccs, $1.ccs.length - 8, 7), function() {
			/*12153*/
			var _66 = $k[--$j]; /*12153*/
			var _67 = $k[--$j]; /*12153*/
			$k[$j++] = _67 + _66; /*12153*/
		}); /*12153*/
		$put($1.ccs, $1.ccs.length - 1, $k[--$j] % 49); /*12154*/
		$1.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); /*12846*/
		$1.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); /*12850*/
		$1.rowbits = $a($1.r); /*12853*/
		for (var _6J = 0, _6I = $1.r - 1; _6J <= _6I; _6J += 1) {
			/*12873*/
			$1.i = _6J; /*12855*/
			$k[$j++] = 'p'; /*12856*/
			if ($1.i != ($1.r - 1)) {
				/*12856*/
				$k[$j++] = $get($1.parity, $1.i); /*12856*/
			} else {
				/*12856*/
				$k[$j++] = "0000"; /*12856*/
			} /*12856*/
			var _6P = $k[--$j]; /*12856*/
			$1[$k[--$j]] = _6P; /*12856*/
			$1.ccrow = $geti($1.ccs, $1.i * 8, 8); /*12857*/
			$k[$j++] = Infinity; /*12860*/
			for (var _6U = 0; _6U <= 7; _6U += 2) {
				/*12859*/
				$aload($geti($1.ccrow, _6U, 2)); /*12859*/
				var _6X = $k[--$j]; /*12859*/
				var _6Y = $k[--$j]; /*12859*/
				$k[$j++] = _6X + (_6Y * 49); /*12859*/
			} /*12859*/
			$1.scrow = $a(); /*12860*/
			$k[$j++] = Infinity; /*12868*/
			$k[$j++] = 10; /*12866*/
			$k[$j++] = 1; /*12866*/
			$k[$j++] = 1; /*12866*/
			for (var _6a = 0; _6a <= 3; _6a += 1) {
				/*12866*/
				$1.j = _6a; /*12864*/
				$forall($get($get($1.patterns, $get($1.p, $1.j) - 48), $get($1.scrow, $1.j)), function() {
					/*12865*/
					var _6k = $k[--$j]; /*12865*/
					$k[$j++] = _6k - 48; /*12865*/
				}); /*12865*/
			} /*12865*/
			$k[$j++] = 4; /*12867*/
			$k[$j++] = 1; /*12867*/
			$1.sbs = $a(); /*12868*/
			$k[$j++] = Infinity; /*12869*/
			var _6m = $1.sbs; /*12870*/
			$k[$j++] = 1; /*12870*/
			for (var _6n = 0, _6o = _6m.length; _6n < _6o; _6n++) {
				/*12870*/
				var _6q = $k[--$j]; /*12870*/
				var _6r = (_6q == 0) ? 1 : 0; /*12870*/
				$k[$j++] = _6q; /*12870*/
				for (var _6s = 0, _6t = $get(_6m, _6n); _6s < _6t; _6s++) {
					/*12870*/
					$k[$j++] = _6r /*12870*/
				} /*12870*/
			} /*12870*/
			$astore($a($counttomark() - 1)); /*12871*/
			var _6w = $k[--$j]; /*12871*/
			var _6x = $k[--$j]; /*12871*/
			var _6y = $k[--$j]; /*12871*/
			$put($1.rowbits, $1.i, _6w); /*12872*/
		} /*12872*/
		$k[$j++] = Infinity; /*12885*/
		for (var _72 = 0, _73 = 81 * $1.sepheight; _72 < _73; _72++) {
			/*12877*/
			$k[$j++] = 1; /*12877*/
		} /*12877*/
		for (var _76 = 0, _75 = $1.r - 2; _76 <= _75; _76 += 1) {
			/*12882*/
			$1.i = _76; /*12879*/
			for (var _78 = 0, _79 = $1.rowheight; _78 < _79; _78++) {
				/*12880*/
				$aload($get($1.rowbits, $1.i)); /*12880*/
			} /*12880*/
			for (var _7E = 0, _7F = $1.sepheight; _7E < _7F; _7E++) {
				/*12881*/
				for (var _7G = 0, _7H = 10; _7G < _7H; _7G++) {
					/*12881*/
					$k[$j++] = 0; /*12881*/
				} /*12881*/
				for (var _7I = 0, _7J = 70; _7I < _7J; _7I++) {
					/*12881*/
					$k[$j++] = 1; /*12881*/
				} /*12881*/
				$k[$j++] = 0; /*12881*/
			} /*12881*/
		} /*12881*/
		for (var _7L = 0, _7M = $1.rowheight; _7L < _7M; _7L++) {
			/*12883*/
			$aload($get($1.rowbits, $1.r - 1)); /*12883*/
		} /*12883*/
		for (var _7R = 0, _7S = 81 * $1.sepheight; _7R < _7S; _7R++) {
			/*12884*/
			$k[$j++] = 1; /*12884*/
		} /*12884*/
		$1.pixs = $a(); /*12885*/
		var _7Y = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", 81],
			["pixy", ~~($1.pixs.length / 81)],
			["height", (~~($1.pixs.length / 81)) / 72],
			["width", 81 / 72],
			["opt", $1.options]
		]); /*12895*/
		$k[$j++] = _7Y; /*12898*/
		if (!$1.dontdraw) { //no-else/*12898*/
			$0.renmatrix(); /*12898*/
		} /*12898*/
	};
	$0.flattermarken = function() {
		var $1 = {}; /*13189*/
		$1.options = $k[--$j]; /*13191*/
		$1.barcode = $k[--$j]; /*13192*/
		$1.dontdraw = false; /*13194*/
		$1.includetext = false; /*13195*/
		$1.textfont = 'Courier'; /*13196*/
		$1.textsize = 10; /*13197*/
		$1.textyoffset = -8.5; /*13198*/
		$1.height = 0.3; /*13199*/
		$forall($1.barcode, function() {
			/*13206*/
			var _3 = $k[--$j]; /*13203*/
			if ((_3 < 48) || (_3 > 57)) { //no-else/*13205*/
				$k[$j++] = 'bwipp.flattermarkenBadCharacter'; /*13204*/
				$k[$j++] = "Flattermarken must contain only digits"; /*13204*/
				$0.raiseerror(); /*13204*/
			} /*13204*/
		}); /*13204*/
		$forall($1.options, function() {
			/*13217*/
			var _5 = $k[--$j]; /*13217*/
			$1[$k[--$j]] = _5; /*13217*/
		}); /*13217*/
		$1.textfont = "" + $1.textfont; /*13219*/
		$1.textsize = +$1.textsize; /*13220*/
		$1.textyoffset = +$1.textyoffset; /*13221*/
		$1.height = +$1.height; /*13222*/
		$forall($1.barcode, function() {
			/*13229*/
			var _C = $k[--$j]; /*13226*/
			if ((_C < 48) || (_C > 57)) { //no-else/*13228*/
				$k[$j++] = 'bwipp.flattermarkenBadCharacter'; /*13227*/
				$k[$j++] = "Flattermarken must contain only digits"; /*13227*/
				$0.raiseerror(); /*13227*/
			} /*13227*/
		}); /*13227*/
		$1.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); /*13235*/
		$1.barchars = "1234567890"; /*13238*/
		$1.barlen = $1.barcode.length; /*13240*/
		$1.sbs = $s($1.barlen * 4); /*13242*/
		$1.txt = $a($1.barlen); /*13243*/
		for (var _L = 0, _K = $1.barlen - 1; _L <= _K; _L += 1) {
			/*13255*/
			$1.i = _L; /*13246*/
			$search($1.barchars, $geti($1.barcode, $1.i, 1)); /*13248*/
			$j--; /*13249*/
			$1.indx = $k[--$j].length; /*13250*/
			$j -= 2; /*13251*/
			$1.enc = $get($1.encs, $1.indx); /*13252*/
			$puti($1.sbs, $1.i * 4, $1.enc); /*13253*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.i * 9, $1.textyoffset, $1.textfont, $1.textsize])); /*13254*/
		} /*13254*/
		$k[$j++] = Infinity; /*13264*/
		$k[$j++] = Infinity; /*13261*/
		var _h = $1.sbs; /*13260*/
		for (var _i = 0, _j = _h.length; _i < _j; _i++) {
			/*13260*/
			$k[$j++] = $get(_h, _i) - 48; /*13260*/
		} /*13260*/
		var _l = $a(); /*13261*/
		$k[$j++] = Infinity; /*13262*/
		for (var _n = 0, _o = ~~(($1.sbs.length + 1) / 2); _n < _o; _n++) {
			/*13261*/
			$k[$j++] = $1.height; /*13261*/
		} /*13261*/
		var _q = $a(); /*13262*/
		$k[$j++] = Infinity; /*13263*/
		for (var _s = 0, _t = ~~(($1.sbs.length + 1) / 2); _s < _t; _s++) {
			/*13262*/
			$k[$j++] = 0; /*13262*/
		} /*13262*/
		var _u = $a(); /*13263*/
		$k[$j++] = 'ren'; /*13264*/
		$k[$j++] = $0.renlinear; /*13264*/
		$k[$j++] = 'sbs'; /*13264*/
		$k[$j++] = _l; /*13264*/
		$k[$j++] = 'bhs'; /*13264*/
		$k[$j++] = _q; /*13264*/
		$k[$j++] = 'bbs'; /*13264*/
		$k[$j++] = _u; /*13264*/
		$k[$j++] = 'txt'; /*13264*/
		$k[$j++] = $1.txt; /*13264*/
		$k[$j++] = 'opt'; /*13264*/
		$k[$j++] = $1.options; /*13264*/
		var _x = $d(); /*13264*/
		$k[$j++] = _x; /*13267*/
		if (!$1.dontdraw) { //no-else/*13267*/
			$0.renlinear(); /*13267*/
		} /*13267*/
	};
	$0.raw = function() {
		var $1 = {}; /*13296*/
		$1.options = $k[--$j]; /*13298*/
		$1.barcode = $k[--$j]; /*13299*/
		$1.dontdraw = false; /*13301*/
		$1.height = 1; /*13302*/
		$forall($1.options, function() {
			/*13313*/
			var _3 = $k[--$j]; /*13313*/
			$1[$k[--$j]] = _3; /*13313*/
		}); /*13313*/
		$1.height = +$1.height; /*13315*/
		$forall($1.barcode, function() {
			/*13322*/
			var _7 = $k[--$j]; /*13319*/
			if ((_7 < 49) || (_7 > 57)) { //no-else/*13321*/
				$k[$j++] = 'bwipp.rawBadCharacter'; /*13320*/
				$k[$j++] = "Raw must contain only digits 1 to 9"; /*13320*/
				$0.raiseerror(); /*13320*/
			} /*13320*/
		}); /*13320*/
		$k[$j++] = Infinity; /*13330*/
		$k[$j++] = Infinity; /*13328*/
		$forall($1.barcode, function() {
			/*13327*/
			var _9 = $k[--$j]; /*13327*/
			$k[$j++] = _9 - 48; /*13327*/
		}); /*13327*/
		var _A = $a(); /*13328*/
		$k[$j++] = Infinity; /*13329*/
		for (var _C = 0, _D = ~~(($1.barcode.length + 1) / 2); _C < _D; _C++) {
			/*13328*/
			$k[$j++] = $1.height; /*13328*/
		} /*13328*/
		var _F = $a(); /*13329*/
		$k[$j++] = Infinity; /*13330*/
		for (var _H = 0, _I = ~~(($1.barcode.length + 1) / 2); _H < _I; _H++) {
			/*13329*/
			$k[$j++] = 0; /*13329*/
		} /*13329*/
		var _J = $a(); /*13330*/
		$k[$j++] = 'ren'; /*13330*/
		$k[$j++] = $0.renlinear; /*13330*/
		$k[$j++] = 'sbs'; /*13330*/
		$k[$j++] = _A; /*13330*/
		$k[$j++] = 'bhs'; /*13330*/
		$k[$j++] = _F; /*13330*/
		$k[$j++] = 'bbs'; /*13330*/
		$k[$j++] = _J; /*13330*/
		$k[$j++] = 'opt'; /*13330*/
		$k[$j++] = $1.options; /*13330*/
		var _L = $d(); /*13330*/
		$k[$j++] = _L; /*13333*/
		if (!$1.dontdraw) { //no-else/*13333*/
			$0.renlinear(); /*13333*/
		} /*13333*/
	};
	$0.daft = function() {
		var $1 = {}; /*13362*/
		$1.options = $k[--$j]; /*13364*/
		$1.barcode = $k[--$j]; /*13365*/
		$1.dontdraw = false; /*13367*/
		$1.height = 0.175; /*13368*/
		$forall($1.options, function() {
			/*13379*/
			var _3 = $k[--$j]; /*13379*/
			$1[$k[--$j]] = _3; /*13379*/
		}); /*13379*/
		$1.height = +$1.height; /*13381*/
		$forall($1.barcode, function() {
			/*13387*/
			var _7 = $k[--$j]; /*13384*/
			if ((_7 != 68) && ((_7 != 65) && ((_7 != 70) && (_7 != 84)))) { //no-else/*13386*/
				$k[$j++] = 'bwipp.daftBadCharacter'; /*13385*/
				$k[$j++] = "DAFT must contain only characters D, A, F and T"; /*13385*/
				$0.raiseerror(); /*13385*/
			} /*13385*/
		}); /*13385*/
		$1.barlen = $1.barcode.length; /*13389*/
		$1.bbs = $a($1.barlen); /*13391*/
		$1.bhs = $a($1.barlen); /*13392*/
		for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) {
			/*13412*/
			$1.i = _F; /*13394*/
			$1.enc = $geti($1.barcode, $1.i, 1); /*13395*/
			if ($eq($1.enc, "D")) { //no-else/*13399*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*13397*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*13398*/
			} /*13398*/
			if ($eq($1.enc, "A")) { //no-else/*13403*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*13401*/
				$put($1.bhs, $1.i, (5 * $1.height) / 8); /*13402*/
			} /*13402*/
			if ($eq($1.enc, "F")) { //no-else/*13407*/
				$put($1.bbs, $1.i, (0 * $1.height) / 8); /*13405*/
				$put($1.bhs, $1.i, (8 * $1.height) / 8); /*13406*/
			} /*13406*/
			if ($eq($1.enc, "T")) { //no-else/*13411*/
				$put($1.bbs, $1.i, (3 * $1.height) / 8); /*13409*/
				$put($1.bhs, $1.i, (2 * $1.height) / 8); /*13410*/
			} /*13410*/
		} /*13410*/
		$k[$j++] = Infinity; /*13420*/
		var _l = $1.bbs; /*13417*/
		var _m = $1.bhs; /*13418*/
		$k[$j++] = Infinity; /*13420*/
		for (var _o = 0, _p = $1.bhs.length - 1; _o < _p; _o++) {
			/*13419*/
			$k[$j++] = 1.44; /*13419*/
			$k[$j++] = 1.872; /*13419*/
		} /*13419*/
		$k[$j++] = 1.44; /*13419*/
		var _q = $a(); /*13420*/
		$k[$j++] = 'ren'; /*13420*/
		$k[$j++] = $0.renlinear; /*13420*/
		$k[$j++] = 'bbs'; /*13420*/
		$k[$j++] = _l; /*13420*/
		$k[$j++] = 'bhs'; /*13420*/
		$k[$j++] = _m; /*13420*/
		$k[$j++] = 'sbs'; /*13420*/
		$k[$j++] = _q; /*13420*/
		$k[$j++] = 'opt'; /*13420*/
		$k[$j++] = $1.options; /*13420*/
		var _s = $d(); /*13420*/
		$k[$j++] = _s; /*13423*/
		if (!$1.dontdraw) { //no-else/*13423*/
			$0.renlinear(); /*13423*/
		} /*13423*/
	};
	$0.symbol = function() {
		var $1 = {}; /*13452*/
		$1.options = $k[--$j]; /*13454*/
		$1.barcode = $k[--$j]; /*13455*/
		$1.dontdraw = false; /*13457*/
		$forall($1.options, function() {
			/*13468*/
			var _3 = $k[--$j]; /*13468*/
			$1[$k[--$j]] = _3; /*13468*/
		}); /*13468*/
		var _H = new Map([
			["fima", function() {
				$1.sbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); /*13472*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625]); /*13473*/
				$1.bbs = $a([0, 0, 0, 0, 0]); /*13474*/
			}],
			["fimb", function() {
				$1.sbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); /*13477*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); /*13478*/
				$1.bbs = $a([0, 0, 0, 0, 0, 0]); /*13479*/
			}],
			["fimc", function() {
				$1.sbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); /*13482*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); /*13483*/
				$1.bbs = $a([0, 0, 0, 0, 0, 0]); /*13484*/
			}],
			["fimd", function() {
				$1.sbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); /*13487*/
				$1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); /*13488*/
				$1.bbs = $a([0, 0, 0, 0, 0, 0, 0]); /*13489*/
			}]
		]); /*13489*/
		$1.symbols = _H; /*13491*/
		var _K = $get($1.symbols, $1.barcode) !== undefined; /*13494*/
		if (!_K) { //no-else/*13496*/
			$k[$j++] = 'bwipp.symbolUnknownSymbol'; /*13495*/
			$k[$j++] = "Unknown symbol name provided"; /*13495*/
			$0.raiseerror(); /*13495*/
		} /*13495*/
		$get($1.symbols, $1.barcode)(); /*13498*/
		var _S = new Map([
			["ren", $0.renlinear],
			["sbs", $1.sbs],
			["bhs", $1.bhs],
			["bbs", $1.bbs],
			["opt", $1.options]
		]); /*13506*/
		$k[$j++] = _S; /*13509*/
		if (!$1.dontdraw) { //no-else/*13509*/
			$0.renlinear(); /*13509*/
		} /*13509*/
	};
	$0.pdf417 = function() {
		var $1 = {}; /*13538*/
		$1.options = $k[--$j]; /*13540*/
		$1.barcode = $k[--$j]; /*13541*/
		$1.dontdraw = false; /*13543*/
		$1.compact = false; /*13544*/
		$1.eclevel = -1; /*13545*/
		$1.columns = 0; /*13546*/
		$1.rows = 0; /*13547*/
		$1.rowmult = 3; /*13548*/
		$1.encoding = "auto"; /*13549*/
		$1.ccc = false; /*13550*/
		$1.raw = false; /*13551*/
		$1.parse = false; /*13552*/
		$forall($1.options, function() {
			/*13563*/
			var _3 = $k[--$j]; /*13563*/
			$1[$k[--$j]] = _3; /*13563*/
		}); /*13563*/
		$1.eclevel = ~~$1.eclevel; /*13565*/
		$1.columns = ~~$1.columns; /*13566*/
		$1.rows = ~~$1.rows; /*13567*/
		$1.rowmult = +$1.rowmult; /*13568*/
		if ($1.raw) { //no-else/*13591*/
			$1.encoding = "raw"; /*13591*/
		} /*13591*/
		if ($eq($1.encoding, "raw")) { //no-else/*13605*/
			$1.datcws = $a($1.barcode.length); /*13595*/
			$1.i = 0; /*13596*/
			$1.j = 0; /*13596*/
			for (;;) {
				/*13603*/
				if ($1.i == $1.barcode.length) { //no-else/*13598*/
					break; /*13598*/
				} /*13598*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*13599*/
				$put($1.datcws, $1.j, $1.cw); /*13600*/
				$1.i = $1.i + 4; /*13601*/
				$1.j = $1.j + 1; /*13602*/
			} /*13602*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*13604*/
		} /*13604*/
		$k[$j++] = Infinity; /*13607*/
		$forall($1.barcode); /*13607*/
		$1.barcode = $a(); /*13607*/
		$1.barlen = $1.barcode.length; /*13608*/
		if ($1.ccc) { //no-else/*13610*/
			$1.encoding = "ccc"; /*13610*/
		} /*13610*/
		$1.encb = function() {
			$1.in = $k[--$j]; /*13613*/
			$1.inlen = $1.in.length; /*13614*/
			$1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); /*13615*/
			for (var _b = 0, _a = (~~($1.inlen / 6)) - 1; _b <= _a; _b += 1) {
				/*13638*/
				$1.k = _b; /*13617*/
				$k[$j++] = Infinity; /*13618*/
				$aload($geti($1.in, $1.k * 6, 3)); /*13618*/
				$1.msbs = $a(); /*13618*/
				$k[$j++] = Infinity; /*13622*/
				$aload($1.msbs); /*13620*/
				var _h = $k[--$j]; /*13620*/
				var _i = $k[--$j]; /*13620*/
				var _j = $k[--$j]; /*13620*/
				$k[$j++] = (_h + (_i * 256)) + (_j * 65536); /*13621*/
				for (var _k = 0, _l = 3; _k < _l; _k++) {
					/*13621*/
					var _m = $k[--$j]; /*13621*/
					$k[$j++] = _m % 900; /*13621*/
					$k[$j++] = ~~(_m / 900); /*13621*/
				} /*13621*/
				$1.mscs = $a(); /*13622*/
				$k[$j++] = Infinity; /*13623*/
				$aload($geti($1.in, ($1.k * 6) + 3, 3)); /*13623*/
				$1.lsbs = $a(); /*13623*/
				$k[$j++] = Infinity; /*13627*/
				$aload($1.lsbs); /*13625*/
				var _t = $k[--$j]; /*13625*/
				var _u = $k[--$j]; /*13625*/
				var _v = $k[--$j]; /*13625*/
				$k[$j++] = (_t + (_u * 256)) + (_v * 65536); /*13626*/
				for (var _w = 0, _x = 3; _w < _x; _w++) {
					/*13626*/
					var _y = $k[--$j]; /*13626*/
					$k[$j++] = _y % 900; /*13626*/
					$k[$j++] = ~~(_y / 900); /*13626*/
				} /*13626*/
				$1.lscs = $a(); /*13627*/
				var _11 = $get($1.lscs, 0); /*13628*/
				var _13 = $get($1.mscs, 0); /*13628*/
				$put($1.out, ($1.k * 5) + 4, (_11 + (_13 * 316)) % 900); /*13629*/
				var _17 = $get($1.lscs, 1); /*13630*/
				var _19 = $get($1.mscs, 0); /*13630*/
				var _1B = $get($1.mscs, 1); /*13630*/
				$put($1.out, ($1.k * 5) + 3, ((((~~((_11 + (_13 * 316)) / 900)) + _17) + (_19 * 641)) + (_1B * 316)) % 900); /*13631*/
				var _1F = $get($1.lscs, 2); /*13632*/
				var _1H = $get($1.mscs, 0); /*13632*/
				var _1J = $get($1.mscs, 1); /*13632*/
				var _1L = $get($1.mscs, 2); /*13632*/
				$put($1.out, ($1.k * 5) + 2, (((((~~(((((~~((_11 + (_13 * 316)) / 900)) + _17) + (_19 * 641)) + (_1B * 316)) / 900)) + _1F) + (_1H * 20)) + (_1J * 641)) + (_1L * 316)) % 900); /*13633*/
				var _1P = $get($1.lscs, 3); /*13634*/
				var _1R = $get($1.mscs, 1); /*13634*/
				var _1T = $get($1.mscs, 2); /*13634*/
				$put($1.out, ($1.k * 5) + 1, ((((~~((((((~~(((((~~((_11 + (_13 * 316)) / 900)) + _17) + (_19 * 641)) + (_1B * 316)) / 900)) + _1F) + (_1H * 20)) + (_1J * 641)) + (_1L * 316)) / 900)) + _1P) + (_1R * 20)) + (_1T * 641)) % 900); /*13635*/
				$put($1.out, $1.k * 5, ((~~(((((~~((((((~~(((((~~((_11 + (_13 * 316)) / 900)) + _17) + (_19 * 641)) + (_1B * 316)) / 900)) + _1F) + (_1H * 20)) + (_1J * 641)) + (_1L * 316)) / 900)) + _1P) + (_1R * 20)) + (_1T * 641)) / 900)) + ($get($1.mscs, 2) * 20)) % 900); /*13637*/
			} /*13637*/
			$1.rem = $1.inlen % 6; /*13639*/
			if ($1.rem != 0) { //no-else/*13644*/
				$k[$j++] = $1.out; /*13642*/
				$k[$j++] = $1.out.length - $1.rem; /*13642*/
				$k[$j++] = Infinity; /*13642*/
				$aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); /*13642*/
				var _1k = $a(); /*13642*/
				var _1l = $k[--$j]; /*13643*/
				$puti($k[--$j], _1l, _1k); /*13643*/
			} /*13643*/
			$k[$j++] = $1.out; /*13645*/
		}; /*13646*/
		if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccc")) { //no-else/*13653*/
			$1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); /*13649*/
			var _1v = (($1.barlen % 6) == 0) ? 924 : 901; /*13650*/
			$put($1.datcws, 0, _1v); /*13650*/
			$k[$j++] = $1.datcws; /*13651*/
			$k[$j++] = 1; /*13651*/
			$k[$j++] = $1.barcode; /*13651*/
			$1.encb(); /*13651*/
			var _1y = $k[--$j]; /*13651*/
			var _1z = $k[--$j]; /*13651*/
			$puti($k[--$j], _1z, _1y); /*13651*/
			if ($eq($1.encoding, "ccc")) { //no-else/*13652*/
				$k[$j++] = Infinity; /*13652*/
				$k[$j++] = 920; /*13652*/
				$aload($1.datcws); /*13652*/
				$1.datcws = $a(); /*13652*/
			} /*13652*/
		} /*13652*/
		if ($eq($1.encoding, "auto")) { //no-else/*14017*/
			$1.T = 0; /*13658*/
			$1.N = 1; /*13658*/
			$1.B = 2; /*13658*/
			$1.A = 0; /*13659*/
			$1.L = 1; /*13659*/
			$1.M = 2; /*13659*/
			$1.P = 3; /*13659*/
			$1.tl = -1; /*13662*/
			$1.nl = -2; /*13662*/
			$1.bl = -3; /*13662*/
			$1.bl6 = -4; /*13662*/
			$1.bs = -5; /*13662*/
			$1.al = -6; /*13665*/
			$1.ll = -7; /*13665*/
			$1.ml = -8; /*13665*/
			$1.pl = -9; /*13665*/
			$1.as = -10; /*13665*/
			$1.ps = -11; /*13665*/
			$1.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $1.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$1.ll, $1.as, $1.ll, "}"]), $a([$1.ml, $1.ml, $1.al, "'"]), $a([$1.ps, $1.ps, $1.ps, $1.al])]); /*13700*/
			$1.charvals = $a([new Map, new Map, new Map, new Map]); /*13703*/
			$1.alltext = new Map; /*13704*/
			for (var _2o = 0, _2n = $1.charmaps.length - 1; _2o <= _2n; _2o += 1) {
				/*13714*/
				$1.i = _2o; /*13706*/
				$1.encs = $get($1.charmaps, $1.i); /*13707*/
				for (var _2s = 0; _2s <= 3; _2s += 1) {
					/*13713*/
					$1.j = _2s; /*13709*/
					var _2v = $get($1.encs, $1.j); /*13710*/
					$k[$j++] = _2v; /*13710*/
					if ($eq($type(_2v), 'stringtype')) { //no-else/*13710*/
						var _2y = $get($k[--$j], 0); /*13710*/
						$k[$j++] = _2y; /*13710*/
					} /*13710*/
					var _2z = $k[--$j]; /*13711*/
					$put($get($1.charvals, $1.j), _2z, $1.i); /*13711*/
					$put($1.alltext, _2z, -1); /*13712*/
				} /*13712*/
			} /*13712*/
			$1.e = 10000; /*13716*/
			$1.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); /*13724*/
			$1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.ml, $1.al]), $a([]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.al]), $a([$1.ll]), $a([]), $a([$1.pl])]), $a([$a([$1.al]), $a([$1.al, $1.ll]), $a([$1.al, $1.ml]), $a([])])]); /*13732*/
			$1.shftlen = $a([$a([$1.e, $1.e, $1.e, 1]), $a([1, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, $1.e])]); /*13740*/
			$k[$j++] = Infinity; /*13743*/
			for (var _44 = 0, _45 = $1.barlen; _44 < _45; _44++) {
				/*13743*/
				$k[$j++] = 0; /*13743*/
			} /*13743*/
			$k[$j++] = 0; /*13743*/
			$1.numdigits = $a(); /*13743*/
			$k[$j++] = Infinity; /*13744*/
			for (var _48 = 0, _49 = $1.barlen; _48 < _49; _48++) {
				/*13744*/
				$k[$j++] = 0; /*13744*/
			} /*13744*/
			$k[$j++] = 0; /*13744*/
			$1.numtext = $a(); /*13744*/
			$k[$j++] = Infinity; /*13745*/
			for (var _4C = 0, _4D = $1.barlen; _4C < _4D; _4C++) {
				/*13745*/
				$k[$j++] = 0; /*13745*/
			} /*13745*/
			$k[$j++] = 0; /*13745*/
			$1.numbytes = $a(); /*13745*/
			for (var _4G = $1.barlen - 1; _4G >= 0; _4G -= 1) {
				/*13757*/
				$1.i = _4G; /*13747*/
				var _4J = $get($1.barcode, $1.i); /*13748*/
				if ((_4J >= 48) && (_4J <= 57)) { //no-else/*13750*/
					$put($1.numdigits, $1.i, $get($1.numdigits, $1.i + 1) + 1); /*13749*/
				} /*13749*/
				var _4T = $get($1.alltext, $get($1.barcode, $1.i)) !== undefined; /*13751*/
				if (_4T && ($get($1.numdigits, $1.i) < 13)) { //no-else/*13753*/
					$put($1.numtext, $1.i, $get($1.numtext, $1.i + 1) + 1); /*13752*/
				} /*13752*/
				if (($get($1.numtext, $1.i) < 5) && ($get($1.numdigits, $1.i) < 13)) { //no-else/*13756*/
					$put($1.numbytes, $1.i, $get($1.numbytes, $1.i + 1) + 1); /*13755*/
				} /*13755*/
			} /*13755*/
			$1.numdigits = $geti($1.numdigits, 0, $1.barlen); /*13758*/
			$1.numtext = $geti($1.numtext, 0, $1.barlen); /*13759*/
			$1.numbytes = $geti($1.numbytes, 0, $1.barlen); /*13760*/
			$1.seq = $a([]); /*13762*/
			$1.seqlen = 0; /*13762*/
			$1.state = $1.T; /*13762*/
			$1.p = 0; /*13762*/
			for (;;) {
				/*13805*/
				if ($1.p == $1.barlen) { //no-else/*13763*/
					break; /*13763*/
				} /*13763*/
				$1.n = $get($1.numdigits, $1.p); /*13764*/
				if ($1.n >= 13) {
					/*13803*/
					$k[$j++] = Infinity; /*13770*/
					$aload($1.seq); /*13767*/
					$k[$j++] = $1.nl; /*13769*/
					$k[$j++] = Infinity; /*13769*/
					$aload($geti($1.barcode, $1.p, $1.n)); /*13769*/
					var _5A = $a(); /*13769*/
					$k[$j++] = _5A; /*13769*/
					$1.seq = $a(); /*13770*/
					$1.state = $1.N; /*13771*/
					$1.p = $1.p + $1.n; /*13772*/
					$1.seqlen = ($1.seqlen + 1) + $1.n; /*13773*/
				} else {
					/*13803*/
					$1.t = $get($1.numtext, $1.p); /*13775*/
					if ($1.t >= 5) {
						/*13803*/
						$k[$j++] = Infinity; /*13781*/
						$aload($1.seq); /*13778*/
						if ($1.state != $1.T) { //no-else/*13779*/
							$k[$j++] = $1.tl; /*13779*/
						} /*13779*/
						$k[$j++] = Infinity; /*13780*/
						$aload($geti($1.barcode, $1.p, $1.t)); /*13780*/
						var _5T = $a(); /*13780*/
						$k[$j++] = _5T; /*13780*/
						$1.seq = $a(); /*13781*/
						$1.state = $1.T; /*13782*/
						$1.p = $1.p + $1.t; /*13783*/
						$1.seqlen = ($1.seqlen + 1) + $1.t; /*13784*/
					} else {
						/*13803*/
						$1.b = $get($1.numbytes, $1.p); /*13786*/
						if (($1.b == 1) && ($1.state == $1.T)) {
							/*13803*/
							$k[$j++] = Infinity; /*13792*/
							$aload($1.seq); /*13789*/
							$k[$j++] = $1.bs; /*13791*/
							$k[$j++] = $a([$get($1.barcode, $1.p)]); /*13791*/
							$1.seq = $a(); /*13792*/
							$1.p = $1.p + $1.b; /*13793*/
							$1.seqlen = $1.seqlen + 2; /*13794*/
						} else {
							/*13803*/
							$k[$j++] = Infinity; /*13800*/
							$aload($1.seq); /*13797*/
							var _5s = (($1.b % 6) != 0) ? $1.bl : $1.bl6; /*13798*/
							$k[$j++] = _5s; /*13799*/
							$k[$j++] = Infinity; /*13799*/
							$aload($geti($1.barcode, $1.p, $1.b)); /*13799*/
							var _5x = $a(); /*13799*/
							$k[$j++] = _5x; /*13799*/
							$1.seq = $a(); /*13800*/
							$1.state = $1.B; /*13801*/
							$1.p = $1.p + $1.b; /*13802*/
							$1.seqlen = ($1.seqlen + 1) + $1.b; /*13803*/
						} /*13803*/
					} /*13803*/
				} /*13803*/
			} /*13803*/
			$k[$j++] = Infinity; /*13808*/
			$k[$j++] = $1.tl; /*13808*/
			$k[$j++] = 900; /*13808*/
			$k[$j++] = $1.bl; /*13808*/
			$k[$j++] = 901; /*13808*/
			$k[$j++] = $1.bl6; /*13808*/
			$k[$j++] = 924; /*13808*/
			$k[$j++] = $1.nl; /*13808*/
			$k[$j++] = 902; /*13808*/
			$k[$j++] = $1.bs; /*13808*/
			$k[$j++] = 913; /*13808*/
			$1.latchcws = $d(); /*13809*/
			$1.enca = function() {
				var _6E = $get($get($1.charvals, $1.A), $k[--$j]); /*13812*/
				$k[$j++] = _6E; /*13812*/
			}; /*13812*/
			$1.encl = function() {
				var _6J = $get($get($1.charvals, $1.L), $k[--$j]); /*13813*/
				$k[$j++] = _6J; /*13813*/
			}; /*13813*/
			$1.encm = function() {
				var _6O = $get($get($1.charvals, $1.M), $k[--$j]); /*13814*/
				$k[$j++] = _6O; /*13814*/
			}; /*13814*/
			$1.encp = function() {
				var _6T = $get($get($1.charvals, $1.P), $k[--$j]); /*13815*/
				$k[$j++] = _6T; /*13815*/
			}; /*13815*/
			$1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); /*13816*/
			$1.addtotext = function() {
				$put($1.text, $1.l, $k[--$j]); /*13819*/
				$1.l = $1.l + 1; /*13820*/
			}; /*13821*/
			$1.enct = function() {
				$1.in = $k[--$j]; /*13825*/
				$1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); /*13827*/
				$put($1.curlen, $1.submode, 0); /*13828*/
				$1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); /*13829*/
				$forall($1.in, function() {
					/*13899*/
					$1.char = $k[--$j]; /*13834*/
					for (;;) {
						/*13855*/
						$1.imp = false; /*13838*/
						var _6s = $a([$1.A, $1.L, $1.M, $1.P]); /*13839*/
						for (var _6t = 0, _6u = _6s.length; _6t < _6u; _6t++) {
							/*13853*/
							$1.x = $get(_6s, _6t); /*13840*/
							var _70 = $a([$1.A, $1.L, $1.M, $1.P]); /*13841*/
							for (var _71 = 0, _72 = _70.length; _71 < _72; _71++) {
								/*13852*/
								$1.y = $get(_70, _71); /*13842*/
								$1.cost = $get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y); /*13843*/
								if ($1.cost < $get($1.curlen, $1.y)) { //no-else/*13851*/
									$put($1.curlen, $1.y, $1.cost); /*13845*/
									$k[$j++] = $1.curseq; /*13848*/
									$k[$j++] = $1.y; /*13848*/
									$k[$j++] = Infinity; /*13848*/
									$aload($get($1.curseq, $1.x)); /*13847*/
									$aload($get($get($1.latseq, $1.x), $1.y)); /*13848*/
									var _7T = $a(); /*13848*/
									var _7U = $k[--$j]; /*13849*/
									$put($k[--$j], _7U, _7T); /*13849*/
									$1.imp = true; /*13850*/
								} /*13850*/
							} /*13850*/
						} /*13850*/
						if (!$1.imp) { //no-else/*13854*/
							break; /*13854*/
						} /*13854*/
					} /*13854*/
					$1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); /*13858*/
					$1.nxtseq = $a(4); /*13859*/
					var _7h = $a([$1.A, $1.L, $1.M, $1.P]); /*13861*/
					for (var _7i = 0, _7j = _7h.length; _7i < _7j; _7i++) {
						/*13894*/
						$1.x = $get(_7h, _7i); /*13862*/
						for (;;) {
							/*13892*/
							var _7p = $get($get($1.charvals, $1.x), $1.char) !== undefined; /*13866*/
							if (!_7p) { //no-else/*13866*/
								break; /*13866*/
							} /*13866*/
							$1.cost = $get($1.curlen, $1.x) + 1; /*13869*/
							if ($1.cost < $get($1.nxtlen, $1.x)) { //no-else/*13873*/
								$put($1.nxtlen, $1.x, $1.cost); /*13871*/
								$k[$j++] = $1.nxtseq; /*13872*/
								$k[$j++] = $1.x; /*13872*/
								$k[$j++] = Infinity; /*13872*/
								$aload($get($1.curseq, $1.x)); /*13872*/
								$k[$j++] = $1.char; /*13872*/
								var _86 = $a(); /*13872*/
								var _87 = $k[--$j]; /*13872*/
								$put($k[--$j], _87, _86); /*13872*/
							} /*13872*/
							var _8D = $a([$1.A, $1.L, $1.M, $1.P]); /*13876*/
							for (var _8E = 0, _8F = _8D.length; _8E < _8F; _8E++) {
								/*13889*/
								$1.y = $get(_8D, _8E); /*13877*/
								if ($ne($1.x, $1.y)) { //no-else/*13888*/
									$1.cost = ($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1; /*13879*/
									if ($1.cost < $get($1.nxtlen, $1.y)) { //no-else/*13887*/
										$put($1.nxtlen, $1.y, $1.cost); /*13881*/
										$k[$j++] = $1.nxtseq; /*13885*/
										$k[$j++] = $1.y; /*13885*/
										$k[$j++] = Infinity; /*13885*/
										$aload($get($1.curseq, $1.y)); /*13883*/
										var _8f = ($1.x == $1.A) ? $1.as : $1.ps; /*13884*/
										$k[$j++] = _8f; /*13885*/
										$k[$j++] = $1.char; /*13885*/
										var _8h = $a(); /*13885*/
										var _8i = $k[--$j]; /*13886*/
										$put($k[--$j], _8i, _8h); /*13886*/
									} /*13886*/
								} /*13886*/
							} /*13886*/
							break; /*13891*/
						} /*13891*/
					} /*13891*/
					$1.curlen = $1.nxtlen; /*13896*/
					$1.curseq = $1.nxtseq; /*13897*/
				}); /*13897*/
				$1.minseq = $1.e; /*13902*/
				var _8r = $a([$1.A, $1.L, $1.M, $1.P]); /*13903*/
				for (var _8s = 0, _8t = _8r.length; _8s < _8t; _8s++) {
					/*13909*/
					$1.k = $get(_8r, _8s); /*13904*/
					if ($get($1.curlen, $1.k) < $1.minseq) { //no-else/*13908*/
						$1.minseq = $get($1.curlen, $1.k); /*13906*/
						$1.txtseq = $get($1.curseq, $1.k); /*13907*/
					} /*13907*/
				} /*13907*/
				$1.text = $a($1.minseq); /*13912*/
				$1.k = 0; /*13913*/
				$1.l = 0; /*13913*/
				for (;;) {
					/*13933*/
					if ($1.k >= $1.txtseq.length) { //no-else/*13914*/
						break; /*13914*/
					} /*13914*/
					$1.char = $get($1.txtseq, $1.k); /*13916*/
					$k[$j++] = $1.char; /*13919*/
					$1[$get($1.textencfuncs, $1.submode)](); /*13919*/
					$1.addtotext(); /*13919*/
					$1.k = $1.k + 1; /*13920*/
					if (($1.char == $1.as) || ($1.char == $1.ps)) { //no-else/*13926*/
						$k[$j++] = $get($1.txtseq, $1.k); /*13924*/
						if ($1.char == $1.as) {
							/*13924*/
							$1.enca(); /*13924*/
						} else {
							/*13924*/
							$1.encp(); /*13924*/
						} /*13924*/
						$1.addtotext(); /*13924*/
						$1.k = $1.k + 1; /*13925*/
					} /*13925*/
					if ($1.char == $1.al) { //no-else/*13929*/
						$1.submode = $1.A; /*13929*/
					} /*13929*/
					if ($1.char == $1.ll) { //no-else/*13930*/
						$1.submode = $1.L; /*13930*/
					} /*13930*/
					if ($1.char == $1.ml) { //no-else/*13931*/
						$1.submode = $1.M; /*13931*/
					} /*13931*/
					if ($1.char == $1.pl) { //no-else/*13932*/
						$1.submode = $1.P; /*13932*/
					} /*13932*/
				} /*13932*/
				if (($1.text.length % 2) == 1) { //no-else/*13943*/
					if ($1.submode == $1.P) {
						/*13940*/
						$k[$j++] = 'pad'; /*13937*/
						$k[$j++] = $1.al; /*13937*/
						$1.encp(); /*13937*/
						var _9i = $k[--$j]; /*13937*/
						$1[$k[--$j]] = _9i; /*13937*/
						$1.submode = $1.A; /*13938*/
					} else {
						/*13940*/
						$k[$j++] = 'pad'; /*13940*/
						$k[$j++] = $1.ps; /*13940*/
						$1[$get($1.textencfuncs, $1.submode)](); /*13940*/
						var _9q = $k[--$j]; /*13940*/
						$1[$k[--$j]] = _9q; /*13940*/
					} /*13940*/
					$k[$j++] = Infinity; /*13942*/
					$aload($1.text); /*13942*/
					$k[$j++] = $1.pad; /*13942*/
					$1.text = $a(); /*13942*/
				} /*13942*/
				$1.out = $a(~~($1.text.length / 2)); /*13945*/
				for (var _9z = 0, _9y = $1.out.length - 1; _9z <= _9y; _9z += 1) {
					/*13949*/
					$1.k = _9z; /*13947*/
					$put($1.out, $1.k, ($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1)); /*13948*/
				} /*13948*/
				$k[$j++] = $1.out; /*13951*/
			}; /*13953*/
			$1.encn = function() {
				$1.in = $k[--$j]; /*13956*/
				$1.out = $a([]); /*13957*/
				for (var _AD = 0, _AC = $1.in.length - 1; _AD <= _AC; _AD += 44) {
					/*13985*/
					$1.k = _AD; /*13959*/
					$k[$j++] = Infinity; /*13963*/
					var _AI = $1.in.length - $1.k; /*13961*/
					$k[$j++] = 1; /*13961*/
					$k[$j++] = $1.in; /*13961*/
					$k[$j++] = $1.k; /*13961*/
					$k[$j++] = _AI; /*13961*/
					if (_AI > 44) { //no-else/*13961*/
						$j--; /*13961*/
						$k[$j++] = 44; /*13961*/
					} /*13961*/
					var _AJ = $k[--$j]; /*13961*/
					var _AK = $k[--$j]; /*13961*/
					$forall($geti($k[--$j], _AK, _AJ), function() {
						/*13962*/
						var _AN = $k[--$j]; /*13962*/
						$k[$j++] = _AN - 48; /*13962*/
					}); /*13962*/
					$1.gmod = $a(); /*13963*/
					$1.cwn = $a([]); /*13964*/
					for (;;) {
						/*13983*/
						$1.dv = 900; /*13965*/
						$1.gmul = $a([]); /*13966*/
						$1.val = 0; /*13966*/
						for (;;) {
							/*13978*/
							if ($1.gmod.length == 0) { //no-else/*13967*/
								break; /*13967*/
							} /*13967*/
							$1.val = ($1.val * 10) + $get($1.gmod, 0); /*13968*/
							$1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); /*13969*/
							if ($1.val < $1.dv) {
								/*13975*/
								if ($1.gmul.length != 0) { //no-else/*13973*/
									$k[$j++] = Infinity; /*13972*/
									$aload($1.gmul); /*13972*/
									$k[$j++] = 0; /*13972*/
									$1.gmul = $a(); /*13972*/
								} /*13972*/
							} else {
								/*13975*/
								$k[$j++] = Infinity; /*13975*/
								$aload($1.gmul); /*13975*/
								$k[$j++] = ~~($1.val / $1.dv); /*13975*/
								$1.gmul = $a(); /*13975*/
							} /*13975*/
							$1.val = $1.val % $1.dv; /*13977*/
						} /*13977*/
						$1.dv = $1.val; /*13979*/
						$k[$j++] = Infinity; /*13980*/
						$k[$j++] = $1.dv; /*13980*/
						$aload($1.cwn); /*13980*/
						$1.cwn = $a(); /*13980*/
						$1.gmod = $1.gmul; /*13981*/
						if ($1.gmul.length == 0) { //no-else/*13982*/
							break; /*13982*/
						} /*13982*/
					} /*13982*/
					$k[$j++] = Infinity; /*13984*/
					$aload($1.out); /*13984*/
					$aload($1.cwn); /*13984*/
					$1.out = $a(); /*13984*/
				} /*13984*/
				$k[$j++] = $1.out; /*13986*/
			}; /*13987*/
			$1.encfuncs = $a(['enct', 'encn', 'encb']); /*13989*/
			$1.addtocws = function() {
				var _Au = $k[--$j]; /*13992*/
				$puti($1.datcws, $1.j, _Au); /*13992*/
				$1.j = _Au.length + $1.j; /*13993*/
			}; /*13994*/
			$1.state = $1.T; /*13997*/
			$1.submode = $1.A; /*13997*/
			$1.datcws = $a($1.seqlen); /*13998*/
			$1.i = 0; /*13999*/
			$1.j = 0; /*13999*/
			for (;;) {
				/*14015*/
				if ($1.i >= $1.seq.length) { //no-else/*14000*/
					break; /*14000*/
				} /*14000*/
				$1.chars = $get($1.seq, $1.i); /*14001*/
				if ($eq($type($1.chars), 'arraytype')) {
					/*14011*/
					$k[$j++] = $1.chars; /*14003*/
					$1[$get($1.encfuncs, $1.state)](); /*14003*/
					$1.addtocws(); /*14003*/
				} else {
					/*14011*/
					$k[$j++] = $a([$get($1.latchcws, $1.chars)]); /*14005*/
					$1.addtocws(); /*14005*/
					if ($1.chars == $1.tl) { //no-else/*14006*/
						$1.state = $1.T; /*14006*/
						$1.submode = $1.A; /*14006*/
					} /*14006*/
					if ($1.chars == $1.nl) { //no-else/*14007*/
						$1.state = $1.N; /*14007*/
					} /*14007*/
					if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //no-else/*14008*/
						$1.state = $1.B; /*14008*/
					} /*14008*/
					if ($1.chars == $1.bs) { //no-else/*14012*/
						$1.i = $1.i + 1; /*14010*/
						$k[$j++] = $get($1.seq, $1.i); /*14011*/
						$1.encb(); /*14011*/
						$1.addtocws(); /*14011*/
					} /*14011*/
				} /*14011*/
				$1.i = $1.i + 1; /*14014*/
			} /*14014*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*14016*/
		} /*14016*/
		$1.m = $1.datcws.length; /*14020*/
		if ($1.eclevel == -1) { //no-else/*14026*/
			if ($1.m <= 40) { //no-else/*14022*/
				$1.eclevel = 2; /*14022*/
			} /*14022*/
			if (($1.m >= 41) && ($1.m <= 160)) { //no-else/*14023*/
				$1.eclevel = 3; /*14023*/
			} /*14023*/
			if (($1.m >= 161) && ($1.m <= 320)) { //no-else/*14024*/
				$1.eclevel = 4; /*14024*/
			} /*14024*/
			if ($1.m >= 321) { //no-else/*14025*/
				$1.eclevel = 5; /*14025*/
			} /*14025*/
		} /*14025*/
		$1.maxeclevel = (~~((Math.log((928 - 1) - $1.m)) / Math.log(2))) - 1; /*14029*/
		if ($1.eclevel > $1.maxeclevel) { //no-else/*14030*/
			$1.eclevel = $1.maxeclevel; /*14030*/
		} /*14030*/
		$1.k = ~~Math.pow(2, $1.eclevel + 1); /*14031*/
		if ($1.columns == 0) { //no-else/*14034*/
			$1.columns = ~~(Math.round(Math.sqrt(($1.m + $1.k) / 3))); /*14034*/
		} /*14034*/
		if (($1.columns >= 1) && ($1.columns <= 30)) { //no-else/*14035*/
			$1.c = $1.columns; /*14035*/
		} /*14035*/
		$1.r = ~~(Math.ceil((($1.m + $1.k) + 1) / $1.columns)); /*14038*/
		if (($1.r < $1.rows) && ($1.rows <= 90)) { //no-else/*14039*/
			$1.r = $1.rows; /*14039*/
		} /*14039*/
		if ($1.r < 3) { //no-else/*14040*/
			$1.r = 3; /*14040*/
		} /*14040*/
		var _C5 = $1.c; /*14043*/
		var _C6 = $1.r; /*14043*/
		var _C7 = $1.m; /*14043*/
		var _C8 = 8; /*14043*/
		var _C9 = (~~((Math.log(((_C5 * _C6) - 1) - _C7)) / Math.log(2))) - 1; /*14043*/
		if (((~~((Math.log(((_C5 * _C6) - 1) - _C7)) / Math.log(2))) - 1) > 8) { //no-else/*14043*/
			var _ = _C8; /*14043*/
			_C8 = _C9; /*14043*/
			_C9 = _; /*14043*/
		} /*14043*/
		$1.maxeclevel = _C9; /*14043*/
		if ($1.maxeclevel > $1.eclevel) { //no-else/*14047*/
			$1.eclevel = $1.maxeclevel; /*14045*/
			$1.k = ~~Math.pow(2, $1.eclevel + 1); /*14046*/
		} /*14046*/
		$1.n = ($1.c * $1.r) - $1.k; /*14050*/
		$1.cws = $a(($1.c * $1.r) + 1); /*14051*/
		$put($1.cws, 0, $1.n); /*14052*/
		$puti($1.cws, 1, $1.datcws); /*14053*/
		$k[$j++] = $1.cws; /*14054*/
		$k[$j++] = $1.m + 1; /*14054*/
		$k[$j++] = Infinity; /*14054*/
		for (var _CS = 0, _CT = ($1.n - $1.m) - 1; _CS < _CT; _CS++) {
			/*14054*/
			$k[$j++] = 900; /*14054*/
		} /*14054*/
		var _CU = $a(); /*14054*/
		var _CV = $k[--$j]; /*14054*/
		$puti($k[--$j], _CV, _CU); /*14054*/
		$k[$j++] = $1.cws; /*14055*/
		$k[$j++] = $1.n; /*14055*/
		$k[$j++] = Infinity; /*14055*/
		for (var _Ca = 0, _Cb = $1.k; _Ca < _Cb; _Ca++) {
			/*14055*/
			$k[$j++] = 0; /*14055*/
		} /*14055*/
		$k[$j++] = 0; /*14055*/
		var _Cc = $a(); /*14055*/
		var _Cd = $k[--$j]; /*14055*/
		$puti($k[--$j], _Cd, _Cc); /*14055*/
		$k[$j++] = Infinity; /*14058*/
		$k[$j++] = 1; /*14058*/
		for (var _Cf = 0, _Cg = 928; _Cf < _Cg; _Cf++) {
			/*14058*/
			var _Ch = $k[--$j]; /*14058*/
			$k[$j++] = _Ch; /*14058*/
			$k[$j++] = (_Ch * 3) % 929; /*14058*/
		} /*14058*/
		$1.rsalog = $a(); /*14058*/
		$1.rslog = $a(929); /*14059*/
		for (var _Ck = 1; _Ck <= 928; _Ck += 1) {
			/*14060*/
			$put($1.rslog, $get($1.rsalog, _Ck), _Ck); /*14060*/
		} /*14060*/
		$1.rsprod = function() {
			var _Co = $k[--$j]; /*14064*/
			var _Cp = $k[--$j]; /*14064*/
			$k[$j++] = _Cp; /*14068*/
			$k[$j++] = _Co; /*14068*/
			if ((_Co != 0) && (_Cp != 0)) {
				/*14067*/
				var _Cs = $get($1.rslog, $k[--$j]); /*14065*/
				var _Cx = $get($1.rsalog, (_Cs + $get($1.rslog, $k[--$j])) % 928); /*14065*/
				$k[$j++] = _Cx; /*14065*/
			} else {
				/*14067*/
				$j -= 2; /*14067*/
				$k[$j++] = 0; /*14067*/
			} /*14067*/
		}; /*14069*/
		$k[$j++] = Infinity; /*14072*/
		$k[$j++] = 1; /*14072*/
		for (var _Cz = 0, _D0 = $1.k; _Cz < _D0; _Cz++) {
			/*14072*/
			$k[$j++] = 0; /*14072*/
		} /*14072*/
		$1.coeffs = $a(); /*14072*/
		for (var _D4 = 1, _D3 = $1.k; _D4 <= _D3; _D4 += 1) {
			/*14081*/
			$1.i = _D4; /*14074*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*14075*/
			for (var _DB = $1.i - 1; _DB >= 1; _DB -= 1) {
				/*14079*/
				$1.j = _DB; /*14077*/
				$k[$j++] = $1.coeffs; /*14078*/
				$k[$j++] = $1.j; /*14078*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*14078*/
				$k[$j++] = $get($1.coeffs, $1.j); /*14078*/
				$k[$j++] = $get($1.rsalog, $1.i); /*14078*/
				$1.rsprod(); /*14078*/
				var _DN = $k[--$j]; /*14078*/
				var _DO = $k[--$j]; /*14078*/
				var _DP = $k[--$j]; /*14078*/
				$put($k[--$j], _DP, (_DO + _DN) % 929); /*14078*/
			} /*14078*/
			$k[$j++] = $1.coeffs; /*14080*/
			$k[$j++] = 0; /*14080*/
			$k[$j++] = $get($1.coeffs, 0); /*14080*/
			$k[$j++] = $get($1.rsalog, $1.i); /*14080*/
			$1.rsprod(); /*14080*/
			var _DX = $k[--$j]; /*14080*/
			var _DY = $k[--$j]; /*14080*/
			$put($k[--$j], _DY, _DX); /*14080*/
		} /*14080*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*14082*/
		for (var _De = $1.coeffs.length - 1; _De >= 0; _De -= 2) {
			/*14083*/
			var _Df = $1.coeffs; /*14083*/
			$put(_Df, _De, 929 - $get(_Df, _De)); /*14083*/
		} /*14083*/
		for (var _Dj = 0, _Di = $1.n - 1; _Dj <= _Di; _Dj += 1) {
			/*14092*/
			$1.t = ($get($1.cws, _Dj) + $get($1.cws, $1.n)) % 929; /*14087*/
			for (var _Dr = 0, _Dq = $1.k - 1; _Dr <= _Dq; _Dr += 1) {
				/*14091*/
				$1.j = _Dr; /*14089*/
				$put($1.cws, $1.n + $1.j, ($get($1.cws, ($1.n + $1.j) + 1) + (929 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 929))) % 929); /*14090*/
			} /*14090*/
		} /*14090*/
		for (var _E8 = $1.n, _E7 = $1.n + $1.k; _E8 <= _E7; _E8 += 1) {
			/*14093*/
			$put($1.cws, _E8, (929 - $get($1.cws, _E8)) % 929); /*14093*/
		} /*14093*/
		$1.cws = $geti($1.cws, 0, $1.cws.length - 1); /*14096*/
		$1.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); /*14338*/
		$1.cwtobits = function() {
			var _EL = $get($1.clusters, $k[--$j]); /*14342*/
			$1.v = $get(_EL, $k[--$j]); /*14342*/
			$k[$j++] = Infinity; /*14343*/
			for (var _EO = 0, _EP = 17; _EO < _EP; _EO++) {
				/*14343*/
				$k[$j++] = 0; /*14343*/
			} /*14343*/
			var _ES = $cvrs($s(17), $1.v, 2); /*14343*/
			for (var _ET = 0, _EU = _ES.length; _ET < _EU; _ET++) {
				/*14343*/
				$k[$j++] = $get(_ES, _ET) - 48; /*14343*/
			} /*14343*/
			var _EW = $a(); /*14343*/
			$k[$j++] = $geti(_EW, _EW.length - 17, 17); /*14344*/
		}; /*14345*/
		if ($1.compact) {
			/*14351*/
			$1.rwid = (((17 * $1.c) + 17) + 17) + 1; /*14349*/
		} else {
			/*14351*/
			$1.rwid = ((((17 * $1.c) + 17) + 17) + 17) + 18; /*14351*/
		} /*14351*/
		$1.pixs = $a($1.rwid * $1.r); /*14353*/
		for (var _Eg = 0, _Ef = $1.r - 1; _Eg <= _Ef; _Eg += 1) {
			/*14383*/
			$1.i = _Eg; /*14356*/
			if (($1.i % 3) == 0) { //no-else/*14361*/
				$1.lcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); /*14359*/
				$1.rcw = (((~~($1.i / 3)) * 30) + $1.c) - 1; /*14360*/
			} /*14360*/
			if (($1.i % 3) == 1) { //no-else/*14365*/
				$1.lcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); /*14363*/
				$1.rcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); /*14364*/
			} /*14364*/
			if (($1.i % 3) == 2) { //no-else/*14369*/
				$1.lcw = (((~~($1.i / 3)) * 30) + $1.c) - 1; /*14367*/
				$1.rcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); /*14368*/
			} /*14368*/
			$k[$j++] = $1.pixs; /*14379*/
			$k[$j++] = $1.rwid * $1.i; /*14379*/
			$k[$j++] = Infinity; /*14379*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 0; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 0; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 0; /*14373*/
			$k[$j++] = 1; /*14373*/
			$k[$j++] = 0; /*14373*/
			$k[$j++] = 0; /*14373*/
			$k[$j++] = 0; /*14373*/
			$k[$j++] = $1.lcw; /*14373*/
			$k[$j++] = $1.i % 3; /*14373*/
			$1.cwtobits(); /*14373*/
			$forall($k[--$j]); /*14373*/
			$forall($geti($1.cws, $1.c * $1.i, $1.c), function() {
				/*14374*/
				$k[$j++] = $1.i % 3; /*14374*/
				$1.cwtobits(); /*14374*/
				$forall($k[--$j]); /*14374*/
			}); /*14374*/
			if ($1.compact) {
				/*14379*/
				$k[$j++] = 1; /*14376*/
			} else {
				/*14379*/
				$k[$j++] = $1.rcw; /*14378*/
				$k[$j++] = $1.i % 3; /*14378*/
				$1.cwtobits(); /*14378*/
				$forall($k[--$j]); /*14378*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 0; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 0; /*14379*/
				$k[$j++] = 0; /*14379*/
				$k[$j++] = 0; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 0; /*14379*/
				$k[$j++] = 1; /*14379*/
				$k[$j++] = 0; /*14379*/
				$k[$j++] = 0; /*14379*/
				$k[$j++] = 1; /*14379*/
			} /*14379*/
			var _FF = $a(); /*14379*/
			var _FG = $k[--$j]; /*14381*/
			$puti($k[--$j], _FG, _FF); /*14381*/
		} /*14381*/
		var _FP = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.rwid],
			["pixy", $1.r],
			["height", ($1.r / 72) * $1.rowmult],
			["width", $1.rwid / 72],
			["opt", $1.options]
		]); /*14393*/
		$k[$j++] = _FP; /*14396*/
		if (!$1.dontdraw) { //no-else/*14396*/
			$0.renmatrix(); /*14396*/
		} /*14396*/
	};
	$0.pdf417compact = function() {
		var $1 = {}; /*14426*/
		$1.options = $k[--$j]; /*14428*/
		$1.barcode = $k[--$j]; /*14429*/
		$1.dontdraw = false; /*14431*/
		$forall($1.options, function() {
			/*14442*/
			var _3 = $k[--$j]; /*14442*/
			$1[$k[--$j]] = _3; /*14442*/
		}); /*14442*/
		$put($1.options, "dontdraw", true); /*14445*/
		$put($1.options, "compact", true); /*14446*/
		$k[$j++] = 'args'; /*14448*/
		$k[$j++] = $1.barcode; /*14448*/
		$k[$j++] = $1.options; /*14448*/
		$0.pdf417(); /*14448*/
		var _9 = $k[--$j]; /*14448*/
		$1[$k[--$j]] = _9; /*14448*/
		$put($1.args, "opt", $1.options); /*14450*/
		$k[$j++] = $1.args; /*14453*/
		if (!$1.dontdraw) { //no-else/*14453*/
			$0.renmatrix(); /*14453*/
		} /*14453*/
	};
	$0.micropdf417 = function() {
		var $1 = {}; /*14482*/
		$1.options = $k[--$j]; /*14484*/
		$1.barcode = $k[--$j]; /*14485*/
		$1.dontdraw = false; /*14487*/
		$1.version = "unset"; /*14488*/
		$1.columns = 0; /*14489*/
		$1.rows = 0; /*14490*/
		$1.rowmult = 2; /*14491*/
		$1.encoding = "auto"; /*14492*/
		$1.cca = false; /*14493*/
		$1.ccb = false; /*14494*/
		$1.raw = false; /*14495*/
		$1.parse = false; /*14496*/
		$forall($1.options, function() {
			/*14507*/
			var _3 = $k[--$j]; /*14507*/
			$1[$k[--$j]] = _3; /*14507*/
		}); /*14507*/
		if ($ne($1.version, "unset")) { //no-else/*14513*/
			$search($1.version, "x"); /*14510*/
			$j--; /*14511*/
			$1.columns = $k[--$j]; /*14511*/
			$j--; /*14512*/
			$1.rows = $k[--$j]; /*14512*/
		} /*14512*/
		$1.columns = ~~$z($1.columns); /*14515*/
		$1.rows = ~~$z($1.rows); /*14516*/
		$1.rowmult = +$1.rowmult; /*14517*/
		if ($1.raw) { //no-else/*14540*/
			$1.encoding = "raw"; /*14540*/
		} /*14540*/
		if ($1.cca) { //no-else/*14541*/
			$1.encoding = "cca"; /*14541*/
		} /*14541*/
		if ($eq($1.encoding, "raw") || $eq($1.encoding, "cca")) { //no-else/*14555*/
			$1.datcws = $a($1.barcode.length); /*14545*/
			$1.i = 0; /*14546*/
			$1.j = 0; /*14546*/
			for (;;) {
				/*14553*/
				if ($1.i == $1.barcode.length) { //no-else/*14548*/
					break; /*14548*/
				} /*14548*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*14549*/
				$put($1.datcws, $1.j, $1.cw); /*14550*/
				$1.i = $1.i + 4; /*14551*/
				$1.j = $1.j + 1; /*14552*/
			} /*14552*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*14554*/
		} /*14554*/
		$k[$j++] = Infinity; /*14557*/
		$forall($1.barcode); /*14557*/
		$1.barcode = $a(); /*14557*/
		$1.barlen = $1.barcode.length; /*14558*/
		if ($1.ccb) { //no-else/*14560*/
			$1.encoding = "ccb"; /*14560*/
		} /*14560*/
		$1.encb = function() {
			$1.in = $k[--$j]; /*14563*/
			$1.inlen = $1.in.length; /*14564*/
			$1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); /*14565*/
			for (var _g = 0, _f = (~~($1.inlen / 6)) - 1; _g <= _f; _g += 1) {
				/*14588*/
				$1.k = _g; /*14567*/
				$k[$j++] = Infinity; /*14568*/
				$aload($geti($1.in, $1.k * 6, 3)); /*14568*/
				$1.msbs = $a(); /*14568*/
				$k[$j++] = Infinity; /*14572*/
				$aload($1.msbs); /*14570*/
				var _m = $k[--$j]; /*14570*/
				var _n = $k[--$j]; /*14570*/
				var _o = $k[--$j]; /*14570*/
				$k[$j++] = (_m + (_n * 256)) + (_o * 65536); /*14571*/
				for (var _p = 0, _q = 3; _p < _q; _p++) {
					/*14571*/
					var _r = $k[--$j]; /*14571*/
					$k[$j++] = _r % 900; /*14571*/
					$k[$j++] = ~~(_r / 900); /*14571*/
				} /*14571*/
				$1.mscs = $a(); /*14572*/
				$k[$j++] = Infinity; /*14573*/
				$aload($geti($1.in, ($1.k * 6) + 3, 3)); /*14573*/
				$1.lsbs = $a(); /*14573*/
				$k[$j++] = Infinity; /*14577*/
				$aload($1.lsbs); /*14575*/
				var _y = $k[--$j]; /*14575*/
				var _z = $k[--$j]; /*14575*/
				var _10 = $k[--$j]; /*14575*/
				$k[$j++] = (_y + (_z * 256)) + (_10 * 65536); /*14576*/
				for (var _11 = 0, _12 = 3; _11 < _12; _11++) {
					/*14576*/
					var _13 = $k[--$j]; /*14576*/
					$k[$j++] = _13 % 900; /*14576*/
					$k[$j++] = ~~(_13 / 900); /*14576*/
				} /*14576*/
				$1.lscs = $a(); /*14577*/
				var _16 = $get($1.lscs, 0); /*14578*/
				var _18 = $get($1.mscs, 0); /*14578*/
				$put($1.out, ($1.k * 5) + 4, (_16 + (_18 * 316)) % 900); /*14579*/
				var _1C = $get($1.lscs, 1); /*14580*/
				var _1E = $get($1.mscs, 0); /*14580*/
				var _1G = $get($1.mscs, 1); /*14580*/
				$put($1.out, ($1.k * 5) + 3, ((((~~((_16 + (_18 * 316)) / 900)) + _1C) + (_1E * 641)) + (_1G * 316)) % 900); /*14581*/
				var _1K = $get($1.lscs, 2); /*14582*/
				var _1M = $get($1.mscs, 0); /*14582*/
				var _1O = $get($1.mscs, 1); /*14582*/
				var _1Q = $get($1.mscs, 2); /*14582*/
				$put($1.out, ($1.k * 5) + 2, (((((~~(((((~~((_16 + (_18 * 316)) / 900)) + _1C) + (_1E * 641)) + (_1G * 316)) / 900)) + _1K) + (_1M * 20)) + (_1O * 641)) + (_1Q * 316)) % 900); /*14583*/
				var _1U = $get($1.lscs, 3); /*14584*/
				var _1W = $get($1.mscs, 1); /*14584*/
				var _1Y = $get($1.mscs, 2); /*14584*/
				$put($1.out, ($1.k * 5) + 1, ((((~~((((((~~(((((~~((_16 + (_18 * 316)) / 900)) + _1C) + (_1E * 641)) + (_1G * 316)) / 900)) + _1K) + (_1M * 20)) + (_1O * 641)) + (_1Q * 316)) / 900)) + _1U) + (_1W * 20)) + (_1Y * 641)) % 900); /*14585*/
				$put($1.out, $1.k * 5, ((~~(((((~~((((((~~(((((~~((_16 + (_18 * 316)) / 900)) + _1C) + (_1E * 641)) + (_1G * 316)) / 900)) + _1K) + (_1M * 20)) + (_1O * 641)) + (_1Q * 316)) / 900)) + _1U) + (_1W * 20)) + (_1Y * 641)) / 900)) + ($get($1.mscs, 2) * 20)) % 900); /*14587*/
			} /*14587*/
			$1.rem = $1.inlen % 6; /*14589*/
			if ($1.rem != 0) { //no-else/*14594*/
				$k[$j++] = $1.out; /*14592*/
				$k[$j++] = $1.out.length - $1.rem; /*14592*/
				$k[$j++] = Infinity; /*14592*/
				$aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); /*14592*/
				var _1p = $a(); /*14592*/
				var _1q = $k[--$j]; /*14593*/
				$puti($k[--$j], _1q, _1p); /*14593*/
			} /*14593*/
			$k[$j++] = $1.out; /*14595*/
		}; /*14596*/
		if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccb")) { //no-else/*14603*/
			$1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); /*14599*/
			var _20 = (($1.barlen % 6) == 0) ? 924 : 901; /*14600*/
			$put($1.datcws, 0, _20); /*14600*/
			$k[$j++] = $1.datcws; /*14601*/
			$k[$j++] = 1; /*14601*/
			$k[$j++] = $1.barcode; /*14601*/
			$1.encb(); /*14601*/
			var _23 = $k[--$j]; /*14601*/
			var _24 = $k[--$j]; /*14601*/
			$puti($k[--$j], _24, _23); /*14601*/
			if ($eq($1.encoding, "ccb")) { //no-else/*14602*/
				$k[$j++] = Infinity; /*14602*/
				$k[$j++] = 920; /*14602*/
				$aload($1.datcws); /*14602*/
				$1.datcws = $a(); /*14602*/
			} /*14602*/
		} /*14602*/
		if ($eq($1.encoding, "auto")) { //no-else/*14967*/
			$1.T = 0; /*14608*/
			$1.N = 1; /*14608*/
			$1.B = 2; /*14608*/
			$1.A = 0; /*14609*/
			$1.L = 1; /*14609*/
			$1.M = 2; /*14609*/
			$1.P = 3; /*14609*/
			$1.tl = -1; /*14612*/
			$1.nl = -2; /*14612*/
			$1.bl = -3; /*14612*/
			$1.bl6 = -4; /*14612*/
			$1.bs = -5; /*14612*/
			$1.al = -6; /*14615*/
			$1.ll = -7; /*14615*/
			$1.ml = -8; /*14615*/
			$1.pl = -9; /*14615*/
			$1.as = -10; /*14615*/
			$1.ps = -11; /*14615*/
			$1.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $1.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$1.ll, $1.as, $1.ll, "}"]), $a([$1.ml, $1.ml, $1.al, "'"]), $a([$1.ps, $1.ps, $1.ps, $1.al])]); /*14650*/
			$1.charvals = $a([new Map, new Map, new Map, new Map]); /*14653*/
			$1.alltext = new Map; /*14654*/
			for (var _2t = 0, _2s = $1.charmaps.length - 1; _2t <= _2s; _2t += 1) {
				/*14664*/
				$1.i = _2t; /*14656*/
				$1.encs = $get($1.charmaps, $1.i); /*14657*/
				for (var _2x = 0; _2x <= 3; _2x += 1) {
					/*14663*/
					$1.j = _2x; /*14659*/
					var _30 = $get($1.encs, $1.j); /*14660*/
					$k[$j++] = _30; /*14660*/
					if ($eq($type(_30), 'stringtype')) { //no-else/*14660*/
						var _33 = $get($k[--$j], 0); /*14660*/
						$k[$j++] = _33; /*14660*/
					} /*14660*/
					var _34 = $k[--$j]; /*14661*/
					$put($get($1.charvals, $1.j), _34, $1.i); /*14661*/
					$put($1.alltext, _34, -1); /*14662*/
				} /*14662*/
			} /*14662*/
			$1.e = 10000; /*14666*/
			$1.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); /*14674*/
			$1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.ml, $1.al]), $a([]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.al]), $a([$1.ll]), $a([]), $a([$1.pl])]), $a([$a([$1.al]), $a([$1.al, $1.ll]), $a([$1.al, $1.ml]), $a([])])]); /*14682*/
			$1.shftlen = $a([$a([$1.e, $1.e, $1.e, 1]), $a([1, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, $1.e])]); /*14690*/
			$k[$j++] = Infinity; /*14693*/
			for (var _49 = 0, _4A = $1.barlen; _49 < _4A; _49++) {
				/*14693*/
				$k[$j++] = 0; /*14693*/
			} /*14693*/
			$k[$j++] = 0; /*14693*/
			$1.numdigits = $a(); /*14693*/
			$k[$j++] = Infinity; /*14694*/
			for (var _4D = 0, _4E = $1.barlen; _4D < _4E; _4D++) {
				/*14694*/
				$k[$j++] = 0; /*14694*/
			} /*14694*/
			$k[$j++] = 0; /*14694*/
			$1.numtext = $a(); /*14694*/
			$k[$j++] = Infinity; /*14695*/
			for (var _4H = 0, _4I = $1.barlen; _4H < _4I; _4H++) {
				/*14695*/
				$k[$j++] = 0; /*14695*/
			} /*14695*/
			$k[$j++] = 0; /*14695*/
			$1.numbytes = $a(); /*14695*/
			for (var _4L = $1.barlen - 1; _4L >= 0; _4L -= 1) {
				/*14707*/
				$1.i = _4L; /*14697*/
				var _4O = $get($1.barcode, $1.i); /*14698*/
				if ((_4O >= 48) && (_4O <= 57)) { //no-else/*14700*/
					$put($1.numdigits, $1.i, $get($1.numdigits, $1.i + 1) + 1); /*14699*/
				} /*14699*/
				var _4Y = $get($1.alltext, $get($1.barcode, $1.i)) !== undefined; /*14701*/
				if (_4Y && ($get($1.numdigits, $1.i) < 13)) { //no-else/*14703*/
					$put($1.numtext, $1.i, $get($1.numtext, $1.i + 1) + 1); /*14702*/
				} /*14702*/
				if (($get($1.numtext, $1.i) < 5) && ($get($1.numdigits, $1.i) < 13)) { //no-else/*14706*/
					$put($1.numbytes, $1.i, $get($1.numbytes, $1.i + 1) + 1); /*14705*/
				} /*14705*/
			} /*14705*/
			$1.numdigits = $geti($1.numdigits, 0, $1.barlen); /*14708*/
			$1.numtext = $geti($1.numtext, 0, $1.barlen); /*14709*/
			$1.numbytes = $geti($1.numbytes, 0, $1.barlen); /*14710*/
			$1.seq = $a([]); /*14712*/
			$1.seqlen = 0; /*14712*/
			$1.state = $1.B; /*14712*/
			$1.p = 0; /*14712*/
			for (;;) {
				/*14755*/
				if ($1.p == $1.barlen) { //no-else/*14713*/
					break; /*14713*/
				} /*14713*/
				$1.n = $get($1.numdigits, $1.p); /*14714*/
				if ($1.n >= 13) {
					/*14753*/
					$k[$j++] = Infinity; /*14720*/
					$aload($1.seq); /*14717*/
					$k[$j++] = $1.nl; /*14719*/
					$k[$j++] = Infinity; /*14719*/
					$aload($geti($1.barcode, $1.p, $1.n)); /*14719*/
					var _5F = $a(); /*14719*/
					$k[$j++] = _5F; /*14719*/
					$1.seq = $a(); /*14720*/
					$1.state = $1.N; /*14721*/
					$1.p = $1.p + $1.n; /*14722*/
					$1.seqlen = ($1.seqlen + 1) + $1.n; /*14723*/
				} else {
					/*14753*/
					$1.t = $get($1.numtext, $1.p); /*14725*/
					if ($1.t >= 5) {
						/*14753*/
						$k[$j++] = Infinity; /*14731*/
						$aload($1.seq); /*14728*/
						if ($1.state != $1.T) { //no-else/*14729*/
							$k[$j++] = $1.tl; /*14729*/
						} /*14729*/
						$k[$j++] = Infinity; /*14730*/
						$aload($geti($1.barcode, $1.p, $1.t)); /*14730*/
						var _5Y = $a(); /*14730*/
						$k[$j++] = _5Y; /*14730*/
						$1.seq = $a(); /*14731*/
						$1.state = $1.T; /*14732*/
						$1.p = $1.p + $1.t; /*14733*/
						$1.seqlen = ($1.seqlen + 1) + $1.t; /*14734*/
					} else {
						/*14753*/
						$1.b = $get($1.numbytes, $1.p); /*14736*/
						if (($1.b == 1) && ($1.state == $1.T)) {
							/*14753*/
							$k[$j++] = Infinity; /*14742*/
							$aload($1.seq); /*14739*/
							$k[$j++] = $1.bs; /*14741*/
							$k[$j++] = $a([$get($1.barcode, $1.p)]); /*14741*/
							$1.seq = $a(); /*14742*/
							$1.p = $1.p + $1.b; /*14743*/
							$1.seqlen = $1.seqlen + 2; /*14744*/
						} else {
							/*14753*/
							$k[$j++] = Infinity; /*14750*/
							$aload($1.seq); /*14747*/
							var _5x = (($1.b % 6) != 0) ? $1.bl : $1.bl6; /*14748*/
							$k[$j++] = _5x; /*14749*/
							$k[$j++] = Infinity; /*14749*/
							$aload($geti($1.barcode, $1.p, $1.b)); /*14749*/
							var _62 = $a(); /*14749*/
							$k[$j++] = _62; /*14749*/
							$1.seq = $a(); /*14750*/
							$1.state = $1.B; /*14751*/
							$1.p = $1.p + $1.b; /*14752*/
							$1.seqlen = ($1.seqlen + 1) + $1.b; /*14753*/
						} /*14753*/
					} /*14753*/
				} /*14753*/
			} /*14753*/
			$k[$j++] = Infinity; /*14758*/
			$k[$j++] = $1.tl; /*14758*/
			$k[$j++] = 900; /*14758*/
			$k[$j++] = $1.bl; /*14758*/
			$k[$j++] = 901; /*14758*/
			$k[$j++] = $1.bl6; /*14758*/
			$k[$j++] = 924; /*14758*/
			$k[$j++] = $1.nl; /*14758*/
			$k[$j++] = 902; /*14758*/
			$k[$j++] = $1.bs; /*14758*/
			$k[$j++] = 913; /*14758*/
			$1.latchcws = $d(); /*14759*/
			$1.enca = function() {
				var _6J = $get($get($1.charvals, $1.A), $k[--$j]); /*14762*/
				$k[$j++] = _6J; /*14762*/
			}; /*14762*/
			$1.encl = function() {
				var _6O = $get($get($1.charvals, $1.L), $k[--$j]); /*14763*/
				$k[$j++] = _6O; /*14763*/
			}; /*14763*/
			$1.encm = function() {
				var _6T = $get($get($1.charvals, $1.M), $k[--$j]); /*14764*/
				$k[$j++] = _6T; /*14764*/
			}; /*14764*/
			$1.encp = function() {
				var _6Y = $get($get($1.charvals, $1.P), $k[--$j]); /*14765*/
				$k[$j++] = _6Y; /*14765*/
			}; /*14765*/
			$1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); /*14766*/
			$1.addtotext = function() {
				$put($1.text, $1.l, $k[--$j]); /*14769*/
				$1.l = $1.l + 1; /*14770*/
			}; /*14771*/
			$1.enct = function() {
				$1.in = $k[--$j]; /*14775*/
				$1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); /*14777*/
				$put($1.curlen, $1.submode, 0); /*14778*/
				$1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); /*14779*/
				$forall($1.in, function() {
					/*14849*/
					$1.char = $k[--$j]; /*14784*/
					for (;;) {
						/*14805*/
						$1.imp = false; /*14788*/
						var _6x = $a([$1.A, $1.L, $1.M, $1.P]); /*14789*/
						for (var _6y = 0, _6z = _6x.length; _6y < _6z; _6y++) {
							/*14803*/
							$1.x = $get(_6x, _6y); /*14790*/
							var _75 = $a([$1.A, $1.L, $1.M, $1.P]); /*14791*/
							for (var _76 = 0, _77 = _75.length; _76 < _77; _76++) {
								/*14802*/
								$1.y = $get(_75, _76); /*14792*/
								$1.cost = $get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y); /*14793*/
								if ($1.cost < $get($1.curlen, $1.y)) { //no-else/*14801*/
									$put($1.curlen, $1.y, $1.cost); /*14795*/
									$k[$j++] = $1.curseq; /*14798*/
									$k[$j++] = $1.y; /*14798*/
									$k[$j++] = Infinity; /*14798*/
									$aload($get($1.curseq, $1.x)); /*14797*/
									$aload($get($get($1.latseq, $1.x), $1.y)); /*14798*/
									var _7Y = $a(); /*14798*/
									var _7Z = $k[--$j]; /*14799*/
									$put($k[--$j], _7Z, _7Y); /*14799*/
									$1.imp = true; /*14800*/
								} /*14800*/
							} /*14800*/
						} /*14800*/
						if (!$1.imp) { //no-else/*14804*/
							break; /*14804*/
						} /*14804*/
					} /*14804*/
					$1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); /*14808*/
					$1.nxtseq = $a(4); /*14809*/
					var _7m = $a([$1.A, $1.L, $1.M, $1.P]); /*14811*/
					for (var _7n = 0, _7o = _7m.length; _7n < _7o; _7n++) {
						/*14844*/
						$1.x = $get(_7m, _7n); /*14812*/
						for (;;) {
							/*14842*/
							var _7u = $get($get($1.charvals, $1.x), $1.char) !== undefined; /*14816*/
							if (!_7u) { //no-else/*14816*/
								break; /*14816*/
							} /*14816*/
							$1.cost = $get($1.curlen, $1.x) + 1; /*14819*/
							if ($1.cost < $get($1.nxtlen, $1.x)) { //no-else/*14823*/
								$put($1.nxtlen, $1.x, $1.cost); /*14821*/
								$k[$j++] = $1.nxtseq; /*14822*/
								$k[$j++] = $1.x; /*14822*/
								$k[$j++] = Infinity; /*14822*/
								$aload($get($1.curseq, $1.x)); /*14822*/
								$k[$j++] = $1.char; /*14822*/
								var _8B = $a(); /*14822*/
								var _8C = $k[--$j]; /*14822*/
								$put($k[--$j], _8C, _8B); /*14822*/
							} /*14822*/
							var _8I = $a([$1.A, $1.L, $1.M, $1.P]); /*14826*/
							for (var _8J = 0, _8K = _8I.length; _8J < _8K; _8J++) {
								/*14839*/
								$1.y = $get(_8I, _8J); /*14827*/
								if ($ne($1.x, $1.y)) { //no-else/*14838*/
									$1.cost = ($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1; /*14829*/
									if ($1.cost < $get($1.nxtlen, $1.y)) { //no-else/*14837*/
										$put($1.nxtlen, $1.y, $1.cost); /*14831*/
										$k[$j++] = $1.nxtseq; /*14835*/
										$k[$j++] = $1.y; /*14835*/
										$k[$j++] = Infinity; /*14835*/
										$aload($get($1.curseq, $1.y)); /*14833*/
										var _8k = ($1.x == $1.A) ? $1.as : $1.ps; /*14834*/
										$k[$j++] = _8k; /*14835*/
										$k[$j++] = $1.char; /*14835*/
										var _8m = $a(); /*14835*/
										var _8n = $k[--$j]; /*14836*/
										$put($k[--$j], _8n, _8m); /*14836*/
									} /*14836*/
								} /*14836*/
							} /*14836*/
							break; /*14841*/
						} /*14841*/
					} /*14841*/
					$1.curlen = $1.nxtlen; /*14846*/
					$1.curseq = $1.nxtseq; /*14847*/
				}); /*14847*/
				$1.minseq = $1.e; /*14852*/
				var _8w = $a([$1.A, $1.L, $1.M, $1.P]); /*14853*/
				for (var _8x = 0, _8y = _8w.length; _8x < _8y; _8x++) {
					/*14859*/
					$1.k = $get(_8w, _8x); /*14854*/
					if ($get($1.curlen, $1.k) < $1.minseq) { //no-else/*14858*/
						$1.minseq = $get($1.curlen, $1.k); /*14856*/
						$1.txtseq = $get($1.curseq, $1.k); /*14857*/
					} /*14857*/
				} /*14857*/
				$1.text = $a($1.minseq); /*14862*/
				$1.k = 0; /*14863*/
				$1.l = 0; /*14863*/
				for (;;) {
					/*14883*/
					if ($1.k >= $1.txtseq.length) { //no-else/*14864*/
						break; /*14864*/
					} /*14864*/
					$1.char = $get($1.txtseq, $1.k); /*14866*/
					$k[$j++] = $1.char; /*14869*/
					$1[$get($1.textencfuncs, $1.submode)](); /*14869*/
					$1.addtotext(); /*14869*/
					$1.k = $1.k + 1; /*14870*/
					if (($1.char == $1.as) || ($1.char == $1.ps)) { //no-else/*14876*/
						$k[$j++] = $get($1.txtseq, $1.k); /*14874*/
						if ($1.char == $1.as) {
							/*14874*/
							$1.enca(); /*14874*/
						} else {
							/*14874*/
							$1.encp(); /*14874*/
						} /*14874*/
						$1.addtotext(); /*14874*/
						$1.k = $1.k + 1; /*14875*/
					} /*14875*/
					if ($1.char == $1.al) { //no-else/*14879*/
						$1.submode = $1.A; /*14879*/
					} /*14879*/
					if ($1.char == $1.ll) { //no-else/*14880*/
						$1.submode = $1.L; /*14880*/
					} /*14880*/
					if ($1.char == $1.ml) { //no-else/*14881*/
						$1.submode = $1.M; /*14881*/
					} /*14881*/
					if ($1.char == $1.pl) { //no-else/*14882*/
						$1.submode = $1.P; /*14882*/
					} /*14882*/
				} /*14882*/
				if (($1.text.length % 2) == 1) { //no-else/*14893*/
					if ($1.submode == $1.P) {
						/*14890*/
						$k[$j++] = 'pad'; /*14887*/
						$k[$j++] = $1.al; /*14887*/
						$1.encp(); /*14887*/
						var _9n = $k[--$j]; /*14887*/
						$1[$k[--$j]] = _9n; /*14887*/
						$1.submode = $1.A; /*14888*/
					} else {
						/*14890*/
						$k[$j++] = 'pad'; /*14890*/
						$k[$j++] = $1.ps; /*14890*/
						$1[$get($1.textencfuncs, $1.submode)](); /*14890*/
						var _9v = $k[--$j]; /*14890*/
						$1[$k[--$j]] = _9v; /*14890*/
					} /*14890*/
					$k[$j++] = Infinity; /*14892*/
					$aload($1.text); /*14892*/
					$k[$j++] = $1.pad; /*14892*/
					$1.text = $a(); /*14892*/
				} /*14892*/
				$1.out = $a(~~($1.text.length / 2)); /*14895*/
				for (var _A4 = 0, _A3 = $1.out.length - 1; _A4 <= _A3; _A4 += 1) {
					/*14899*/
					$1.k = _A4; /*14897*/
					$put($1.out, $1.k, ($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1)); /*14898*/
				} /*14898*/
				$k[$j++] = $1.out; /*14901*/
			}; /*14903*/
			$1.encn = function() {
				$1.in = $k[--$j]; /*14906*/
				$1.out = $a([]); /*14907*/
				for (var _AI = 0, _AH = $1.in.length - 1; _AI <= _AH; _AI += 44) {
					/*14935*/
					$1.k = _AI; /*14909*/
					$k[$j++] = Infinity; /*14913*/
					var _AN = $1.in.length - $1.k; /*14911*/
					$k[$j++] = 1; /*14911*/
					$k[$j++] = $1.in; /*14911*/
					$k[$j++] = $1.k; /*14911*/
					$k[$j++] = _AN; /*14911*/
					if (_AN > 44) { //no-else/*14911*/
						$j--; /*14911*/
						$k[$j++] = 44; /*14911*/
					} /*14911*/
					var _AO = $k[--$j]; /*14911*/
					var _AP = $k[--$j]; /*14911*/
					$forall($geti($k[--$j], _AP, _AO), function() {
						/*14912*/
						var _AS = $k[--$j]; /*14912*/
						$k[$j++] = _AS - 48; /*14912*/
					}); /*14912*/
					$1.gmod = $a(); /*14913*/
					$1.cwn = $a([]); /*14914*/
					for (;;) {
						/*14933*/
						$1.dv = 900; /*14915*/
						$1.gmul = $a([]); /*14916*/
						$1.val = 0; /*14916*/
						for (;;) {
							/*14928*/
							if ($1.gmod.length == 0) { //no-else/*14917*/
								break; /*14917*/
							} /*14917*/
							$1.val = ($1.val * 10) + $get($1.gmod, 0); /*14918*/
							$1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); /*14919*/
							if ($1.val < $1.dv) {
								/*14925*/
								if ($1.gmul.length != 0) { //no-else/*14923*/
									$k[$j++] = Infinity; /*14922*/
									$aload($1.gmul); /*14922*/
									$k[$j++] = 0; /*14922*/
									$1.gmul = $a(); /*14922*/
								} /*14922*/
							} else {
								/*14925*/
								$k[$j++] = Infinity; /*14925*/
								$aload($1.gmul); /*14925*/
								$k[$j++] = ~~($1.val / $1.dv); /*14925*/
								$1.gmul = $a(); /*14925*/
							} /*14925*/
							$1.val = $1.val % $1.dv; /*14927*/
						} /*14927*/
						$1.dv = $1.val; /*14929*/
						$k[$j++] = Infinity; /*14930*/
						$k[$j++] = $1.dv; /*14930*/
						$aload($1.cwn); /*14930*/
						$1.cwn = $a(); /*14930*/
						$1.gmod = $1.gmul; /*14931*/
						if ($1.gmul.length == 0) { //no-else/*14932*/
							break; /*14932*/
						} /*14932*/
					} /*14932*/
					$k[$j++] = Infinity; /*14934*/
					$aload($1.out); /*14934*/
					$aload($1.cwn); /*14934*/
					$1.out = $a(); /*14934*/
				} /*14934*/
				$k[$j++] = $1.out; /*14936*/
			}; /*14937*/
			$1.encfuncs = $a(['enct', 'encn', 'encb']); /*14939*/
			$1.addtocws = function() {
				var _Az = $k[--$j]; /*14942*/
				$puti($1.datcws, $1.j, _Az); /*14942*/
				$1.j = _Az.length + $1.j; /*14943*/
			}; /*14944*/
			$1.state = $1.T; /*14947*/
			$1.submode = $1.A; /*14947*/
			$1.datcws = $a($1.seqlen); /*14948*/
			$1.i = 0; /*14949*/
			$1.j = 0; /*14949*/
			for (;;) {
				/*14965*/
				if ($1.i >= $1.seq.length) { //no-else/*14950*/
					break; /*14950*/
				} /*14950*/
				$1.chars = $get($1.seq, $1.i); /*14951*/
				if ($eq($type($1.chars), 'arraytype')) {
					/*14961*/
					$k[$j++] = $1.chars; /*14953*/
					$1[$get($1.encfuncs, $1.state)](); /*14953*/
					$1.addtocws(); /*14953*/
				} else {
					/*14961*/
					$k[$j++] = $a([$get($1.latchcws, $1.chars)]); /*14955*/
					$1.addtocws(); /*14955*/
					if ($1.chars == $1.tl) { //no-else/*14956*/
						$1.state = $1.T; /*14956*/
						$1.submode = $1.A; /*14956*/
					} /*14956*/
					if ($1.chars == $1.nl) { //no-else/*14957*/
						$1.state = $1.N; /*14957*/
					} /*14957*/
					if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //no-else/*14958*/
						$1.state = $1.B; /*14958*/
					} /*14958*/
					if ($1.chars == $1.bs) { //no-else/*14962*/
						$1.i = $1.i + 1; /*14960*/
						$k[$j++] = $get($1.seq, $1.i); /*14961*/
						$1.encb(); /*14961*/
						$1.addtocws(); /*14961*/
					} /*14961*/
				} /*14961*/
				$1.i = $1.i + 1; /*14964*/
			} /*14964*/
			$1.datcws = $geti($1.datcws, 0, $1.j); /*14966*/
		} /*14966*/
		$1.metrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); /*15006*/
		$1.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); /*15028*/
		if ($1.cca) { //no-else/*15029*/
			$1.metrics = $1.ccametrics; /*15029*/
		} /*15029*/
		$1.urows = $1.rows; /*15032*/
		$1.ucols = $1.columns; /*15033*/
		$1.i = 0; /*15034*/
		for (;;) {
			/*15050*/
			$1.m = $get($1.metrics, $1.i); /*15036*/
			$1.c = $get($1.m, 0); /*15037*/
			$1.r = $get($1.m, 1); /*15038*/
			$1.k = $get($1.m, 2); /*15039*/
			$1.rapl = $get($1.m, 3); /*15040*/
			$1.rapc = $get($1.m, 4); /*15041*/
			$1.rapr = $get($1.m, 5); /*15042*/
			$1.ncws = ($1.r * $1.c) - $1.k; /*15043*/
			$1.okay = true; /*15044*/
			if ($1.datcws.length > $1.ncws) { //no-else/*15045*/
				$1.okay = false; /*15045*/
			} /*15045*/
			if (($1.urows != 0) && ($1.urows != $1.r)) { //no-else/*15046*/
				$1.okay = false; /*15046*/
			} /*15046*/
			if (($1.ucols != 0) && ($1.ucols != $1.c)) { //no-else/*15047*/
				$1.okay = false; /*15047*/
			} /*15047*/
			if ($1.okay) { //no-else/*15048*/
				break; /*15048*/
			} /*15048*/
			$1.i = $1.i + 1; /*15049*/
		} /*15049*/
		$1.m = $1.datcws.length; /*15051*/
		$1.n = ($1.c * $1.r) - $1.k; /*15054*/
		$1.cws = $a(($1.c * $1.r) + 1); /*15055*/
		$puti($1.cws, 0, $1.datcws); /*15056*/
		$k[$j++] = $1.cws; /*15057*/
		$k[$j++] = $1.m; /*15057*/
		$k[$j++] = Infinity; /*15057*/
		for (var _DJ = 0, _DK = $1.n - $1.m; _DJ < _DK; _DJ++) {
			/*15057*/
			$k[$j++] = 900; /*15057*/
		} /*15057*/
		var _DL = $a(); /*15057*/
		var _DM = $k[--$j]; /*15057*/
		$puti($k[--$j], _DM, _DL); /*15057*/
		$k[$j++] = $1.cws; /*15058*/
		$k[$j++] = $1.n; /*15058*/
		$k[$j++] = Infinity; /*15058*/
		for (var _DR = 0, _DS = $1.k; _DR < _DS; _DR++) {
			/*15058*/
			$k[$j++] = 0; /*15058*/
		} /*15058*/
		$k[$j++] = 0; /*15058*/
		var _DT = $a(); /*15058*/
		var _DU = $k[--$j]; /*15058*/
		$puti($k[--$j], _DU, _DT); /*15058*/
		$k[$j++] = Infinity; /*15061*/
		$k[$j++] = 1; /*15061*/
		for (var _DW = 0, _DX = 928; _DW < _DX; _DW++) {
			/*15061*/
			var _DY = $k[--$j]; /*15061*/
			$k[$j++] = _DY; /*15061*/
			$k[$j++] = (_DY * 3) % 929; /*15061*/
		} /*15061*/
		$1.rsalog = $a(); /*15061*/
		$1.rslog = $a(929); /*15062*/
		for (var _Db = 1; _Db <= 928; _Db += 1) {
			/*15063*/
			$put($1.rslog, $get($1.rsalog, _Db), _Db); /*15063*/
		} /*15063*/
		$1.rsprod = function() {
			var _Df = $k[--$j]; /*15067*/
			var _Dg = $k[--$j]; /*15067*/
			$k[$j++] = _Dg; /*15071*/
			$k[$j++] = _Df; /*15071*/
			if ((_Df != 0) && (_Dg != 0)) {
				/*15070*/
				var _Dj = $get($1.rslog, $k[--$j]); /*15068*/
				var _Do = $get($1.rsalog, (_Dj + $get($1.rslog, $k[--$j])) % 928); /*15068*/
				$k[$j++] = _Do; /*15068*/
			} else {
				/*15070*/
				$j -= 2; /*15070*/
				$k[$j++] = 0; /*15070*/
			} /*15070*/
		}; /*15072*/
		$k[$j++] = Infinity; /*15075*/
		$k[$j++] = 1; /*15075*/
		for (var _Dq = 0, _Dr = $1.k; _Dq < _Dr; _Dq++) {
			/*15075*/
			$k[$j++] = 0; /*15075*/
		} /*15075*/
		$1.coeffs = $a(); /*15075*/
		for (var _Dv = 1, _Du = $1.k; _Dv <= _Du; _Dv += 1) {
			/*15084*/
			$1.i = _Dv; /*15077*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*15078*/
			for (var _E2 = $1.i - 1; _E2 >= 1; _E2 -= 1) {
				/*15082*/
				$1.j = _E2; /*15080*/
				$k[$j++] = $1.coeffs; /*15081*/
				$k[$j++] = $1.j; /*15081*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*15081*/
				$k[$j++] = $get($1.coeffs, $1.j); /*15081*/
				$k[$j++] = $get($1.rsalog, $1.i); /*15081*/
				$1.rsprod(); /*15081*/
				var _EE = $k[--$j]; /*15081*/
				var _EF = $k[--$j]; /*15081*/
				var _EG = $k[--$j]; /*15081*/
				$put($k[--$j], _EG, (_EF + _EE) % 929); /*15081*/
			} /*15081*/
			$k[$j++] = $1.coeffs; /*15083*/
			$k[$j++] = 0; /*15083*/
			$k[$j++] = $get($1.coeffs, 0); /*15083*/
			$k[$j++] = $get($1.rsalog, $1.i); /*15083*/
			$1.rsprod(); /*15083*/
			var _EO = $k[--$j]; /*15083*/
			var _EP = $k[--$j]; /*15083*/
			$put($k[--$j], _EP, _EO); /*15083*/
		} /*15083*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*15085*/
		for (var _EV = $1.coeffs.length - 1; _EV >= 0; _EV -= 2) {
			/*15086*/
			var _EW = $1.coeffs; /*15086*/
			$put(_EW, _EV, 929 - $get(_EW, _EV)); /*15086*/
		} /*15086*/
		for (var _Ea = 0, _EZ = $1.n - 1; _Ea <= _EZ; _Ea += 1) {
			/*15095*/
			$1.t = ($get($1.cws, _Ea) + $get($1.cws, $1.n)) % 929; /*15090*/
			for (var _Ei = 0, _Eh = $1.k - 1; _Ei <= _Eh; _Ei += 1) {
				/*15094*/
				$1.j = _Ei; /*15092*/
				$put($1.cws, $1.n + $1.j, ($get($1.cws, ($1.n + $1.j) + 1) + (929 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 929))) % 929); /*15093*/
			} /*15093*/
		} /*15093*/
		for (var _Ez = $1.n, _Ey = $1.n + $1.k; _Ez <= _Ey; _Ez += 1) {
			/*15096*/
			$put($1.cws, _Ez, (929 - $get($1.cws, _Ez)) % 929); /*15096*/
		} /*15096*/
		$1.cws = $geti($1.cws, 0, $1.cws.length - 1); /*15099*/
		$1.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); /*15341*/
		$1.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); /*15356*/
		$1.cwtobits = function() {
			var _FF = $get($1.clusters, $k[--$j]); /*15360*/
			$1.v = $get(_FF, $k[--$j]); /*15360*/
			$k[$j++] = Infinity; /*15361*/
			for (var _FI = 0, _FJ = 17; _FI < _FJ; _FI++) {
				/*15361*/
				$k[$j++] = 0; /*15361*/
			} /*15361*/
			var _FM = $cvrs($s(17), $1.v, 2); /*15361*/
			for (var _FN = 0, _FO = _FM.length; _FN < _FO; _FN++) {
				/*15361*/
				$k[$j++] = $get(_FM, _FN) - 48; /*15361*/
			} /*15361*/
			var _FQ = $a(); /*15361*/
			$k[$j++] = $geti(_FQ, _FQ.length - 17, 17); /*15362*/
		}; /*15363*/
		$1.raptobits = function() {
			var _FU = $get($1.raps, $k[--$j]); /*15367*/
			$1.v = $get(_FU, $k[--$j]); /*15367*/
			$k[$j++] = Infinity; /*15368*/
			for (var _FX = 0, _FY = 10; _FX < _FY; _FX++) {
				/*15368*/
				$k[$j++] = 0; /*15368*/
			} /*15368*/
			var _Fb = $cvrs($s(10), $1.v, 2); /*15368*/
			for (var _Fc = 0, _Fd = _Fb.length; _Fc < _Fd; _Fc++) {
				/*15368*/
				$k[$j++] = $get(_Fb, _Fc) - 48; /*15368*/
			} /*15368*/
			var _Ff = $a(); /*15368*/
			$k[$j++] = $geti(_Ff, _Ff.length - 10, 10); /*15369*/
		}; /*15370*/
		$1.rwid = $get($a([38, 55, 82, 99]), $1.c - 1); /*15373*/
		if (($1.c == 3) && $1.cca) { //no-else/*15374*/
			$1.rwid = 72; /*15374*/
		} /*15374*/
		$1.pixs = $a($1.rwid * $1.r); /*15375*/
		for (var _Fr = 0, _Fq = $1.r - 1; _Fr <= _Fq; _Fr += 1) {
			/*15413*/
			$1.i = _Fr; /*15378*/
			$1.clst = (($1.i + $1.rapl) - 1) % 3; /*15379*/
			$k[$j++] = $1.pixs; /*15411*/
			$k[$j++] = $1.rwid * $1.i; /*15411*/
			$k[$j++] = Infinity; /*15411*/
			if ($1.c == 1) { //no-else/*15385*/
				$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15382*/
				$k[$j++] = 0; /*15382*/
				$1.raptobits(); /*15382*/
				$aload($k[--$j]); /*15382*/
				$k[$j++] = $get($1.cws, $1.i); /*15383*/
				$k[$j++] = $1.clst; /*15383*/
				$1.cwtobits(); /*15383*/
				$aload($k[--$j]); /*15383*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15384*/
				$k[$j++] = 0; /*15384*/
				$1.raptobits(); /*15384*/
				$aload($k[--$j]); /*15384*/
			} /*15384*/
			if ($1.c == 2) { //no-else/*15391*/
				$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15387*/
				$k[$j++] = 0; /*15387*/
				$1.raptobits(); /*15387*/
				$aload($k[--$j]); /*15387*/
				$k[$j++] = $get($1.cws, $1.i * 2); /*15388*/
				$k[$j++] = $1.clst; /*15388*/
				$1.cwtobits(); /*15388*/
				$aload($k[--$j]); /*15388*/
				$k[$j++] = $get($1.cws, ($1.i * 2) + 1); /*15389*/
				$k[$j++] = $1.clst; /*15389*/
				$1.cwtobits(); /*15389*/
				$aload($k[--$j]); /*15389*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15390*/
				$k[$j++] = 0; /*15390*/
				$1.raptobits(); /*15390*/
				$aload($k[--$j]); /*15390*/
			} /*15390*/
			if ($1.c == 3) { //no-else/*15401*/
				if (!$1.cca) { //no-else/*15395*/
					$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15394*/
					$k[$j++] = 0; /*15394*/
					$1.raptobits(); /*15394*/
					$aload($k[--$j]); /*15394*/
				} /*15394*/
				$k[$j++] = $get($1.cws, $1.i * 3); /*15396*/
				$k[$j++] = $1.clst; /*15396*/
				$1.cwtobits(); /*15396*/
				$aload($k[--$j]); /*15396*/
				$k[$j++] = (($1.i + $1.rapc) - 1) % 52; /*15397*/
				$k[$j++] = 1; /*15397*/
				$1.raptobits(); /*15397*/
				$aload($k[--$j]); /*15397*/
				$k[$j++] = $get($1.cws, ($1.i * 3) + 1); /*15398*/
				$k[$j++] = $1.clst; /*15398*/
				$1.cwtobits(); /*15398*/
				$aload($k[--$j]); /*15398*/
				$k[$j++] = $get($1.cws, ($1.i * 3) + 2); /*15399*/
				$k[$j++] = $1.clst; /*15399*/
				$1.cwtobits(); /*15399*/
				$aload($k[--$j]); /*15399*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15400*/
				$k[$j++] = 0; /*15400*/
				$1.raptobits(); /*15400*/
				$aload($k[--$j]); /*15400*/
			} /*15400*/
			if ($1.c == 4) { //no-else/*15410*/
				$k[$j++] = (($1.i + $1.rapl) - 1) % 52; /*15403*/
				$k[$j++] = 0; /*15403*/
				$1.raptobits(); /*15403*/
				$aload($k[--$j]); /*15403*/
				$k[$j++] = $get($1.cws, $1.i * 4); /*15404*/
				$k[$j++] = $1.clst; /*15404*/
				$1.cwtobits(); /*15404*/
				$aload($k[--$j]); /*15404*/
				$k[$j++] = $get($1.cws, ($1.i * 4) + 1); /*15405*/
				$k[$j++] = $1.clst; /*15405*/
				$1.cwtobits(); /*15405*/
				$aload($k[--$j]); /*15405*/
				$k[$j++] = (($1.i + $1.rapc) - 1) % 52; /*15406*/
				$k[$j++] = 1; /*15406*/
				$1.raptobits(); /*15406*/
				$aload($k[--$j]); /*15406*/
				$k[$j++] = $get($1.cws, ($1.i * 4) + 2); /*15407*/
				$k[$j++] = $1.clst; /*15407*/
				$1.cwtobits(); /*15407*/
				$aload($k[--$j]); /*15407*/
				$k[$j++] = $get($1.cws, ($1.i * 4) + 3); /*15408*/
				$k[$j++] = $1.clst; /*15408*/
				$1.cwtobits(); /*15408*/
				$aload($k[--$j]); /*15408*/
				$k[$j++] = (($1.i + $1.rapr) - 1) % 52; /*15409*/
				$k[$j++] = 0; /*15409*/
				$1.raptobits(); /*15409*/
				$aload($k[--$j]); /*15409*/
			} /*15409*/
			$k[$j++] = 1; /*15411*/
			var _HK = $a(); /*15411*/
			var _HL = $k[--$j]; /*15412*/
			$puti($k[--$j], _HL, _HK); /*15412*/
		} /*15412*/
		var _HU = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.rwid],
			["pixy", $1.r],
			["height", ($1.r / 72) * $1.rowmult],
			["width", $1.rwid / 72],
			["opt", $1.options]
		]); /*15423*/
		$k[$j++] = _HU; /*15426*/
		if (!$1.dontdraw) { //no-else/*15426*/
			$0.renmatrix(); /*15426*/
		} /*15426*/
	};
	$0.datamatrix = function() {
		var $1 = {}; /*15455*/
		$1.options = $k[--$j]; /*15457*/
		$1.barcode = $k[--$j]; /*15458*/
		$1.dontdraw = false; /*15460*/
		$1.columns = 0; /*15461*/
		$1.rows = 0; /*15462*/
		$1.format = "square"; /*15463*/
		$1.version = "unset"; /*15464*/
		$1.parse = false; /*15465*/
		$1.parsefnc = false; /*15466*/
		$1.encoding = "auto"; /*15467*/
		$1.mailmark = false; /*15468*/
		$1.raw = false; /*15469*/
		$1.dmre = false; /*15470*/
		$1.dindmre = false; /*15471*/
		$1.isodmre = false; /*15472*/
		$forall($1.options, function() {
			/*15483*/
			var _3 = $k[--$j]; /*15483*/
			$1[$k[--$j]] = _3; /*15483*/
		}); /*15483*/
		if ($ne($1.version, "unset")) { //no-else/*15489*/
			$search($1.version, "x"); /*15486*/
			$j--; /*15487*/
			$1.rows = $k[--$j]; /*15487*/
			$j--; /*15488*/
			$1.columns = $k[--$j]; /*15488*/
		} /*15488*/
		$1.columns = ~~$z($1.columns); /*15491*/
		$1.rows = ~~$z($1.rows); /*15492*/
		$1.isodmre = $1.dmre; /*15515*/
		$k[$j++] = Infinity; /*15573*/
		$k[$j++] = $a([10, 10, 1, 1, 5, 1]); /*15548*/
		$k[$j++] = $a([12, 12, 1, 1, 7, 1]); /*15548*/
		$k[$j++] = $a([14, 14, 1, 1, 10, 1]); /*15548*/
		$k[$j++] = $a([16, 16, 1, 1, 12, 1]); /*15548*/
		$k[$j++] = $a([18, 18, 1, 1, 14, 1]); /*15548*/
		$k[$j++] = $a([20, 20, 1, 1, 18, 1]); /*15548*/
		$k[$j++] = $a([22, 22, 1, 1, 20, 1]); /*15548*/
		$k[$j++] = $a([24, 24, 1, 1, 24, 1]); /*15548*/
		$k[$j++] = $a([26, 26, 1, 1, 28, 1]); /*15548*/
		$k[$j++] = $a([32, 32, 2, 2, 36, 1]); /*15548*/
		$k[$j++] = $a([36, 36, 2, 2, 42, 1]); /*15548*/
		$k[$j++] = $a([40, 40, 2, 2, 48, 1]); /*15548*/
		$k[$j++] = $a([44, 44, 2, 2, 56, 1]); /*15548*/
		$k[$j++] = $a([48, 48, 2, 2, 68, 1]); /*15548*/
		$k[$j++] = $a([52, 52, 2, 2, 84, 2]); /*15548*/
		$k[$j++] = $a([64, 64, 4, 4, 112, 2]); /*15548*/
		$k[$j++] = $a([72, 72, 4, 4, 144, 4]); /*15548*/
		$k[$j++] = $a([80, 80, 4, 4, 192, 4]); /*15548*/
		$k[$j++] = $a([88, 88, 4, 4, 224, 4]); /*15548*/
		$k[$j++] = $a([96, 96, 4, 4, 272, 4]); /*15548*/
		$k[$j++] = $a([104, 104, 4, 4, 336, 6]); /*15548*/
		$k[$j++] = $a([120, 120, 6, 6, 408, 6]); /*15548*/
		$k[$j++] = $a([132, 132, 6, 6, 496, 8]); /*15548*/
		$k[$j++] = $a([144, 144, 6, 6, 620, 10]); /*15548*/
		$k[$j++] = $a([8, 18, 1, 1, 7, 1]); /*15548*/
		$k[$j++] = $a([8, 32, 1, 2, 11, 1]); /*15548*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15548*/
			$k[$j++] = $a([8, 48, 1, 2, 15, 1]); /*15548*/
		} /*15548*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15549*/
			$k[$j++] = $a([8, 64, 1, 4, 18, 1]); /*15549*/
		} /*15549*/
		if ($1.isodmre) { //no-else/*15550*/
			$k[$j++] = $a([8, 80, 1, 4, 22, 1]); /*15550*/
		} /*15550*/
		if ($1.isodmre) { //no-else/*15551*/
			$k[$j++] = $a([8, 96, 1, 4, 28, 1]); /*15551*/
		} /*15551*/
		if ($1.isodmre) { //no-else/*15552*/
			$k[$j++] = $a([8, 120, 1, 6, 32, 1]); /*15552*/
		} /*15552*/
		if ($1.isodmre) { //no-else/*15553*/
			$k[$j++] = $a([8, 144, 1, 6, 36, 1]); /*15553*/
		} /*15553*/
		$k[$j++] = $a([12, 26, 1, 1, 14, 1]); /*15556*/
		$k[$j++] = $a([12, 36, 1, 2, 18, 1]); /*15556*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15556*/
			$k[$j++] = $a([12, 64, 1, 4, 27, 1]); /*15556*/
		} /*15556*/
		if ($1.isodmre) { //no-else/*15557*/
			$k[$j++] = $a([12, 88, 1, 4, 36, 1]); /*15557*/
		} /*15557*/
		$k[$j++] = $a([16, 36, 1, 2, 24, 1]); /*15560*/
		$k[$j++] = $a([16, 48, 1, 2, 28, 1]); /*15560*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15560*/
			$k[$j++] = $a([16, 64, 1, 4, 36, 1]); /*15560*/
		} /*15560*/
		if ($1.isodmre) { //no-else/*15561*/
			$k[$j++] = $a([20, 36, 1, 2, 28, 1]); /*15561*/
		} /*15561*/
		if ($1.isodmre) { //no-else/*15562*/
			$k[$j++] = $a([20, 44, 1, 2, 34, 1]); /*15562*/
		} /*15562*/
		if ($1.isodmre) { //no-else/*15563*/
			$k[$j++] = $a([20, 64, 1, 4, 42, 1]); /*15563*/
		} /*15563*/
		if ($1.isodmre) { //no-else/*15564*/
			$k[$j++] = $a([22, 48, 1, 2, 38, 1]); /*15564*/
		} /*15564*/
		if ($1.dindmre) { //no-else/*15565*/
			$k[$j++] = $a([24, 32, 1, 2, 28, 1]); /*15565*/
		} /*15565*/
		if ($1.dindmre) { //no-else/*15566*/
			$k[$j++] = $a([24, 36, 1, 2, 33, 1]); /*15566*/
		} /*15566*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15567*/
			$k[$j++] = $a([24, 48, 1, 2, 41, 1]); /*15567*/
		} /*15567*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15568*/
			$k[$j++] = $a([24, 64, 1, 4, 46, 1]); /*15568*/
		} /*15568*/
		if ($1.dindmre) { //no-else/*15569*/
			$k[$j++] = $a([26, 32, 1, 2, 32, 1]); /*15569*/
		} /*15569*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15570*/
			$k[$j++] = $a([26, 40, 1, 2, 38, 1]); /*15570*/
		} /*15570*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15571*/
			$k[$j++] = $a([26, 48, 1, 2, 42, 1]); /*15571*/
		} /*15571*/
		if ($1.dindmre || $1.isodmre) { //no-else/*15572*/
			$k[$j++] = $a([26, 64, 1, 4, 50, 1]); /*15572*/
		} /*15572*/
		$1.metrics = $a(); /*15573*/
		$1.urows = $1.rows; /*15576*/
		$1.ucols = $1.columns; /*15577*/
		$1.fullcws = $a([]); /*15578*/
		var _1Z = $1.metrics; /*15579*/
		for (var _1a = 0, _1b = _1Z.length; _1a < _1b; _1a++) {
			/*15596*/
			$1.m = $get(_1Z, _1a); /*15580*/
			$1.rows = $get($1.m, 0); /*15581*/
			$1.cols = $get($1.m, 1); /*15582*/
			$1.regh = $get($1.m, 2); /*15583*/
			$1.regv = $get($1.m, 3); /*15584*/
			$1.rscw = $get($1.m, 4); /*15585*/
			$1.rsbl = $get($1.m, 5); /*15586*/
			$1.mrows = $1.rows - (2 * $1.regh); /*15587*/
			$1.mcols = $1.cols - (2 * $1.regv); /*15588*/
			$1.ncws = (~~(($1.mrows * $1.mcols) / 8)) - $1.rscw; /*15589*/
			$1.okay = true; /*15590*/
			if (($1.urows != 0) && ($1.urows != $1.rows)) { //no-else/*15591*/
				$1.okay = false; /*15591*/
			} /*15591*/
			if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //no-else/*15592*/
				$1.okay = false; /*15592*/
			} /*15592*/
			if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //no-else/*15593*/
				$1.okay = false; /*15593*/
			} /*15593*/
			if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //no-else/*15594*/
				$1.okay = false; /*15594*/
			} /*15594*/
			if ($1.okay) { //no-else/*15595*/
				$k[$j++] = Infinity; /*15595*/
				$aload($1.fullcws); /*15595*/
				$k[$j++] = $1.ncws; /*15595*/
				$1.fullcws = $a(); /*15595*/
			} /*15595*/
		} /*15595*/
		$k[$j++] = Infinity; /*15597*/
		for (var _2C = 0, _2D = 1558; _2C < _2D; _2C++) {
			/*15597*/
			$k[$j++] = 10000; /*15597*/
		} /*15597*/
		$1.numremcws = $a(); /*15597*/
		var _2F = $1.fullcws; /*15598*/
		for (var _2G = 0, _2H = _2F.length; _2G < _2H; _2G++) {
			/*15598*/
			$put($1.numremcws, $get(_2F, _2G) - 1, 1); /*15598*/
		} /*15598*/
		for (var _2K = 1556; _2K >= 0; _2K -= 1) {
			/*15604*/
			$1.i = _2K; /*15600*/
			if ($get($1.numremcws, $1.i) != 1) { //no-else/*15603*/
				$put($1.numremcws, $1.i, $get($1.numremcws, $1.i + 1) + 1); /*15602*/
			} /*15602*/
		} /*15602*/
		if ($1.raw) { //no-else/*15606*/
			$1.encoding = "raw"; /*15606*/
		} /*15606*/
		if ($eq($1.encoding, "raw")) { //no-else/*15619*/
			$1.cws = $a($1.barcode.length); /*15609*/
			$1.i = 0; /*15610*/
			$1.j = 0; /*15610*/
			for (;;) {
				/*15617*/
				if ($1.i == $1.barcode.length) { //no-else/*15612*/
					break; /*15612*/
				} /*15612*/
				$1.cw = ~~$z($geti($1.barcode, $1.i + 1, 3)); /*15613*/
				$put($1.cws, $1.j, $1.cw); /*15614*/
				$1.i = $1.i + 4; /*15615*/
				$1.j = $1.j + 1; /*15616*/
			} /*15616*/
			$1.cws = $geti($1.cws, 0, $1.j); /*15618*/
		} /*15618*/
		if ($eq($1.encoding, "auto")) { //no-else/*16105*/
			$1.mac05comp = false; /*15624*/
			$1.mac06comp = false; /*15625*/
			if ($1.barcode.length >= 9) { //no-else/*15634*/
				var _2n = $geti($1.barcode, 0, 7); /*15627*/
				if ((($eq(_2n, "[)>03605035")) || ($eq(_2n, "[)>03606035"))) && $eq($geti($1.barcode, $1.barcode.length - 2, 2), "036004")) { //no-else/*15633*/
					if ($get($1.barcode, 5) == 53) {
						/*15631*/
						$k[$j++] = 'mac05comp'; /*15631*/
					} else {
						/*15631*/
						$k[$j++] = 'mac06comp'; /*15631*/
					} /*15631*/
					$1[$k[--$j]] = true; /*15631*/
					$1.barcode = $geti($1.barcode, 7, $1.barcode.length - 9); /*15632*/
				} /*15632*/
			} /*15632*/
			$1.barlen = $1.barcode.length; /*15635*/
			$1.fnc1 = -1; /*15638*/
			$1.prog = -2; /*15638*/
			$1.m05 = -3; /*15638*/
			$1.m06 = -4; /*15638*/
			var _32 = new Map([
				["FNC1", $1.fnc1],
				["PROG", $1.prog],
				["MAC5", $1.m05],
				["MAC6", $1.m06]
			]); /*15643*/
			$1.fncvals = _32; /*15644*/
			$1.msg = $a($1.barlen); /*15645*/
			$1.i = 0; /*15646*/
			$1.j = 0; /*15646*/
			for (;;) {
				/*15660*/
				if ($1.i == $1.barlen) { //no-else/*15647*/
					break; /*15647*/
				} /*15647*/
				$1.char = $get($1.barcode, $1.i); /*15648*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*15656*/
					if ($get($1.barcode, $1.i + 1) != 94) {
						/*15654*/
						$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*15651*/
						$1.i = $1.i + 4; /*15652*/
					} else {
						/*15654*/
						$1.i = $1.i + 1; /*15654*/
					} /*15654*/
				} /*15654*/
				$put($1.msg, $1.j, $1.char); /*15657*/
				$1.i = $1.i + 1; /*15658*/
				$1.j = $1.j + 1; /*15659*/
			} /*15659*/
			$1.msg = $geti($1.msg, 0, $1.j); /*15661*/
			if ($1.mac05comp) { //no-else/*15664*/
				$k[$j++] = Infinity; /*15664*/
				$k[$j++] = $1.m05; /*15664*/
				$aload($1.msg); /*15664*/
				$1.msg = $a(); /*15664*/
			} /*15664*/
			if ($1.mac06comp) { //no-else/*15665*/
				$k[$j++] = Infinity; /*15665*/
				$k[$j++] = $1.m06; /*15665*/
				$aload($1.msg); /*15665*/
				$1.msg = $a(); /*15665*/
			} /*15665*/
			$1.msglen = $1.msg.length; /*15667*/
			$1.lC = -5; /*15670*/
			$1.lB = -6; /*15670*/
			$1.lX = -7; /*15670*/
			$1.lT = -8; /*15670*/
			$1.lE = -9; /*15670*/
			$1.unl = -10; /*15670*/
			$1.sapp = -11; /*15671*/
			$1.usft = -12; /*15671*/
			$1.sft1 = -13; /*15671*/
			$1.sft2 = -14; /*15671*/
			$1.sft3 = -15; /*15671*/
			$1.eci = -16; /*15671*/
			$1.pad = -17; /*15671*/
			$1.unlcw = 254; /*15672*/
			$k[$j++] = Infinity; /*15681*/
			for (var _3f = 0; _3f <= 128; _3f += 1) {
				/*15675*/
				$k[$j++] = _3f; /*15675*/
				$k[$j++] = _3f + 1; /*15675*/
			} /*15675*/
			$k[$j++] = $1.pad; /*15680*/
			$k[$j++] = 129; /*15680*/
			for (var _3h = 0; _3h <= 99; _3h += 1) {
				/*15680*/
				var _3j = $cvrs($s(2), _3h, 10); /*15678*/
				var _3l = $strcpy($s(2), "00"); /*15678*/
				$puti(_3l, 2 - _3j.length, _3j); /*15678*/
				$k[$j++] = _3l; /*15679*/
				$k[$j++] = _3h + 130; /*15679*/
			} /*15679*/
			var _3y = $a([$1.lC, $1.lB, $1.fnc1, $1.sapp, $1.prog, $1.usft, $1.m05, $1.m06, $1.lX, $1.lT, $1.lE, $1.eci]); /*15681*/
			$k[$j++] = 229; /*15681*/
			for (var _3z = 0, _40 = _3y.length; _3z < _40; _3z++) {
				/*15681*/
				var _43 = $k[--$j] + 1; /*15681*/
				$k[$j++] = $get(_3y, _3z); /*15681*/
				$k[$j++] = _43; /*15681*/
				$k[$j++] = _43; /*15681*/
			} /*15681*/
			$j--; /*15681*/
			$1.Avals = $d(); /*15682*/
			$k[$j++] = Infinity; /*15684*/
			var _45 = $1.Avals; /*15684*/
			for (var _4A = _45.size, _49 = _45.keys(), _48 = 0; _48 < _4A; _48++) {
				/*15684*/
				var _46 = _49.next().value; /*15684*/
				$k[$j++] = _46; /*15684*/
				$k[$j++] = _45.get(_46); /*15684*/
				$k[$j++] = Infinity; /*15684*/
				var _4B = $k[--$j]; /*15684*/
				var _4C = $k[--$j]; /*15684*/
				$k[$j++] = _4B; /*15684*/
				$k[$j++] = _4C; /*15684*/
				var _4D = $a(); /*15684*/
				$k[$j++] = _4D; /*15684*/
			} /*15684*/
			$1.Avals = $d(); /*15685*/
			$k[$j++] = Infinity; /*15693*/
			$k[$j++] = $1.sft1; /*15692*/
			$k[$j++] = 0; /*15692*/
			$k[$j++] = $1.sft2; /*15692*/
			$k[$j++] = 1; /*15692*/
			$k[$j++] = $1.sft3; /*15692*/
			$k[$j++] = 2; /*15692*/
			$k[$j++] = 32; /*15692*/
			$k[$j++] = 3; /*15692*/
			for (var _4I = 48; _4I <= 57; _4I += 1) {
				/*15692*/
				$k[$j++] = _4I; /*15692*/
				$k[$j++] = _4I - 44; /*15692*/
			} /*15692*/
			for (var _4J = 65; _4J <= 90; _4J += 1) {
				/*15693*/
				$k[$j++] = _4J; /*15693*/
				$k[$j++] = _4J - 51; /*15693*/
			} /*15693*/
			$1.CNvals = $d(); /*15694*/
			$k[$j++] = Infinity; /*15695*/
			for (var _4L = 0; _4L <= 31; _4L += 1) {
				/*15695*/
				$k[$j++] = _4L; /*15695*/
				$k[$j++] = _4L; /*15695*/
			} /*15695*/
			$1.C1vals = $d(); /*15695*/
			$k[$j++] = Infinity; /*15701*/
			for (var _4N = 33; _4N <= 47; _4N += 1) {
				/*15697*/
				$k[$j++] = _4N; /*15697*/
				$k[$j++] = _4N - 33; /*15697*/
			} /*15697*/
			for (var _4O = 58; _4O <= 64; _4O += 1) {
				/*15698*/
				$k[$j++] = _4O; /*15698*/
				$k[$j++] = _4O - 43; /*15698*/
			} /*15698*/
			for (var _4P = 91; _4P <= 95; _4P += 1) {
				/*15699*/
				$k[$j++] = _4P; /*15699*/
				$k[$j++] = _4P - 69; /*15699*/
			} /*15699*/
			$k[$j++] = $1.fnc1; /*15701*/
			$k[$j++] = 27; /*15701*/
			$k[$j++] = $1.usft; /*15701*/
			$k[$j++] = 30; /*15701*/
			$1.C2vals = $d(); /*15702*/
			$k[$j++] = Infinity; /*15703*/
			for (var _4T = 96; _4T <= 127; _4T += 1) {
				/*15703*/
				$k[$j++] = _4T; /*15703*/
				$k[$j++] = _4T - 96; /*15703*/
			} /*15703*/
			$1.C3vals = $d(); /*15703*/
			$k[$j++] = Infinity; /*15708*/
			var _4V = $1.CNvals; /*15705*/
			for (var _4a = _4V.size, _4Z = _4V.keys(), _4Y = 0; _4Y < _4a; _4Y++) {
				/*15705*/
				var _4W = _4Z.next().value; /*15705*/
				$k[$j++] = _4W; /*15705*/
				$k[$j++] = _4V.get(_4W); /*15705*/
				$k[$j++] = Infinity; /*15705*/
				var _4b = $k[--$j]; /*15705*/
				var _4c = $k[--$j]; /*15705*/
				$k[$j++] = _4b; /*15705*/
				$k[$j++] = _4c; /*15705*/
				var _4d = $a(); /*15705*/
				$k[$j++] = _4d; /*15705*/
			} /*15705*/
			var _4e = $1.C1vals; /*15706*/
			for (var _4j = _4e.size, _4i = _4e.keys(), _4h = 0; _4h < _4j; _4h++) {
				/*15706*/
				var _4f = _4i.next().value; /*15706*/
				$k[$j++] = _4f; /*15706*/
				$k[$j++] = _4e.get(_4f); /*15706*/
				$k[$j++] = Infinity; /*15706*/
				var _4k = $k[--$j]; /*15706*/
				var _4l = $k[--$j]; /*15706*/
				$k[$j++] = _4k; /*15706*/
				$k[$j++] = $get($1.CNvals, $1.sft1); /*15706*/
				$k[$j++] = _4l; /*15706*/
				var _4p = $a(); /*15706*/
				$k[$j++] = _4p; /*15706*/
			} /*15706*/
			var _4q = $1.C2vals; /*15707*/
			for (var _4v = _4q.size, _4u = _4q.keys(), _4t = 0; _4t < _4v; _4t++) {
				/*15707*/
				var _4r = _4u.next().value; /*15707*/
				$k[$j++] = _4r; /*15707*/
				$k[$j++] = _4q.get(_4r); /*15707*/
				$k[$j++] = Infinity; /*15707*/
				var _4w = $k[--$j]; /*15707*/
				var _4x = $k[--$j]; /*15707*/
				$k[$j++] = _4w; /*15707*/
				$k[$j++] = $get($1.CNvals, $1.sft2); /*15707*/
				$k[$j++] = _4x; /*15707*/
				var _51 = $a(); /*15707*/
				$k[$j++] = _51; /*15707*/
			} /*15707*/
			var _52 = $1.C3vals; /*15708*/
			for (var _57 = _52.size, _56 = _52.keys(), _55 = 0; _55 < _57; _55++) {
				/*15708*/
				var _53 = _56.next().value; /*15708*/
				$k[$j++] = _53; /*15708*/
				$k[$j++] = _52.get(_53); /*15708*/
				$k[$j++] = Infinity; /*15708*/
				var _58 = $k[--$j]; /*15708*/
				var _59 = $k[--$j]; /*15708*/
				$k[$j++] = _58; /*15708*/
				$k[$j++] = $get($1.CNvals, $1.sft3); /*15708*/
				$k[$j++] = _59; /*15708*/
				var _5D = $a(); /*15708*/
				$k[$j++] = _5D; /*15708*/
			} /*15708*/
			$1.Cvals = $d(); /*15709*/
			$k[$j++] = Infinity; /*15717*/
			$k[$j++] = $1.sft1; /*15716*/
			$k[$j++] = 0; /*15716*/
			$k[$j++] = $1.sft2; /*15716*/
			$k[$j++] = 1; /*15716*/
			$k[$j++] = $1.sft3; /*15716*/
			$k[$j++] = 2; /*15716*/
			$k[$j++] = 32; /*15716*/
			$k[$j++] = 3; /*15716*/
			for (var _5I = 48; _5I <= 57; _5I += 1) {
				/*15716*/
				$k[$j++] = _5I; /*15716*/
				$k[$j++] = _5I - 44; /*15716*/
			} /*15716*/
			for (var _5J = 97; _5J <= 122; _5J += 1) {
				/*15717*/
				$k[$j++] = _5J; /*15717*/
				$k[$j++] = _5J - 83; /*15717*/
			} /*15717*/
			$1.TNvals = $d(); /*15718*/
			$k[$j++] = Infinity; /*15719*/
			for (var _5L = 0; _5L <= 31; _5L += 1) {
				/*15719*/
				$k[$j++] = _5L; /*15719*/
				$k[$j++] = _5L; /*15719*/
			} /*15719*/
			$1.T1vals = $d(); /*15719*/
			$k[$j++] = Infinity; /*15725*/
			for (var _5N = 33; _5N <= 47; _5N += 1) {
				/*15721*/
				$k[$j++] = _5N; /*15721*/
				$k[$j++] = _5N - 33; /*15721*/
			} /*15721*/
			for (var _5O = 58; _5O <= 64; _5O += 1) {
				/*15722*/
				$k[$j++] = _5O; /*15722*/
				$k[$j++] = _5O - 43; /*15722*/
			} /*15722*/
			for (var _5P = 91; _5P <= 95; _5P += 1) {
				/*15723*/
				$k[$j++] = _5P; /*15723*/
				$k[$j++] = _5P - 69; /*15723*/
			} /*15723*/
			$k[$j++] = $1.fnc1; /*15725*/
			$k[$j++] = 27; /*15725*/
			$k[$j++] = $1.usft; /*15725*/
			$k[$j++] = 30; /*15725*/
			$1.T2vals = $d(); /*15726*/
			$k[$j++] = Infinity; /*15730*/
			$k[$j++] = 96; /*15729*/
			$k[$j++] = 0; /*15729*/
			for (var _5T = 65; _5T <= 90; _5T += 1) {
				/*15729*/
				$k[$j++] = _5T; /*15729*/
				$k[$j++] = _5T - 64; /*15729*/
			} /*15729*/
			for (var _5U = 123; _5U <= 127; _5U += 1) {
				/*15730*/
				$k[$j++] = _5U; /*15730*/
				$k[$j++] = _5U - 96; /*15730*/
			} /*15730*/
			$1.T3vals = $d(); /*15731*/
			$k[$j++] = Infinity; /*15736*/
			var _5W = $1.TNvals; /*15733*/
			for (var _5b = _5W.size, _5a = _5W.keys(), _5Z = 0; _5Z < _5b; _5Z++) {
				/*15733*/
				var _5X = _5a.next().value; /*15733*/
				$k[$j++] = _5X; /*15733*/
				$k[$j++] = _5W.get(_5X); /*15733*/
				$k[$j++] = Infinity; /*15733*/
				var _5c = $k[--$j]; /*15733*/
				var _5d = $k[--$j]; /*15733*/
				$k[$j++] = _5c; /*15733*/
				$k[$j++] = _5d; /*15733*/
				var _5e = $a(); /*15733*/
				$k[$j++] = _5e; /*15733*/
			} /*15733*/
			var _5f = $1.T1vals; /*15734*/
			for (var _5k = _5f.size, _5j = _5f.keys(), _5i = 0; _5i < _5k; _5i++) {
				/*15734*/
				var _5g = _5j.next().value; /*15734*/
				$k[$j++] = _5g; /*15734*/
				$k[$j++] = _5f.get(_5g); /*15734*/
				$k[$j++] = Infinity; /*15734*/
				var _5l = $k[--$j]; /*15734*/
				var _5m = $k[--$j]; /*15734*/
				$k[$j++] = _5l; /*15734*/
				$k[$j++] = $get($1.TNvals, $1.sft1); /*15734*/
				$k[$j++] = _5m; /*15734*/
				var _5q = $a(); /*15734*/
				$k[$j++] = _5q; /*15734*/
			} /*15734*/
			var _5r = $1.T2vals; /*15735*/
			for (var _5w = _5r.size, _5v = _5r.keys(), _5u = 0; _5u < _5w; _5u++) {
				/*15735*/
				var _5s = _5v.next().value; /*15735*/
				$k[$j++] = _5s; /*15735*/
				$k[$j++] = _5r.get(_5s); /*15735*/
				$k[$j++] = Infinity; /*15735*/
				var _5x = $k[--$j]; /*15735*/
				var _5y = $k[--$j]; /*15735*/
				$k[$j++] = _5x; /*15735*/
				$k[$j++] = $get($1.TNvals, $1.sft2); /*15735*/
				$k[$j++] = _5y; /*15735*/
				var _62 = $a(); /*15735*/
				$k[$j++] = _62; /*15735*/
			} /*15735*/
			var _63 = $1.T3vals; /*15736*/
			for (var _68 = _63.size, _67 = _63.keys(), _66 = 0; _66 < _68; _66++) {
				/*15736*/
				var _64 = _67.next().value; /*15736*/
				$k[$j++] = _64; /*15736*/
				$k[$j++] = _63.get(_64); /*15736*/
				$k[$j++] = Infinity; /*15736*/
				var _69 = $k[--$j]; /*15736*/
				var _6A = $k[--$j]; /*15736*/
				$k[$j++] = _69; /*15736*/
				$k[$j++] = $get($1.TNvals, $1.sft3); /*15736*/
				$k[$j++] = _6A; /*15736*/
				var _6E = $a(); /*15736*/
				$k[$j++] = _6E; /*15736*/
			} /*15736*/
			$1.Tvals = $d(); /*15737*/
			for (var _6G = 128; _6G <= 255; _6G += 1) {
				/*15745*/
				$1.i = _6G; /*15741*/
				$k[$j++] = $1.Avals; /*15742*/
				$k[$j++] = $1.i; /*15742*/
				$k[$j++] = Infinity; /*15742*/
				$aload($get($1.Avals, $1.usft)); /*15742*/
				$aload($get($1.Avals, $1.i - 128)); /*15742*/
				var _6P = $a(); /*15742*/
				var _6Q = $k[--$j]; /*15742*/
				$put($k[--$j], _6Q, _6P); /*15742*/
				$k[$j++] = $1.Cvals; /*15743*/
				$k[$j++] = $1.i; /*15743*/
				$k[$j++] = Infinity; /*15743*/
				$aload($get($1.Cvals, $1.usft)); /*15743*/
				$aload($get($1.Cvals, $1.i - 128)); /*15743*/
				var _6a = $a(); /*15743*/
				var _6b = $k[--$j]; /*15743*/
				$put($k[--$j], _6b, _6a); /*15743*/
				$k[$j++] = $1.Tvals; /*15744*/
				$k[$j++] = $1.i; /*15744*/
				$k[$j++] = Infinity; /*15744*/
				$aload($get($1.Tvals, $1.usft)); /*15744*/
				$aload($get($1.Tvals, $1.i - 128)); /*15744*/
				var _6l = $a(); /*15744*/
				var _6m = $k[--$j]; /*15744*/
				$put($k[--$j], _6m, _6l); /*15744*/
			} /*15744*/
			$k[$j++] = Infinity; /*15753*/
			$k[$j++] = 13; /*15752*/
			$k[$j++] = 0; /*15752*/
			$k[$j++] = 42; /*15752*/
			$k[$j++] = 1; /*15752*/
			$k[$j++] = 62; /*15752*/
			$k[$j++] = 2; /*15752*/
			$k[$j++] = 32; /*15752*/
			$k[$j++] = 3; /*15752*/
			for (var _6o = 48; _6o <= 57; _6o += 1) {
				/*15752*/
				$k[$j++] = _6o; /*15752*/
				$k[$j++] = _6o - 44; /*15752*/
			} /*15752*/
			for (var _6p = 65; _6p <= 90; _6p += 1) {
				/*15753*/
				$k[$j++] = _6p; /*15753*/
				$k[$j++] = _6p - 51; /*15753*/
			} /*15753*/
			$1.Xvals = $d(); /*15754*/
			$k[$j++] = Infinity; /*15756*/
			var _6r = $1.Xvals; /*15756*/
			for (var _6w = _6r.size, _6v = _6r.keys(), _6u = 0; _6u < _6w; _6u++) {
				/*15756*/
				var _6s = _6v.next().value; /*15756*/
				$k[$j++] = _6s; /*15756*/
				$k[$j++] = _6r.get(_6s); /*15756*/
				$k[$j++] = Infinity; /*15756*/
				var _6x = $k[--$j]; /*15756*/
				var _6y = $k[--$j]; /*15756*/
				$k[$j++] = _6x; /*15756*/
				$k[$j++] = _6y; /*15756*/
				var _6z = $a(); /*15756*/
				$k[$j++] = _6z; /*15756*/
			} /*15756*/
			$1.Xvals = $d(); /*15757*/
			$k[$j++] = Infinity; /*15762*/
			for (var _71 = 64; _71 <= 94; _71 += 1) {
				/*15760*/
				$k[$j++] = _71; /*15760*/
				$k[$j++] = _71 - 64; /*15760*/
			} /*15760*/
			$k[$j++] = $1.unl; /*15762*/
			$k[$j++] = 31; /*15762*/
			for (var _73 = 32; _73 <= 63; _73 += 1) {
				/*15762*/
				$k[$j++] = _73; /*15762*/
				$k[$j++] = _73; /*15762*/
			} /*15762*/
			$1.Evals = $d(); /*15763*/
			$k[$j++] = Infinity; /*15765*/
			var _75 = $1.Evals; /*15765*/
			for (var _7A = _75.size, _79 = _75.keys(), _78 = 0; _78 < _7A; _78++) {
				/*15765*/
				var _76 = _79.next().value; /*15765*/
				$k[$j++] = _76; /*15765*/
				$k[$j++] = _75.get(_76); /*15765*/
				$k[$j++] = Infinity; /*15765*/
				var _7B = $k[--$j]; /*15765*/
				var _7C = $k[--$j]; /*15765*/
				$k[$j++] = _7B; /*15765*/
				$k[$j++] = _7C; /*15765*/
				var _7D = $a(); /*15765*/
				$k[$j++] = _7D; /*15765*/
			} /*15765*/
			$1.Evals = $d(); /*15766*/
			$k[$j++] = Infinity; /*15769*/
			for (var _7F = 0; _7F <= 255; _7F += 1) {
				/*15769*/
				$k[$j++] = _7F; /*15769*/
				$k[$j++] = _7F; /*15769*/
			} /*15769*/
			$1.Bvals = $d(); /*15770*/
			$k[$j++] = Infinity; /*15772*/
			var _7H = $1.Bvals; /*15772*/
			for (var _7M = _7H.size, _7L = _7H.keys(), _7K = 0; _7K < _7M; _7K++) {
				/*15772*/
				var _7I = _7L.next().value; /*15772*/
				$k[$j++] = _7I; /*15772*/
				$k[$j++] = _7H.get(_7I); /*15772*/
				$k[$j++] = Infinity; /*15772*/
				var _7N = $k[--$j]; /*15772*/
				var _7O = $k[--$j]; /*15772*/
				$k[$j++] = _7N; /*15772*/
				$k[$j++] = _7O; /*15772*/
				var _7P = $a(); /*15772*/
				$k[$j++] = _7P; /*15772*/
			} /*15772*/
			$1.Bvals = $d(); /*15773*/
			$1.encvals = $a([$1.Avals, $1.Cvals, $1.Tvals, $1.Xvals, $1.Evals, $1.Bvals]); /*15775*/
			$k[$j++] = Infinity; /*15777*/
			for (var _7Z = 0, _7a = $1.msglen; _7Z < _7a; _7Z++) {
				/*15777*/
				$k[$j++] = 0; /*15777*/
			} /*15777*/
			$k[$j++] = 0; /*15777*/
			$1.numD = $a(); /*15777*/
			$k[$j++] = Infinity; /*15778*/
			for (var _7d = 0, _7e = $1.msglen; _7d < _7e; _7d++) {
				/*15778*/
				$k[$j++] = 0; /*15778*/
			} /*15778*/
			$k[$j++] = 9999; /*15778*/
			$1.nextXterm = $a(); /*15778*/
			$k[$j++] = Infinity; /*15779*/
			for (var _7h = 0, _7i = $1.msglen; _7h < _7i; _7h++) {
				/*15779*/
				$k[$j++] = 0; /*15779*/
			} /*15779*/
			$k[$j++] = 9999; /*15779*/
			$1.nextNonX = $a(); /*15779*/
			for (var _7l = $1.msglen - 1; _7l >= 0; _7l -= 1) {
				/*15796*/
				$1.i = _7l; /*15781*/
				$1.barchar = $get($1.msg, $1.i); /*15782*/
				if (($1.barchar >= 48) && ($1.barchar <= 57)) { //no-else/*15785*/
					$put($1.numD, $1.i, $get($1.numD, $1.i + 1) + 1); /*15784*/
				} /*15784*/
				if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) {
					/*15789*/
					$put($1.nextXterm, $1.i, 0); /*15787*/
				} else {
					/*15789*/
					$put($1.nextXterm, $1.i, $get($1.nextXterm, $1.i + 1) + 1); /*15789*/
				} /*15789*/
				var _88 = $get($1.Xvals, $1.barchar) !== undefined; /*15791*/
				if (!_88) {
					/*15794*/
					$put($1.nextNonX, $1.i, 0); /*15792*/
				} else {
					/*15794*/
					$put($1.nextNonX, $1.i, $get($1.nextNonX, $1.i + 1) + 1); /*15794*/
				} /*15794*/
			} /*15794*/
			$k[$j++] = Infinity; /*15797*/
			var _8G = $1.nextXterm; /*15797*/
			for (var _8H = 0, _8I = _8G.length; _8H < _8I; _8H++) {
				/*15797*/
				var _8J = $get(_8G, _8H); /*15797*/
				$k[$j++] = _8J; /*15797*/
				if (_8J > 10000) { //no-else/*15797*/
					$j--; /*15797*/
					$k[$j++] = 10000; /*15797*/
				} /*15797*/
			} /*15797*/
			$1.nextXterm = $a(); /*15797*/
			$k[$j++] = Infinity; /*15798*/
			var _8L = $1.nextNonX; /*15798*/
			for (var _8M = 0, _8N = _8L.length; _8M < _8N; _8M++) {
				/*15798*/
				var _8O = $get(_8L, _8M); /*15798*/
				$k[$j++] = _8O; /*15798*/
				if (_8O > 10000) { //no-else/*15798*/
					$j--; /*15798*/
					$k[$j++] = 10000; /*15798*/
				} /*15798*/
			} /*15798*/
			$1.nextNonX = $a(); /*15798*/
			$1.isD = function() {
				$k[$j++] = ($1.char >= 48) && ($1.char <= 57); /*15800*/
			}; /*15800*/
			$1.isC = function() {
				var _8U = $get($1.CNvals, $1.char) !== undefined; /*15801*/
				$k[$j++] = _8U; /*15801*/
			}; /*15801*/
			$1.isT = function() {
				var _8X = $get($1.TNvals, $1.char) !== undefined; /*15802*/
				$k[$j++] = _8X; /*15802*/
			}; /*15802*/
			$1.isX = function() {
				var _8a = $get($1.Xvals, $1.char) !== undefined; /*15803*/
				$k[$j++] = _8a; /*15803*/
			}; /*15803*/
			$1.isE = function() {
				var _8d = $get($1.Evals, $1.char) !== undefined; /*15804*/
				$k[$j++] = _8d; /*15804*/
			}; /*15804*/
			$1.isEA = function() {
				$k[$j++] = $1.char > 127; /*15805*/
			}; /*15805*/
			$1.isFN = function() {
				$k[$j++] = $1.char < 0; /*15806*/
			}; /*15806*/
			$1.XtermFirst = function() {
				var _8g = $k[--$j]; /*15807*/
				$k[$j++] = $lt($get($1.nextXterm, _8g), $get($1.nextNonX, _8g)); /*15807*/
			}; /*15807*/
			$1.A = 0; /*15809*/
			$1.C = 1; /*15809*/
			$1.T = 2; /*15809*/
			$1.X = 3; /*15809*/
			$1.E = 4; /*15809*/
			$1.B = 5; /*15809*/
			$1.lookup = function() {
				$1.ac = 1; /*15812*/
				$1.cc = 2; /*15812*/
				$1.tc = 2; /*15812*/
				$1.xc = 2; /*15812*/
				$1.ec = 2; /*15812*/
				$1.bc = 2.25; /*15812*/
				if ($1.mode == $1.A) { //no-else/*15813*/
					$1.ac = 0; /*15813*/
					$1.cc = 1; /*15813*/
					$1.tc = 1; /*15813*/
					$1.xc = 1; /*15813*/
					$1.ec = 1; /*15813*/
					$1.bc = 1.25; /*15813*/
				} /*15813*/
				if ($1.mode == $1.C) { //no-else/*15814*/
					$1.cc = 0; /*15814*/
				} /*15814*/
				if ($1.mode == $1.T) { //no-else/*15815*/
					$1.tc = 0; /*15815*/
				} /*15815*/
				if ($1.mode == $1.X) { //no-else/*15816*/
					$1.xc = 0; /*15816*/
				} /*15816*/
				if ($1.mode == $1.E) { //no-else/*15817*/
					$1.ec = 0; /*15817*/
				} /*15817*/
				if ($1.mode == $1.B) { //no-else/*15818*/
					$1.bc = 0; /*15818*/
				} /*15818*/
				for (var _8x = 0, _8y = 1; _8x < _8y; _8x++) {
					/*15852*/
					if ($1.mailmark && ($1.i < 45)) { //no-else/*15820*/
						$k[$j++] = $1.C; /*15820*/
						break; /*15820*/
					} /*15820*/
					$1.k = 0; /*15821*/
					for (;;) {
						/*15851*/
						if (($1.i + $1.k) == $1.msglen) { //no-else/*15830*/
							var _95 = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); /*15823*/
							for (var _96 = 0, _97 = _95.length; _96 < _97; _96++) {
								/*15823*/
								var _98 = $get(_95, _96); /*15823*/
								$1[_98] = Math.ceil($1[_98]); /*15823*/
							} /*15823*/
							var _9F = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); /*15824*/
							$k[$j++] = true; /*15824*/
							for (var _9G = 0, _9H = _9F.length; _9G < _9H; _9G++) {
								/*15824*/
								var _9K = $k[--$j]; /*15824*/
								$k[$j++] = _9K && ($1.ac <= $get(_9F, _9G)); /*15824*/
							} /*15824*/
							if ($k[--$j]) { //no-else/*15824*/
								$k[$j++] = $1.A; /*15824*/
								break; /*15824*/
							} /*15824*/
							var _9S = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.ec]); /*15825*/
							$k[$j++] = true; /*15825*/
							for (var _9T = 0, _9U = _9S.length; _9T < _9U; _9T++) {
								/*15825*/
								var _9X = $k[--$j]; /*15825*/
								$k[$j++] = _9X && ($1.bc < $get(_9S, _9T)); /*15825*/
							} /*15825*/
							if ($k[--$j]) { //no-else/*15825*/
								$k[$j++] = $1.B; /*15825*/
								break; /*15825*/
							} /*15825*/
							var _9f = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); /*15826*/
							$k[$j++] = true; /*15826*/
							for (var _9g = 0, _9h = _9f.length; _9g < _9h; _9g++) {
								/*15826*/
								var _9k = $k[--$j]; /*15826*/
								$k[$j++] = _9k && ($1.ec < $get(_9f, _9g)); /*15826*/
							} /*15826*/
							if ($k[--$j]) { //no-else/*15826*/
								$k[$j++] = $1.E; /*15826*/
								break; /*15826*/
							} /*15826*/
							var _9s = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); /*15827*/
							$k[$j++] = true; /*15827*/
							for (var _9t = 0, _9u = _9s.length; _9t < _9u; _9t++) {
								/*15827*/
								var _9x = $k[--$j]; /*15827*/
								$k[$j++] = _9x && ($1.tc < $get(_9s, _9t)); /*15827*/
							} /*15827*/
							if ($k[--$j]) { //no-else/*15827*/
								$k[$j++] = $1.T; /*15827*/
								break; /*15827*/
							} /*15827*/
							var _A5 = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); /*15828*/
							$k[$j++] = true; /*15828*/
							for (var _A6 = 0, _A7 = _A5.length; _A6 < _A7; _A6++) {
								/*15828*/
								var _AA = $k[--$j]; /*15828*/
								$k[$j++] = _AA && ($1.xc < $get(_A5, _A6)); /*15828*/
							} /*15828*/
							if ($k[--$j]) { //no-else/*15828*/
								$k[$j++] = $1.X; /*15828*/
								break; /*15828*/
							} /*15828*/
							$k[$j++] = $1.C; /*15829*/
							break; /*15829*/
						} /*15829*/
						$1.char = $get($1.msg, $1.i + $1.k); /*15831*/
						$k[$j++] = 'ac'; /*15832*/
						$k[$j++] = $1.ac; /*15832*/
						$1.isD(); /*15832*/
						if ($k[--$j]) {
							/*15832*/
							var _AK = $k[--$j]; /*15832*/
							$k[$j++] = _AK + (1 / 2); /*15832*/
						} else {
							/*15832*/
							$1.isEA(); /*15832*/
							if ($k[--$j]) {
								/*15832*/
								var _AM = $k[--$j]; /*15832*/
								$k[$j++] = Math.ceil(_AM) + 2; /*15832*/
							} else {
								/*15832*/
								var _AN = $k[--$j]; /*15832*/
								$k[$j++] = Math.ceil(_AN) + 1; /*15832*/
							} /*15832*/
						} /*15832*/
						var _AO = $k[--$j]; /*15832*/
						$1[$k[--$j]] = _AO; /*15832*/
						$k[$j++] = 'cc'; /*15833*/
						$k[$j++] = $1.cc; /*15833*/
						$1.isC(); /*15833*/
						if ($k[--$j]) {
							/*15833*/
							var _AS = $k[--$j]; /*15833*/
							$k[$j++] = _AS + (2 / 3); /*15833*/
						} else {
							/*15833*/
							$1.isEA(); /*15833*/
							if ($k[--$j]) {
								/*15833*/
								var _AU = $k[--$j]; /*15833*/
								$k[$j++] = _AU + (8 / 3); /*15833*/
							} else {
								/*15833*/
								var _AV = $k[--$j]; /*15833*/
								$k[$j++] = _AV + (4 / 3); /*15833*/
							} /*15833*/
						} /*15833*/
						var _AW = $k[--$j]; /*15833*/
						$1[$k[--$j]] = _AW; /*15833*/
						$k[$j++] = 'tc'; /*15834*/
						$k[$j++] = $1.tc; /*15834*/
						$1.isT(); /*15834*/
						if ($k[--$j]) {
							/*15834*/
							var _Aa = $k[--$j]; /*15834*/
							$k[$j++] = _Aa + (2 / 3); /*15834*/
						} else {
							/*15834*/
							$1.isEA(); /*15834*/
							if ($k[--$j]) {
								/*15834*/
								var _Ac = $k[--$j]; /*15834*/
								$k[$j++] = _Ac + (8 / 3); /*15834*/
							} else {
								/*15834*/
								var _Ad = $k[--$j]; /*15834*/
								$k[$j++] = _Ad + (4 / 3); /*15834*/
							} /*15834*/
						} /*15834*/
						var _Ae = $k[--$j]; /*15834*/
						$1[$k[--$j]] = _Ae; /*15834*/
						$k[$j++] = 'xc'; /*15835*/
						$k[$j++] = $1.xc; /*15835*/
						$1.isX(); /*15835*/
						if ($k[--$j]) {
							/*15835*/
							var _Ai = $k[--$j]; /*15835*/
							$k[$j++] = _Ai + (2 / 3); /*15835*/
						} else {
							/*15835*/
							$1.isEA(); /*15835*/
							if ($k[--$j]) {
								/*15835*/
								var _Ak = $k[--$j]; /*15835*/
								$k[$j++] = _Ak + (13 / 3); /*15835*/
							} else {
								/*15835*/
								var _Al = $k[--$j]; /*15835*/
								$k[$j++] = _Al + (10 / 3); /*15835*/
							} /*15835*/
						} /*15835*/
						var _Am = $k[--$j]; /*15835*/
						$1[$k[--$j]] = _Am; /*15835*/
						$k[$j++] = 'ec'; /*15836*/
						$k[$j++] = $1.ec; /*15836*/
						$1.isE(); /*15836*/
						if ($k[--$j]) {
							/*15836*/
							var _Aq = $k[--$j]; /*15836*/
							$k[$j++] = _Aq + (3 / 4); /*15836*/
						} else {
							/*15836*/
							$1.isEA(); /*15836*/
							if ($k[--$j]) {
								/*15836*/
								var _As = $k[--$j]; /*15836*/
								$k[$j++] = _As + (17 / 4); /*15836*/
							} else {
								/*15836*/
								var _At = $k[--$j]; /*15836*/
								$k[$j++] = _At + (13 / 4); /*15836*/
							} /*15836*/
						} /*15836*/
						var _Au = $k[--$j]; /*15836*/
						$1[$k[--$j]] = _Au; /*15836*/
						$k[$j++] = 'bc'; /*15837*/
						$k[$j++] = $1.bc; /*15837*/
						$1.isFN(); /*15837*/
						if ($k[--$j]) {
							/*15837*/
							var _Ay = $k[--$j]; /*15837*/
							$k[$j++] = _Ay + 4; /*15837*/
						} else {
							/*15837*/
							var _Az = $k[--$j]; /*15837*/
							$k[$j++] = _Az + 1; /*15837*/
						} /*15837*/
						var _B0 = $k[--$j]; /*15837*/
						$1[$k[--$j]] = _B0; /*15837*/
						if ($1.k >= 4) { //no-else/*15849*/
							var _B8 = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); /*15839*/
							$k[$j++] = true; /*15839*/
							for (var _B9 = 0, _BA = _B8.length; _B9 < _BA; _B9++) {
								/*15839*/
								var _BD = $k[--$j]; /*15839*/
								$k[$j++] = _BD && (($1.ac + 1) <= $get(_B8, _B9)); /*15839*/
							} /*15839*/
							if ($k[--$j]) { //no-else/*15839*/
								$k[$j++] = $1.A; /*15839*/
								break; /*15839*/
							} /*15839*/
							if (($1.bc + 1) <= $1.ac) { //no-else/*15840*/
								$k[$j++] = $1.B; /*15840*/
								break; /*15840*/
							} /*15840*/
							var _BN = $a([$1.cc, $1.tc, $1.xc, $1.ec]); /*15841*/
							$k[$j++] = true; /*15841*/
							for (var _BO = 0, _BP = _BN.length; _BO < _BP; _BO++) {
								/*15841*/
								var _BS = $k[--$j]; /*15841*/
								$k[$j++] = _BS && (($1.bc + 1) < $get(_BN, _BO)); /*15841*/
							} /*15841*/
							if ($k[--$j]) { //no-else/*15841*/
								$k[$j++] = $1.B; /*15841*/
								break; /*15841*/
							} /*15841*/
							var _Ba = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); /*15842*/
							$k[$j++] = true; /*15842*/
							for (var _Bb = 0, _Bc = _Ba.length; _Bb < _Bc; _Bb++) {
								/*15842*/
								var _Bf = $k[--$j]; /*15842*/
								$k[$j++] = _Bf && (($1.ec + 1) < $get(_Ba, _Bb)); /*15842*/
							} /*15842*/
							if ($k[--$j]) { //no-else/*15842*/
								$k[$j++] = $1.E; /*15842*/
								break; /*15842*/
							} /*15842*/
							var _Bn = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); /*15843*/
							$k[$j++] = true; /*15843*/
							for (var _Bo = 0, _Bp = _Bn.length; _Bo < _Bp; _Bo++) {
								/*15843*/
								var _Bs = $k[--$j]; /*15843*/
								$k[$j++] = _Bs && (($1.tc + 1) < $get(_Bn, _Bo)); /*15843*/
							} /*15843*/
							if ($k[--$j]) { //no-else/*15843*/
								$k[$j++] = $1.T; /*15843*/
								break; /*15843*/
							} /*15843*/
							var _C0 = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); /*15844*/
							$k[$j++] = true; /*15844*/
							for (var _C1 = 0, _C2 = _C0.length; _C1 < _C2; _C1++) {
								/*15844*/
								var _C5 = $k[--$j]; /*15844*/
								$k[$j++] = _C5 && (($1.xc + 1) < $get(_C0, _C1)); /*15844*/
							} /*15844*/
							if ($k[--$j]) { //no-else/*15844*/
								$k[$j++] = $1.X; /*15844*/
								break; /*15844*/
							} /*15844*/
							var _CC = $a([$1.ac, $1.tc, $1.ec, $1.bc]); /*15845*/
							$k[$j++] = true; /*15845*/
							for (var _CD = 0, _CE = _CC.length; _CD < _CE; _CD++) {
								/*15845*/
								var _CH = $k[--$j]; /*15845*/
								$k[$j++] = _CH && (($1.cc + 1) < $get(_CC, _CD)); /*15845*/
							} /*15845*/
							if ($k[--$j]) { //no-else/*15848*/
								if ($1.cc < $1.xc) { //no-else/*15846*/
									$k[$j++] = $1.C; /*15846*/
									break; /*15846*/
								} /*15846*/
								if ($1.cc == $1.xc) { //no-else/*15847*/
									$k[$j++] = ($1.i + $1.k) + 1; /*15847*/
									$1.XtermFirst(); /*15847*/
									if ($k[--$j]) {
										/*15847*/
										$k[$j++] = $1.X; /*15847*/
										break; /*15847*/
									} else {
										/*15847*/
										$k[$j++] = $1.C; /*15847*/
										break; /*15847*/
									} /*15847*/
								} /*15847*/
							} /*15847*/
						} /*15847*/
						$1.k = $1.k + 1; /*15850*/
					} /*15850*/
				} /*15850*/
			}; /*15853*/
			$1.addtocws = function() {
				var _CU = $k[--$j]; /*15856*/
				$puti($1.cws, $1.j, _CU); /*15856*/
				$1.j = _CU.length + $1.j; /*15857*/
			}; /*15858*/
			$1.encA = function() {
				for (var _CY = 0, _CZ = 1; _CY < _CZ; _CY++) {
					/*15876*/
					if ($get($1.numD, $1.i) >= 2) { //no-else/*15866*/
						var _Cd = $s(2); /*15863*/
						$put(_Cd, 0, $get($1.msg, $1.i)); /*15863*/
						$put(_Cd, 1, $get($1.msg, $1.i + 1)); /*15863*/
						$k[$j++] = $get($1.Avals, _Cd); /*15863*/
						$1.addtocws(); /*15863*/
						$1.i = $1.i + 2; /*15864*/
						break; /*15865*/
					} /*15865*/
					$k[$j++] = 'newmode'; /*15867*/
					$1.lookup(); /*15867*/
					var _Cn = $k[--$j]; /*15867*/
					$1[$k[--$j]] = _Cn; /*15867*/
					if ($1.newmode != $1.mode) { //no-else/*15872*/
						$k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); /*15869*/
						$1.addtocws(); /*15869*/
						$1.mode = $1.newmode; /*15870*/
						break; /*15871*/
					} /*15871*/
					$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*15873*/
					$1.addtocws(); /*15873*/
					$1.i = $1.i + 1; /*15874*/
					break; /*15875*/
				} /*15875*/
			}; /*15877*/
			$1.CTXvalstocws = function() {
				$1.in = $k[--$j]; /*15880*/
				$k[$j++] = Infinity; /*15881*/
				for (var _DB = 0, _DA = $1.in.length - 1; _DB <= _DA; _DB += 3) {
					/*15885*/
					$k[$j++] = 0; /*15883*/
					$forall($geti($1.in, _DB, 3), function() {
						/*15883*/
						var _DE = $k[--$j]; /*15883*/
						var _DF = $k[--$j]; /*15883*/
						$k[$j++] = (_DF + _DE) * 40; /*15883*/
					}); /*15883*/
					var _DH = (~~($k[--$j] / 40)) + 1; /*15884*/
					$k[$j++] = ~~(_DH / 256); /*15884*/
					$k[$j++] = _DH % 256; /*15884*/
				} /*15884*/
				$astore($a($counttomark())); /*15886*/
				var _DK = $k[--$j]; /*15886*/
				var _DL = $k[--$j]; /*15886*/
				$k[$j++] = _DK; /*15886*/
			}; /*15887*/
			$1.encCTX = function() {
				$1.p = 0; /*15890*/
				$1.ctxvals = $a(2500); /*15891*/
				$1.done = false; /*15892*/
				for (;;) {
					/*15969*/
					if ($1.i == $1.msglen) { //no-else/*15896*/
						break; /*15896*/
					} /*15896*/
					var _DV = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)) !== undefined; /*15897*/
					if (!_DV) { //no-else/*15897*/
						break; /*15897*/
					} /*15897*/
					if (($1.p % 3) == 0) { //no-else/*15964*/
						$k[$j++] = 'newmode'; /*15899*/
						$1.lookup(); /*15899*/
						var _DX = $k[--$j]; /*15899*/
						$1[$k[--$j]] = _DX; /*15899*/
						if ($ne($1.newmode, $1.mode)) { //no-else/*15909*/
							$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*15901*/
							$1.CTXvalstocws(); /*15901*/
							$1.addtocws(); /*15901*/
							$k[$j++] = $a([$1.unlcw]); /*15902*/
							$1.addtocws(); /*15902*/
							if ($1.newmode != $1.A) { //no-else/*15905*/
								$k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); /*15904*/
								$1.addtocws(); /*15904*/
							} /*15904*/
							$1.mode = $1.newmode; /*15906*/
							$1.done = true; /*15907*/
							break; /*15908*/
						} /*15908*/
						if (($1.msglen - $1.i) <= 3) { //no-else/*15963*/
							$1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); /*15911*/
							$k[$j++] = Infinity; /*15920*/
							$forall($geti($1.msg, $1.i, $1.msglen - $1.i), function() {
								/*15919*/
								var _E4 = $k[--$j]; /*15914*/
								var _E8 = $get($get($1.encvals, $1.mode), _E4) !== undefined; /*15914*/
								$k[$j++] = _E4; /*15918*/
								if (_E8) {
									/*15917*/
									$aload($get($get($1.encvals, $1.mode), $k[--$j])); /*15915*/
								} else {
									/*15917*/
									$j--; /*15917*/
									$k[$j++] = -1; /*15917*/
									$k[$j++] = -1; /*15917*/
									$k[$j++] = -1; /*15917*/
									$k[$j++] = -1; /*15917*/
								} /*15917*/
							}); /*15917*/
							$1.remvals = $a(); /*15920*/
							if (($1.remcws == 2) && ($1.remvals.length == 3)) { //no-else/*15931*/
								$k[$j++] = Infinity; /*15925*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*15924*/
								$aload($1.remvals); /*15925*/
								var _EL = $a(); /*15925*/
								$k[$j++] = _EL; /*15926*/
								$1.CTXvalstocws(); /*15926*/
								$1.addtocws(); /*15926*/
								$1.mode = $1.A; /*15927*/
								$1.i = $1.msglen; /*15928*/
								$1.done = true; /*15929*/
								break; /*15930*/
							} /*15930*/
							if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //no-else/*15943*/
								$k[$j++] = Infinity; /*15937*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*15935*/
								$aload($1.remvals); /*15936*/
								$aload($get($get($1.encvals, $1.mode), $1.sft1)); /*15937*/
								var _Eb = $a(); /*15937*/
								$k[$j++] = _Eb; /*15938*/
								$1.CTXvalstocws(); /*15938*/
								$1.addtocws(); /*15938*/
								$1.mode = $1.A; /*15939*/
								$1.i = $1.msglen; /*15940*/
								$1.done = true; /*15941*/
								break; /*15942*/
							} /*15942*/
							if (($1.remcws == 2) && ($1.remvals.length == 1)) { //no-else/*15953*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*15946*/
								$1.CTXvalstocws(); /*15946*/
								$1.addtocws(); /*15946*/
								$k[$j++] = $a([$1.unlcw]); /*15947*/
								$1.addtocws(); /*15947*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*15948*/
								$1.addtocws(); /*15948*/
								$1.mode = $1.A; /*15949*/
								$1.i = $1.msglen; /*15950*/
								$1.done = true; /*15951*/
								break; /*15952*/
							} /*15952*/
							if (($1.remcws == 1) && ($1.remvals.length == 1)) { //no-else/*15962*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*15956*/
								$1.CTXvalstocws(); /*15956*/
								$1.addtocws(); /*15956*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*15957*/
								$1.addtocws(); /*15957*/
								$1.mode = $1.A; /*15958*/
								$1.i = $1.msglen; /*15959*/
								$1.done = true; /*15960*/
								break; /*15961*/
							} /*15961*/
						} /*15961*/
					} /*15961*/
					var _FA = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); /*15965*/
					$puti($1.ctxvals, $1.p, _FA); /*15966*/
					$1.p = _FA.length + $1.p; /*15967*/
					$1.i = $1.i + 1; /*15968*/
				} /*15968*/
				if (!$1.done) { //no-else/*15993*/
					for (;;) {
						/*15977*/
						if (($1.p % 3) == 0) { //no-else/*15974*/
							break; /*15974*/
						} /*15974*/
						$1.i = $1.i - 1; /*15975*/
						$1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; /*15976*/
					} /*15976*/
					$k[$j++] = Infinity; /*15979*/
					$aload($geti($1.ctxvals, 0, $1.p)); /*15979*/
					var _FT = $a(); /*15979*/
					$k[$j++] = _FT; /*15980*/
					$1.CTXvalstocws(); /*15980*/
					$1.addtocws(); /*15980*/
					$k[$j++] = $a([$1.unlcw]); /*15981*/
					$1.addtocws(); /*15981*/
					$1.mode = $1.A; /*15982*/
					if ($1.i != $1.msglen) { //no-else/*15992*/
						if ($get($1.numD, $1.i) >= 2) {
							/*15990*/
							var _Fc = $s(2); /*15986*/
							$put(_Fc, 0, $get($1.msg, $1.i)); /*15986*/
							$put(_Fc, 1, $get($1.msg, $1.i + 1)); /*15986*/
							$k[$j++] = $get($1.Avals, _Fc); /*15986*/
							$1.addtocws(); /*15986*/
							$1.i = $1.i + 2; /*15987*/
						} else {
							/*15990*/
							$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*15989*/
							$1.addtocws(); /*15989*/
							$1.i = $1.i + 1; /*15990*/
						} /*15990*/
					} /*15990*/
				} /*15990*/
			}; /*15995*/
			$1.Evalstocws = function() {
				$1.in = $k[--$j]; /*15998*/
				$1.inlen = $1.in.length; /*15999*/
				$1.outlen = ~~(Math.ceil(($1.in.length / 4) * 3)); /*16000*/
				$k[$j++] = Infinity; /*16001*/
				$aload($1.in); /*16001*/
				$k[$j++] = 0; /*16001*/
				$k[$j++] = 0; /*16001*/
				$k[$j++] = 0; /*16001*/
				$1.in = $a(); /*16001*/
				$k[$j++] = Infinity; /*16002*/
				for (var _Fz = 0, _Fy = $1.inlen - 1; _Fz <= _Fy; _Fz += 4) {
					/*16008*/
					$k[$j++] = 0; /*16004*/
					$forall($geti($1.in, _Fz, 4), function() {
						/*16004*/
						var _G2 = $k[--$j]; /*16004*/
						var _G3 = $k[--$j]; /*16004*/
						$k[$j++] = $or(_G3, _G2) << 6; /*16004*/
					}); /*16004*/
					var _G5 = $k[--$j] >>> 6; /*16005*/
					$k[$j++] = (_G5 >>> 16) & 255; /*16007*/
					$k[$j++] = (_G5 >>> 8) & 255; /*16007*/
					$k[$j++] = _G5 & 255; /*16007*/
				} /*16007*/
				$astore($a($counttomark())); /*16009*/
				var _G8 = $k[--$j]; /*16009*/
				var _G9 = $k[--$j]; /*16009*/
				$k[$j++] = $geti(_G8, 0, $1.outlen); /*16010*/
			}; /*16011*/
			$1.encE = function() {
				$1.p = 0; /*16014*/
				$1.edifactvals = $a(2100); /*16015*/
				for (;;) {
					/*16044*/
					if ($1.i == $1.msglen) { //no-else/*16019*/
						break; /*16019*/
					} /*16019*/
					var _GJ = $get($1.Evals, $get($1.msg, $1.i)) !== undefined; /*16020*/
					if (!_GJ) { //no-else/*16020*/
						break; /*16020*/
					} /*16020*/
					if (($1.p % 4) == 0) { //no-else/*16039*/
						if (($1.msglen - $1.i) <= 2) { //no-else/*16037*/
							$1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 4)) * 3)); /*16023*/
							$k[$j++] = Infinity; /*16028*/
							$forall($geti($1.msg, $1.i, $1.msglen - $1.i), function() {
								/*16027*/
								$aload($get($1.Avals, $k[--$j])); /*16026*/
							}); /*16026*/
							$1.remvals = $a(); /*16028*/
							if ((($1.remcws == 1) || ($1.remcws == 2)) && ($1.remvals.length <= $1.remcws)) { //no-else/*16036*/
								$k[$j++] = $geti($1.edifactvals, 0, $1.p); /*16031*/
								$1.Evalstocws(); /*16031*/
								$1.addtocws(); /*16031*/
								$k[$j++] = $1.remvals; /*16032*/
								$1.addtocws(); /*16032*/
								$1.mode = $1.A; /*16033*/
								$1.i = $1.msglen; /*16034*/
								break; /*16035*/
							} /*16035*/
						} /*16035*/
						$1.lookup(); /*16038*/
						if ($k[--$j] != $1.mode) { //no-else/*16038*/
							break; /*16038*/
						} /*16038*/
					} /*16038*/
					var _Gq = $get($1.Evals, $get($1.msg, $1.i)); /*16040*/
					$puti($1.edifactvals, $1.p, _Gq); /*16041*/
					$1.p = _Gq.length + $1.p; /*16042*/
					$1.i = $1.i + 1; /*16043*/
				} /*16043*/
				if ($1.mode != $1.A) { //no-else/*16066*/
					$1.remcws = $get($1.numremcws, ($1.j + ((~~($1.p / 4)) * 3)) - 1) - 1; /*16048*/
					if (((($1.p % 4) != 0) || ($1.i != $1.msglen)) || ($1.remcws >= 3)) { //no-else/*16053*/
						var _H7 = $get($1.Evals, $1.unl); /*16050*/
						$puti($1.edifactvals, $1.p, _H7); /*16051*/
						$1.p = _H7.length + $1.p; /*16052*/
					} /*16052*/
					$k[$j++] = $geti($1.edifactvals, 0, $1.p); /*16054*/
					$1.Evalstocws(); /*16054*/
					$1.addtocws(); /*16054*/
					$1.mode = $1.A; /*16055*/
					if ($1.i != $1.msglen) { //no-else/*16065*/
						if ($get($1.numD, $1.i) >= 2) {
							/*16063*/
							var _HK = $s(2); /*16059*/
							$put(_HK, 0, $get($1.msg, $1.i)); /*16059*/
							$put(_HK, 1, $get($1.msg, $1.i + 1)); /*16059*/
							$k[$j++] = $get($1.Avals, _HK); /*16059*/
							$1.addtocws(); /*16059*/
							$1.i = $1.i + 2; /*16060*/
						} else {
							/*16063*/
							$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*16062*/
							$1.addtocws(); /*16062*/
							$1.i = $1.i + 1; /*16063*/
						} /*16063*/
					} /*16063*/
				} /*16063*/
			}; /*16068*/
			$1.encB = function() {
				$1.p = 0; /*16071*/
				$1.bvals = $a(1558); /*16071*/
				for (;;) {
					/*16077*/
					if ($1.i == $1.msglen) { //no-else/*16072*/
						break; /*16072*/
					} /*16072*/
					$1.lookup(); /*16073*/
					if ($k[--$j] != $1.mode) { //no-else/*16073*/
						break; /*16073*/
					} /*16073*/
					$put($1.bvals, $1.p, $get($1.msg, $1.i)); /*16074*/
					$1.p = $1.p + 1; /*16075*/
					$1.i = $1.i + 1; /*16076*/
				} /*16076*/
				$1.remcws = $get($1.numremcws, $1.j + $1.p) - 1; /*16078*/
				$k[$j++] = Infinity; /*16086*/
				if (($1.remcws == 0) && ($1.i == $1.msglen)) {
					/*16083*/
					$k[$j++] = 0; /*16081*/
				} else {
					/*16083*/
					if ($1.p < 250) {
						/*16083*/
						$k[$j++] = $1.p; /*16083*/
					} else {
						/*16083*/
						$k[$j++] = (~~($1.p / 250)) + 249; /*16083*/
						$k[$j++] = $1.p % 250; /*16083*/
					} /*16083*/
				} /*16083*/
				$aload($geti($1.bvals, 0, $1.p)); /*16085*/
				$1.bvals = $a(); /*16086*/
				for (var _I3 = 0, _I2 = $1.bvals.length - 1; _I3 <= _I2; _I3 += 1) {
					/*16092*/
					$1.p = _I3; /*16088*/
					var _I9 = ((((($1.j + $1.p) + 1) * 149) % 255) + 1) + $get($1.bvals, $1.p); /*16090*/
					$k[$j++] = _I9; /*16090*/
					if (_I9 >= 256) { //no-else/*16090*/
						var _IA = $k[--$j]; /*16090*/
						$k[$j++] = _IA - 256; /*16090*/
					} /*16090*/
					$put($1.bvals, $1.p, $k[--$j]); /*16091*/
				} /*16091*/
				$k[$j++] = $1.bvals; /*16093*/
				$1.addtocws(); /*16093*/
				$1.mode = $1.A; /*16094*/
			}; /*16095*/
			$1.cws = $a(1558); /*16098*/
			$1.mode = $1.A; /*16099*/
			$1.i = 0; /*16099*/
			$1.j = 0; /*16099*/
			for (;;) {
				/*16102*/
				if ($1.i >= $1.msglen) { //no-else/*16100*/
					break; /*16100*/
				} /*16100*/
				$1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $1.mode)](); /*16101*/
			} /*16101*/
			$1.cws = $geti($1.cws, 0, $1.j); /*16103*/
		} /*16103*/
		$1.datlen = $1.cws.length; /*16108*/
		$1.remcws = $get($1.numremcws, $1.j - 1) - 1; /*16109*/
		if ($1.remcws > 0) { //no-else/*16118*/
			$k[$j++] = Infinity; /*16111*/
			$aload($1.cws); /*16111*/
			for (var _IY = 0, _IZ = $1.remcws; _IY < _IZ; _IY++) {
				/*16111*/
				$k[$j++] = 129; /*16111*/
			} /*16111*/
			$1.cws = $a(); /*16111*/
			for (var _If = $1.datlen + 1, _Ie = ($1.datlen + $1.remcws) - 1; _If <= _Ie; _If += 1) {
				/*16117*/
				$1.i = _If; /*16113*/
				var _Ih = (((($1.i + 1) * 149) % 253) + 1) + 129; /*16115*/
				$k[$j++] = _Ih; /*16115*/
				if (_Ih > 254) { //no-else/*16115*/
					var _Ii = $k[--$j]; /*16115*/
					$k[$j++] = _Ii - 254; /*16115*/
				} /*16115*/
				$put($1.cws, $1.i, $k[--$j]); /*16116*/
			} /*16116*/
		} /*16116*/
		$1.i = 0; /*16121*/
		for (;;) {
			/*16142*/
			$1.m = $get($1.metrics, $1.i); /*16122*/
			$1.rows = $get($1.m, 0); /*16123*/
			$1.cols = $get($1.m, 1); /*16124*/
			$1.regh = $get($1.m, 2); /*16125*/
			$1.regv = $get($1.m, 3); /*16126*/
			$1.rscw = $get($1.m, 4); /*16127*/
			$1.rsbl = $get($1.m, 5); /*16128*/
			$1.mrows = $1.rows - (2 * $1.regh); /*16129*/
			$1.mcols = $1.cols - (2 * $1.regv); /*16130*/
			$1.rrows = ~~($1.mrows / $1.regh); /*16131*/
			$1.rcols = ~~($1.mcols / $1.regv); /*16132*/
			$1.ncws = (~~(($1.mrows * $1.mcols) / 8)) - $1.rscw; /*16133*/
			$1.okay = true; /*16134*/
			if ($1.cws.length != $1.ncws) { //no-else/*16135*/
				$1.okay = false; /*16135*/
			} /*16135*/
			if (($1.urows != 0) && ($1.urows != $1.rows)) { //no-else/*16136*/
				$1.okay = false; /*16136*/
			} /*16136*/
			if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //no-else/*16137*/
				$1.okay = false; /*16137*/
			} /*16137*/
			if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //no-else/*16138*/
				$1.okay = false; /*16138*/
			} /*16138*/
			if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //no-else/*16139*/
				$1.okay = false; /*16139*/
			} /*16139*/
			if ($1.okay) { //no-else/*16140*/
				break; /*16140*/
			} /*16140*/
			$1.i = $1.i + 1; /*16141*/
		} /*16141*/
		$1.cwbs = $a($1.rsbl); /*16145*/
		$1.ecbs = $a($1.rsbl); /*16146*/
		for (var _JY = 0, _JX = $1.rsbl - 1; _JY <= _JX; _JY += 1) {
			/*16161*/
			$1.i = _JY; /*16148*/
			if ($1.cws.length != 1558) {
				/*16152*/
				$1.cwbsize = ~~($1.cws.length / $1.rsbl); /*16150*/
			} else {
				/*16152*/
				if ($1.i <= 7) {
					/*16152*/
					$1.cwbsize = 156; /*16152*/
				} else {
					/*16152*/
					$1.cwbsize = 155; /*16152*/
				} /*16152*/
			} /*16152*/
			$1.cwb = $a($1.cwbsize); /*16154*/
			for (var _Jh = 0, _Jg = $1.cwbsize - 1; _Jh <= _Jg; _Jh += 1) {
				/*16158*/
				$1.j = _Jh; /*16156*/
				$put($1.cwb, $1.j, $get($1.cws, ($1.j * $1.rsbl) + $1.i)); /*16157*/
			} /*16157*/
			$put($1.cwbs, $1.i, $1.cwb); /*16159*/
			$k[$j++] = $1.ecbs; /*16160*/
			$k[$j++] = $1.i; /*16160*/
			$k[$j++] = Infinity; /*16160*/
			for (var _Jw = 0, _Jx = ~~($1.rscw / $1.rsbl); _Jw < _Jx; _Jw++) {
				/*16160*/
				$k[$j++] = 0; /*16160*/
			} /*16160*/
			var _Jy = $a(); /*16160*/
			var _Jz = $k[--$j]; /*16160*/
			$put($k[--$j], _Jz, _Jy); /*16160*/
		} /*16160*/
		$k[$j++] = Infinity; /*16164*/
		$k[$j++] = 1; /*16164*/
		for (var _K1 = 0, _K2 = 255; _K1 < _K2; _K1++) {
			/*16164*/
			var _K3 = $k[--$j]; /*16164*/
			var _K4 = _K3 * 2; /*16164*/
			$k[$j++] = _K3; /*16164*/
			$k[$j++] = _K4; /*16164*/
			if (_K4 >= 256) { //no-else/*16164*/
				var _K5 = $k[--$j]; /*16164*/
				$k[$j++] = _K5 ^ 301; /*16164*/
			} /*16164*/
		} /*16164*/
		$1.rsalog = $a(); /*16164*/
		$1.rslog = $a(256); /*16165*/
		for (var _K8 = 1; _K8 <= 255; _K8 += 1) {
			/*16166*/
			$put($1.rslog, $get($1.rsalog, _K8), _K8); /*16166*/
		} /*16166*/
		$1.rsprod = function() {
			var _KC = $k[--$j]; /*16170*/
			var _KD = $k[--$j]; /*16170*/
			$k[$j++] = _KD; /*16174*/
			$k[$j++] = _KC; /*16174*/
			if ((_KC != 0) && (_KD != 0)) {
				/*16173*/
				var _KG = $get($1.rslog, $k[--$j]); /*16171*/
				var _KL = $get($1.rsalog, (_KG + $get($1.rslog, $k[--$j])) % 255); /*16171*/
				$k[$j++] = _KL; /*16171*/
			} else {
				/*16173*/
				$j -= 2; /*16173*/
				$k[$j++] = 0; /*16173*/
			} /*16173*/
		}; /*16175*/
		$k[$j++] = Infinity; /*16178*/
		$k[$j++] = 1; /*16178*/
		for (var _KO = 0, _KP = ~~($1.rscw / $1.rsbl); _KO < _KP; _KO++) {
			/*16178*/
			$k[$j++] = 0; /*16178*/
		} /*16178*/
		$1.coeffs = $a(); /*16178*/
		for (var _KU = 1, _KT = ~~($1.rscw / $1.rsbl); _KU <= _KT; _KU += 1) {
			/*16187*/
			$1.i = _KU; /*16180*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*16181*/
			for (var _Kb = $1.i - 1; _Kb >= 1; _Kb -= 1) {
				/*16185*/
				$1.j = _Kb; /*16183*/
				$k[$j++] = $1.coeffs; /*16184*/
				$k[$j++] = $1.j; /*16184*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*16184*/
				$k[$j++] = $get($1.coeffs, $1.j); /*16184*/
				$k[$j++] = $get($1.rsalog, $1.i); /*16184*/
				$1.rsprod(); /*16184*/
				var _Kn = $k[--$j]; /*16184*/
				var _Ko = $k[--$j]; /*16184*/
				var _Kp = $k[--$j]; /*16184*/
				$put($k[--$j], _Kp, $xo(_Ko, _Kn)); /*16184*/
			} /*16184*/
			$k[$j++] = $1.coeffs; /*16186*/
			$k[$j++] = 0; /*16186*/
			$k[$j++] = $get($1.coeffs, 0); /*16186*/
			$k[$j++] = $get($1.rsalog, $1.i); /*16186*/
			$1.rsprod(); /*16186*/
			var _Kx = $k[--$j]; /*16186*/
			var _Ky = $k[--$j]; /*16186*/
			$put($k[--$j], _Ky, _Kx); /*16186*/
		} /*16186*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*16188*/
		for (var _L5 = 0, _L4 = $1.cwbs.length - 1; _L5 <= _L4; _L5 += 1) {
			/*16204*/
			$1.i = _L5; /*16192*/
			$1.cwb = $get($1.cwbs, $1.i); /*16193*/
			$1.ecb = $get($1.ecbs, $1.i); /*16194*/
			for (var _LE = 0, _LD = $1.cwb.length - 1; _LE <= _LD; _LE += 1) {
				/*16203*/
				$1.t = $xo($get($1.cwb, _LE), $get($1.ecb, 0)); /*16196*/
				for (var _LK = $1.ecb.length - 1; _LK >= 0; _LK -= 1) {
					/*16202*/
					$1.j = _LK; /*16198*/
					$1.p = ($1.ecb.length - $1.j) - 1; /*16199*/
					$k[$j++] = $1.ecb; /*16200*/
					$k[$j++] = $1.p; /*16200*/
					$k[$j++] = $1.t; /*16200*/
					$k[$j++] = $get($1.coeffs, $1.j); /*16200*/
					$1.rsprod(); /*16200*/
					var _LT = $k[--$j]; /*16200*/
					var _LU = $k[--$j]; /*16200*/
					$put($k[--$j], _LU, _LT); /*16200*/
					if ($1.j > 0) { //no-else/*16201*/
						$put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); /*16201*/
					} /*16201*/
				} /*16201*/
			} /*16201*/
		} /*16201*/
		if ($1.ncws == 1558) { //no-else/*16209*/
			$k[$j++] = Infinity; /*16208*/
			$forall($geti($1.ecbs, 8, 2)); /*16208*/
			$forall($geti($1.ecbs, 0, 8)); /*16208*/
			$1.ecbs = $a(); /*16208*/
		} /*16208*/
		$k[$j++] = Infinity; /*16212*/
		var _Ll = $1.cws; /*16212*/
		for (var _Lm = 0, _Ln = _Ll.length; _Lm < _Ln; _Lm++) {
			/*16212*/
			$k[$j++] = $get(_Ll, _Lm); /*16212*/
		} /*16212*/
		for (var _Lq = 0, _Lr = $1.rscw; _Lq < _Lr; _Lq++) {
			/*16212*/
			$k[$j++] = 0; /*16212*/
		} /*16212*/
		$1.cws = $a(); /*16212*/
		for (var _Lv = 0, _Lu = $1.rscw - 1; _Lv <= _Lu; _Lv += 1) {
			/*16216*/
			$1.i = _Lv; /*16214*/
			$put($1.cws, $1.ncws + $1.i, $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); /*16215*/
		} /*16215*/
		$1.module = function() {
			var _M6 = $k[--$j]; /*16221*/
			var _M7 = $k[--$j]; /*16221*/
			var _M8 = $k[--$j]; /*16221*/
			var _MB = $strcpy($s(8), "00000000"); /*16222*/
			var _MD = $cvrs($s(8), $k[--$j], 2); /*16222*/
			$puti(_MB, 8 - _MD.length, _MD); /*16223*/
			$k[$j++] = _M8; /*16224*/
			$k[$j++] = _M7; /*16224*/
			$k[$j++] = _M6; /*16224*/
			$k[$j++] = _MB; /*16224*/
			for (var _ME = 7; _ME >= 0; _ME -= 1) {
				/*16224*/
				var _MF = $k[--$j]; /*16224*/
				$k[$j++] = $get(_MF, _ME) - 48; /*16224*/
				$k[$j++] = _MF; /*16224*/
			} /*16224*/
			$j--; /*16224*/
			var _MH = $k[--$j]; /*16225*/
			var _MI = $k[--$j]; /*16225*/
			var _MJ = $k[--$j]; /*16225*/
			var _MK = $k[--$j]; /*16225*/
			var _ML = $k[--$j]; /*16225*/
			var _MM = $k[--$j]; /*16225*/
			var _MN = $k[--$j]; /*16225*/
			var _MO = $k[--$j]; /*16225*/
			var _MP = $k[--$j]; /*16225*/
			var _MQ = $k[--$j]; /*16225*/
			var _MR = $k[--$j]; /*16225*/
			$k[$j++] = _MO; /*16242*/
			$k[$j++] = _MN; /*16242*/
			$k[$j++] = _MM; /*16242*/
			$k[$j++] = _ML; /*16242*/
			$k[$j++] = _MK; /*16242*/
			$k[$j++] = _MJ; /*16242*/
			$k[$j++] = _MI; /*16242*/
			$k[$j++] = _MH; /*16242*/
			$k[$j++] = _MR; /*16242*/
			$k[$j++] = _MQ; /*16242*/
			$forall(_MP, function() {
				/*16242*/
				$k[--$j](); /*16228*/
				var _MT = $k[--$j]; /*16229*/
				var _MU = $k[--$j]; /*16229*/
				$k[$j++] = _MU; /*16232*/
				$k[$j++] = _MT; /*16232*/
				if (_MU < 0) { //no-else/*16232*/
					var _MV = $k[--$j]; /*16230*/
					var _MW = $k[--$j]; /*16230*/
					$k[$j++] = _MW + $1.mrows; /*16231*/
					$k[$j++] = _MV + (4 - (($1.mrows + 4) % 8)); /*16231*/
				} /*16231*/
				var _MZ = $k[--$j]; /*16233*/
				$k[$j++] = _MZ; /*16236*/
				if (_MZ < 0) { //no-else/*16236*/
					var _Mb = $k[--$j]; /*16234*/
					var _Mc = $k[--$j]; /*16234*/
					$k[$j++] = _Mc + (4 - (($1.mcols + 4) % 8)); /*16235*/
					$k[$j++] = _Mb + $1.mcols; /*16235*/
				} /*16235*/
				var _Me = $k[--$j]; /*16237*/
				var _Mf = $k[--$j]; /*16237*/
				$k[$j++] = _Mf; /*16239*/
				$k[$j++] = _Me; /*16239*/
				if (_Mf >= $1.mrows) { //no-else/*16239*/
					var _Mh = $k[--$j]; /*16238*/
					var _Mi = $k[--$j]; /*16238*/
					$k[$j++] = _Mi - $1.mrows; /*16238*/
					$k[$j++] = _Mh; /*16238*/
				} /*16238*/
				var _Mk = $k[--$j]; /*16240*/
				var _Ml = $k[--$j]; /*16240*/
				var _Mo = $k[--$j]; /*16241*/
				var _Mp = $k[--$j]; /*16241*/
				$put($1.mmat, _Mk + (_Ml * $1.mcols), $k[--$j]); /*16241*/
				$k[$j++] = _Mp; /*16241*/
				$k[$j++] = _Mo; /*16241*/
			}); /*16241*/
		}; /*16243*/
		var _N7 = $a([function() {
			var _Mr = $k[--$j]; /*16247*/
			var _Ms = $k[--$j]; /*16247*/
			$k[$j++] = _Ms; /*16247*/
			$k[$j++] = _Mr; /*16247*/
			$k[$j++] = _Ms - 2; /*16247*/
			$k[$j++] = _Mr - 2; /*16247*/
		}, function() {
			var _Mt = $k[--$j]; /*16247*/
			var _Mu = $k[--$j]; /*16247*/
			$k[$j++] = _Mu; /*16247*/
			$k[$j++] = _Mt; /*16247*/
			$k[$j++] = _Mu - 2; /*16247*/
			$k[$j++] = _Mt - 1; /*16247*/
		}, function() {
			var _Mv = $k[--$j]; /*16248*/
			var _Mw = $k[--$j]; /*16248*/
			$k[$j++] = _Mw; /*16248*/
			$k[$j++] = _Mv; /*16248*/
			$k[$j++] = _Mw - 1; /*16248*/
			$k[$j++] = _Mv - 2; /*16248*/
		}, function() {
			var _Mx = $k[--$j]; /*16248*/
			var _My = $k[--$j]; /*16248*/
			$k[$j++] = _My; /*16248*/
			$k[$j++] = _Mx; /*16248*/
			$k[$j++] = _My - 1; /*16248*/
			$k[$j++] = _Mx - 1; /*16248*/
		}, function() {
			var _Mz = $k[--$j]; /*16249*/
			var _N0 = $k[--$j]; /*16249*/
			$k[$j++] = _N0; /*16249*/
			$k[$j++] = _Mz; /*16249*/
			$k[$j++] = _N0 - 1; /*16249*/
			$k[$j++] = _Mz; /*16249*/
		}, function() {
			var _N1 = $k[--$j]; /*16249*/
			var _N2 = $k[--$j]; /*16249*/
			$k[$j++] = _N2; /*16249*/
			$k[$j++] = _N1; /*16249*/
			$k[$j++] = _N2; /*16249*/
			$k[$j++] = _N1 - 2; /*16249*/
		}, function() {
			var _N3 = $k[--$j]; /*16250*/
			var _N4 = $k[--$j]; /*16250*/
			$k[$j++] = _N4; /*16250*/
			$k[$j++] = _N3; /*16250*/
			$k[$j++] = _N4; /*16250*/
			$k[$j++] = _N3 - 1; /*16250*/
		}, function() {
			var _N5 = $k[--$j]; /*16250*/
			var _N6 = $k[--$j]; /*16250*/
			$k[$j++] = _N6; /*16250*/
			$k[$j++] = _N5; /*16250*/
			$k[$j++] = _N6; /*16250*/
			$k[$j++] = _N5; /*16250*/
		}]); /*16250*/
		$1.dmn = _N7; /*16251*/
		var _NG = $a([function() {
			$k[$j++] = $1.mrows - 1; /*16254*/
			$k[$j++] = 0; /*16254*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16254*/
			$k[$j++] = 1; /*16254*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16255*/
			$k[$j++] = 2; /*16255*/
		}, function() {
			$k[$j++] = 0; /*16255*/
			$k[$j++] = $1.mcols - 2; /*16255*/
		}, function() {
			$k[$j++] = 0; /*16256*/
			$k[$j++] = $1.mcols - 1; /*16256*/
		}, function() {
			$k[$j++] = 1; /*16256*/
			$k[$j++] = $1.mcols - 1; /*16256*/
		}, function() {
			$k[$j++] = 2; /*16257*/
			$k[$j++] = $1.mcols - 1; /*16257*/
		}, function() {
			$k[$j++] = 3; /*16257*/
			$k[$j++] = $1.mcols - 1; /*16257*/
		}]); /*16257*/
		$1.dmc1 = _NG; /*16258*/
		var _NP = $a([function() {
			$k[$j++] = $1.mrows - 3; /*16261*/
			$k[$j++] = 0; /*16261*/
		}, function() {
			$k[$j++] = $1.mrows - 2; /*16261*/
			$k[$j++] = 0; /*16261*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16262*/
			$k[$j++] = 0; /*16262*/
		}, function() {
			$k[$j++] = 0; /*16262*/
			$k[$j++] = $1.mcols - 4; /*16262*/
		}, function() {
			$k[$j++] = 0; /*16263*/
			$k[$j++] = $1.mcols - 3; /*16263*/
		}, function() {
			$k[$j++] = 0; /*16263*/
			$k[$j++] = $1.mcols - 2; /*16263*/
		}, function() {
			$k[$j++] = 0; /*16264*/
			$k[$j++] = $1.mcols - 1; /*16264*/
		}, function() {
			$k[$j++] = 1; /*16264*/
			$k[$j++] = $1.mcols - 1; /*16264*/
		}]); /*16264*/
		$1.dmc2 = _NP; /*16265*/
		var _NY = $a([function() {
			$k[$j++] = $1.mrows - 3; /*16268*/
			$k[$j++] = 0; /*16268*/
		}, function() {
			$k[$j++] = $1.mrows - 2; /*16268*/
			$k[$j++] = 0; /*16268*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16269*/
			$k[$j++] = 0; /*16269*/
		}, function() {
			$k[$j++] = 0; /*16269*/
			$k[$j++] = $1.mcols - 2; /*16269*/
		}, function() {
			$k[$j++] = 0; /*16270*/
			$k[$j++] = $1.mcols - 1; /*16270*/
		}, function() {
			$k[$j++] = 1; /*16270*/
			$k[$j++] = $1.mcols - 1; /*16270*/
		}, function() {
			$k[$j++] = 2; /*16271*/
			$k[$j++] = $1.mcols - 1; /*16271*/
		}, function() {
			$k[$j++] = 3; /*16271*/
			$k[$j++] = $1.mcols - 1; /*16271*/
		}]); /*16271*/
		$1.dmc3 = _NY; /*16272*/
		var _Ni = $a([function() {
			$k[$j++] = $1.mrows - 1; /*16275*/
			$k[$j++] = 0; /*16275*/
		}, function() {
			$k[$j++] = $1.mrows - 1; /*16275*/
			$k[$j++] = $1.mcols - 1; /*16275*/
		}, function() {
			$k[$j++] = 0; /*16276*/
			$k[$j++] = $1.mcols - 3; /*16276*/
		}, function() {
			$k[$j++] = 0; /*16276*/
			$k[$j++] = $1.mcols - 2; /*16276*/
		}, function() {
			$k[$j++] = 0; /*16277*/
			$k[$j++] = $1.mcols - 1; /*16277*/
		}, function() {
			$k[$j++] = 1; /*16277*/
			$k[$j++] = $1.mcols - 3; /*16277*/
		}, function() {
			$k[$j++] = 1; /*16278*/
			$k[$j++] = $1.mcols - 2; /*16278*/
		}, function() {
			$k[$j++] = 1; /*16278*/
			$k[$j++] = $1.mcols - 1; /*16278*/
		}]); /*16278*/
		$1.dmc4 = _Ni; /*16279*/
		$k[$j++] = Infinity; /*16281*/
		for (var _Nl = 0, _Nm = $1.mrows * $1.mcols; _Nl < _Nm; _Nl++) {
			/*16281*/
			$k[$j++] = -1; /*16281*/
		} /*16281*/
		$1.mmat = $a(); /*16281*/
		for (var _Np = $1.cws.length - 1; _Np >= 0; _Np -= 1) {
			/*16282*/
			$k[$j++] = $get($1.cws, _Np); /*16282*/
		} /*16282*/
		$k[$j++] = 4; /*16322*/
		$k[$j++] = 0; /*16322*/
		for (;;) {
			/*16322*/
			var _Ns = $k[--$j]; /*16285*/
			var _Nt = $k[--$j]; /*16285*/
			$k[$j++] = _Nt; /*16287*/
			$k[$j++] = _Ns; /*16287*/
			if ((_Ns == 0) && (_Nt == $1.mrows)) { //no-else/*16287*/
				$k[$j++] = $1.dmc1; /*16286*/
				$1.module(); /*16286*/
			} /*16286*/
			var _Nw = $k[--$j]; /*16288*/
			var _Nx = $k[--$j]; /*16288*/
			$k[$j++] = _Nx; /*16290*/
			$k[$j++] = _Nw; /*16290*/
			if (((_Nw == 0) && (_Nx == ($1.mrows - 2))) && (($1.mcols % 4) != 0)) { //no-else/*16290*/
				$k[$j++] = $1.dmc2; /*16289*/
				$1.module(); /*16289*/
			} /*16289*/
			var _O1 = $k[--$j]; /*16291*/
			var _O2 = $k[--$j]; /*16291*/
			$k[$j++] = _O2; /*16293*/
			$k[$j++] = _O1; /*16293*/
			if (((_O1 == 0) && (_O2 == ($1.mrows - 2))) && (($1.mcols % 8) == 4)) { //no-else/*16293*/
				$k[$j++] = $1.dmc3; /*16292*/
				$1.module(); /*16292*/
			} /*16292*/
			var _O6 = $k[--$j]; /*16294*/
			var _O7 = $k[--$j]; /*16294*/
			$k[$j++] = _O7; /*16296*/
			$k[$j++] = _O6; /*16296*/
			if (((_O6 == 2) && (_O7 == ($1.mrows + 4))) && (($1.mcols % 8) == 0)) { //no-else/*16296*/
				$k[$j++] = $1.dmc4; /*16295*/
				$1.module(); /*16295*/
			} /*16295*/
			for (;;) {
				/*16306*/
				var _OB = $k[--$j]; /*16299*/
				var _OC = $k[--$j]; /*16299*/
				$k[$j++] = _OC; /*16303*/
				$k[$j++] = _OB; /*16303*/
				if ((_OB >= 0) && (_OC < $1.mrows)) { //no-else/*16303*/
					var _OE = $k[--$j]; /*16300*/
					var _OF = $k[--$j]; /*16300*/
					$k[$j++] = _OF; /*16302*/
					$k[$j++] = _OE; /*16302*/
					if ($get($1.mmat, _OE + (_OF * $1.mcols)) == -1) { //no-else/*16302*/
						$k[$j++] = $1.dmn; /*16301*/
						$1.module(); /*16301*/
					} /*16301*/
				} /*16301*/
				var _OK = $k[--$j]; /*16304*/
				var _OL = $k[--$j]; /*16304*/
				$k[$j++] = _OL - 2; /*16305*/
				$k[$j++] = _OK + 2; /*16305*/
				if (!(((_OK + 2) < $1.mcols) && ((_OL - 2) >= 0))) { //no-else/*16305*/
					break; /*16305*/
				} /*16305*/
			} /*16305*/
			var _ON = $k[--$j]; /*16307*/
			var _OO = $k[--$j]; /*16307*/
			$k[$j++] = _OO + 1; /*16317*/
			$k[$j++] = _ON + 3; /*16317*/
			for (;;) {
				/*16317*/
				var _OP = $k[--$j]; /*16310*/
				var _OQ = $k[--$j]; /*16310*/
				$k[$j++] = _OQ; /*16314*/
				$k[$j++] = _OP; /*16314*/
				if ((_OP < $1.mcols) && (_OQ >= 0)) { //no-else/*16314*/
					var _OS = $k[--$j]; /*16311*/
					var _OT = $k[--$j]; /*16311*/
					$k[$j++] = _OT; /*16313*/
					$k[$j++] = _OS; /*16313*/
					if ($get($1.mmat, _OS + (_OT * $1.mcols)) == -1) { //no-else/*16313*/
						$k[$j++] = $1.dmn; /*16312*/
						$1.module(); /*16312*/
					} /*16312*/
				} /*16312*/
				var _OY = $k[--$j]; /*16315*/
				var _OZ = $k[--$j]; /*16315*/
				$k[$j++] = _OZ + 2; /*16316*/
				$k[$j++] = _OY - 2; /*16316*/
				if (!(((_OY - 2) >= 0) && ((_OZ + 2) < $1.mrows))) { //no-else/*16316*/
					break; /*16316*/
				} /*16316*/
			} /*16316*/
			var _Ob = $k[--$j]; /*16318*/
			var _Oc = $k[--$j]; /*16318*/
			$k[$j++] = _Oc + 3; /*16320*/
			$k[$j++] = _Ob + 1; /*16320*/
			if (!(((_Ob + 1) < $1.mcols) || ((_Oc + 3) < $1.mrows))) { //no-else/*16320*/
				$j -= 2; /*16320*/
				break; /*16320*/
			} /*16320*/
		} /*16320*/
		if ($get($1.mmat, ($1.mrows * $1.mcols) - 1) == -1) { //no-else/*16328*/
			$puti($1.mmat, ($1.mrows * ($1.mcols - 1)) - 2, $a([1, 0])); /*16326*/
			$puti($1.mmat, ($1.mrows * $1.mcols) - 2, $a([0, 1])); /*16327*/
		} /*16327*/
		$1.pixs = $a($1.rows * $1.cols); /*16331*/
		$1.cwpos = 0; /*16332*/
		for (var _Ow = 0, _Ov = $1.rows - 1; _Ow <= _Ov; _Ow += 1) {
			/*16348*/
			$1.i = _Ow; /*16334*/
			if (($1.i % ($1.rrows + 2)) == 0) { //no-else/*16335*/
				$k[$j++] = $1.pixs; /*16335*/
				$k[$j++] = $1.i * $1.cols; /*16335*/
				$k[$j++] = Infinity; /*16335*/
				for (var _P3 = 0, _P4 = ~~($1.cols / 2); _P3 < _P4; _P3++) {
					/*16335*/
					$k[$j++] = 1; /*16335*/
					$k[$j++] = 0; /*16335*/
				} /*16335*/
				var _P5 = $a(); /*16335*/
				var _P6 = $k[--$j]; /*16335*/
				$puti($k[--$j], _P6, _P5); /*16335*/
			} /*16335*/
			if (($1.i % ($1.rrows + 2)) == ($1.rrows + 1)) { //no-else/*16336*/
				$k[$j++] = $1.pixs; /*16336*/
				$k[$j++] = $1.i * $1.cols; /*16336*/
				$k[$j++] = Infinity; /*16336*/
				for (var _PF = 0, _PG = $1.cols; _PF < _PG; _PF++) {
					/*16336*/
					$k[$j++] = 1; /*16336*/
				} /*16336*/
				var _PH = $a(); /*16336*/
				var _PI = $k[--$j]; /*16336*/
				$puti($k[--$j], _PI, _PH); /*16336*/
			} /*16336*/
			if ((($1.i % ($1.rrows + 2)) != 0) && (($1.i % ($1.rrows + 2)) != ($1.rrows + 1))) { //no-else/*16347*/
				for (var _PR = 0, _PQ = $1.cols - 1; _PR <= _PQ; _PR += 1) {
					/*16346*/
					$1.j = _PR; /*16339*/
					if (($1.j % ($1.rcols + 2)) == 0) { //no-else/*16340*/
						$put($1.pixs, ($1.i * $1.cols) + $1.j, 1); /*16340*/
					} /*16340*/
					if (($1.j % ($1.rcols + 2)) == ($1.rcols + 1)) { //no-else/*16341*/
						$put($1.pixs, ($1.i * $1.cols) + $1.j, $1.i % 2); /*16341*/
					} /*16341*/
					if ((($1.j % ($1.rcols + 2)) != 0) && (($1.j % ($1.rcols + 2)) != ($1.rcols + 1))) { //no-else/*16345*/
						$put($1.pixs, ($1.i * $1.cols) + $1.j, $get($1.mmat, $1.cwpos)); /*16343*/
						$1.cwpos = $1.cwpos + 1; /*16344*/
					} /*16344*/
				} /*16344*/
			} /*16344*/
		} /*16344*/
		var _Pz = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.cols],
			["pixy", $1.rows],
			["height", ($1.rows * 2) / 72],
			["width", ($1.cols * 2) / 72],
			["opt", $1.options]
		]); /*16358*/
		$k[$j++] = _Pz; /*16361*/
		if (!$1.dontdraw) { //no-else/*16361*/
			$0.renmatrix(); /*16361*/
		} /*16361*/
	};
	$0.datamatrixrectangular = function() {
		var $1 = {}; /*16391*/
		$1.options = $k[--$j]; /*16393*/
		$1.barcode = $k[--$j]; /*16394*/
		$1.dontdraw = false; /*16396*/
		$forall($1.options, function() {
			/*16407*/
			var _3 = $k[--$j]; /*16407*/
			$1[$k[--$j]] = _3; /*16407*/
		}); /*16407*/
		$put($1.options, "dontdraw", true); /*16410*/
		$put($1.options, "format", "rectangle"); /*16411*/
		$k[$j++] = 'args'; /*16413*/
		$k[$j++] = $1.barcode; /*16413*/
		$k[$j++] = $1.options; /*16413*/
		$0.datamatrix(); /*16413*/
		var _9 = $k[--$j]; /*16413*/
		$1[$k[--$j]] = _9; /*16413*/
		$put($1.args, "opt", $1.options); /*16415*/
		$k[$j++] = $1.args; /*16418*/
		if (!$1.dontdraw) { //no-else/*16418*/
			$0.renmatrix(); /*16418*/
		} /*16418*/
	};
	$0.datamatrixrectangularextension = function() {
		var $1 = {}; /*16448*/
		$1.options = $k[--$j]; /*16450*/
		$1.barcode = $k[--$j]; /*16451*/
		$1.dontdraw = false; /*16453*/
		$1.dmre = false; /*16455*/
		$1.dindmre = false; /*16456*/
		$forall($1.options, function() {
			/*16467*/
			var _3 = $k[--$j]; /*16467*/
			$1[$k[--$j]] = _3; /*16467*/
		}); /*16467*/
		$put($1.options, "dontdraw", true); /*16470*/
		$put($1.options, "format", "rectangle"); /*16471*/
		if (!($1.dindmre || $1.dmre)) {
			/*16477*/
			$put($1.options, "dmre", true); /*16474*/
		} else {
			/*16477*/
			$put($1.options, "dmre", $1.dmre); /*16476*/
			$put($1.options, "dindmre", $1.dindmre); /*16477*/
		} /*16477*/
		$k[$j++] = 'args'; /*16480*/
		$k[$j++] = $1.barcode; /*16480*/
		$k[$j++] = $1.options; /*16480*/
		$0.datamatrix(); /*16480*/
		var _G = $k[--$j]; /*16480*/
		$1[$k[--$j]] = _G; /*16480*/
		$put($1.args, "opt", $1.options); /*16482*/
		$k[$j++] = $1.args; /*16485*/
		if (!$1.dontdraw) { //no-else/*16485*/
			$0.renmatrix(); /*16485*/
		} /*16485*/
	};
	$0.mailmark = function() {
		var $1 = {}; /*16515*/
		$1.options = $k[--$j]; /*16517*/
		$1.barcode = $k[--$j]; /*16518*/
		$1.type = "unset"; /*16520*/
		$1.parse = false; /*16521*/
		$1.dontdraw = false; /*16522*/
		$forall($1.options, function() {
			/*16533*/
			var _3 = $k[--$j]; /*16533*/
			$1[$k[--$j]] = _3; /*16533*/
		}); /*16533*/
		var _5 = new Map([
			["7", "24x24"],
			["9", "32x32"],
			["29", "16x48"]
		]); /*16560*/
		$1.version = $get(_5, $1['type']); /*16561*/
		var _8 = new Map([
			["7", "square"],
			["9", "square"],
			["29", "rectangle"]
		]); /*16566*/
		$1.format = $get(_8, $1['type']); /*16567*/
		if ($1.barcode.length < 45) { //no-else/*16572*/
			$k[$j++] = 'bwipp.mailmarkBadLength'; /*16571*/
			$k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; /*16571*/
			$0.raiseerror(); /*16571*/
		} /*16571*/
		if ($ne($geti($1.barcode, 0, 4), "JGB ")) { //no-else/*16575*/
			$k[$j++] = 'bwipp.mailmarkBadIndicator'; /*16574*/
			$k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; /*16574*/
			$0.raiseerror(); /*16574*/
		} /*16574*/
		$put($1.options, "dontdraw", true); /*16578*/
		$put($1.options, "version", $1.version); /*16579*/
		$put($1.options, "format", $1.format); /*16580*/
		$put($1.options, "mailmark", true); /*16581*/
		$k[$j++] = 'args'; /*16582*/
		$k[$j++] = $1.barcode; /*16582*/
		$k[$j++] = $1.options; /*16582*/
		$0.datamatrix(); /*16582*/
		var _M = $k[--$j]; /*16582*/
		$1[$k[--$j]] = _M; /*16582*/
		$put($1.args, "opt", $1.options); /*16584*/
		$k[$j++] = $1.args; /*16587*/
		if (!$1.dontdraw) { //no-else/*16587*/
			$0.renmatrix(); /*16587*/
		} /*16587*/
	};
	$0.qrcode = function() {
		var $1 = {}; /*16616*/
		$1.options = $k[--$j]; /*16618*/
		$1.barcode = $k[--$j]; /*16619*/
		$1.dontdraw = false; /*16621*/
		$1.format = "full"; /*16622*/
		$1.version = "unset"; /*16623*/
		$1.eclevel = "unset"; /*16624*/
		$1.parse = false; /*16625*/
		$1.parsefnc = false; /*16626*/
		$1.mask = -1; /*16627*/
		$forall($1.options, function() {
			/*16638*/
			var _3 = $k[--$j]; /*16638*/
			$1[$k[--$j]] = _3; /*16638*/
		}); /*16638*/
		$1.mask = ~~$1.mask; /*16640*/
		$1.barlen = $1.barcode.length; /*16663*/
		$1.fn1 = -1; /*16666*/
		var _8 = new Map([
			["FNC1", $1.fn1]
		]); /*16668*/
		$1.fncvals = _8; /*16669*/
		$1.msg = $a($1.barlen); /*16670*/
		$1.i = 0; /*16671*/
		$1.j = 0; /*16671*/
		for (;;) {
			/*16685*/
			if ($1.i == $1.barlen) { //no-else/*16672*/
				break; /*16672*/
			} /*16672*/
			$1.char = $get($1.barcode, $1.i); /*16673*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*16681*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*16679*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*16676*/
					$1.i = $1.i + 4; /*16677*/
				} else {
					/*16679*/
					$1.i = $1.i + 1; /*16679*/
				} /*16679*/
			} /*16679*/
			$put($1.msg, $1.j, $1.char); /*16682*/
			$1.i = $1.i + 1; /*16683*/
			$1.j = $1.j + 1; /*16684*/
		} /*16684*/
		$1.msg = $geti($1.msg, 0, $1.j); /*16686*/
		$1.msglen = $1.msg.length; /*16687*/
		$1.fnc1first = false; /*16690*/
		if ($1.msglen > 0) { //no-else/*16697*/
			if ($get($1.msg, 0) == $1.fn1) { //no-else/*16696*/
				$1.fnc1first = true; /*16693*/
				$k[$j++] = Infinity; /*16694*/
				$forall($geti($1.msg, 1, $1.msglen - 1), function() {
					/*16694*/
					var _k = $k[--$j]; /*16694*/
					$k[$j++] = _k; /*16694*/
					if (_k == 37) { //no-else/*16694*/
						var _l = $k[--$j]; /*16694*/
						$k[$j++] = _l; /*16694*/
						$k[$j++] = _l; /*16694*/
					} /*16694*/
				}); /*16694*/
				$1.msg = $a(); /*16694*/
				$1.msglen = $1.msg.length; /*16695*/
			} /*16695*/
		} /*16695*/
		if ($eq($1.eclevel, "unset")) { //no-else/*16700*/
			$k[$j++] = 'eclevel'; /*16700*/
			if ($eq($1.format, "full")) {
				/*16700*/
				$k[$j++] = "M"; /*16700*/
			} else {
				/*16700*/
				$k[$j++] = "L"; /*16700*/
			} /*16700*/
			var _q = $k[--$j]; /*16700*/
			$1[$k[--$j]] = _q; /*16700*/
		} /*16700*/
		$1.N = 0; /*16703*/
		$1.A = 1; /*16703*/
		$1.B = 2; /*16703*/
		$1.K = 3; /*16703*/
		$k[$j++] = Infinity; /*16708*/
		$k[$j++] = Infinity; /*16707*/
		for (var _s = 48; _s <= 57; _s += 1) {
			/*16707*/
			$k[$j++] = _s; /*16707*/
		} /*16707*/
		var _t = $a(); /*16707*/
		for (var _u = 0, _v = _t.length; _u < _v; _u++) {
			/*16708*/
			$k[$j++] = $get(_t, _u); /*16708*/
			$k[$j++] = -1; /*16708*/
		} /*16708*/
		$1.Nexcl = $d(); /*16709*/
		$k[$j++] = Infinity; /*16716*/
		$k[$j++] = Infinity; /*16715*/
		$k[$j++] = 32; /*16714*/
		$k[$j++] = 36; /*16714*/
		$k[$j++] = 37; /*16714*/
		$k[$j++] = 42; /*16714*/
		$k[$j++] = 43; /*16714*/
		$k[$j++] = 45; /*16714*/
		$k[$j++] = 46; /*16714*/
		$k[$j++] = 47; /*16714*/
		$k[$j++] = 58; /*16714*/
		for (var _y = 65; _y <= 90; _y += 1) {
			/*16714*/
			$k[$j++] = _y; /*16714*/
		} /*16714*/
		$k[$j++] = $1.fn1; /*16715*/
		var _10 = $a(); /*16715*/
		for (var _11 = 0, _12 = _10.length; _11 < _12; _11++) {
			/*16716*/
			$k[$j++] = $get(_10, _11); /*16716*/
			$k[$j++] = -1; /*16716*/
		} /*16716*/
		$1.Aexcl = $d(); /*16717*/
		$k[$j++] = Infinity; /*16726*/
		$k[$j++] = Infinity; /*16725*/
		for (var _15 = 0; _15 <= 31; _15 += 1) {
			/*16721*/
			$k[$j++] = _15; /*16721*/
		} /*16721*/
		$k[$j++] = 33; /*16723*/
		$k[$j++] = 34; /*16723*/
		$k[$j++] = 35; /*16723*/
		$k[$j++] = 38; /*16723*/
		$k[$j++] = 39; /*16723*/
		$k[$j++] = 40; /*16723*/
		$k[$j++] = 41; /*16723*/
		$k[$j++] = 44; /*16723*/
		for (var _16 = 59; _16 <= 64; _16 += 1) {
			/*16723*/
			$k[$j++] = _16; /*16723*/
		} /*16723*/
		for (var _17 = 91; _17 <= 127; _17 += 1) {
			/*16724*/
			$k[$j++] = _17; /*16724*/
		} /*16724*/
		for (var _18 = 160; _18 <= 223; _18 += 1) {
			/*16725*/
			$k[$j++] = _18; /*16725*/
		} /*16725*/
		var _19 = $a(); /*16725*/
		for (var _1A = 0, _1B = _19.length; _1A < _1B; _1A++) {
			/*16726*/
			$k[$j++] = $get(_19, _1A); /*16726*/
			$k[$j++] = -1; /*16726*/
		} /*16726*/
		$1.Bexcl = $d(); /*16727*/
		$k[$j++] = Infinity; /*16733*/
		$k[$j++] = Infinity; /*16732*/
		for (var _1E = 129; _1E <= 159; _1E += 1) {
			/*16731*/
			$k[$j++] = _1E; /*16731*/
		} /*16731*/
		for (var _1F = 224; _1F <= 235; _1F += 1) {
			/*16732*/
			$k[$j++] = _1F; /*16732*/
		} /*16732*/
		var _1G = $a(); /*16732*/
		for (var _1H = 0, _1I = _1G.length; _1H < _1I; _1H++) {
			/*16733*/
			$k[$j++] = $get(_1G, _1H); /*16733*/
			$k[$j++] = -1; /*16733*/
		} /*16733*/
		$1.Kexcl = $d(); /*16734*/
		$1.mids = $a([$a(["0001", "0010", "0100", "1000"]), $a(["0001", "0010", "0100", "1000"]), $a(["0001", "0010", "0100", "1000"]), $a(["", -1, -1, -1]), $a(["0", "1", -1, -1]), $a(["00", "01", "10", "11"]), $a(["000", "001", "010", "011"])]); /*16744*/
		$1.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4])]); /*16754*/
		$1.termlens = $a([4, 4, 4, 3, 5, 7, 9]); /*16756*/
		$1.tobin = function() {
			var _1d = $s($k[--$j]); /*16760*/
			$k[$j++] = _1d; /*16760*/
			for (var _1f = 0, _1e = _1d.length - 1; _1f <= _1e; _1f += 1) {
				/*16760*/
				var _1g = $k[--$j]; /*16760*/
				$put(_1g, _1f, 48); /*16760*/
				$k[$j++] = _1g; /*16760*/
			} /*16760*/
			var _1h = $k[--$j]; /*16761*/
			var _1k = $cvrs($s(_1h.length), $k[--$j], 2); /*16761*/
			$puti(_1h, _1h.length - _1k.length, _1k); /*16761*/
			$k[$j++] = _1h; /*16761*/
		}; /*16762*/
		$1.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; /*16765*/
		$1.charvals = new Map; /*16766*/
		for (var _1l = 0; _1l <= 44; _1l += 1) {
			/*16767*/
			$put($1.charvals, $get($1.charmap, _1l), _1l); /*16767*/
		} /*16767*/
		$1.encA = function() {
			$1.in = $k[--$j]; /*16770*/
			if ($1.fnc1first) { //no-else/*16773*/
				$k[$j++] = Infinity; /*16772*/
				$forall($1.in, function() {
					/*16772*/
					var _1s = $k[--$j]; /*16772*/
					$k[$j++] = _1s; /*16772*/
					if (_1s == -1) { //no-else/*16772*/
						$j--; /*16772*/
						$k[$j++] = 37; /*16772*/
					} /*16772*/
				}); /*16772*/
				$1.in = $a(); /*16772*/
			} /*16772*/
			$1.out = $s((~~(($1.in.length * 11) / 2)) + 1); /*16774*/
			$1.k = 0; /*16775*/
			$1.m = 0; /*16775*/
			for (;;) {
				/*16786*/
				if ($1.k == $1.in.length) { //no-else/*16776*/
					break; /*16776*/
				} /*16776*/
				if ($1.k < ($1.in.length - 1)) {
					/*16782*/
					$k[$j++] = ($get($1.charvals, $get($1.in, $1.k)) * 45) + $get($1.charvals, $get($1.in, $1.k + 1)); /*16778*/
					$k[$j++] = 11; /*16778*/
					$1.tobin(); /*16778*/
					$1.k = $1.k + 2; /*16779*/
				} else {
					/*16782*/
					$k[$j++] = $get($1.charvals, $get($1.in, $1.k)); /*16781*/
					$k[$j++] = 6; /*16781*/
					$1.tobin(); /*16781*/
					$1.k = $1.k + 1; /*16782*/
				} /*16782*/
				var _2H = $k[--$j]; /*16784*/
				$puti($1.out, $1.m, _2H); /*16784*/
				$1.m = _2H.length + $1.m; /*16785*/
			} /*16785*/
			$k[$j++] = $geti($1.out, 0, $1.m); /*16787*/
		}; /*16788*/
		$1.encN = function() {
			$1.in = $k[--$j]; /*16791*/
			$1.out = $s((~~(($1.in.length * 10) / 3)) + 1); /*16792*/
			$1.k = 0; /*16793*/
			$1.m = 0; /*16793*/
			for (;;) {
				/*16809*/
				if ($1.k == $1.in.length) { //no-else/*16794*/
					break; /*16794*/
				} /*16794*/
				if ($1.k < ($1.in.length - 2)) {
					/*16804*/
					$k[$j++] = 0; /*16796*/
					$forall($geti($1.in, $1.k, 3), function() {
						/*16796*/
						var _2Y = $k[--$j]; /*16796*/
						var _2Z = $k[--$j]; /*16796*/
						$k[$j++] = _2Y + ((_2Z * 10) - 48); /*16796*/
					}); /*16796*/
					$k[$j++] = 10; /*16796*/
					$1.tobin(); /*16796*/
					$1.k = $1.k + 3; /*16797*/
				} else {
					/*16804*/
					if ($1.k == ($1.in.length - 2)) {
						/*16804*/
						$k[$j++] = 0; /*16800*/
						$forall($geti($1.in, $1.k, 2), function() {
							/*16800*/
							var _2g = $k[--$j]; /*16800*/
							var _2h = $k[--$j]; /*16800*/
							$k[$j++] = _2g + ((_2h * 10) - 48); /*16800*/
						}); /*16800*/
						$k[$j++] = 7; /*16800*/
						$1.tobin(); /*16800*/
						$1.k = $1.k + 2; /*16801*/
					} else {
						/*16804*/
						$k[$j++] = 0; /*16803*/
						$forall($geti($1.in, $1.k, 1), function() {
							/*16803*/
							var _2m = $k[--$j]; /*16803*/
							var _2n = $k[--$j]; /*16803*/
							$k[$j++] = _2m + ((_2n * 10) - 48); /*16803*/
						}); /*16803*/
						$k[$j++] = 4; /*16803*/
						$1.tobin(); /*16803*/
						$1.k = $1.k + 1; /*16804*/
					} /*16804*/
				} /*16804*/
				var _2p = $k[--$j]; /*16807*/
				$puti($1.out, $1.m, _2p); /*16807*/
				$1.m = _2p.length + $1.m; /*16808*/
			} /*16808*/
			$k[$j++] = $geti($1.out, 0, $1.m); /*16810*/
		}; /*16811*/
		$1.encB = function() {
			$1.in = $k[--$j]; /*16814*/
			if ($1.fnc1first) { //no-else/*16817*/
				$k[$j++] = Infinity; /*16816*/
				$forall($1.in, function() {
					/*16816*/
					var _2z = $k[--$j]; /*16816*/
					$k[$j++] = _2z; /*16816*/
					if (_2z == -1) { //no-else/*16816*/
						$j--; /*16816*/
						$k[$j++] = 29; /*16816*/
					} /*16816*/
				}); /*16816*/
				$1.in = $a(); /*16816*/
			} /*16816*/
			$1.out = $s($1.in.length * 8); /*16818*/
			for (var _35 = 0, _34 = $1.in.length - 1; _35 <= _34; _35 += 1) {
				/*16823*/
				$1.k = _35; /*16820*/
				$k[$j++] = ~~$z($get($1.in, $1.k)); /*16821*/
				$k[$j++] = 8; /*16821*/
				$1.tobin(); /*16821*/
				$puti($1.out, $1.k * 8, $k[--$j]); /*16822*/
			} /*16822*/
			$k[$j++] = $1.out; /*16824*/
		}; /*16825*/
		$1.encK = function() {
			$1.in = $k[--$j]; /*16828*/
			$1.out = $s((~~($1.in.length / 2)) * 13); /*16829*/
			$1.k = 0; /*16830*/
			$1.m = 0; /*16830*/
			for (;;) {
				/*16838*/
				if ($1.k == $1.in.length) { //no-else/*16831*/
					break; /*16831*/
				} /*16831*/
				var _3O = ($get($1.in, $1.k) * 256) + $get($1.in, $1.k + 1); /*16833*/
				$k[$j++] = _3O; /*16833*/
				if (_3O < 57408) {
					/*16833*/
					$k[$j++] = 33088; /*16833*/
				} else {
					/*16833*/
					$k[$j++] = 49472; /*16833*/
				} /*16833*/
				var _3P = $k[--$j]; /*16833*/
				var _3R = $k[--$j] - _3P; /*16834*/
				$k[$j++] = ((_3R >>> 8) * 192) + (_3R & 255); /*16835*/
				$k[$j++] = 13; /*16835*/
				$1.tobin(); /*16835*/
				var _3S = $k[--$j]; /*16835*/
				$puti($1.out, $1.m, _3S); /*16835*/
				$1.m = _3S.length + $1.m; /*16836*/
				$1.k = $1.k + 2; /*16837*/
			} /*16837*/
			$k[$j++] = $1.out; /*16839*/
		}; /*16840*/
		$1.encfuncs = $a(['encN', 'encA', 'encB', 'encK']); /*16842*/
		$1.addtobits = function() {
			var _3Z = $k[--$j]; /*16845*/
			$puti($1.bits, $1.j, _3Z); /*16845*/
			$1.j = _3Z.length + $1.j; /*16846*/
		}; /*16847*/
		$k[$j++] = Infinity; /*16849*/
		for (var _3e = 0, _3f = $1.msglen; _3e < _3f; _3e++) {
			/*16849*/
			$k[$j++] = 0; /*16849*/
		} /*16849*/
		$k[$j++] = 0; /*16849*/
		$1.numNs = $a(); /*16849*/
		$k[$j++] = Infinity; /*16850*/
		for (var _3i = 0, _3j = $1.msglen; _3i < _3j; _3i++) {
			/*16850*/
			$k[$j++] = 0; /*16850*/
		} /*16850*/
		$k[$j++] = 0; /*16850*/
		$1.numAs = $a(); /*16850*/
		$k[$j++] = Infinity; /*16851*/
		for (var _3m = 0, _3n = $1.msglen; _3m < _3n; _3m++) {
			/*16851*/
			$k[$j++] = 0; /*16851*/
		} /*16851*/
		$k[$j++] = 0; /*16851*/
		$1.numBs = $a(); /*16851*/
		$k[$j++] = Infinity; /*16852*/
		for (var _3q = 0, _3r = $1.msglen; _3q < _3r; _3q++) {
			/*16852*/
			$k[$j++] = 0; /*16852*/
		} /*16852*/
		$k[$j++] = -1; /*16852*/
		$1.numKs = $a(); /*16852*/
		$k[$j++] = Infinity; /*16853*/
		for (var _3u = 0, _3v = $1.msglen; _3u < _3v; _3u++) {
			/*16853*/
			$k[$j++] = 0; /*16853*/
		} /*16853*/
		$k[$j++] = 9999; /*16853*/
		$1.nextNs = $a(); /*16853*/
		$k[$j++] = Infinity; /*16854*/
		for (var _3y = 0, _3z = $1.msglen; _3y < _3z; _3y++) {
			/*16854*/
			$k[$j++] = 0; /*16854*/
		} /*16854*/
		$k[$j++] = 9999; /*16854*/
		$1.nextBs = $a(); /*16854*/
		$k[$j++] = Infinity; /*16855*/
		for (var _42 = 0, _43 = $1.msglen; _42 < _43; _42++) {
			/*16855*/
			$k[$j++] = 0; /*16855*/
		} /*16855*/
		$k[$j++] = 9999; /*16855*/
		$1.nextAs = $a(); /*16855*/
		$k[$j++] = Infinity; /*16856*/
		for (var _46 = 0, _47 = $1.msglen; _46 < _47; _46++) {
			/*16856*/
			$k[$j++] = 0; /*16856*/
		} /*16856*/
		$k[$j++] = 9999; /*16856*/
		$1.nextKs = $a(); /*16856*/
		for (var _4A = $1.msglen - 1; _4A >= 0; _4A -= 1) {
			/*16884*/
			$1.i = _4A; /*16858*/
			$1.barchar = $get($1.msg, $1.i); /*16859*/
			var _4G = $get($1.Kexcl, $1.barchar) !== undefined; /*16860*/
			if (_4G) {
				/*16864*/
				$put($1.nextKs, $1.i, 0); /*16861*/
				$put($1.numKs, $1.i, $get($1.numKs, $1.i + 1) + 1); /*16862*/
			} else {
				/*16864*/
				$put($1.nextKs, $1.i, $get($1.nextKs, $1.i + 1) + 1); /*16864*/
			} /*16864*/
			var _4V = $get($1.Nexcl, $1.barchar) !== undefined; /*16866*/
			if (_4V) {
				/*16870*/
				$put($1.nextNs, $1.i, 0); /*16867*/
				$put($1.numNs, $1.i, $get($1.numNs, $1.i + 1) + 1); /*16868*/
			} else {
				/*16870*/
				$put($1.nextNs, $1.i, $get($1.nextNs, $1.i + 1) + 1); /*16870*/
			} /*16870*/
			var _4k = $get($1.Bexcl, $1.barchar) !== undefined; /*16872*/
			if (_4k) {
				/*16876*/
				$put($1.nextBs, $1.i, 0); /*16873*/
				$put($1.numBs, $1.i, $get($1.numBs, $1.i + 1) + 1); /*16874*/
			} else {
				/*16876*/
				$put($1.nextBs, $1.i, $get($1.nextBs, $1.i + 1) + 1); /*16876*/
			} /*16876*/
			var _4z = $get($1.Aexcl, $1.barchar) !== undefined; /*16878*/
			if (_4z) {
				/*16882*/
				$put($1.nextAs, $1.i, 0); /*16879*/
				$put($1.numAs, $1.i, $get($1.numAs, $1.i + 1) + 1); /*16880*/
			} else {
				/*16882*/
				$put($1.nextAs, $1.i, $get($1.nextAs, $1.i + 1) + 1); /*16882*/
			} /*16882*/
		} /*16882*/
		$k[$j++] = Infinity; /*16885*/
		var _5C = $1.numKs; /*16885*/
		for (var _5D = 0, _5E = _5C.length; _5D < _5E; _5D++) {
			/*16885*/
			$k[$j++] = ~~(($get(_5C, _5D) + 1) / 2); /*16885*/
		} /*16885*/
		$1.numKs = $a(); /*16885*/
		$1.KbeforeB = function() {
			var _5K = $get($k[--$j], $1.ver); /*16887*/
			$k[$j++] = $ge($1.numK, _5K) && ($get($1.nextBs, ($1.numK * 2) + $1.i) == 0); /*16887*/
		}; /*16887*/
		$1.KbeforeA = function() {
			var _5S = $get($k[--$j], $1.ver); /*16888*/
			$k[$j++] = $ge($1.numK, _5S) && ($get($1.nextAs, ($1.numK * 2) + $1.i) == 0); /*16888*/
		}; /*16888*/
		$1.KbeforeN = function() {
			var _5a = $get($k[--$j], $1.ver); /*16889*/
			$k[$j++] = $ge($1.numK, _5a) && ($get($1.nextNs, ($1.numK * 2) + $1.i) == 0); /*16889*/
		}; /*16889*/
		$1.KbeforeE = function() {
			var _5i = $get($k[--$j], $1.ver); /*16890*/
			$k[$j++] = $ge($1.numK, _5i) && ((($1.numK * 2) + $1.i) == $1.msglen); /*16890*/
		}; /*16890*/
		$1.AbeforeK = function() {
			var _5p = $get($k[--$j], $1.ver); /*16891*/
			$k[$j++] = $ge($1.numA, _5p) && ($get($1.nextKs, $1.numA + $1.i) == 0); /*16891*/
		}; /*16891*/
		$1.AbeforeB = function() {
			var _5x = $get($k[--$j], $1.ver); /*16892*/
			$k[$j++] = $ge($1.numA, _5x) && ($get($1.nextBs, $1.numA + $1.i) == 0); /*16892*/
		}; /*16892*/
		$1.AbeforeN = function() {
			var _65 = $get($k[--$j], $1.ver); /*16893*/
			$k[$j++] = $ge($1.numA, _65) && ($get($1.nextNs, $1.numA + $1.i) == 0); /*16893*/
		}; /*16893*/
		$1.AbeforeE = function() {
			var _6D = $get($k[--$j], $1.ver); /*16894*/
			$k[$j++] = $ge($1.numA, _6D) && (($1.numA + $1.i) == $1.msglen); /*16894*/
		}; /*16894*/
		$1.NbeforeK = function() {
			var _6K = $get($k[--$j], $1.ver); /*16895*/
			$k[$j++] = $ge($1.numN, _6K) && ($get($1.nextKs, $1.numN + $1.i) == 0); /*16895*/
		}; /*16895*/
		$1.NbeforeB = function() {
			var _6S = $get($k[--$j], $1.ver); /*16896*/
			$k[$j++] = $ge($1.numN, _6S) && ($get($1.nextBs, $1.numN + $1.i) == 0); /*16896*/
		}; /*16896*/
		$1.NbeforeA = function() {
			var _6a = $get($k[--$j], $1.ver); /*16897*/
			$k[$j++] = $ge($1.numN, _6a) && ($get($1.nextAs, $1.numN + $1.i) == 0); /*16897*/
		}; /*16897*/
		$1.NbeforeE = function() {
			var _6i = $get($k[--$j], $1.ver); /*16898*/
			$k[$j++] = $ge($1.numN, _6i) && (($1.numN + $1.i) == $1.msglen); /*16898*/
		}; /*16898*/
		$1.msgbits = $a([-1, -1, -1, -1, -1, -1, -1]); /*16901*/
		$1.v1to9 = 0; /*16902*/
		$1.v10to26 = 1; /*16902*/
		$1.v27to40 = 2; /*16902*/
		$1.vM1 = 3; /*16902*/
		$1.vM2 = 4; /*16902*/
		$1.vM3 = 5; /*16902*/
		$1.vM4 = 6; /*16902*/
		$1.e = 10000; /*16903*/
		var _6u = $a([$1.v1to9, $1.v10to26, $1.v27to40, $1.vM1, $1.vM2, $1.vM3, $1.vM4]); /*16904*/
		for (var _6v = 0, _6w = _6u.length; _6v < _6w; _6v++) {
			/*17021*/
			$1.ver = $get(_6u, _6v); /*16905*/
			$1.mode = -1; /*16908*/
			$1.seq = $a([]); /*16908*/
			$1.i = 0; /*16908*/
			for (;;) {
				/*16995*/
				if ($1.i >= $1.msglen) { //no-else/*16909*/
					break; /*16909*/
				} /*16909*/
				$1.numK = $get($1.numKs, $1.i); /*16910*/
				$1.numB = $get($1.numBs, $1.i); /*16911*/
				$1.numA = $get($1.numAs, $1.i); /*16912*/
				$1.numN = $get($1.numNs, $1.i); /*16913*/
				if (($1.ver == $1.vM1) && ($1.numA >= 1)) { //no-else/*16914*/
					$1.seq = -1; /*16914*/
					break; /*16914*/
				} /*16914*/
				if (($1.ver == $1.vM1) && ($1.numB >= 1)) { //no-else/*16915*/
					$1.seq = -1; /*16915*/
					break; /*16915*/
				} /*16915*/
				if (($1.ver == $1.vM1) && ($1.numK >= 1)) { //no-else/*16916*/
					$1.seq = -1; /*16916*/
					break; /*16916*/
				} /*16916*/
				if (($1.ver == $1.vM2) && ($1.numB >= 1)) { //no-else/*16917*/
					$1.seq = -1; /*16917*/
					break; /*16917*/
				} /*16917*/
				if (($1.ver == $1.vM2) && ($1.numK >= 1)) { //no-else/*16918*/
					$1.seq = -1; /*16918*/
					break; /*16918*/
				} /*16918*/
				for (;;) {
					/*16976*/
					if ($1.mode == -1) { //no-else/*16937*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*16921*/
						$1.KbeforeA(); /*16921*/
						if ($k[--$j]) { //no-else/*16921*/
							$k[$j++] = $1.K; /*16921*/
							break; /*16921*/
						} /*16921*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*16922*/
						$1.KbeforeN(); /*16922*/
						if ($k[--$j]) { //no-else/*16922*/
							$k[$j++] = $1.K; /*16922*/
							break; /*16922*/
						} /*16922*/
						$k[$j++] = $a([5, 5, 6, $1.e, $1.e, 2, 3]); /*16923*/
						$1.KbeforeB(); /*16923*/
						if ($k[--$j]) { //no-else/*16923*/
							$k[$j++] = $1.K; /*16923*/
							break; /*16923*/
						} /*16923*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*16924*/
						$1.KbeforeE(); /*16924*/
						if ($k[--$j]) { //no-else/*16924*/
							$k[$j++] = $1.K; /*16924*/
							break; /*16924*/
						} /*16924*/
						if ($1.numK >= 1) { //no-else/*16925*/
							$k[$j++] = $1.B; /*16925*/
							break; /*16925*/
						} /*16925*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*16926*/
						$1.AbeforeB(); /*16926*/
						if ($k[--$j]) { //no-else/*16926*/
							$k[$j++] = $1.A; /*16926*/
							break; /*16926*/
						} /*16926*/
						$k[$j++] = $a([1, 1, 1, $1.e, 1, 1, 1]); /*16927*/
						$1.AbeforeE(); /*16927*/
						if ($k[--$j]) { //no-else/*16927*/
							$k[$j++] = $1.A; /*16927*/
							break; /*16927*/
						} /*16927*/
						if ($1.numA >= 1) { //no-else/*16930*/
							var _81 = ($1.ver != $1.vM2) ? $1.B : $1.A; /*16929*/
							$k[$j++] = _81; /*16929*/
							break; /*16929*/
						} /*16929*/
						$k[$j++] = $a([4, 4, 5, $1.e, $1.e, 2, 3]); /*16931*/
						$1.NbeforeB(); /*16931*/
						if ($k[--$j]) { //no-else/*16931*/
							$k[$j++] = $1.N; /*16931*/
							break; /*16931*/
						} /*16931*/
						$k[$j++] = $a([1, 1, 1, $1.e, $1.e, 1, 1]); /*16932*/
						$1.NbeforeB(); /*16932*/
						if ($k[--$j]) { //no-else/*16932*/
							$k[$j++] = $1.B; /*16932*/
							break; /*16932*/
						} /*16932*/
						$k[$j++] = $a([7, 8, 9, $1.e, 3, 4, 5]); /*16933*/
						$1.NbeforeA(); /*16933*/
						if ($k[--$j]) { //no-else/*16933*/
							$k[$j++] = $1.N; /*16933*/
							break; /*16933*/
						} /*16933*/
						$k[$j++] = $a([1, 1, 1, $1.e, 1, 1, 1]); /*16934*/
						$1.NbeforeA(); /*16934*/
						if ($k[--$j]) { //no-else/*16934*/
							$k[$j++] = $1.A; /*16934*/
							break; /*16934*/
						} /*16934*/
						if ($1.numN >= 1) { //no-else/*16935*/
							$k[$j++] = $1.N; /*16935*/
							break; /*16935*/
						} /*16935*/
						$k[$j++] = $1.B; /*16936*/
						break; /*16936*/
					} /*16936*/
					if ($1.mode == $1.B) { //no-else/*16952*/
						$k[$j++] = $a([9, 12, 13, $1.e, $1.e, 4, 5]); /*16939*/
						$1.KbeforeB(); /*16939*/
						if ($k[--$j]) { //no-else/*16939*/
							$k[$j++] = $1.K; /*16939*/
							break; /*16939*/
						} /*16939*/
						$k[$j++] = $a([9, 10, 12, $1.e, $1.e, 4, 5]); /*16940*/
						$1.KbeforeA(); /*16940*/
						if ($k[--$j]) { //no-else/*16940*/
							$k[$j++] = $1.K; /*16940*/
							break; /*16940*/
						} /*16940*/
						$k[$j++] = $a([9, 10, 11, $1.e, $1.e, 5, 6]); /*16941*/
						$1.KbeforeN(); /*16941*/
						if ($k[--$j]) { //no-else/*16941*/
							$k[$j++] = $1.K; /*16941*/
							break; /*16941*/
						} /*16941*/
						$k[$j++] = $a([4, 5, 6, $1.e, $1.e, 2, 3]); /*16942*/
						$1.KbeforeE(); /*16942*/
						if ($k[--$j]) { //no-else/*16942*/
							$k[$j++] = $1.K; /*16942*/
							break; /*16942*/
						} /*16942*/
						$k[$j++] = $a([11, 12, 14, $1.e, $1.e, 5, 7]); /*16943*/
						$1.AbeforeK(); /*16943*/
						if ($k[--$j]) { //no-else/*16943*/
							$k[$j++] = $1.A; /*16943*/
							break; /*16943*/
						} /*16943*/
						$k[$j++] = $a([11, 15, 16, $1.e, $1.e, 6, 7]); /*16944*/
						$1.AbeforeB(); /*16944*/
						if ($k[--$j]) { //no-else/*16944*/
							$k[$j++] = $1.A; /*16944*/
							break; /*16944*/
						} /*16944*/
						$k[$j++] = $a([12, 13, 15, $1.e, $1.e, 6, 8]); /*16945*/
						$1.AbeforeN(); /*16945*/
						if ($k[--$j]) { //no-else/*16945*/
							$k[$j++] = $1.A; /*16945*/
							break; /*16945*/
						} /*16945*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*16946*/
						$1.AbeforeE(); /*16946*/
						if ($k[--$j]) { //no-else/*16946*/
							$k[$j++] = $1.A; /*16946*/
							break; /*16946*/
						} /*16946*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*16947*/
						$1.NbeforeK(); /*16947*/
						if ($k[--$j]) { //no-else/*16947*/
							$k[$j++] = $1.N; /*16947*/
							break; /*16947*/
						} /*16947*/
						$k[$j++] = $a([6, 8, 9, $1.e, $1.e, 3, 4]); /*16948*/
						$1.NbeforeB(); /*16948*/
						if ($k[--$j]) { //no-else/*16948*/
							$k[$j++] = $1.N; /*16948*/
							break; /*16948*/
						} /*16948*/
						$k[$j++] = $a([6, 7, 8, $1.e, $1.e, 3, 4]); /*16949*/
						$1.NbeforeA(); /*16949*/
						if ($k[--$j]) { //no-else/*16949*/
							$k[$j++] = $1.N; /*16949*/
							break; /*16949*/
						} /*16949*/
						$k[$j++] = $a([3, 4, 5, $1.e, $1.e, 2, 3]); /*16950*/
						$1.NbeforeE(); /*16950*/
						if ($k[--$j]) { //no-else/*16950*/
							$k[$j++] = $1.N; /*16950*/
							break; /*16950*/
						} /*16950*/
						$k[$j++] = $1.B; /*16951*/
						break; /*16951*/
					} /*16951*/
					if ($1.mode == $1.A) { //no-else/*16961*/
						if ($1.numK >= 1) { //no-else/*16954*/
							$k[$j++] = $1.K; /*16954*/
							break; /*16954*/
						} /*16954*/
						if ($1.numB >= 1) { //no-else/*16955*/
							$k[$j++] = $1.B; /*16955*/
							break; /*16955*/
						} /*16955*/
						$k[$j++] = $a([13, 15, 17, $1.e, 5, 7, 9]); /*16956*/
						$1.NbeforeA(); /*16956*/
						if ($k[--$j]) { //no-else/*16956*/
							$k[$j++] = $1.N; /*16956*/
							break; /*16956*/
						} /*16956*/
						$k[$j++] = $a([13, 17, 18, $1.e, $1.e, 7, 9]); /*16957*/
						$1.NbeforeB(); /*16957*/
						if ($k[--$j]) { //no-else/*16957*/
							$k[$j++] = $1.N; /*16957*/
							break; /*16957*/
						} /*16957*/
						$k[$j++] = $a([7, 8, 9, $1.e, 3, 4, 5]); /*16958*/
						$1.NbeforeE(); /*16958*/
						if ($k[--$j]) { //no-else/*16958*/
							$k[$j++] = $1.N; /*16958*/
							break; /*16958*/
						} /*16958*/
						if (($1.numA >= 1) || ($1.numN >= 1)) { //no-else/*16959*/
							$k[$j++] = $1.A; /*16959*/
							break; /*16959*/
						} /*16959*/
						$k[$j++] = $1.B; /*16960*/
						break; /*16960*/
					} /*16960*/
					if ($1.mode == $1.N) { //no-else/*16968*/
						if ($1.numK >= 1) { //no-else/*16963*/
							$k[$j++] = $1.K; /*16963*/
							break; /*16963*/
						} /*16963*/
						if ($1.numB >= 1) { //no-else/*16964*/
							$k[$j++] = $1.B; /*16964*/
							break; /*16964*/
						} /*16964*/
						if ($1.numA >= 1) { //no-else/*16965*/
							$k[$j++] = $1.A; /*16965*/
							break; /*16965*/
						} /*16965*/
						if ($1.numN >= 1) { //no-else/*16966*/
							$k[$j++] = $1.N; /*16966*/
							break; /*16966*/
						} /*16966*/
						$k[$j++] = $1.B; /*16967*/
						break; /*16967*/
					} /*16967*/
					if ($1.mode == $1.K) { //no-else/*16975*/
						if ($1.numB >= 1) { //no-else/*16970*/
							$k[$j++] = $1.B; /*16970*/
							break; /*16970*/
						} /*16970*/
						if ($1.numA >= 1) { //no-else/*16971*/
							$k[$j++] = $1.A; /*16971*/
							break; /*16971*/
						} /*16971*/
						if ($1.numN >= 1) { //no-else/*16972*/
							$k[$j++] = $1.N; /*16972*/
							break; /*16972*/
						} /*16972*/
						if ($1.numK >= 1) { //no-else/*16973*/
							$k[$j++] = $1.K; /*16973*/
							break; /*16973*/
						} /*16973*/
						$k[$j++] = $1.B; /*16974*/
						break; /*16974*/
					} /*16974*/
				} /*16974*/
				var _A7 = $k[--$j]; /*16977*/
				$k[$j++] = _A7; /*16977*/
				if ((_A7 == $1.K) && $1.fnc1first) { //no-else/*16977*/
					$j--; /*16977*/
					$k[$j++] = $1.B; /*16977*/
				} /*16977*/
				var _AB = $k[--$j]; /*16978*/
				$k[$j++] = _AB; /*16993*/
				if (_AB == $1.mode) {
					/*16992*/
					$j--; /*16979*/
					var _AH = ($1.mode == $1.K) ? 2 : 1; /*16980*/
					$1.dat = $geti($1.msg, $1.i, _AH); /*16980*/
					$k[$j++] = Infinity; /*16984*/
					$aload($1.seq); /*16982*/
					$k[$j++] = Infinity; /*16983*/
					var _AK = $k[--$j]; /*16983*/
					var _AL = $k[--$j]; /*16983*/
					$k[$j++] = _AK; /*16983*/
					$aload(_AL); /*16983*/
					$aload($1.dat); /*16983*/
					var _AN = $a(); /*16983*/
					$k[$j++] = _AN; /*16983*/
					$1.seq = $a(); /*16984*/
				} else {
					/*16992*/
					$1.mode = $k[--$j]; /*16986*/
					if ($1.mode == $1.K) { //no-else/*16987*/
						$k[$j++] = $1.K; /*16987*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numK * 2); /*16987*/
					} /*16987*/
					if ($1.mode == $1.B) { //no-else/*16988*/
						$k[$j++] = $1.B; /*16988*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numB); /*16988*/
					} /*16988*/
					if ($1.mode == $1.A) { //no-else/*16989*/
						$k[$j++] = $1.A; /*16989*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numA); /*16989*/
					} /*16989*/
					if ($1.mode == $1.N) { //no-else/*16990*/
						$k[$j++] = $1.N; /*16990*/
						$k[$j++] = $geti($1.msg, $1.i, $1.numN); /*16990*/
					} /*16990*/
					$1.dat = $k[--$j]; /*16991*/
					$1.sw = $k[--$j]; /*16991*/
					$k[$j++] = Infinity; /*16992*/
					$aload($1.seq); /*16992*/
					$k[$j++] = $1.sw; /*16992*/
					$k[$j++] = $1.dat; /*16992*/
					$1.seq = $a(); /*16992*/
				} /*16992*/
				$1.i = $1.i + $1.dat.length; /*16994*/
			} /*16994*/
			for (;;) {
				/*17020*/
				if ($1.seq == -1) { //no-else/*16999*/
					break; /*16999*/
				} /*16999*/
				$1.bits = $s(23648); /*17000*/
				$1.j = 0; /*17001*/
				if ($1.fnc1first) { //no-else/*17002*/
					$k[$j++] = "0101"; /*17002*/
					$1.addtobits(); /*17002*/
				} /*17002*/
				$1.abort = false; /*17003*/
				for (var _B5 = 0, _B4 = $1.seq.length - 1; _B5 <= _B4; _B5 += 2) {
					/*17015*/
					$1.i = _B5; /*17005*/
					$1.mode = $get($1.seq, $1.i); /*17006*/
					$k[$j++] = $get($get($1.mids, $1.ver), $1.mode); /*17007*/
					$1.addtobits(); /*17007*/
					$1.cclen = $get($get($1.cclens, $1.ver), $1.mode); /*17008*/
					$1.chars = $get($1.seq, $1.i + 1); /*17009*/
					if ($1.chars.length >= (~~Math.pow(2, $1.cclen))) { //no-else/*17012*/
						$1.abort = true; /*17011*/
						break; /*17011*/
					} /*17011*/
					$k[$j++] = $1.chars.length; /*17013*/
					if ($1.mode == $1.K) { //no-else/*17013*/
						var _BR = $k[--$j]; /*17013*/
						$k[$j++] = ~~(_BR / 2); /*17013*/
					} /*17013*/
					$k[$j++] = $1.cclen; /*17013*/
					$1.tobin(); /*17013*/
					$1.addtobits(); /*17013*/
					$k[$j++] = $1.chars; /*17014*/
					$1[$get($1.encfuncs, $1.mode)](); /*17014*/
					$1.addtobits(); /*17014*/
				} /*17014*/
				if ($1.abort) { //no-else/*17016*/
					break; /*17016*/
				} /*17016*/
				$1.bits = $geti($1.bits, 0, $1.j); /*17017*/
				$put($1.msgbits, $1.ver, $1.bits); /*17018*/
				break; /*17019*/
			} /*17019*/
		} /*17019*/
		$1.metrics = $a([$a(["micro", "M1", $1.vM1, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $1.vM2, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $1.vM3, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $1.vM4, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $1.v1to9, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $1.v1to9, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $1.v1to9, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $1.v1to9, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $1.v1to9, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $1.v1to9, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $1.v1to9, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $1.v1to9, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $1.v1to9, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $1.v10to26, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $1.v10to26, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $1.v10to26, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $1.v10to26, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $1.v10to26, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $1.v10to26, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $1.v10to26, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $1.v10to26, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $1.v10to26, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $1.v10to26, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $1.v10to26, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $1.v10to26, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $1.v10to26, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $1.v10to26, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $1.v10to26, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $1.v10to26, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $1.v10to26, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $1.v27to40, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $1.v27to40, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $1.v27to40, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $1.v27to40, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $1.v27to40, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $1.v27to40, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $1.v27to40, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $1.v27to40, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $1.v27to40, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $1.v27to40, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $1.v27to40, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $1.v27to40, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $1.v27to40, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $1.v27to40, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])])]); /*17071*/
		$k[$j++] = 'eclval'; /*17072*/
		$search("LMQH", $1.eclevel); /*17072*/
		$j--; /*17072*/
		var _EX = $k[--$j]; /*17072*/
		var _EY = $k[--$j]; /*17072*/
		var _EZ = $k[--$j]; /*17072*/
		$1[$k[--$j]] = _EX.length; /*17072*/
		for (var _Eb = 0; _Eb <= 43; _Eb += 1) {
			/*17109*/
			$1.i = _Eb; /*17074*/
			$1.m = $get($1.metrics, $1.i); /*17075*/
			$1.frmt = $get($1.m, 0); /*17076*/
			$1.vers = $get($1.m, 1); /*17077*/
			$1.vergrp = $get($1.m, 2); /*17078*/
			$1.size = $get($1.m, 3); /*17079*/
			$1.asp2 = $get($1.m, 4); /*17080*/
			$1.asp3 = $get($1.m, 5); /*17081*/
			$1.nmod = $get($1.m, 6); /*17082*/
			$1.ncws = ~~($1.nmod / 8); /*17083*/
			$1.rbit = $1.nmod % 8; /*17084*/
			$1.lc4b = false; /*17085*/
			if (($1.size == 11) || ($1.size == 15)) { //no-else/*17090*/
				$1.ncws = $1.ncws + 1; /*17087*/
				$1.rbit = 0; /*17088*/
				$1.lc4b = true; /*17089*/
			} /*17089*/
			$1.ecws = $get($get($1.m, 7), $1.eclval); /*17091*/
			$1.dcws = $1.ncws - $1.ecws; /*17092*/
			var _F6 = $1.lc4b ? 4 : 0; /*17093*/
			$1.dmod = ($1.dcws * 8) - _F6; /*17093*/
			$1.ecb1 = $get($get($1.m, 8), $1.eclval * 2); /*17094*/
			$1.ecb2 = $get($get($1.m, 8), ($1.eclval * 2) + 1); /*17095*/
			$1.okay = true; /*17096*/
			if ($ne($1.format, "any") && $ne($1.format, $1.frmt)) { //no-else/*17097*/
				$1.okay = false; /*17097*/
			} /*17097*/
			if ($eq($1.frmt, "micro") && $1.fnc1first) { //no-else/*17098*/
				$1.okay = false; /*17098*/
			} /*17098*/
			if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //no-else/*17099*/
				$1.okay = false; /*17099*/
			} /*17099*/
			if (($1.ecb1 == -1) || ($1.ecb2 == -1)) { //no-else/*17100*/
				$1.okay = false; /*17100*/
			} /*17100*/
			$1.verbits = $get($1.msgbits, $1.vergrp); /*17101*/
			if ($1.verbits == -1) {
				/*17105*/
				$1.okay = false; /*17103*/
			} else {
				/*17105*/
				if ($1.verbits.length > $1.dmod) { //no-else/*17105*/
					$1.okay = false; /*17105*/
				} /*17105*/
			} /*17105*/
			$1.term = $geti("000000000", 0, $get($1.termlens, $1.vergrp)); /*17107*/
			if ($1.okay) { //no-else/*17108*/
				break; /*17108*/
			} /*17108*/
		} /*17108*/
		if (!$1.okay) { //no-else/*17113*/
			$k[$j++] = 'bwipp.qrcodeNoValidSymbol'; /*17112*/
			$k[$j++] = "No valid symbol available"; /*17112*/
			$0.raiseerror(); /*17112*/
		} /*17112*/
		$1.format = $1.frmt; /*17115*/
		$1.version = $1.vers; /*17116*/
		$1.msgbits = $1.verbits; /*17117*/
		$1.dcpb = ~~($1.dcws / ($1.ecb1 + $1.ecb2)); /*17118*/
		$1.ecpb = (~~($1.ncws / ($1.ecb1 + $1.ecb2))) - $1.dcpb; /*17119*/
		var _Fl = $1.term; /*17122*/
		var _Fm = $1.dmod; /*17122*/
		var _Fn = $1.msgbits; /*17122*/
		var _Fo = $1.term; /*17122*/
		var _Fp = _Fo.length; /*17122*/
		var _Fq = _Fm - _Fn.length; /*17122*/
		if ((_Fm - _Fn.length) > _Fo.length) { //no-else/*17122*/
			var _ = _Fp; /*17122*/
			_Fp = _Fq; /*17122*/
			_Fq = _; /*17122*/
		} /*17122*/
		$1.term = $geti(_Fl, 0, _Fq); /*17122*/
		var _Fu = $s($1.msgbits.length + $1.term.length); /*17123*/
		$puti(_Fu, 0, $1.msgbits); /*17124*/
		$puti(_Fu, $1.msgbits.length, $1.term); /*17125*/
		$1.msgbits = _Fu; /*17126*/
		$1.pad = $s($1.dmod); /*17129*/
		for (var _G2 = 0, _G1 = $1.pad.length - 1; _G2 <= _G1; _G2 += 1) {
			/*17130*/
			$put($1.pad, _G2, 48); /*17130*/
		} /*17130*/
		$puti($1.pad, 0, $1.msgbits); /*17131*/
		$1.padstrs = $a(["11101100", "00010001"]); /*17132*/
		$1.padnum = 0; /*17133*/
		var _GA = $1.lc4b ? 5 : 1; /*17134*/
		for (var _GC = ~~(Math.ceil($1.msgbits.length / 8) * 8), _GB = $1.dmod - _GA; _GC <= _GB; _GC += 8) {
			/*17137*/
			$puti($1.pad, _GC, $get($1.padstrs, $1.padnum)); /*17135*/
			$1.padnum = ($1.padnum + 1) % 2; /*17136*/
		} /*17136*/
		$1.cws = $a($1.dcws); /*17140*/
		for (var _GM = 0, _GL = $1.cws.length - 1; _GM <= _GL; _GM += 1) {
			/*17152*/
			$1.c = _GM; /*17142*/
			$1.bpcw = 8; /*17143*/
			if ($1.lc4b && ($1.c == ($1.cws.length - 1))) { //no-else/*17144*/
				$1.bpcw = 4; /*17144*/
			} /*17144*/
			$1.cwb = $geti($1.pad, $1.c * 8, $1.bpcw); /*17145*/
			$1.cw = 0; /*17146*/
			for (var _GW = 0, _GV = $1.bpcw - 1; _GW <= _GV; _GW += 1) {
				/*17150*/
				$1.i = _GW; /*17148*/
				$1.cw = $1.cw + ((~~(Math.pow(2, ($1.bpcw - $1.i) - 1))) * ($get($1.cwb, $1.i) - 48)); /*17149*/
			} /*17149*/
			$put($1.cws, $1.c, $1.cw); /*17151*/
		} /*17151*/
		if ($1.lc4b) { //no-else/*17155*/
			var _Gh = $1.cws; /*17155*/
			var _Gi = $1.cws; /*17155*/
			$put(_Gh, _Gi.length - 1, $get(_Gh, _Gi.length - 1) << 4); /*17155*/
		} /*17155*/
		$k[$j++] = Infinity; /*17158*/
		$k[$j++] = 1; /*17158*/
		for (var _Gk = 0, _Gl = 255; _Gk < _Gl; _Gk++) {
			/*17158*/
			var _Gm = $k[--$j]; /*17158*/
			var _Gn = _Gm * 2; /*17158*/
			$k[$j++] = _Gm; /*17158*/
			$k[$j++] = _Gn; /*17158*/
			if (_Gn >= 256) { //no-else/*17158*/
				var _Go = $k[--$j]; /*17158*/
				$k[$j++] = _Go ^ 285; /*17158*/
			} /*17158*/
		} /*17158*/
		$1.rsalog = $a(); /*17158*/
		$1.rslog = $a(256); /*17159*/
		for (var _Gr = 1; _Gr <= 255; _Gr += 1) {
			/*17160*/
			$put($1.rslog, $get($1.rsalog, _Gr), _Gr); /*17160*/
		} /*17160*/
		$1.rsprod = function() {
			var _Gv = $k[--$j]; /*17164*/
			var _Gw = $k[--$j]; /*17164*/
			$k[$j++] = _Gw; /*17168*/
			$k[$j++] = _Gv; /*17168*/
			if ((_Gv != 0) && (_Gw != 0)) {
				/*17167*/
				var _Gz = $get($1.rslog, $k[--$j]); /*17165*/
				var _H4 = $get($1.rsalog, (_Gz + $get($1.rslog, $k[--$j])) % 255); /*17165*/
				$k[$j++] = _H4; /*17165*/
			} else {
				/*17167*/
				$j -= 2; /*17167*/
				$k[$j++] = 0; /*17167*/
			} /*17167*/
		}; /*17169*/
		$k[$j++] = Infinity; /*17172*/
		$k[$j++] = 1; /*17172*/
		for (var _H6 = 0, _H7 = $1.ecpb; _H6 < _H7; _H6++) {
			/*17172*/
			$k[$j++] = 0; /*17172*/
		} /*17172*/
		$1.coeffs = $a(); /*17172*/
		for (var _HB = 0, _HA = $1.ecpb - 1; _HB <= _HA; _HB += 1) {
			/*17181*/
			$1.i = _HB; /*17174*/
			$put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); /*17175*/
			for (var _HI = $1.i; _HI >= 1; _HI -= 1) {
				/*17179*/
				$1.j = _HI; /*17177*/
				$k[$j++] = $1.coeffs; /*17178*/
				$k[$j++] = $1.j; /*17178*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*17178*/
				$k[$j++] = $get($1.coeffs, $1.j); /*17178*/
				$k[$j++] = $get($1.rsalog, $1.i); /*17178*/
				$1.rsprod(); /*17178*/
				var _HU = $k[--$j]; /*17178*/
				var _HV = $k[--$j]; /*17178*/
				var _HW = $k[--$j]; /*17178*/
				$put($k[--$j], _HW, $xo(_HV, _HU)); /*17178*/
			} /*17178*/
			$k[$j++] = $1.coeffs; /*17180*/
			$k[$j++] = 0; /*17180*/
			$k[$j++] = $get($1.coeffs, 0); /*17180*/
			$k[$j++] = $get($1.rsalog, $1.i); /*17180*/
			$1.rsprod(); /*17180*/
			var _He = $k[--$j]; /*17180*/
			var _Hf = $k[--$j]; /*17180*/
			$put($k[--$j], _Hf, _He); /*17180*/
		} /*17180*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*17182*/
		$1.rscodes = function() {
			$1.rscws = $k[--$j]; /*17186*/
			$1.rsnd = $1.rscws.length; /*17187*/
			$k[$j++] = Infinity; /*17188*/
			$forall($1.rscws); /*17188*/
			for (var _Ho = 0, _Hp = $1.ecpb; _Ho < _Hp; _Ho++) {
				/*17188*/
				$k[$j++] = 0; /*17188*/
			} /*17188*/
			$1.rscws = $a(); /*17188*/
			for (var _Ht = 0, _Hs = $1.rsnd - 1; _Ht <= _Hs; _Ht += 1) {
				/*17196*/
				$1.m = _Ht; /*17190*/
				$1.k = $get($1.rscws, $1.m); /*17191*/
				for (var _Hz = 0, _Hy = $1.ecpb - 1; _Hz <= _Hy; _Hz += 1) {
					/*17195*/
					$1.j = _Hz; /*17193*/
					$k[$j++] = $1.rscws; /*17194*/
					$k[$j++] = ($1.m + $1.j) + 1; /*17194*/
					$k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); /*17194*/
					$k[$j++] = $1.k; /*17194*/
					$1.rsprod(); /*17194*/
					var _IC = $k[--$j]; /*17194*/
					var _ID = $k[--$j]; /*17194*/
					$put($k[--$j], _ID, $xo(_IC, $get($1.rscws, ($1.m + $1.j) + 1))); /*17194*/
				} /*17194*/
			} /*17194*/
			$k[$j++] = $geti($1.rscws, $1.rsnd, $1.ecpb); /*17197*/
		}; /*17198*/
		$1.dcwsb = $a($1.ecb1 + $1.ecb2); /*17201*/
		$1.ecwsb = $a($1.ecb1 + $1.ecb2); /*17202*/
		for (var _IR = 0, _IQ = $1.ecb1 - 1; _IR <= _IQ; _IR += 1) {
			/*17207*/
			$1.i = _IR; /*17204*/
			$put($1.dcwsb, $1.i, $geti($1.cws, $1.i * $1.dcpb, $1.dcpb)); /*17205*/
			$k[$j++] = $1.ecwsb; /*17206*/
			$k[$j++] = $1.i; /*17206*/
			$k[$j++] = $get($1.dcwsb, $1.i); /*17206*/
			$1.rscodes(); /*17206*/
			var _Ie = $k[--$j]; /*17206*/
			var _If = $k[--$j]; /*17206*/
			$put($k[--$j], _If, _Ie); /*17206*/
		} /*17206*/
		for (var _Ij = 0, _Ii = $1.ecb2 - 1; _Ij <= _Ii; _Ij += 1) {
			/*17212*/
			$1.i = _Ij; /*17209*/
			$put($1.dcwsb, $1.ecb1 + $1.i, $geti($1.cws, ($1.ecb1 * $1.dcpb) + ($1.i * ($1.dcpb + 1)), $1.dcpb + 1)); /*17210*/
			$k[$j++] = $1.ecwsb; /*17211*/
			$k[$j++] = $1.ecb1 + $1.i; /*17211*/
			$k[$j++] = $get($1.dcwsb, $1.ecb1 + $1.i); /*17211*/
			$1.rscodes(); /*17211*/
			var _J1 = $k[--$j]; /*17211*/
			var _J2 = $k[--$j]; /*17211*/
			$put($k[--$j], _J2, _J1); /*17211*/
		} /*17211*/
		$1.cws = $a($1.ncws); /*17215*/
		$1.cw = 0; /*17216*/
		for (var _J8 = 0, _J7 = $1.dcpb; _J8 <= _J7; _J8 += 1) {
			/*17226*/
			$1.i = _J8; /*17218*/
			for (var _JC = 0, _JB = ($1.ecb1 + $1.ecb2) - 1; _JC <= _JB; _JC += 1) {
				/*17225*/
				$1.j = _JC; /*17220*/
				if ($1.i < $get($1.dcwsb, $1.j).length) { //no-else/*17224*/
					$put($1.cws, $1.cw, $get($get($1.dcwsb, $1.j), $1.i)); /*17222*/
					$1.cw = $1.cw + 1; /*17223*/
				} /*17223*/
			} /*17223*/
		} /*17223*/
		for (var _JR = 0, _JQ = $1.ecpb - 1; _JR <= _JQ; _JR += 1) {
			/*17234*/
			$1.i = _JR; /*17228*/
			for (var _JV = 0, _JU = ($1.ecb1 + $1.ecb2) - 1; _JV <= _JU; _JV += 1) {
				/*17233*/
				$1.j = _JV; /*17230*/
				$put($1.cws, $1.cw, $get($get($1.ecwsb, $1.j), $1.i)); /*17231*/
				$1.cw = $1.cw + 1; /*17232*/
			} /*17232*/
		} /*17232*/
		if ($1.rbit > 0) { //no-else/*17242*/
			$1.pad = $a($1.cws.length + 1); /*17238*/
			$puti($1.pad, 0, $1.cws); /*17239*/
			$put($1.pad, $1.pad.length - 1, 0); /*17240*/
			$1.cws = $1.pad; /*17241*/
		} /*17241*/
		if ($1.lc4b) { //no-else/*17253*/
			var _Jn = $1.cws; /*17246*/
			var _Jo = $1.dcws; /*17246*/
			$put(_Jn, _Jo - 1, $get(_Jn, _Jo - 1) >>> 4); /*17246*/
			for (var _Jt = $1.dcws - 1, _Js = $1.ncws - 2; _Jt <= _Js; _Jt += 1) {
				/*17251*/
				$1.i = _Jt; /*17248*/
				$put($1.cws, $1.i, ($get($1.cws, $1.i) & 15) << 4); /*17249*/
				$put($1.cws, $1.i, (($get($1.cws, $1.i + 1) >>> 4) & 15) | $get($1.cws, $1.i)); /*17250*/
			} /*17250*/
			$put($1.cws, $1.ncws - 1, ($get($1.cws, $1.ncws - 1) & 15) << 4); /*17252*/
		} /*17252*/
		$k[$j++] = Infinity; /*17256*/
		for (var _KE = 0, _KF = $1.size * $1.size; _KE < _KF; _KE++) {
			/*17256*/
			$k[$j++] = -1; /*17256*/
		} /*17256*/
		$1.pixs = $a(); /*17256*/
		$1.qmv = function() {
			var _KI = $k[--$j]; /*17257*/
			var _KJ = $k[--$j]; /*17257*/
			$k[$j++] = _KJ + (_KI * $1.size); /*17257*/
		}; /*17257*/
		$1.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); /*17269*/
		for (var _KV = 0, _KU = $1.fpat.length - 1; _KV <= _KU; _KV += 1) {
			/*17281*/
			$1.y = _KV; /*17271*/
			for (var _KZ = 0, _KY = $get($1.fpat, 0).length - 1; _KZ <= _KY; _KZ += 1) {
				/*17280*/
				$1.x = _KZ; /*17273*/
				$1.fpb = $get($get($1.fpat, $1.y), $1.x); /*17274*/
				$k[$j++] = $1.pixs; /*17275*/
				$k[$j++] = $1.x; /*17275*/
				$k[$j++] = $1.y; /*17275*/
				$1.qmv(); /*17275*/
				var _Kj = $k[--$j]; /*17275*/
				$put($k[--$j], _Kj, $1.fpb); /*17275*/
				if ($eq($1.format, "full")) { //no-else/*17279*/
					$k[$j++] = $1.pixs; /*17277*/
					$k[$j++] = ($1.size - $1.x) - 1; /*17277*/
					$k[$j++] = $1.y; /*17277*/
					$1.qmv(); /*17277*/
					var _Kr = $k[--$j]; /*17277*/
					$put($k[--$j], _Kr, $1.fpb); /*17277*/
					$k[$j++] = $1.pixs; /*17278*/
					$k[$j++] = $1.x; /*17278*/
					$k[$j++] = ($1.size - $1.y) - 1; /*17278*/
					$1.qmv(); /*17278*/
					var _Ky = $k[--$j]; /*17278*/
					$put($k[--$j], _Ky, $1.fpb); /*17278*/
				} /*17278*/
			} /*17278*/
		} /*17278*/
		$1.algnpat = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); /*17290*/
		$1.putalgnpat = function() {
			$1.py = $k[--$j]; /*17292*/
			$1.px = $k[--$j]; /*17293*/
			for (var _L8 = 0; _L8 <= 4; _L8 += 1) {
				/*17300*/
				$1.pb = _L8; /*17295*/
				for (var _L9 = 0; _L9 <= 4; _L9 += 1) {
					/*17299*/
					$1.pa = _L9; /*17297*/
					$k[$j++] = $1.pixs; /*17298*/
					$k[$j++] = $1.px + $1.pa; /*17298*/
					$k[$j++] = $1.py + $1.pb; /*17298*/
					$1.qmv(); /*17298*/
					var _LK = $k[--$j]; /*17298*/
					$put($k[--$j], _LK, $get($get($1.algnpat, $1.pb), $1.pa)); /*17298*/
				} /*17298*/
			} /*17298*/
		}; /*17301*/
		for (var _LR = $1.asp2 - 2, _LS = $1.asp3 - $1.asp2, _LQ = $1.size - 13; _LS < 0 ? _LR >= _LQ : _LR <= _LQ; _LR += _LS) {
			/*17306*/
			$1.i = _LR; /*17303*/
			$k[$j++] = $1.i; /*17304*/
			$k[$j++] = 4; /*17304*/
			$1.putalgnpat(); /*17304*/
			$k[$j++] = 4; /*17305*/
			$k[$j++] = $1.i; /*17305*/
			$1.putalgnpat(); /*17305*/
		} /*17305*/
		for (var _La = $1.asp2 - 2, _Lb = $1.asp3 - $1.asp2, _LZ = $1.size - 9; _Lb < 0 ? _La >= _LZ : _La <= _LZ; _La += _Lb) {
			/*17313*/
			$1.x = _La; /*17308*/
			for (var _Lh = $1.asp2 - 2, _Li = $1.asp3 - $1.asp2, _Lg = $1.size - 9; _Li < 0 ? _Lh >= _Lg : _Lh <= _Lg; _Lh += _Li) {
				/*17312*/
				$1.y = _Lh; /*17310*/
				$k[$j++] = $1.x; /*17311*/
				$k[$j++] = $1.y; /*17311*/
				$1.putalgnpat(); /*17311*/
			} /*17311*/
		} /*17311*/
		if ($eq($1.format, "full")) {
			/*17326*/
			for (var _Lo = 8, _Ln = $1.size - 9; _Lo <= _Ln; _Lo += 1) {
				/*17321*/
				$1.i = _Lo; /*17318*/
				$k[$j++] = $1.pixs; /*17319*/
				$k[$j++] = $1.i; /*17319*/
				$k[$j++] = 6; /*17319*/
				$1.qmv(); /*17319*/
				var _Ls = $k[--$j]; /*17319*/
				$put($k[--$j], _Ls, ($1.i + 1) % 2); /*17319*/
				$k[$j++] = $1.pixs; /*17320*/
				$k[$j++] = 6; /*17320*/
				$k[$j++] = $1.i; /*17320*/
				$1.qmv(); /*17320*/
				var _Lx = $k[--$j]; /*17320*/
				$put($k[--$j], _Lx, ($1.i + 1) % 2); /*17320*/
			} /*17320*/
		} else {
			/*17326*/
			for (var _M1 = 8, _M0 = $1.size - 1; _M1 <= _M0; _M1 += 1) {
				/*17327*/
				$1.i = _M1; /*17324*/
				$k[$j++] = $1.pixs; /*17325*/
				$k[$j++] = $1.i; /*17325*/
				$k[$j++] = 0; /*17325*/
				$1.qmv(); /*17325*/
				var _M5 = $k[--$j]; /*17325*/
				$put($k[--$j], _M5, ($1.i + 1) % 2); /*17325*/
				$k[$j++] = $1.pixs; /*17326*/
				$k[$j++] = 0; /*17326*/
				$k[$j++] = $1.i; /*17326*/
				$1.qmv(); /*17326*/
				var _MA = $k[--$j]; /*17326*/
				$put($k[--$j], _MA, ($1.i + 1) % 2); /*17326*/
			} /*17326*/
		} /*17326*/
		if ($eq($1.format, "full")) {
			/*17344*/
			$1.formatmap = $a([$a([$a([0, 8]), $a([8, $1.size - 1])]), $a([$a([1, 8]), $a([8, $1.size - 2])]), $a([$a([2, 8]), $a([8, $1.size - 3])]), $a([$a([3, 8]), $a([8, $1.size - 4])]), $a([$a([4, 8]), $a([8, $1.size - 5])]), $a([$a([5, 8]), $a([8, $1.size - 6])]), $a([$a([7, 8]), $a([8, $1.size - 7])]), $a([$a([8, 8]), $a([$1.size - 8, 8])]), $a([$a([8, 7]), $a([$1.size - 7, 8])]), $a([$a([8, 5]), $a([$1.size - 6, 8])]), $a([$a([8, 4]), $a([$1.size - 5, 8])]), $a([$a([8, 3]), $a([$1.size - 4, 8])]), $a([$a([8, 2]), $a([$1.size - 3, 8])]), $a([$a([8, 1]), $a([$1.size - 2, 8])]), $a([$a([8, 0]), $a([$1.size - 1, 8])])]); /*17338*/
		} else {
			/*17344*/
			$1.formatmap = $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])]); /*17344*/
		} /*17344*/
		var _Nh = $1.formatmap; /*17346*/
		for (var _Ni = 0, _Nj = _Nh.length; _Ni < _Nj; _Ni++) {
			/*17348*/
			$forall($get(_Nh, _Ni), function() {
				/*17347*/
				$forall($k[--$j]); /*17347*/
				$1.qmv(); /*17347*/
				$put($1.pixs, $k[--$j], 0); /*17347*/
			}); /*17347*/
		} /*17347*/
		if ($1.size >= 45) {
			/*17364*/
			$1.versionmap = $a([$a([$a([$1.size - 9, 5]), $a([5, $1.size - 9])]), $a([$a([$1.size - 10, 5]), $a([5, $1.size - 10])]), $a([$a([$1.size - 11, 5]), $a([5, $1.size - 11])]), $a([$a([$1.size - 9, 4]), $a([4, $1.size - 9])]), $a([$a([$1.size - 10, 4]), $a([4, $1.size - 10])]), $a([$a([$1.size - 11, 4]), $a([4, $1.size - 11])]), $a([$a([$1.size - 9, 3]), $a([3, $1.size - 9])]), $a([$a([$1.size - 10, 3]), $a([3, $1.size - 10])]), $a([$a([$1.size - 11, 3]), $a([3, $1.size - 11])]), $a([$a([$1.size - 9, 2]), $a([2, $1.size - 9])]), $a([$a([$1.size - 10, 2]), $a([2, $1.size - 10])]), $a([$a([$1.size - 11, 2]), $a([2, $1.size - 11])]), $a([$a([$1.size - 9, 1]), $a([1, $1.size - 9])]), $a([$a([$1.size - 10, 1]), $a([1, $1.size - 10])]), $a([$a([$1.size - 11, 1]), $a([1, $1.size - 11])]), $a([$a([$1.size - 9, 0]), $a([0, $1.size - 9])]), $a([$a([$1.size - 10, 0]), $a([0, $1.size - 10])]), $a([$a([$1.size - 11, 0]), $a([0, $1.size - 11])])]); /*17362*/
		} else {
			/*17364*/
			$1.versionmap = $a([]); /*17364*/
		} /*17364*/
		var _PJ = $1.versionmap; /*17366*/
		for (var _PK = 0, _PL = _PJ.length; _PK < _PL; _PK++) {
			/*17368*/
			$forall($get(_PJ, _PK), function() {
				/*17367*/
				$forall($k[--$j]); /*17367*/
				$1.qmv(); /*17367*/
				$put($1.pixs, $k[--$j], 0); /*17367*/
			}); /*17367*/
		} /*17367*/
		if ($eq($1.format, "full")) { //no-else/*17373*/
			$k[$j++] = $1.pixs; /*17372*/
			$k[$j++] = 8; /*17372*/
			$k[$j++] = $1.size - 8; /*17372*/
			$1.qmv(); /*17372*/
			var _PT = $k[--$j]; /*17372*/
			$put($k[--$j], _PT, 0); /*17372*/
		} /*17372*/
		if ($eq($1.format, "full")) {
			/*17393*/
			var _Pn = $a([function() {
				var _PW = $k[--$j]; /*17378*/
				var _PX = $k[--$j]; /*17378*/
				$k[$j++] = (_PX + _PW) % 2; /*17378*/
			}, function() {
				var _PY = $k[--$j]; /*17379*/
				var _PZ = $k[--$j]; /*17379*/
				$k[$j++] = _PY % 2; /*17379*/
			}, function() {
				$j--; /*17380*/
				var _Pa = $k[--$j]; /*17380*/
				$k[$j++] = _Pa % 3; /*17380*/
			}, function() {
				var _Pb = $k[--$j]; /*17381*/
				var _Pc = $k[--$j]; /*17381*/
				$k[$j++] = (_Pc + _Pb) % 3; /*17381*/
			}, function() {
				var _Pd = $k[--$j]; /*17382*/
				var _Pe = $k[--$j]; /*17382*/
				$k[$j++] = ((~~(_Pd / 2)) + (~~(_Pe / 3))) % 2; /*17382*/
			}, function() {
				var _Pf = $k[--$j]; /*17383*/
				var _Ph = $k[--$j] * _Pf; /*17383*/
				$k[$j++] = (_Ph % 2) + (_Ph % 3); /*17383*/
			}, function() {
				var _Pi = $k[--$j]; /*17384*/
				var _Pk = $k[--$j] * _Pi; /*17384*/
				$k[$j++] = ((_Pk % 2) + (_Pk % 3)) % 2; /*17384*/
			}, function() {
				var _Pl = $k[--$j]; /*17385*/
				var _Pm = $k[--$j]; /*17385*/
				$k[$j++] = (((_Pm * _Pl) % 3) + ((_Pm + _Pl) % 2)) % 2; /*17385*/
			}]); /*17385*/
			$1.maskfuncs = _Pn; /*17386*/
		} else {
			/*17393*/
			var _Px = $a([function() {
				var _Po = $k[--$j]; /*17389*/
				var _Pp = $k[--$j]; /*17389*/
				$k[$j++] = _Po % 2; /*17389*/
			}, function() {
				var _Pq = $k[--$j]; /*17390*/
				var _Pr = $k[--$j]; /*17390*/
				$k[$j++] = ((~~(_Pq / 2)) + (~~(_Pr / 3))) % 2; /*17390*/
			}, function() {
				var _Ps = $k[--$j]; /*17391*/
				var _Pu = $k[--$j] * _Ps; /*17391*/
				$k[$j++] = ((_Pu % 2) + (_Pu % 3)) % 2; /*17391*/
			}, function() {
				var _Pv = $k[--$j]; /*17392*/
				var _Pw = $k[--$j]; /*17392*/
				$k[$j++] = (((_Pw * _Pv) % 3) + ((_Pw + _Pv) % 2)) % 2; /*17392*/
			}]); /*17392*/
			$1.maskfuncs = _Px; /*17393*/
		} /*17393*/
		if ($1.mask != -1) { //no-else/*17398*/
			$1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); /*17396*/
			$1.bestmaskval = $1.mask - 1; /*17397*/
		} /*17397*/
		$1.masks = $a($1.maskfuncs.length); /*17399*/
		for (var _Q8 = 0, _Q7 = $1.masks.length - 1; _Q8 <= _Q7; _Q8 += 1) {
			/*17413*/
			$1.m = _Q8; /*17401*/
			$1.mask = $a($1.size * $1.size); /*17402*/
			for (var _QE = 0, _QD = $1.size - 1; _QE <= _QD; _QE += 1) {
				/*17411*/
				$1.j = _QE; /*17404*/
				for (var _QH = 0, _QG = $1.size - 1; _QH <= _QG; _QH += 1) {
					/*17410*/
					$1.i = _QH; /*17406*/
					$k[$j++] = $1.i; /*17407*/
					$k[$j++] = $1.j; /*17407*/
					$get($1.maskfuncs, $1.m)(); /*17407*/
					var _QN = $k[--$j]; /*17407*/
					$k[$j++] = _QN == 0; /*17408*/
					$k[$j++] = $1.pixs; /*17408*/
					$k[$j++] = $1.i; /*17408*/
					$k[$j++] = $1.j; /*17408*/
					$1.qmv(); /*17408*/
					var _QR = $k[--$j]; /*17408*/
					var _QT = $get($k[--$j], _QR); /*17408*/
					var _QV = ($k[--$j] && (_QT == -1)) ? 1 : 0; /*17408*/
					$k[$j++] = _QV; /*17409*/
					$k[$j++] = $1.mask; /*17409*/
					$k[$j++] = $1.i; /*17409*/
					$k[$j++] = $1.j; /*17409*/
					$1.qmv(); /*17409*/
					var _QZ = $k[--$j]; /*17409*/
					var _Qa = $k[--$j]; /*17409*/
					$put(_Qa, _QZ, $k[--$j]); /*17409*/
				} /*17409*/
			} /*17409*/
			$put($1.masks, $1.m, $1.mask); /*17412*/
		} /*17412*/
		$1.posx = $1.size - 1; /*17416*/
		$1.posy = $1.size - 1; /*17417*/
		$1.dir = -1; /*17418*/
		$1.col = 1; /*17419*/
		$1.num = 0; /*17420*/
		for (;;) {
			/*17443*/
			if ($1.posx < 0) { //no-else/*17422*/
				break; /*17422*/
			} /*17422*/
			$k[$j++] = $1.pixs; /*17423*/
			$k[$j++] = $1.posx; /*17423*/
			$k[$j++] = $1.posy; /*17423*/
			$1.qmv(); /*17423*/
			var _Ql = $k[--$j]; /*17423*/
			if ($get($k[--$j], _Ql) == -1) { //no-else/*17427*/
				var _Qq = $get($1.cws, ~~($1.num / 8)); /*17424*/
				var _Qs = -(7 - ($1.num % 8)); /*17424*/
				$k[$j++] = ((_Qs < 0 ? _Qq >>> -_Qs : _Qq << _Qs)) & 1; /*17425*/
				$k[$j++] = $1.pixs; /*17425*/
				$k[$j++] = $1.posx; /*17425*/
				$k[$j++] = $1.posy; /*17425*/
				$1.qmv(); /*17425*/
				var _Qw = $k[--$j]; /*17425*/
				var _Qx = $k[--$j]; /*17425*/
				$put(_Qx, _Qw, $k[--$j]); /*17425*/
				$1.num = $1.num + 1; /*17426*/
			} /*17426*/
			if ($1.col == 1) {
				/*17440*/
				$1.col = 0; /*17429*/
				$1.posx = $1.posx - 1; /*17430*/
			} else {
				/*17440*/
				$1.col = 1; /*17432*/
				$1.posx = $1.posx + 1; /*17433*/
				$1.posy = $1.posy + $1.dir; /*17434*/
				if (($1.posy < 0) || ($1.posy >= $1.size)) { //no-else/*17441*/
					$1.dir = $1.dir * -1; /*17436*/
					$1.posy = $1.posy + $1.dir; /*17437*/
					$1.posx = $1.posx - 2; /*17438*/
					if ($eq($1.format, "full") && ($1.posx == 6)) { //no-else/*17440*/
						$1.posx = $1.posx - 1; /*17440*/
					} /*17440*/
				} /*17440*/
			} /*17440*/
		} /*17440*/
		$1.evalfulln1n3 = function() {
			$1.scrle = $k[--$j]; /*17447*/
			$k[$j++] = 'scr1'; /*17449*/
			$k[$j++] = 0; /*17449*/
			$forall($1.scrle, function() {
				/*17449*/
				var _RH = $k[--$j]; /*17449*/
				$k[$j++] = _RH; /*17449*/
				if (_RH >= 5) { //no-else/*17449*/
					var _RI = $k[--$j]; /*17449*/
					var _RK = ($k[--$j] + _RI) - 2; /*17449*/
					$k[$j++] = _RK; /*17449*/
					$k[$j++] = _RK; /*17449*/
				} /*17449*/
				$j--; /*17449*/
			}); /*17449*/
			var _RL = $k[--$j]; /*17449*/
			$1[$k[--$j]] = _RL; /*17449*/
			$1.scr3 = 0; /*17451*/
			for (var _RP = 3, _RO = $1.scrle.length - 3; _RP <= _RO; _RP += 2) {
				/*17466*/
				$1.j = _RP; /*17453*/
				if (($get($1.scrle, $1.j) % 3) == 0) { //no-else/*17465*/
					$1.fact = ~~($get($1.scrle, $1.j) / 3); /*17455*/
					$forall($geti($1.scrle, $1.j - 2, 5), function() {
						/*17456*/
						var _Ra = $k[--$j]; /*17456*/
						$k[$j++] = _Ra == $1.fact; /*17456*/
					}); /*17456*/
					var _Rb = $k[--$j]; /*17456*/
					var _Rc = $k[--$j]; /*17456*/
					var _Rd = $k[--$j]; /*17456*/
					var _Re = $k[--$j]; /*17456*/
					if ($k[--$j] && (_Re && (_Rc && _Rb))) { //no-else/*17464*/
						if (($1.j == 3) || (($1.j + 4) >= $1.scrle.length)) {
							/*17461*/
							$1.scr3 = $1.scr3 + 40; /*17458*/
						} else {
							/*17461*/
							if (($get($1.scrle, $1.j - 3) >= 4) || ($get($1.scrle, $1.j + 3) >= 4)) { //no-else/*17462*/
								$1.scr3 = $1.scr3 + 40; /*17461*/
							} /*17461*/
						} /*17461*/
					} /*17461*/
				} /*17461*/
			} /*17461*/
			$k[$j++] = $1.scr1; /*17467*/
			$k[$j++] = $1.scr3; /*17467*/
		}; /*17468*/
		$1.evalfull = function() {
			$1.sym = $k[--$j]; /*17472*/
			$1.n1 = 0; /*17474*/
			$1.n2 = 0; /*17474*/
			$1.n3 = 0; /*17474*/
			$1.rle = $a($1.size + 1); /*17475*/
			$1.lastpairs = $a($1.size); /*17476*/
			$1.thispairs = $a($1.size); /*17477*/
			$1.sizeadd1 = $1.size + 1; /*17478*/
			for (var _S3 = 0, _S2 = $1.size - 1; _S3 <= _S2; _S3 += 1) {
				/*17517*/
				$1.i = _S3; /*17480*/
				$k[$j++] = Infinity; /*17483*/
				var _S5 = $1.size; /*17484*/
				$k[$j++] = 0; /*17486*/
				$k[$j++] = 0; /*17486*/
				for (var _S7 = $1.i, _S8 = _S5, _S6 = (_S5 * _S5) - 1; _S8 < 0 ? _S7 >= _S6 : _S7 <= _S6; _S7 += _S8) {
					/*17486*/
					var _SA = $get($1.sym, _S7); /*17485*/
					var _SB = $k[--$j]; /*17485*/
					$k[$j++] = _SA; /*17485*/
					if ($eq(_SB, _SA)) {
						/*17485*/
						var _SC = $k[--$j]; /*17485*/
						var _SD = $k[--$j]; /*17485*/
						$k[$j++] = _SD + 1; /*17485*/
						$k[$j++] = _SC; /*17485*/
					} else {
						/*17485*/
						var _SE = $k[--$j]; /*17485*/
						$k[$j++] = 1; /*17485*/
						$k[$j++] = _SE; /*17485*/
					} /*17485*/
				} /*17485*/
				$j--; /*17487*/
				var _SG = $counttomark() + 2; /*17488*/
				$astore($geti($1.rle, 0, _SG - 2)); /*17488*/
				$1.evalfulln1n3(); /*17489*/
				$1.n3 = $k[--$j] + $1.n3; /*17489*/
				$1.n1 = $k[--$j] + $1.n1; /*17489*/
				$j--; /*17490*/
				$1.symrow = $geti($1.sym, $1.i * $1.size, $1.size); /*17493*/
				$k[$j++] = Infinity; /*17494*/
				$k[$j++] = 0; /*17497*/
				$k[$j++] = 0; /*17497*/
				$forall($1.symrow, function() {
					/*17497*/
					var _SS = $k[--$j]; /*17496*/
					var _ST = $k[--$j]; /*17496*/
					$k[$j++] = _SS; /*17496*/
					if ($eq(_ST, _SS)) {
						/*17496*/
						var _SU = $k[--$j]; /*17496*/
						var _SV = $k[--$j]; /*17496*/
						$k[$j++] = _SV + 1; /*17496*/
						$k[$j++] = _SU; /*17496*/
					} else {
						/*17496*/
						var _SW = $k[--$j]; /*17496*/
						$k[$j++] = 1; /*17496*/
						$k[$j++] = _SW; /*17496*/
					} /*17496*/
				}); /*17496*/
				$j--; /*17498*/
				var _SY = $counttomark() + 2; /*17499*/
				$astore($geti($1.rle, 0, _SY - 2)); /*17499*/
				$1.evalfulln1n3(); /*17500*/
				$1.n3 = $k[--$j] + $1.n3; /*17500*/
				$1.n1 = $k[--$j] + $1.n1; /*17500*/
				$j--; /*17501*/
				var _Se = $1.thispairs; /*17504*/
				$1.thispairs = $1.lastpairs; /*17504*/
				$1.lastpairs = _Se; /*17504*/
				var _Si = ($get($1.symrow, 0) == 1) ? 0 : 1; /*17505*/
				$k[$j++] = _Si; /*17506*/
				$forall($1.symrow, function() {
					/*17506*/
					var _Sk = $k[--$j]; /*17506*/
					var _Sl = $k[--$j]; /*17506*/
					$k[$j++] = _Sl + _Sk; /*17506*/
					$k[$j++] = _Sk; /*17506*/
				}); /*17506*/
				$j--; /*17507*/
				$astore($1.thispairs); /*17508*/
				$j--; /*17508*/
				if ($1.i > 0) { //no-else/*17515*/
					$k[$j++] = Infinity; /*17510*/
					$aload($1.lastpairs); /*17511*/
					$aload($1.thispairs); /*17511*/
					$k[$j++] = $1.n2; /*17512*/
					for (var _Ss = 0, _St = $1.size; _Ss < _St; _Ss++) {
						/*17512*/
						var _Su = $k[--$j]; /*17512*/
						var _Sv = $k[--$j]; /*17512*/
						$k[$j++] = _Su; /*17512*/
						$k[$j++] = _Sv; /*17512*/
						var _Sx = $k[$j - 1 - $1.sizeadd1]; /*17512*/
						if ((($k[--$j] + _Sx) & 3) == 0) { //no-else/*17512*/
							var _Sz = $k[--$j]; /*17512*/
							$k[$j++] = _Sz + 3; /*17512*/
						} /*17512*/
					} /*17512*/
					$1.n2 = $k[--$j]; /*17513*/
					$cleartomark(); /*17514*/
				} /*17514*/
			} /*17514*/
			$k[$j++] = 'dark'; /*17520*/
			$k[$j++] = 0; /*17520*/
			$forall($1.sym, function() {
				/*17520*/
				var _T2 = $k[--$j]; /*17520*/
				var _T3 = $k[--$j]; /*17520*/
				$k[$j++] = _T3 + _T2; /*17520*/
			}); /*17520*/
			var _T4 = $k[--$j]; /*17520*/
			$1[$k[--$j]] = _T4; /*17520*/
			var _T7 = $1.size; /*17521*/
			$1.n4 = (~~((Math.abs((($1.dark * 100) / (_T7 * _T7)) - 50)) / 5)) * 10; /*17521*/
			$k[$j++] = (($1.n1 + $1.n2) + $1.n3) + $1.n4; /*17523*/
		}; /*17524*/
		$1.evalmicro = function() {
			$1.sym = $k[--$j]; /*17528*/
			$1.dkrhs = 0; /*17529*/
			$1.dkbot = 0; /*17529*/
			for (var _TF = 1, _TE = $1.size - 1; _TF <= _TE; _TF += 1) {
				/*17534*/
				$1.i = _TF; /*17531*/
				$k[$j++] = 'dkrhs'; /*17532*/
				$k[$j++] = $1.dkrhs; /*17532*/
				$k[$j++] = $1.sym; /*17532*/
				$k[$j++] = $1.size - 1; /*17532*/
				$k[$j++] = $1.i; /*17532*/
				$1.qmv(); /*17532*/
				var _TK = $k[--$j]; /*17532*/
				var _TM = $get($k[--$j], _TK); /*17532*/
				var _TN = $k[--$j]; /*17532*/
				$1[$k[--$j]] = _TN + _TM; /*17532*/
				$k[$j++] = 'dkbot'; /*17533*/
				$k[$j++] = $1.dkbot; /*17533*/
				$k[$j++] = $1.sym; /*17533*/
				$k[$j++] = $1.i; /*17533*/
				$k[$j++] = $1.size - 1; /*17533*/
				$1.qmv(); /*17533*/
				var _TT = $k[--$j]; /*17533*/
				var _TV = $get($k[--$j], _TT); /*17533*/
				var _TW = $k[--$j]; /*17533*/
				$1[$k[--$j]] = _TW + _TV; /*17533*/
			} /*17533*/
			if ($1.dkrhs <= $1.dkbot) {
				/*17538*/
				$k[$j++] = -(($1.dkrhs * 16) + $1.dkbot); /*17536*/
			} else {
				/*17538*/
				$k[$j++] = -(($1.dkbot * 16) + $1.dkrhs); /*17538*/
			} /*17538*/
		}; /*17540*/
		$1.bestscore = 999999999; /*17543*/
		for (var _Tg = 0, _Tf = $1.masks.length - 1; _Tg <= _Tf; _Tg += 1) {
			/*17565*/
			$1.m = _Tg; /*17545*/
			$1.masksym = $a($1.size * $1.size); /*17546*/
			for (var _Tn = 0, _Tm = ($1.size * $1.size) - 1; _Tn <= _Tm; _Tn += 1) {
				/*17550*/
				$1.i = _Tn; /*17548*/
				$put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); /*17549*/
			} /*17549*/
			if ($1.masks.length != 1) {
				/*17563*/
				if ($eq($1.format, "full")) {
					/*17555*/
					$k[$j++] = $1.masksym; /*17553*/
					$1.evalfull(); /*17553*/
					$1.score = $k[--$j]; /*17553*/
				} else {
					/*17555*/
					$k[$j++] = $1.masksym; /*17555*/
					$1.evalmicro(); /*17555*/
					$1.score = $k[--$j]; /*17555*/
				} /*17555*/
				if ($1.score < $1.bestscore) { //no-else/*17561*/
					$1.bestsym = $1.masksym; /*17558*/
					$1.bestmaskval = $1.m; /*17559*/
					$1.bestscore = $1.score; /*17560*/
				} /*17560*/
			} else {
				/*17563*/
				$1.bestsym = $1.masksym; /*17563*/
			} /*17563*/
		} /*17563*/
		$1.pixs = $1.bestsym; /*17566*/
		if ($eq($1.format, "full")) { //no-else/*17571*/
			$k[$j++] = $1.pixs; /*17570*/
			$k[$j++] = 8; /*17570*/
			$k[$j++] = $1.size - 8; /*17570*/
			$1.qmv(); /*17570*/
			var _UE = $k[--$j]; /*17570*/
			$put($k[--$j], _UE, 1); /*17570*/
		} /*17570*/
		if ($eq($1.format, "full")) {
			/*17591*/
			$1.fmtvals = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); /*17580*/
			$k[$j++] = 'ecid'; /*17581*/
			$search("MLHQ", $1.eclevel); /*17581*/
			$j--; /*17581*/
			var _UJ = $k[--$j]; /*17581*/
			var _UK = $k[--$j]; /*17581*/
			var _UL = $k[--$j]; /*17581*/
			$1[$k[--$j]] = _UJ.length; /*17581*/
			$1.fmtval = $get($1.fmtvals, ($1.ecid << 3) + $1.bestmaskval); /*17582*/
		} else {
			/*17591*/
			$1.fmtvals = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); /*17589*/
			$1.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~(($1.size - 11) / 2)), $1.eclval); /*17590*/
			$1.fmtval = $get($1.fmtvals, ($1.symid << 2) + $1.bestmaskval); /*17591*/
		} /*17591*/
		for (var _Uh = 0, _Ug = $1.formatmap.length - 1; _Uh <= _Ug; _Uh += 1) {
			/*17598*/
			$1.i = _Uh; /*17594*/
			$forall($get($1.formatmap, $1.i), function() {
				/*17597*/
				var _Um = $k[--$j]; /*17596*/
				$k[$j++] = $1.pixs; /*17596*/
				$forall(_Um); /*17596*/
				$1.qmv(); /*17596*/
				var _Un = $1.fmtval; /*17596*/
				var _Up = -(14 - $1.i); /*17596*/
				var _Uq = $k[--$j]; /*17596*/
				$put($k[--$j], _Uq, ((_Up < 0 ? _Un >>> -_Up : _Un << _Up)) & 1); /*17596*/
			}); /*17596*/
		} /*17596*/
		if ($1.size >= 45) { //no-else/*17616*/
			$1.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136957, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); /*17608*/
			$1.verval = $get($1.vervals, (~~(($1.size - 17) / 4)) - 7); /*17609*/
			for (var _Uz = 0, _Uy = $1.versionmap.length - 1; _Uz <= _Uy; _Uz += 1) {
				/*17615*/
				$1.i = _Uz; /*17611*/
				$forall($get($1.versionmap, $1.i), function() {
					/*17614*/
					var _V4 = $k[--$j]; /*17613*/
					$k[$j++] = $1.pixs; /*17613*/
					$forall(_V4); /*17613*/
					$1.qmv(); /*17613*/
					var _V5 = $1.verval; /*17613*/
					var _V7 = -(17 - $1.i); /*17613*/
					var _V8 = $k[--$j]; /*17613*/
					$put($k[--$j], _V8, ((_V7 < 0 ? _V5 >>> -_V7 : _V5 << _V7)) & 1); /*17613*/
				}); /*17613*/
			} /*17613*/
		} /*17613*/
		var _VG = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.size],
			["pixy", $1.size],
			["height", ($1.size * 2) / 72],
			["width", ($1.size * 2) / 72],
			["opt", $1.options]
		]); /*17626*/
		$k[$j++] = _VG; /*17629*/
		if (!$1.dontdraw) { //no-else/*17629*/
			$0.renmatrix(); /*17629*/
		} /*17629*/
	};
	$0.microqrcode = function() {
		var $1 = {}; /*17659*/
		$1.options = $k[--$j]; /*17661*/
		$1.barcode = $k[--$j]; /*17662*/
		$1.dontdraw = false; /*17664*/
		$forall($1.options, function() {
			/*17675*/
			var _3 = $k[--$j]; /*17675*/
			$1[$k[--$j]] = _3; /*17675*/
		}); /*17675*/
		$put($1.options, "dontdraw", true); /*17678*/
		$put($1.options, "format", "micro"); /*17679*/
		$k[$j++] = 'args'; /*17681*/
		$k[$j++] = $1.barcode; /*17681*/
		$k[$j++] = $1.options; /*17681*/
		$0.qrcode(); /*17681*/
		var _9 = $k[--$j]; /*17681*/
		$1[$k[--$j]] = _9; /*17681*/
		$put($1.args, "opt", $1.options); /*17683*/
		$k[$j++] = $1.args; /*17686*/
		if (!$1.dontdraw) { //no-else/*17686*/
			$0.renmatrix(); /*17686*/
		} /*17686*/
	};
	$0.maxicode = function() {
		var $1 = {}; /*17715*/
		$1.options = $k[--$j]; /*17717*/
		$1.barcode = $k[--$j]; /*17718*/
		$1.dontdraw = false; /*17720*/
		$1.mode = -1; /*17721*/
		$1.sam = -1; /*17722*/
		$1.parse = false; /*17723*/
		$forall($1.options, function() {
			/*17734*/
			var _3 = $k[--$j]; /*17734*/
			$1[$k[--$j]] = _3; /*17734*/
		}); /*17734*/
		$1.mode = ~~$1.mode; /*17736*/
		$1.sam = ~~$1.sam; /*17737*/
		$1.msg = $1.barcode; /*17760*/
		$1.msglen = $1.msg.length; /*17761*/
		if (($1.mode == 2) || ($1.mode == 3)) { //no-else/*17787*/
			if ($eq($geti($1.msg, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d")) {
				/*17771*/
				$1.fid = $geti($1.msg, 0, 9); /*17768*/
				$1.msg = $geti($1.msg, 9, $1.msglen - 9); /*17769*/
			} else {
				/*17771*/
				$1.fid = ""; /*17771*/
			} /*17771*/
			$search($1.msg, "\x1d"); /*17775*/
			$j--; /*17775*/
			$1.pcode = $k[--$j]; /*17775*/
			$j--; /*17776*/
			$search($k[--$j], "\x1d"); /*17776*/
			$j--; /*17776*/
			$1.ccode = $k[--$j]; /*17776*/
			$j--; /*17777*/
			$search($k[--$j], "\x1d"); /*17777*/
			$j--; /*17777*/
			$1.scode = $k[--$j]; /*17777*/
			$j--; /*17778*/
			$1.msg = $k[--$j]; /*17778*/
			var _R = $s($1.msg.length + $1.fid.length); /*17781*/
			$puti(_R, 0, $1.fid); /*17782*/
			$puti(_R, $1.fid.length, $1.msg); /*17783*/
			$1.msg = _R; /*17784*/
			$1.msglen = $1.msg.length; /*17785*/
		} /*17785*/
		$1.eci = -1; /*17790*/
		$1.pad = -2; /*17790*/
		$1.ns = -3; /*17790*/
		$1.la = -4; /*17791*/
		$1.lb = -5; /*17791*/
		$1.sa = -6; /*17792*/
		$1.sb = -7; /*17792*/
		$1.sc = -8; /*17792*/
		$1.sd = -9; /*17792*/
		$1.se = -10; /*17792*/
		$1.sa2 = -11; /*17793*/
		$1.sa3 = -12; /*17793*/
		$1.lkc = -13; /*17794*/
		$1.lkd = -14; /*17794*/
		$1.lke = -15; /*17794*/
		$1.pd2 = -16; /*17795*/
		$1.pd3 = -17; /*17795*/
		$1.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$1.eci, $1.eci, $1.eci, $1.eci, $1.eci]), $a([28, 28, 28, 28, $1.pad]), $a([29, 29, 29, 29, $1.pad]), $a([30, 30, 30, 30, 27]), $a([$1.ns, $1.ns, $1.ns, $1.ns, $1.ns]), $a([" ", "{", 219, 251, 28]), $a([$1.pad, $1.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $1.pd2, 135, 146, 156]), $a(["8", $1.sa2, 136, 147, 157]), $a(["9", $1.sa3, 137, 148, 158]), $a([":", $1.pd3, $1.la, $1.la, $1.la]), $a([$1.sb, $1.sa, " ", " ", " "]), $a([$1.sc, $1.sc, $1.lkc, $1.sc, $1.sc]), $a([$1.sd, $1.sd, $1.sd, $1.lkd, $1.sd]), $a([$1.se, $1.se, $1.se, $1.se, $1.lke]), $a([$1.lb, $1.la, $1.lb, $1.lb, $1.lb])]); /*17864*/
		$1.charvals = $a([new Map, new Map, new Map, new Map, new Map]); /*17867*/
		for (var _2J = 0, _2I = $1.charmaps.length - 1; _2J <= _2I; _2J += 1) {
			/*17876*/
			$1.i = _2J; /*17869*/
			$1.encs = $get($1.charmaps, $1.i); /*17870*/
			for (var _2N = 0; _2N <= 4; _2N += 1) {
				/*17875*/
				$1.j = _2N; /*17872*/
				var _2Q = $get($1.encs, $1.j); /*17873*/
				$k[$j++] = _2Q; /*17873*/
				if ($eq($type(_2Q), 'stringtype')) { //no-else/*17873*/
					var _2T = $get($k[--$j], 0); /*17873*/
					$k[$j++] = _2T; /*17873*/
				} /*17873*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*17874*/
			} /*17874*/
		} /*17874*/
		$1.seta = $get($1.charvals, 0); /*17877*/
		$1.setb = $get($1.charvals, 1); /*17878*/
		$1.setc = $get($1.charvals, 2); /*17879*/
		$1.setd = $get($1.charvals, 3); /*17880*/
		$1.sete = $get($1.charvals, 4); /*17881*/
		$k[$j++] = Infinity; /*17884*/
		for (var _2k = 0, _2l = $1.msglen + 1; _2k < _2l; _2k++) {
			/*17884*/
			$k[$j++] = 0; /*17884*/
		} /*17884*/
		$1.nseq = $a(); /*17884*/
		for (var _2o = $1.msglen - 1; _2o >= 0; _2o -= 1) {
			/*17892*/
			$1.i = _2o; /*17886*/
			var _2r = $get($1.msg, $1.i); /*17887*/
			if ((_2r >= 48) && (_2r <= 57)) {
				/*17890*/
				$put($1.nseq, $1.i, $get($1.nseq, $1.i + 1) + 1); /*17888*/
			} else {
				/*17890*/
				$put($1.nseq, $1.i, 0); /*17890*/
			} /*17890*/
		} /*17890*/
		$1.nseq = $geti($1.nseq, 0, $1.msglen); /*17893*/
		$1.prefixinset = function() {
			$k[$j++] = 0; /*17900*/
			for (;;) {
				/*17900*/
				var _32 = $k[--$j]; /*17898*/
				var _33 = $k[--$j]; /*17898*/
				$k[$j++] = _33; /*17898*/
				$k[$j++] = _32; /*17898*/
				if (_32 >= _33.length) { //no-else/*17898*/
					break; /*17898*/
				} /*17898*/
				var _34 = $k[--$j]; /*17899*/
				var _35 = $k[--$j]; /*17899*/
				var _37 = $k[--$j]; /*17899*/
				var _38 = $get(_37, $get(_35, _34)) !== undefined; /*17899*/
				$k[$j++] = _37; /*17899*/
				$k[$j++] = _35; /*17899*/
				$k[$j++] = _34; /*17899*/
				if (_38) {
					/*17899*/
					var _39 = $k[--$j]; /*17899*/
					$k[$j++] = _39 + 1; /*17899*/
				} else {
					/*17899*/
					break; /*17899*/
				} /*17899*/
			} /*17899*/
			var _3A = $k[--$j]; /*17901*/
			var _3B = $k[--$j]; /*17901*/
			var _3C = $k[--$j]; /*17901*/
			$k[$j++] = _3A; /*17901*/
		}; /*17902*/
		$1.enc = function() {
			var _3D = $k[--$j]; /*17905*/
			$put($1.out, $1.j, $get(_3D, $k[--$j])); /*17905*/
			$1.j = $1.j + 1; /*17906*/
		}; /*17907*/
		$1.out = $a(144); /*17909*/
		$1.i = 0; /*17910*/
		$1.j = 0; /*17910*/
		$1.cset = "seta"; /*17910*/
		for (;;) {
			/*18033*/
			if ($1.i == $1.msglen) { //no-else/*17919*/
				if ($ne($1.cset, "seta") && $ne($1.cset, "setb")) { //no-else/*17917*/
					$k[$j++] = $1.la; /*17915*/
					$k[$j++] = $1[$1.cset]; /*17915*/
					$1.enc(); /*17915*/
					$1.cset = "seta"; /*17916*/
				} /*17916*/
				break; /*17918*/
			} /*17918*/
			for (;;) {
				/*18032*/
				if ($get($1.nseq, $1.i) >= 9) { //no-else/*17930*/
					$k[$j++] = ~~$z($geti($1.msg, $1.i, 9)); /*17924*/
					for (var _3X = 0, _3Y = 4; _3X < _3Y; _3X++) {
						/*17924*/
						var _3Z = $k[--$j]; /*17924*/
						$k[$j++] = _3Z & 63; /*17924*/
						$k[$j++] = _3Z >>> 6; /*17924*/
					} /*17924*/
					$k[$j++] = $get($1[$1.cset], $1.ns); /*17925*/
					for (var _3e = 0; _3e <= 10; _3e += 2) {
						/*17925*/
						var _3f = $k[$j - 1 - _3e]; /*17925*/
						$k[$j++] = _3f; /*17925*/
					} /*17925*/
					$astore($a(6)); /*17925*/
					var _3h = $k[--$j]; /*17925*/
					var _3i = $k[--$j]; /*17925*/
					var _3j = $k[--$j]; /*17925*/
					var _3k = $k[--$j]; /*17925*/
					var _3l = $k[--$j]; /*17925*/
					var _3m = $k[--$j]; /*17925*/
					var _3n = $k[--$j]; /*17925*/
					$k[$j++] = _3h; /*17925*/
					$k[$j++] = _3n; /*17925*/
					$k[$j++] = _3m; /*17925*/
					$k[$j++] = _3l; /*17925*/
					$k[$j++] = _3k; /*17925*/
					$k[$j++] = _3j; /*17925*/
					$k[$j++] = _3i; /*17925*/
					for (var _3o = 0, _3p = 6; _3o < _3p; _3o++) {
						/*17925*/
						$j--; /*17925*/
					} /*17925*/
					$puti($1.out, $1.j, $k[--$j]); /*17926*/
					$1.i = $1.i + 9; /*17927*/
					$1.j = $1.j + 6; /*17928*/
					break; /*17929*/
				} /*17929*/
				$1.char1 = $get($1.msg, $1.i); /*17933*/
				$k[$j++] = 'char2'; /*17934*/
				if (($1.i + 1) < $1.msglen) {
					/*17934*/
					$k[$j++] = $get($1.msg, $1.i + 1); /*17934*/
				} else {
					/*17934*/
					$k[$j++] = -99; /*17934*/
				} /*17934*/
				var _43 = $k[--$j]; /*17934*/
				$1[$k[--$j]] = _43; /*17934*/
				$k[$j++] = 'char3'; /*17935*/
				if (($1.i + 2) < $1.msglen) {
					/*17935*/
					$k[$j++] = $get($1.msg, $1.i + 2); /*17935*/
				} else {
					/*17935*/
					$k[$j++] = -99; /*17935*/
				} /*17935*/
				var _4A = $k[--$j]; /*17935*/
				$1[$k[--$j]] = _4A; /*17935*/
				var _4F = $get($1[$1.cset], $1.char1) !== undefined; /*17938*/
				if (_4F) { //no-else/*17942*/
					$k[$j++] = $1.char1; /*17939*/
					$k[$j++] = $1[$1.cset]; /*17939*/
					$1.enc(); /*17939*/
					$1.i = $1.i + 1; /*17940*/
					break; /*17941*/
				} /*17941*/
				var _4N = $get($1.setb, $1.char1) !== undefined; /*17945*/
				if ($eq($1.cset, "seta") && _4N) { //no-else/*17955*/
					var _4Q = $get($1.setb, $1.char2) !== undefined; /*17946*/
					if (_4Q) {
						/*17952*/
						$k[$j++] = $1.lb; /*17947*/
						$k[$j++] = $1.seta; /*17947*/
						$1.enc(); /*17947*/
						$1.cset = "setb"; /*17948*/
					} else {
						/*17952*/
						$k[$j++] = $1.sb; /*17950*/
						$k[$j++] = $1.seta; /*17950*/
						$1.enc(); /*17950*/
						$k[$j++] = $1.char1; /*17951*/
						$k[$j++] = $1.setb; /*17951*/
						$1.enc(); /*17951*/
						$1.i = $1.i + 1; /*17952*/
					} /*17952*/
					break; /*17954*/
				} /*17954*/
				var _4b = $get($1.seta, $1.char1) !== undefined; /*17958*/
				if ($eq($1.cset, "setb") && _4b) { //no-else/*17983*/
					var _4c = $1.seta; /*17959*/
					var _4d = $1.msg; /*17959*/
					var _4e = $1.i; /*17959*/
					var _4f = $1.msglen; /*17959*/
					var _4g = $1.i; /*17959*/
					var _4h = _4f - _4g; /*17959*/
					var _4i = 4; /*17959*/
					if (4 > (_4f - _4g)) { //no-else/*17959*/
						var _ = _4h; /*17959*/
						_4h = _4i; /*17959*/
						_4i = _; /*17959*/
					} /*17959*/
					$k[$j++] = 'p'; /*17959*/
					$k[$j++] = _4c; /*17959*/
					$k[$j++] = $geti(_4d, _4e, _4i); /*17959*/
					$1.prefixinset(); /*17959*/
					var _4k = $k[--$j]; /*17959*/
					$1[$k[--$j]] = _4k; /*17959*/
					if ($1.p == 1) { //no-else/*17964*/
						$k[$j++] = $1.sa; /*17961*/
						$k[$j++] = $1.setb; /*17961*/
						$1.enc(); /*17961*/
						$k[$j++] = $1.char1; /*17962*/
						$k[$j++] = $1.seta; /*17962*/
						$1.enc(); /*17962*/
						$1.i = $1.i + 1; /*17963*/
					} /*17963*/
					if ($1.p == 2) { //no-else/*17970*/
						$k[$j++] = $1.sa2; /*17966*/
						$k[$j++] = $1.setb; /*17966*/
						$1.enc(); /*17966*/
						$k[$j++] = $1.char1; /*17967*/
						$k[$j++] = $1.seta; /*17967*/
						$1.enc(); /*17967*/
						$k[$j++] = $1.char2; /*17968*/
						$k[$j++] = $1.seta; /*17968*/
						$1.enc(); /*17968*/
						$1.i = $1.i + 2; /*17969*/
					} /*17969*/
					if ($1.p == 3) { //no-else/*17977*/
						$k[$j++] = $1.sa3; /*17972*/
						$k[$j++] = $1.setb; /*17972*/
						$1.enc(); /*17972*/
						$k[$j++] = $1.char1; /*17973*/
						$k[$j++] = $1.seta; /*17973*/
						$1.enc(); /*17973*/
						$k[$j++] = $1.char2; /*17974*/
						$k[$j++] = $1.seta; /*17974*/
						$1.enc(); /*17974*/
						$k[$j++] = $1.char3; /*17975*/
						$k[$j++] = $1.seta; /*17975*/
						$1.enc(); /*17975*/
						$1.i = $1.i + 3; /*17976*/
					} /*17976*/
					if ($1.p >= 4) { //no-else/*17981*/
						$k[$j++] = $1.la; /*17979*/
						$k[$j++] = $1.setb; /*17979*/
						$1.enc(); /*17979*/
						$1.cset = "seta"; /*17980*/
					} /*17980*/
					break; /*17982*/
				} /*17982*/
				var _5F = $get($1.seta, $1.char1) !== undefined; /*17986*/
				if (_5F) { //no-else/*17990*/
					$k[$j++] = $1.la; /*17987*/
					$k[$j++] = $1[$1.cset]; /*17987*/
					$1.enc(); /*17987*/
					$1.cset = "seta"; /*17988*/
					break; /*17989*/
				} /*17989*/
				var _5L = $get($1.setb, $1.char1) !== undefined; /*17991*/
				if (_5L) { //no-else/*17995*/
					$k[$j++] = $1.lb; /*17992*/
					$k[$j++] = $1[$1.cset]; /*17992*/
					$1.enc(); /*17992*/
					$1.cset = "setb"; /*17993*/
					break; /*17994*/
				} /*17994*/
				var _5R = $get($1.setc, $1.char1) !== undefined; /*17998*/
				if (_5R) { //no-else/*17998*/
					$1.setx = "setc"; /*17998*/
					$1.sx = $1.sc; /*17998*/
					$1.lkx = $1.lkc; /*17998*/
				} /*17998*/
				var _5W = $get($1.setd, $1.char1) !== undefined; /*17999*/
				if (_5W) { //no-else/*17999*/
					$1.setx = "setd"; /*17999*/
					$1.sx = $1.sd; /*17999*/
					$1.lkx = $1.lkd; /*17999*/
				} /*17999*/
				var _5b = $get($1.sete, $1.char1) !== undefined; /*18000*/
				if (_5b) { //no-else/*18000*/
					$1.setx = "sete"; /*18000*/
					$1.sx = $1.se; /*18000*/
					$1.lkx = $1.lke; /*18000*/
				} /*18000*/
				var _5f = $1[$1.setx]; /*18003*/
				var _5g = $1.msg; /*18003*/
				var _5h = $1.i; /*18003*/
				var _5i = $1.msglen; /*18003*/
				var _5j = $1.i; /*18003*/
				var _5k = _5i - _5j; /*18003*/
				var _5l = 4; /*18003*/
				if (4 > (_5i - _5j)) { //no-else/*18003*/
					var _ = _5k; /*18003*/
					_5k = _5l; /*18003*/
					_5l = _; /*18003*/
				} /*18003*/
				$k[$j++] = 'p'; /*18003*/
				$k[$j++] = _5f; /*18003*/
				$k[$j++] = $geti(_5g, _5h, _5l); /*18003*/
				$1.prefixinset(); /*18003*/
				var _5n = $k[--$j]; /*18003*/
				$1[$k[--$j]] = _5n; /*18003*/
				if ($1.p == 1) { //no-else/*18008*/
					$k[$j++] = $1.sx; /*18005*/
					$k[$j++] = $1[$1.cset]; /*18005*/
					$1.enc(); /*18005*/
					$k[$j++] = $1.char1; /*18006*/
					$k[$j++] = $1[$1.setx]; /*18006*/
					$1.enc(); /*18006*/
					$1.i = $1.i + 1; /*18007*/
				} /*18007*/
				if ($1.p == 2) { //no-else/*18015*/
					$k[$j++] = $1.sx; /*18010*/
					$k[$j++] = $1[$1.cset]; /*18010*/
					$1.enc(); /*18010*/
					$k[$j++] = $1.char1; /*18011*/
					$k[$j++] = $1[$1.setx]; /*18011*/
					$1.enc(); /*18011*/
					$k[$j++] = $1.sx; /*18012*/
					$k[$j++] = $1[$1.cset]; /*18012*/
					$1.enc(); /*18012*/
					$k[$j++] = $1.char2; /*18013*/
					$k[$j++] = $1[$1.setx]; /*18013*/
					$1.enc(); /*18013*/
					$1.i = $1.i + 2; /*18014*/
				} /*18014*/
				if ($1.p == 3) { //no-else/*18024*/
					$k[$j++] = $1.sx; /*18017*/
					$k[$j++] = $1[$1.cset]; /*18017*/
					$1.enc(); /*18017*/
					$k[$j++] = $1.char1; /*18018*/
					$k[$j++] = $1[$1.setx]; /*18018*/
					$1.enc(); /*18018*/
					$k[$j++] = $1.sx; /*18019*/
					$k[$j++] = $1[$1.cset]; /*18019*/
					$1.enc(); /*18019*/
					$k[$j++] = $1.char2; /*18020*/
					$k[$j++] = $1[$1.setx]; /*18020*/
					$1.enc(); /*18020*/
					$k[$j++] = $1.sx; /*18021*/
					$k[$j++] = $1[$1.cset]; /*18021*/
					$1.enc(); /*18021*/
					$k[$j++] = $1.char3; /*18022*/
					$k[$j++] = $1[$1.setx]; /*18022*/
					$1.enc(); /*18022*/
					$1.i = $1.i + 3; /*18023*/
				} /*18023*/
				if ($1.p >= 4) { //no-else/*18029*/
					$k[$j++] = $1.sx; /*18026*/
					$k[$j++] = $1[$1.cset]; /*18026*/
					$1.enc(); /*18026*/
					$k[$j++] = $1.lkx; /*18027*/
					$k[$j++] = $1[$1.setx]; /*18027*/
					$1.enc(); /*18027*/
					$1.cset = $1.setx; /*18028*/
				} /*18028*/
				break; /*18031*/
			} /*18031*/
		} /*18031*/
		$1.encmsg = $geti($1.out, 0, $1.j); /*18034*/
		$1.padval = $get($1[$1.cset], $1.pad); /*18035*/
		$1.sami = $a([]); /*18038*/
		if ($1.sam != -1) { //no-else/*18043*/
			$1.sami = $a(2); /*18040*/
			$put($1.sami, 0, $get($1.seta, $1.pad)); /*18041*/
			$put($1.sami, 1, (((~~($1.sam / 10)) - 1) * 8) + (($1.sam % 10) - 1)); /*18042*/
		} /*18042*/
		$k[$j++] = Infinity; /*18044*/
		$aload($1.sami); /*18044*/
		$aload($1.encmsg); /*18044*/
		$1.encmsg = $a(); /*18044*/
		if (($1.mode == 2) || ($1.mode == 3)) { //no-else/*18099*/
			var _70 = $strcpy($s(4), "0000"); /*18050*/
			var _73 = $cvrs($s(4), ~~$1.mode, 2); /*18050*/
			$puti(_70, 4 - _73.length, _73); /*18050*/
			$1.mdb = _70; /*18050*/
			var _75 = $strcpy($s(10), "0000000000"); /*18051*/
			var _78 = $cvrs($s(10), ~~$z($1.ccode), 2); /*18051*/
			$puti(_75, 10 - _78.length, _78); /*18051*/
			$1.ccb = _75; /*18051*/
			var _7A = $strcpy($s(10), "0000000000"); /*18052*/
			var _7D = $cvrs($s(10), ~~$z($1.scode), 2); /*18052*/
			$puti(_7A, 10 - _7D.length, _7D); /*18052*/
			$1.scb = _7A; /*18052*/
			$1.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); /*18053*/
			if ($1.mode == 2) {
				/*18066*/
				var _7K = $cvrs($s(6), $1.pcode.length, 2); /*18056*/
				$puti($1.pcb, 6 - _7K.length, _7K); /*18056*/
				var _7O = $cvrs($s(30), ~~$z($1.pcode), 2); /*18057*/
				$puti($1.pcb, 36 - _7O.length, _7O); /*18057*/
			} else {
				/*18066*/
				$k[$j++] = Infinity; /*18063*/
				var _7Q = $strcpy($s(6), "      "); /*18061*/
				$k[$j++] = _7Q; /*18061*/
				$k[$j++] = _7Q; /*18061*/
				$k[$j++] = 0; /*18061*/
				if ($1.pcode.length > 6) {
					/*18061*/
					$k[$j++] = $geti($1.pcode, 0, 6); /*18061*/
				} else {
					/*18061*/
					$k[$j++] = $1.pcode; /*18061*/
				} /*18061*/
				var _7V = $k[--$j]; /*18061*/
				var _7W = $k[--$j]; /*18061*/
				$puti($k[--$j], _7W, _7V); /*18061*/
				$forall($k[--$j], function() {
					/*18062*/
					var _7b = $get($1.seta, $k[--$j]); /*18062*/
					$k[$j++] = _7b; /*18062*/
				}); /*18062*/
				$1.pccw = $a(); /*18063*/
				for (var _7d = 0; _7d <= 5; _7d += 1) {
					/*18067*/
					$1.i = _7d; /*18065*/
					var _7j = $cvrs($s(6), $get($1.pccw, $1.i), 2); /*18066*/
					$puti($1.pcb, ((6 * $1.i) + 6) - _7j.length, _7j); /*18066*/
				} /*18066*/
			} /*18066*/
			$1.scm = $s(60); /*18071*/
			$puti($1.scm, 2, $1.mdb); /*18072*/
			$puti($1.scm, 38, $geti($1.pcb, 0, 4)); /*18073*/
			$puti($1.scm, 30, $geti($1.pcb, 4, 6)); /*18074*/
			$puti($1.scm, 24, $geti($1.pcb, 10, 6)); /*18075*/
			$puti($1.scm, 18, $geti($1.pcb, 16, 6)); /*18076*/
			$puti($1.scm, 12, $geti($1.pcb, 22, 6)); /*18077*/
			$puti($1.scm, 6, $geti($1.pcb, 28, 6)); /*18078*/
			$puti($1.scm, 0, $geti($1.pcb, 34, 2)); /*18079*/
			$puti($1.scm, 52, $geti($1.ccb, 0, 2)); /*18080*/
			$puti($1.scm, 42, $geti($1.ccb, 2, 6)); /*18081*/
			$puti($1.scm, 36, $geti($1.ccb, 8, 2)); /*18082*/
			$puti($1.scm, 54, $geti($1.scb, 0, 6)); /*18083*/
			$puti($1.scm, 48, $geti($1.scb, 6, 4)); /*18084*/
			$1.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); /*18087*/
			for (var _8P = 0; _8P <= 59; _8P += 1) {
				/*18093*/
				$1.i = _8P; /*18089*/
				$1.ps = ~~($1.i / 6); /*18090*/
				$1.ep = (~~(Math.pow(2, 5 - ($1.i % 6)))) * ($get($1.scm, $1.i) - 48); /*18091*/
				$put($1.pri, $1.ps, $get($1.pri, $1.ps) + $1.ep); /*18092*/
			} /*18092*/
			$k[$j++] = Infinity; /*18096*/
			for (var _8b = 0, _8c = 84; _8b < _8c; _8b++) {
				/*18096*/
				$k[$j++] = $1.padval; /*18096*/
			} /*18096*/
			$1.sec = $a(); /*18096*/
			$puti($1.sec, 0, $1.encmsg); /*18097*/
		} /*18097*/
		if (((($1.mode == 4) || ($1.mode == 5)) || ($1.mode == 6)) || ($1.mode == -1)) { //no-else/*18118*/
			if ($1.mode == -1) { //no-else/*18107*/
				var _8n = ($1.encmsg.length <= 77) ? 5 : 4; /*18106*/
				$1.mode = _8n; /*18106*/
			} /*18106*/
			$k[$j++] = Infinity; /*18110*/
			var _8p = ($1.mode == 5) ? 78 : 94; /*18110*/
			for (var _8q = 0, _8r = _8p; _8q < _8r; _8q++) {
				/*18110*/
				$k[$j++] = $1.padval; /*18110*/
			} /*18110*/
			$1.cws = $a(); /*18110*/
			$put($1.cws, 0, $1.mode); /*18111*/
			$puti($1.cws, 1, $1.encmsg); /*18112*/
			$1.pri = $geti($1.cws, 0, 10); /*18115*/
			$1.sec = $geti($1.cws, 10, $1.cws.length - 10); /*18116*/
		} /*18116*/
		$k[$j++] = Infinity; /*18121*/
		$k[$j++] = 1; /*18121*/
		for (var _93 = 0, _94 = 63; _93 < _94; _93++) {
			/*18121*/
			var _95 = $k[--$j]; /*18121*/
			var _96 = _95 * 2; /*18121*/
			$k[$j++] = _95; /*18121*/
			$k[$j++] = _96; /*18121*/
			if (_96 >= 64) { //no-else/*18121*/
				var _97 = $k[--$j]; /*18121*/
				$k[$j++] = _97 ^ 67; /*18121*/
			} /*18121*/
		} /*18121*/
		$1.rsalog = $a(); /*18121*/
		$1.rslog = $a(64); /*18122*/
		for (var _9A = 1; _9A <= 63; _9A += 1) {
			/*18123*/
			$put($1.rslog, $get($1.rsalog, _9A), _9A); /*18123*/
		} /*18123*/
		$1.rsprod = function() {
			var _9E = $k[--$j]; /*18127*/
			var _9F = $k[--$j]; /*18127*/
			$k[$j++] = _9F; /*18131*/
			$k[$j++] = _9E; /*18131*/
			if ((_9E != 0) && (_9F != 0)) {
				/*18130*/
				var _9I = $get($1.rslog, $k[--$j]); /*18128*/
				var _9N = $get($1.rsalog, (_9I + $get($1.rslog, $k[--$j])) % 63); /*18128*/
				$k[$j++] = _9N; /*18128*/
			} else {
				/*18130*/
				$j -= 2; /*18130*/
				$k[$j++] = 0; /*18130*/
			} /*18130*/
		}; /*18132*/
		$1.rscodes = function() {
			$1.rsnum = $k[--$j]; /*18137*/
			$1.cwb = $k[--$j]; /*18138*/
			$k[$j++] = Infinity; /*18141*/
			$k[$j++] = 1; /*18141*/
			for (var _9R = 0, _9S = $1.rsnum; _9R < _9S; _9R++) {
				/*18141*/
				$k[$j++] = 0; /*18141*/
			} /*18141*/
			$1.coeffs = $a(); /*18141*/
			for (var _9W = 1, _9V = $1.rsnum; _9W <= _9V; _9W += 1) {
				/*18150*/
				$1.i = _9W; /*18143*/
				$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*18144*/
				for (var _9d = $1.i - 1; _9d >= 1; _9d -= 1) {
					/*18148*/
					$1.j = _9d; /*18146*/
					$k[$j++] = $1.coeffs; /*18147*/
					$k[$j++] = $1.j; /*18147*/
					$k[$j++] = $get($1.coeffs, $1.j - 1); /*18147*/
					$k[$j++] = $get($1.coeffs, $1.j); /*18147*/
					$k[$j++] = $get($1.rsalog, $1.i); /*18147*/
					$1.rsprod(); /*18147*/
					var _9p = $k[--$j]; /*18147*/
					var _9q = $k[--$j]; /*18147*/
					var _9r = $k[--$j]; /*18147*/
					$put($k[--$j], _9r, $xo(_9q, _9p)); /*18147*/
				} /*18147*/
				$k[$j++] = $1.coeffs; /*18149*/
				$k[$j++] = 0; /*18149*/
				$k[$j++] = $get($1.coeffs, 0); /*18149*/
				$k[$j++] = $get($1.rsalog, $1.i); /*18149*/
				$1.rsprod(); /*18149*/
				var _9z = $k[--$j]; /*18149*/
				var _A0 = $k[--$j]; /*18149*/
				$put($k[--$j], _A0, _9z); /*18149*/
			} /*18149*/
			$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*18151*/
			$k[$j++] = Infinity; /*18154*/
			for (var _A6 = 0, _A7 = $1.rsnum; _A6 < _A7; _A6++) {
				/*18154*/
				$k[$j++] = 0; /*18154*/
			} /*18154*/
			$1.ecb = $a(); /*18154*/
			for (var _AB = 0, _AA = $1.cwb.length - 1; _AB <= _AA; _AB += 1) {
				/*18163*/
				$1.t = $xo($get($1.cwb, _AB), $get($1.ecb, 0)); /*18156*/
				for (var _AH = $1.ecb.length - 1; _AH >= 0; _AH -= 1) {
					/*18162*/
					$1.i = _AH; /*18158*/
					$1.p = ($1.ecb.length - $1.i) - 1; /*18159*/
					$k[$j++] = $1.ecb; /*18160*/
					$k[$j++] = $1.p; /*18160*/
					$k[$j++] = $1.t; /*18160*/
					$k[$j++] = $get($1.coeffs, $1.i); /*18160*/
					$1.rsprod(); /*18160*/
					var _AQ = $k[--$j]; /*18160*/
					var _AR = $k[--$j]; /*18160*/
					$put($k[--$j], _AR, _AQ); /*18160*/
					if ($1.i > 0) { //no-else/*18161*/
						$put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); /*18161*/
					} /*18161*/
				} /*18161*/
			} /*18161*/
			$k[$j++] = $1.ecb; /*18165*/
		}; /*18167*/
		$k[$j++] = Infinity; /*18170*/
		for (var _Af = 0, _Ae = $1.sec.length - 1; _Af <= _Ae; _Af += 2) {
			/*18170*/
			$k[$j++] = $get($1.sec, _Af); /*18170*/
		} /*18170*/
		$1.seco = $a(); /*18170*/
		$k[$j++] = Infinity; /*18171*/
		for (var _Al = 1, _Ak = $1.sec.length - 1; _Al <= _Ak; _Al += 2) {
			/*18171*/
			$k[$j++] = $get($1.sec, _Al); /*18171*/
		} /*18171*/
		$1.sece = $a(); /*18171*/
		var _Aq = ($1.sec.length == 84) ? 20 : 28; /*18174*/
		$1.scodes = _Aq; /*18174*/
		$k[$j++] = 'secochk'; /*18175*/
		$k[$j++] = $1.seco; /*18175*/
		$k[$j++] = $1.scodes; /*18175*/
		$1.rscodes(); /*18175*/
		var _At = $k[--$j]; /*18175*/
		$1[$k[--$j]] = _At; /*18175*/
		$k[$j++] = 'secechk'; /*18176*/
		$k[$j++] = $1.sece; /*18176*/
		$k[$j++] = $1.scodes; /*18176*/
		$1.rscodes(); /*18176*/
		var _Ax = $k[--$j]; /*18176*/
		$1[$k[--$j]] = _Ax; /*18176*/
		$k[$j++] = Infinity; /*18179*/
		for (var _B1 = 0, _B0 = $1.scodes - 1; _B1 <= _B0; _B1 += 1) {
			/*18179*/
			$k[$j++] = $get($1.secochk, _B1); /*18179*/
			$k[$j++] = $get($1.secechk, _B1); /*18179*/
		} /*18179*/
		$1.secchk = $a(); /*18179*/
		$k[$j++] = Infinity; /*18187*/
		$aload($1.pri); /*18183*/
		$k[$j++] = $1.pri; /*18184*/
		$k[$j++] = 10; /*18184*/
		$1.rscodes(); /*18184*/
		$aload($k[--$j]); /*18184*/
		$aload($1.sec); /*18185*/
		$aload($1.secchk); /*18186*/
		$1.codewords = $a(); /*18187*/
		$k[$j++] = Infinity; /*18190*/
		for (var _BD = 0, _BE = 864; _BD < _BE; _BD++) {
			/*18190*/
			$k[$j++] = 0; /*18190*/
		} /*18190*/
		$1.mods = $a(); /*18190*/
		for (var _BG = 0; _BG <= 143; _BG += 1) {
			/*18195*/
			$1.i = _BG; /*18192*/
			$k[$j++] = Infinity; /*18193*/
			var _BL = $cvrs($s(6), $get($1.codewords, $1.i), 2); /*18193*/
			for (var _BM = 0, _BN = _BL.length; _BM < _BN; _BM++) {
				/*18193*/
				$k[$j++] = $get(_BL, _BM) - 48; /*18193*/
			} /*18193*/
			$1.cw = $a(); /*18193*/
			$puti($1.mods, (6 * $1.i) + (6 - $1.cw.length), $1.cw); /*18194*/
		} /*18194*/
		$1.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); /*18243*/
		$1.pixs = $a(864); /*18246*/
		$1.j = 0; /*18247*/
		for (var _BY = 0, _BX = $1.mods.length - 1; _BY <= _BX; _BY += 1) {
			/*18254*/
			$1.i = _BY; /*18249*/
			if ($get($1.mods, $1.i) == 1) { //no-else/*18253*/
				$put($1.pixs, $1.j, $get($1.modmap, $1.i)); /*18251*/
				$1.j = $1.j + 1; /*18252*/
			} /*18252*/
		} /*18252*/
		$k[$j++] = Infinity; /*18255*/
		$forall($geti($1.pixs, 0, $1.j)); /*18255*/
		$k[$j++] = 28; /*18255*/
		$k[$j++] = 29; /*18255*/
		$k[$j++] = 280; /*18255*/
		$k[$j++] = 281; /*18255*/
		$k[$j++] = 311; /*18255*/
		$k[$j++] = 457; /*18255*/
		$k[$j++] = 488; /*18255*/
		$k[$j++] = 500; /*18255*/
		$k[$j++] = 530; /*18255*/
		$k[$j++] = 670; /*18255*/
		$k[$j++] = 700; /*18255*/
		$k[$j++] = 677; /*18255*/
		$k[$j++] = 707; /*18255*/
		$1.pixs = $a(); /*18255*/
		var _Bo = new Map([
			["ren", $0.renmaximatrix],
			["pixs", $1.pixs],
			["opt", $1.options]
		]); /*18261*/
		$k[$j++] = _Bo; /*18264*/
		if (!$1.dontdraw) { //no-else/*18264*/
			$0.renmaximatrix(); /*18264*/
		} /*18264*/
	};
	$0.azteccode = function() {
		var $1 = {}; /*18293*/
		$1.options = $k[--$j]; /*18295*/
		$1.barcode = $k[--$j]; /*18296*/
		$1.dontdraw = false; /*18298*/
		$1.format = "unset"; /*18299*/
		$1.readerinit = false; /*18300*/
		$1.layers = -1; /*18301*/
		$1.eclevel = 23; /*18302*/
		$1.ecaddchars = 3; /*18303*/
		$1.raw = false; /*18304*/
		$1.parse = false; /*18305*/
		$forall($1.options, function() {
			/*18316*/
			var _3 = $k[--$j]; /*18316*/
			$1[$k[--$j]] = _3; /*18316*/
		}); /*18316*/
		$1.layers = ~~$1.layers; /*18318*/
		$1.eclevel = +$1.eclevel; /*18319*/
		$1.ecaddchars = ~~$1.ecaddchars; /*18320*/
		$1.msgbits = ""; /*18344*/
		if ($ne($1.format, "rune") && $1.raw) { //no-else/*18345*/
			$1.msgbits = $1.barcode; /*18345*/
		} /*18345*/
		if ($ne($1.format, "rune") && (!$1.raw)) { //no-else/*18642*/
			$1.U = 0; /*18349*/
			$1.L = 1; /*18349*/
			$1.M = 2; /*18349*/
			$1.P = 3; /*18349*/
			$1.D = 4; /*18349*/
			$1.B = 5; /*18349*/
			$1.lu = -1; /*18352*/
			$1.ll = -2; /*18352*/
			$1.lm = -3; /*18352*/
			$1.lp = -4; /*18353*/
			$1.ld = -5; /*18353*/
			$1.su = -6; /*18353*/
			$1.sp = -7; /*18354*/
			$1.sb = -8; /*18354*/
			$1.fl = -9; /*18354*/
			$1.p2 = -10; /*18355*/
			$1.p3 = -11; /*18355*/
			$1.p4 = -12; /*18355*/
			$1.p5 = -13; /*18355*/
			$1.charmaps = $a([$a([$1.sp, $1.sp, $1.sp, $1.fl, $1.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $1.p2, "0"]), $a(["B", "b", 2, $1.p3, "1"]), $a(["C", "c", 3, $1.p4, "2"]), $a(["D", "d", 4, $1.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $1.lu]), $a(["N", "n", 27, "*", $1.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$1.ll, $1.su, $1.ll, "]", -99]), $a([$1.lm, $1.lm, $1.lu, "{", -99]), $a([$1.ld, $1.ld, $1.lp, "}", -99]), $a([$1.sb, $1.sb, $1.sb, $1.lu, -99])]); /*18392*/
			$1.charvals = $a([new Map, new Map, new Map, new Map, new Map]); /*18395*/
			for (var _1B = 0, _1A = $1.charmaps.length - 1; _1B <= _1A; _1B += 1) {
				/*18404*/
				$1.i = _1B; /*18397*/
				$1.encs = $get($1.charmaps, $1.i); /*18398*/
				for (var _1F = 0; _1F <= 4; _1F += 1) {
					/*18403*/
					$1.j = _1F; /*18400*/
					var _1I = $get($1.encs, $1.j); /*18401*/
					$k[$j++] = _1I; /*18401*/
					if ($eq($type(_1I), 'stringtype')) { //no-else/*18401*/
						var _1L = $get($k[--$j], 0); /*18401*/
						$k[$j++] = _1L; /*18401*/
					} /*18401*/
					$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*18402*/
				} /*18402*/
			} /*18402*/
			var _1V = new Map([
				["\x0d\x0a", $1.p2],
				[". ", $1.p3],
				[", ", $1.p4],
				[": ", $1.p5]
			]); /*18411*/
			$1.pcomp = _1V; /*18412*/
			$1.e = 10000; /*18414*/
			$1.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), $a([0, 0, 0, 0, 0, 0])]); /*18424*/
			$1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.lm]), $a([$1.lm, $1.lp]), $a([$1.ld]), $a([$1.sb])]), $a([$a([$1.ld, $1.lu]), $a([]), $a([$1.lm]), $a([$1.lm, $1.lp]), $a([$1.ld]), $a([$1.sb])]), $a([$a([$1.lu]), $a([$1.ll]), $a([]), $a([$1.lp]), $a([$1.lu, $1.ld]), $a([$1.sb])]), $a([$a([$1.lu]), $a([$1.lu, $1.ll]), $a([$1.lu, $1.lm]), $a([]), $a([$1.lu, $1.ld]), $a([$1.lu, $1.sb])]), $a([$a([$1.lu]), $a([$1.lu, $1.ll]), $a([$1.lu, $1.lm]), $a([$1.lu, $1.lm, $1.lp]), $a([]), $a([$1.lu, $1.sb])]), $a([$a([$1.lu]), $a([$1.ll]), $a([$1.lm]), $a([]), $a([]), $a([])])]); /*18434*/
			$1.shftlen = $a([$a([$1.e, $1.e, $1.e, 5, $1.e]), $a([5, $1.e, $1.e, 5, $1.e]), $a([$1.e, $1.e, $1.e, 5, $1.e]), $a([$1.e, $1.e, $1.e, $1.e, $1.e]), $a([4, $1.e, $1.e, 4, $1.e])]); /*18443*/
			$1.charsize = $a([5, 5, 5, 5, 4, 8]); /*18446*/
			$1.curlen = $a([0, $1.e, $1.e, $1.e, $1.e, $1.e]); /*18449*/
			$1.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); /*18450*/
			$1.backto = $1.U; /*18452*/
			$1.lastchar = ""; /*18453*/
			$forall($1.barcode, function() {
				/*18549*/
				$1.char = $k[--$j]; /*18458*/
				for (;;) {
					/*18484*/
					$1.imp = false; /*18462*/
					var _3l = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*18463*/
					for (var _3m = 0, _3n = _3l.length; _3m < _3n; _3m++) {
						/*18482*/
						$1.x = $get(_3l, _3m); /*18464*/
						var _3v = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*18465*/
						for (var _3w = 0, _3x = _3v.length; _3w < _3x; _3w++) {
							/*18481*/
							$1.y = $get(_3v, _3w); /*18466*/
							if (($1.x != $1.B) || ($1.y == $1.backto)) { //no-else/*18480*/
								$1.cost = $get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y); /*18468*/
								if ($1.cost < $get($1.curlen, $1.y)) { //no-else/*18479*/
									$put($1.curlen, $1.y, $1.cost); /*18470*/
									$k[$j++] = $1.curseq; /*18473*/
									$k[$j++] = $1.y; /*18473*/
									$k[$j++] = Infinity; /*18473*/
									$aload($get($1.curseq, $1.x)); /*18472*/
									$aload($get($get($1.latseq, $1.x), $1.y)); /*18473*/
									var _4S = $a(); /*18473*/
									var _4T = $k[--$j]; /*18474*/
									$put($k[--$j], _4T, _4S); /*18474*/
									if ($1.y == $1.B) { //no-else/*18477*/
										$k[$j++] = 'backto'; /*18476*/
										if (($1.x == $1.P) || ($1.x == $1.D)) {
											/*18476*/
											$k[$j++] = $1.U; /*18476*/
										} else {
											/*18476*/
											$k[$j++] = $1.x; /*18476*/
										} /*18476*/
										var _4d = $k[--$j]; /*18476*/
										$1[$k[--$j]] = _4d; /*18476*/
									} /*18476*/
									$1.imp = true; /*18478*/
								} /*18478*/
							} /*18478*/
						} /*18478*/
					} /*18478*/
					if (!$1.imp) { //no-else/*18483*/
						break; /*18483*/
					} /*18483*/
				} /*18483*/
				$1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e, $1.e, $1.e]); /*18487*/
				$1.nxtseq = $a(6); /*18488*/
				var _4u = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*18490*/
				for (var _4v = 0, _4w = _4u.length; _4v < _4w; _4v++) {
					/*18525*/
					$1.x = $get(_4u, _4v); /*18491*/
					for (;;) {
						/*18523*/
						if ($1.x != $1.B) { //no-else/*18496*/
							var _54 = $get($get($1.charvals, $1.x), $1.char) !== undefined; /*18496*/
							if (!_54) { //no-else/*18496*/
								break; /*18496*/
							} /*18496*/
						} /*18496*/
						$1.cost = $get($1.curlen, $1.x) + $get($1.charsize, $1.x); /*18499*/
						if ($1.cost < $get($1.nxtlen, $1.x)) { //no-else/*18503*/
							$put($1.nxtlen, $1.x, $1.cost); /*18501*/
							$k[$j++] = $1.nxtseq; /*18502*/
							$k[$j++] = $1.x; /*18502*/
							$k[$j++] = Infinity; /*18502*/
							$aload($get($1.curseq, $1.x)); /*18502*/
							$k[$j++] = $1.char; /*18502*/
							var _5O = $a(); /*18502*/
							var _5P = $k[--$j]; /*18502*/
							$put($k[--$j], _5P, _5O); /*18502*/
						} /*18502*/
						if ($1.x == $1.B) { //no-else/*18506*/
							break; /*18506*/
						} /*18506*/
						var _5Y = $a([$1.U, $1.L, $1.M, $1.P, $1.D]); /*18507*/
						for (var _5Z = 0, _5a = _5Y.length; _5Z < _5a; _5Z++) {
							/*18520*/
							$1.y = $get(_5Y, _5Z); /*18508*/
							if ($ne($1.x, $1.y)) { //no-else/*18519*/
								$1.cost = ($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + $get($1.charsize, $1.x); /*18510*/
								if ($1.cost < $get($1.nxtlen, $1.y)) { //no-else/*18518*/
									$put($1.nxtlen, $1.y, $1.cost); /*18512*/
									$k[$j++] = $1.nxtseq; /*18516*/
									$k[$j++] = $1.y; /*18516*/
									$k[$j++] = Infinity; /*18516*/
									$aload($get($1.curseq, $1.y)); /*18514*/
									var _63 = ($1.x == $1.U) ? $1.su : $1.sp; /*18515*/
									$k[$j++] = _63; /*18516*/
									$k[$j++] = $1.char; /*18516*/
									var _65 = $a(); /*18516*/
									var _66 = $k[--$j]; /*18517*/
									$put($k[--$j], _66, _65); /*18517*/
								} /*18517*/
							} /*18517*/
						} /*18517*/
						break; /*18522*/
					} /*18522*/
				} /*18522*/
				if ($ne($1.lastchar, "")) { //no-else/*18536*/
					var _69 = $s(2); /*18529*/
					$put(_69, 0, $1.lastchar); /*18529*/
					$put(_69, 1, $1.char); /*18529*/
					$1.pchars = _69; /*18529*/
					var _6E = $get($1.pcomp, $1.pchars) !== undefined; /*18530*/
					if (_6E) { //no-else/*18535*/
						if ($lt($get($1.curlen, $1.P), $get($1.nxtlen, $1.P))) { //no-else/*18534*/
							$put($1.nxtlen, $1.P, $get($1.curlen, $1.P)); /*18532*/
							$k[$j++] = $1.nxtseq; /*18533*/
							$k[$j++] = $1.P; /*18533*/
							$k[$j++] = Infinity; /*18533*/
							$aload($get($1.curseq, $1.P)); /*18533*/
							$j--; /*18533*/
							$k[$j++] = $get($1.pcomp, $1.pchars); /*18533*/
							var _6Y = $a(); /*18533*/
							var _6Z = $k[--$j]; /*18533*/
							$put($k[--$j], _6Z, _6Y); /*18533*/
						} /*18533*/
					} /*18533*/
				} /*18533*/
				$1.numbytes = 0; /*18539*/
				$forall($get($1.nxtseq, $1.B), function() {
					/*18542*/
					if ($k[--$j] == $1.sb) {
						/*18541*/
						$k[$j++] = 0; /*18541*/
					} else {
						/*18541*/
						$k[$j++] = $1.numbytes + 1; /*18541*/
					} /*18541*/
					$1.numbytes = $k[--$j]; /*18541*/
				}); /*18541*/
				if ($1.numbytes == 32) { //no-else/*18543*/
					$put($1.nxtlen, $1.B, $get($1.nxtlen, $1.B) + 11); /*18543*/
				} /*18543*/
				$1.curlen = $1.nxtlen; /*18545*/
				$1.curseq = $1.nxtseq; /*18546*/
				$1.lastchar = $1.char; /*18547*/
			}); /*18547*/
			$1.minseq = $1.e; /*18552*/
			var _6y = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); /*18553*/
			for (var _6z = 0, _70 = _6y.length; _6z < _70; _6z++) {
				/*18559*/
				$1.i = $get(_6y, _6z); /*18554*/
				if ($get($1.curlen, $1.i) < $1.minseq) { //no-else/*18558*/
					$1.minseq = $get($1.curlen, $1.i); /*18556*/
					$1.seq = $get($1.curseq, $1.i); /*18557*/
				} /*18557*/
			} /*18557*/
			$1.tobin = function() {
				var _7D = $s($k[--$j]); /*18563*/
				$k[$j++] = _7D; /*18563*/
				for (var _7F = 0, _7E = _7D.length - 1; _7F <= _7E; _7F += 1) {
					/*18563*/
					var _7G = $k[--$j]; /*18563*/
					$put(_7G, _7F, 48); /*18563*/
					$k[$j++] = _7G; /*18563*/
				} /*18563*/
				var _7H = $k[--$j]; /*18564*/
				var _7K = $cvrs($s(_7H.length), $k[--$j], 2); /*18564*/
				$puti(_7H, _7H.length - _7K.length, _7K); /*18564*/
				$k[$j++] = _7H; /*18564*/
			}; /*18565*/
			$1.encu = function() {
				var _7P = $get($get($1.charvals, $1.U), $k[--$j]); /*18566*/
				$k[$j++] = _7P; /*18566*/
				$k[$j++] = 5; /*18566*/
				$1.tobin(); /*18566*/
			}; /*18566*/
			$1.encl = function() {
				var _7U = $get($get($1.charvals, $1.L), $k[--$j]); /*18567*/
				$k[$j++] = _7U; /*18567*/
				$k[$j++] = 5; /*18567*/
				$1.tobin(); /*18567*/
			}; /*18567*/
			$1.encm = function() {
				var _7Z = $get($get($1.charvals, $1.M), $k[--$j]); /*18568*/
				$k[$j++] = _7Z; /*18568*/
				$k[$j++] = 5; /*18568*/
				$1.tobin(); /*18568*/
			}; /*18568*/
			$1.encp = function() {
				var _7e = $get($get($1.charvals, $1.P), $k[--$j]); /*18569*/
				$k[$j++] = _7e; /*18569*/
				$k[$j++] = 5; /*18569*/
				$1.tobin(); /*18569*/
			}; /*18569*/
			$1.encd = function() {
				var _7j = $get($get($1.charvals, $1.D), $k[--$j]); /*18570*/
				$k[$j++] = _7j; /*18570*/
				$k[$j++] = 4; /*18570*/
				$1.tobin(); /*18570*/
			}; /*18570*/
			$1.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); /*18571*/
			$1.addtomsgbits = function() {
				$1.v = $k[--$j]; /*18573*/
				$puti($1.msgbits, $1.j, $1.v); /*18574*/
				$1.j = $1.j + $1.v.length; /*18575*/
			}; /*18576*/
			$1.state = $1.U; /*18579*/
			$1.msgbits = $s($1.minseq); /*18580*/
			$1.i = 0; /*18581*/
			$1.j = 0; /*18581*/
			for (;;) {
				/*18640*/
				if ($1.i >= $1.seq.length) { //no-else/*18582*/
					break; /*18582*/
				} /*18582*/
				if ($1.state != $1.B) {
					/*18635*/
					$1.char = $get($1.seq, $1.i); /*18586*/
					$k[$j++] = $1.char; /*18589*/
					$1[$get($1.encfuncs, $1.state)](); /*18589*/
					$1.addtomsgbits(); /*18589*/
					$1.i = $1.i + 1; /*18590*/
					if (($1.char == $1.su) || ($1.char == $1.sp)) { //no-else/*18596*/
						$k[$j++] = $get($1.seq, $1.i); /*18594*/
						if ($1.char == $1.su) {
							/*18594*/
							$1.encu(); /*18594*/
						} else {
							/*18594*/
							$1.encp(); /*18594*/
						} /*18594*/
						$1.addtomsgbits(); /*18594*/
						$1.i = $1.i + 1; /*18595*/
					} /*18595*/
					if ($1.char == $1.lu) { //no-else/*18599*/
						$1.state = $1.U; /*18599*/
					} /*18599*/
					if ($1.char == $1.ll) { //no-else/*18600*/
						$1.state = $1.L; /*18600*/
					} /*18600*/
					if ($1.char == $1.lm) { //no-else/*18601*/
						$1.state = $1.M; /*18601*/
					} /*18601*/
					if ($1.char == $1.lp) { //no-else/*18602*/
						$1.state = $1.P; /*18602*/
					} /*18602*/
					if ($1.char == $1.ld) { //no-else/*18603*/
						$1.state = $1.D; /*18603*/
					} /*18603*/
					if ($1.char == $1.sb) { //no-else/*18604*/
						$1.state = $1.B; /*18604*/
					} /*18604*/
				} else {
					/*18635*/
					$1.numbytes = 0; /*18609*/
					for (;;) {
						/*18613*/
						if (($1.i + $1.numbytes) >= $1.seq.length) { //no-else/*18610*/
							break; /*18610*/
						} /*18610*/
						if ($get($1.seq, $1.i + $1.numbytes) < 0) { //no-else/*18611*/
							break; /*18611*/
						} /*18611*/
						$1.numbytes = $1.numbytes + 1; /*18612*/
					} /*18612*/
					if ($1.numbytes <= 31) {
						/*18620*/
						$k[$j++] = $1.numbytes; /*18617*/
						$k[$j++] = 5; /*18617*/
						$1.tobin(); /*18617*/
						$1.addtomsgbits(); /*18617*/
					} else {
						/*18620*/
						$k[$j++] = 0; /*18619*/
						$k[$j++] = 5; /*18619*/
						$1.tobin(); /*18619*/
						$1.addtomsgbits(); /*18619*/
						$k[$j++] = $1.numbytes - 31; /*18620*/
						$k[$j++] = 11; /*18620*/
						$1.tobin(); /*18620*/
						$1.addtomsgbits(); /*18620*/
					} /*18620*/
					for (var _8l = 0, _8m = $1.numbytes; _8l < _8m; _8l++) {
						/*18627*/
						$k[$j++] = $get($1.seq, $1.i); /*18625*/
						$k[$j++] = 8; /*18625*/
						$1.tobin(); /*18625*/
						$1.addtomsgbits(); /*18625*/
						$1.i = $1.i + 1; /*18626*/
					} /*18626*/
					if ($1.i < $1.seq.length) { //no-else/*18636*/
						$1.char = $get($1.seq, $1.i); /*18631*/
						$1.i = $1.i + 1; /*18632*/
						if ($1.char == $1.lu) { //no-else/*18633*/
							$1.state = $1.U; /*18633*/
						} /*18633*/
						if ($1.char == $1.ll) { //no-else/*18634*/
							$1.state = $1.L; /*18634*/
						} /*18634*/
						if ($1.char == $1.lm) { //no-else/*18635*/
							$1.state = $1.M; /*18635*/
						} /*18635*/
					} /*18635*/
				} /*18635*/
			} /*18635*/
		} /*18635*/
		$1.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); /*18659*/
		$1.i = 0; /*18661*/
		for (;;) {
			/*18679*/
			$1.m = $get($1.metrics, $1.i); /*18663*/
			$1.frmt = $get($1.m, 0); /*18664*/
			$1.mlyr = $get($1.m, 1); /*18665*/
			$1.icap = $get($1.m, 2); /*18666*/
			$1.ncws = $get($1.m, 3); /*18667*/
			$1.bpcw = $get($1.m, 4); /*18668*/
			$1.numecw = ~~(Math.ceil((($1.ncws * $1.eclevel) / 100) + $1.ecaddchars)); /*18669*/
			if ($1.msgbits.length == 0) { //no-else/*18670*/
				$1.numecw = 0; /*18670*/
			} /*18670*/
			$1.numdcw = $1.ncws - $1.numecw; /*18671*/
			$1.okay = true; /*18672*/
			if ($ne($1.format, "unset") && $ne($1.format, $1.frmt)) { //no-else/*18673*/
				$1.okay = false; /*18673*/
			} /*18673*/
			if ($1.readerinit && ($1.icap != 1)) { //no-else/*18674*/
				$1.okay = false; /*18674*/
			} /*18674*/
			if (($1.layers != -1) && ($1.layers != $1.mlyr)) { //no-else/*18675*/
				$1.okay = false; /*18675*/
			} /*18675*/
			if ((~~Math.ceil($1.msgbits.length / $1.bpcw)) > $1.numdcw) { //no-else/*18676*/
				$1.okay = false; /*18676*/
			} /*18676*/
			if ($1.okay) { //no-else/*18677*/
				break; /*18677*/
			} /*18677*/
			$1.i = $1.i + 1; /*18678*/
		} /*18678*/
		$1.layers = $1.mlyr; /*18680*/
		$1.format = $1.frmt; /*18681*/
		$1.allzero = function() {
			var _AG = $k[--$j]; /*18684*/
			$k[$j++] = $eq(_AG, $geti("000000000000", 0, _AG.length)); /*18684*/
		}; /*18684*/
		$1.allones = function() {
			var _AI = $k[--$j]; /*18685*/
			$k[$j++] = $eq(_AI, $geti("111111111111", 0, _AI.length)); /*18685*/
		}; /*18685*/
		$1.cws = $a($1.ncws); /*18686*/
		$1.m = 0; /*18687*/
		$1.c = 0; /*18687*/
		for (;;) {
			/*18714*/
			if ($1.msgbits.length <= $1.m) { //no-else/*18689*/
				break; /*18689*/
			} /*18689*/
			if (($1.msgbits.length - $1.m) >= $1.bpcw) {
				/*18703*/
				$1.cwb = $geti($1.msgbits, $1.m, $1.bpcw - 1); /*18691*/
				$1.cwf = $geti($1.msgbits, ($1.m + $1.bpcw) - 1, 1); /*18692*/
				$k[$j++] = $1.cwb; /*18693*/
				$1.allzero(); /*18693*/
				if ($k[--$j]) { //no-else/*18693*/
					$1.cwf = "1"; /*18693*/
					$1.m = $1.m - 1; /*18693*/
				} /*18693*/
				$k[$j++] = $1.cwb; /*18694*/
				$1.allones(); /*18694*/
				if ($k[--$j]) { //no-else/*18694*/
					$1.cwf = "0"; /*18694*/
					$1.m = $1.m - 1; /*18694*/
				} /*18694*/
				var _Af = $s(12); /*18696*/
				$puti(_Af, 0, $1.cwb); /*18696*/
				$puti(_Af, $1.bpcw - 1, $1.cwf); /*18697*/
				$1.cwb = $geti(_Af, 0, $1.bpcw); /*18699*/
			} else {
				/*18703*/
				$1.cwb = $geti($1.msgbits, $1.m, $1.msgbits.length - $1.m); /*18701*/
				var _Ar = $strcpy($s(12), "111111111111"); /*18702*/
				$puti(_Ar, 0, $1.cwb); /*18702*/
				$1.cwb = $geti(_Ar, 0, $1.bpcw); /*18702*/
				$k[$j++] = $1.cwb; /*18703*/
				$1.allones(); /*18703*/
				if ($k[--$j]) { //no-else/*18703*/
					$puti($1.cwb, $1.cwb.length - 1, "0"); /*18703*/
				} /*18703*/
			} /*18703*/
			$1.cw = 0; /*18706*/
			for (var _B1 = 0, _B0 = $1.bpcw - 1; _B1 <= _B0; _B1 += 1) {
				/*18710*/
				$1.i = _B1; /*18708*/
				$1.cw = $1.cw + ((~~(Math.pow(2, ($1.bpcw - $1.i) - 1))) * ($get($1.cwb, $1.i) - 48)); /*18709*/
			} /*18709*/
			$put($1.cws, $1.c, $1.cw); /*18711*/
			$1.m = $1.m + $1.bpcw; /*18712*/
			$1.c = $1.c + 1; /*18713*/
		} /*18713*/
		$1.cws = $geti($1.cws, 0, $1.c); /*18715*/
		$1.rscodes = function() {
			$1.rspm = $k[--$j]; /*18720*/
			$1.rsgf = $k[--$j]; /*18721*/
			$1.rsnc = $k[--$j]; /*18722*/
			$1.rscws = $k[--$j]; /*18723*/
			$k[$j++] = Infinity; /*18726*/
			$k[$j++] = 1; /*18726*/
			for (var _BM = 0, _BN = $1.rsgf - 1; _BM < _BN; _BM++) {
				/*18726*/
				var _BO = $k[--$j]; /*18726*/
				var _BP = _BO * 2; /*18726*/
				$k[$j++] = _BO; /*18726*/
				$k[$j++] = _BP; /*18726*/
				if (_BP >= $1.rsgf) { //no-else/*18726*/
					var _BS = $k[--$j]; /*18726*/
					$k[$j++] = $xo(_BS, $1.rspm); /*18726*/
				} /*18726*/
			} /*18726*/
			$1.rsalog = $a(); /*18726*/
			$1.rslog = $a($1.rsgf); /*18727*/
			for (var _BY = 1, _BX = $1.rsgf - 1; _BY <= _BX; _BY += 1) {
				/*18728*/
				$put($1.rslog, $get($1.rsalog, _BY), _BY); /*18728*/
			} /*18728*/
			$1.rsprod = function() {
				var _Bc = $k[--$j]; /*18732*/
				var _Bd = $k[--$j]; /*18732*/
				$k[$j++] = _Bd; /*18736*/
				$k[$j++] = _Bc; /*18736*/
				if ((_Bc != 0) && (_Bd != 0)) {
					/*18735*/
					var _Bg = $get($1.rslog, $k[--$j]); /*18733*/
					var _Bm = $get($1.rsalog, (_Bg + $get($1.rslog, $k[--$j])) % ($1.rsgf - 1)); /*18733*/
					$k[$j++] = _Bm; /*18733*/
				} else {
					/*18735*/
					$j -= 2; /*18735*/
					$k[$j++] = 0; /*18735*/
				} /*18735*/
			}; /*18737*/
			$k[$j++] = Infinity; /*18740*/
			$k[$j++] = 1; /*18740*/
			for (var _Bo = 0, _Bp = $1.rsnc; _Bo < _Bp; _Bo++) {
				/*18740*/
				$k[$j++] = 0; /*18740*/
			} /*18740*/
			$1.coeffs = $a(); /*18740*/
			for (var _Bt = 1, _Bs = $1.rsnc; _Bt <= _Bs; _Bt += 1) {
				/*18749*/
				$1.i = _Bt; /*18742*/
				$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*18743*/
				for (var _C0 = $1.i - 1; _C0 >= 1; _C0 -= 1) {
					/*18747*/
					$1.j = _C0; /*18745*/
					$k[$j++] = $1.coeffs; /*18746*/
					$k[$j++] = $1.j; /*18746*/
					$k[$j++] = $get($1.coeffs, $1.j - 1); /*18746*/
					$k[$j++] = $get($1.coeffs, $1.j); /*18746*/
					$k[$j++] = $get($1.rsalog, $1.i); /*18746*/
					$1.rsprod(); /*18746*/
					var _CC = $k[--$j]; /*18746*/
					var _CD = $k[--$j]; /*18746*/
					var _CE = $k[--$j]; /*18746*/
					$put($k[--$j], _CE, $xo(_CD, _CC)); /*18746*/
				} /*18746*/
				$k[$j++] = $1.coeffs; /*18748*/
				$k[$j++] = 0; /*18748*/
				$k[$j++] = $get($1.coeffs, 0); /*18748*/
				$k[$j++] = $get($1.rsalog, $1.i); /*18748*/
				$1.rsprod(); /*18748*/
				var _CM = $k[--$j]; /*18748*/
				var _CN = $k[--$j]; /*18748*/
				$put($k[--$j], _CN, _CM); /*18748*/
			} /*18748*/
			$1.nd = $1.rscws.length; /*18752*/
			$k[$j++] = Infinity; /*18753*/
			$forall($1.rscws); /*18753*/
			for (var _CS = 0, _CT = $1.rsnc; _CS < _CT; _CS++) {
				/*18753*/
				$k[$j++] = 0; /*18753*/
			} /*18753*/
			$k[$j++] = 0; /*18753*/
			$1.rscws = $a(); /*18753*/
			for (var _CX = 0, _CW = $1.nd - 1; _CX <= _CW; _CX += 1) {
				/*18760*/
				$1.k = $xo($get($1.rscws, _CX), $get($1.rscws, $1.nd)); /*18755*/
				for (var _Cf = 0, _Ce = $1.rsnc - 1; _Cf <= _Ce; _Cf += 1) {
					/*18759*/
					$1.j = _Cf; /*18757*/
					$k[$j++] = $1.rscws; /*18758*/
					$k[$j++] = $1.nd + $1.j; /*18758*/
					$k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); /*18758*/
					$k[$j++] = $1.k; /*18758*/
					$k[$j++] = $get($1.coeffs, ($1.rsnc - $1.j) - 1); /*18758*/
					$1.rsprod(); /*18758*/
					var _Cs = $k[--$j]; /*18758*/
					var _Ct = $k[--$j]; /*18758*/
					var _Cu = $k[--$j]; /*18758*/
					$put($k[--$j], _Cu, $xo(_Ct, _Cs)); /*18758*/
				} /*18758*/
			} /*18758*/
			$k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); /*18763*/
		}; /*18765*/
		if ($eq($1.format, "full")) { //no-else/*18778*/
			$1.mode = (($1.layers - 1) << 11) + ($1.cws.length - 1); /*18769*/
			if ($1.readerinit) { //no-else/*18770*/
				$1.mode = $1.mode | 1024; /*18770*/
			} /*18770*/
			$1.mode = $a([($1.mode & 61440) >>> 12, ($1.mode & 3840) >>> 8, ($1.mode & 240) >>> 4, $1.mode & 15]); /*18776*/
			$k[$j++] = 'mode'; /*18777*/
			$k[$j++] = $1.mode; /*18777*/
			$k[$j++] = 6; /*18777*/
			$k[$j++] = 16; /*18777*/
			$k[$j++] = 19; /*18777*/
			$1.rscodes(); /*18777*/
			var _DA = $k[--$j]; /*18777*/
			$1[$k[--$j]] = _DA; /*18777*/
		} /*18777*/
		if ($eq($1.format, "compact")) { //no-else/*18787*/
			$1.mode = (($1.layers - 1) << 6) + ($1.cws.length - 1); /*18780*/
			if ($1.readerinit) { //no-else/*18781*/
				$1.mode = $1.mode | 32; /*18781*/
			} /*18781*/
			$1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); /*18785*/
			$k[$j++] = 'mode'; /*18786*/
			$k[$j++] = $1.mode; /*18786*/
			$k[$j++] = 5; /*18786*/
			$k[$j++] = 16; /*18786*/
			$k[$j++] = 19; /*18786*/
			$1.rscodes(); /*18786*/
			var _DL = $k[--$j]; /*18786*/
			$1[$k[--$j]] = _DL; /*18786*/
		} /*18786*/
		if ($eq($1.format, "rune")) { //no-else/*18796*/
			$1.mode = ~~$z($1.barcode); /*18789*/
			$1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); /*18793*/
			$k[$j++] = 'mode'; /*18794*/
			$k[$j++] = $1.mode; /*18794*/
			$k[$j++] = 5; /*18794*/
			$k[$j++] = 16; /*18794*/
			$k[$j++] = 19; /*18794*/
			$1.rscodes(); /*18794*/
			var _DT = $k[--$j]; /*18794*/
			$1[$k[--$j]] = _DT; /*18794*/
			$k[$j++] = Infinity; /*18795*/
			var _DV = $1.mode; /*18795*/
			for (var _DW = 0, _DX = _DV.length; _DW < _DX; _DW++) {
				/*18795*/
				$k[$j++] = $get(_DV, _DW) ^ 10; /*18795*/
			} /*18795*/
			$1.mode = $a(); /*18795*/
		} /*18795*/
		$1.modebits = $s($1.mode.length * 4); /*18797*/
		for (var _De = 0, _Dd = $1.modebits.length - 1; _De <= _Dd; _De += 1) {
			/*18798*/
			$puti($1.modebits, _De, "0"); /*18798*/
		} /*18798*/
		for (var _Di = 0, _Dh = $1.mode.length - 1; _Di <= _Dh; _Di += 1) {
			/*18802*/
			$1.i = _Di; /*18800*/
			var _Do = $cvrs($s(4), $get($1.mode, $1.i), 2); /*18801*/
			$puti($1.modebits, (4 - _Do.length) + (4 * $1.i), _Do); /*18801*/
		} /*18801*/
		$1.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); /*18814*/
		$k[$j++] = 'cws'; /*18815*/
		$k[$j++] = $1.cws; /*18815*/
		$k[$j++] = $1.ncws - $1.cws.length; /*18815*/
		$forall($get($1.rsparams, $1.bpcw)); /*18815*/
		$1.rscodes(); /*18815*/
		var _EA = $k[--$j]; /*18815*/
		$1[$k[--$j]] = _EA; /*18815*/
		if ($eq($1.format, "full")) {
			/*18819*/
			$1.databits = $s((($1.layers * $1.layers) * 16) + ($1.layers * 112)); /*18817*/
		} else {
			/*18819*/
			$1.databits = $s((($1.layers * $1.layers) * 16) + ($1.layers * 88)); /*18819*/
		} /*18819*/
		for (var _EN = 0, _EM = $1.databits.length - 1; _EN <= _EM; _EN += 1) {
			/*18821*/
			$puti($1.databits, _EN, "0"); /*18821*/
		} /*18821*/
		for (var _ER = 0, _EQ = $1.ncws - 1; _ER <= _EQ; _ER += 1) {
			/*18827*/
			$1.i = _ER; /*18823*/
			var _EY = $cvrs($s($1.bpcw), $get($1.cws, $1.i), 2); /*18824*/
			$puti($1.databits, (($1.bpcw - _EY.length) + ($1.bpcw * $1.i)) + ($1.databits.length - ($1.ncws * $1.bpcw)), _EY); /*18826*/
		} /*18826*/
		$1.cmv = function() {
			var _Eg = $k[--$j]; /*18830*/
			var _Eh = $k[--$j]; /*18830*/
			$k[$j++] = (_Eh - (_Eg * $1.size)) + $1.mid; /*18830*/
		}; /*18830*/
		$1.lmv = function() {
			$1.lbit = $k[--$j]; /*18834*/
			$1.llyr = $k[--$j]; /*18835*/
			$1.lwid = $1.fw + ($1.llyr * 4); /*18836*/
			$1.ldir = ~~((~~($1.lbit / 2)) / $1.lwid); /*18837*/
			if ($1.ldir == 0) { //no-else/*18842*/
				$k[$j++] = ((-(~~(($1.lwid - 1) / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid); /*18841*/
				$k[$j++] = ((~~(($1.fw - 1) / 2)) + ($1.llyr * 2)) + ($1.lbit % 2); /*18841*/
				$1.cmv(); /*18841*/
			} /*18841*/
			if ($1.ldir == 1) { //no-else/*18847*/
				$k[$j++] = ((~~($1.fw / 2)) + ($1.llyr * 2)) + ($1.lbit % 2); /*18846*/
				$k[$j++] = ((~~(($1.lwid - 1) / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid); /*18846*/
				$1.cmv(); /*18846*/
			} /*18846*/
			if ($1.ldir == 2) { //no-else/*18852*/
				$k[$j++] = -(((-(~~($1.lwid / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid)); /*18851*/
				$k[$j++] = -(((~~($1.fw / 2)) + ($1.llyr * 2)) + ($1.lbit % 2)); /*18851*/
				$1.cmv(); /*18851*/
			} /*18851*/
			if ($1.ldir == 3) { //no-else/*18857*/
				$k[$j++] = -(((~~(($1.fw - 1) / 2)) + ($1.llyr * 2)) + ($1.lbit % 2)); /*18856*/
				$k[$j++] = -(((~~($1.lwid / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid)); /*18856*/
				$1.cmv(); /*18856*/
			} /*18856*/
		}; /*18858*/
		if ($eq($1.format, "full")) {
			/*18862*/
			$1.fw = 12; /*18862*/
		} else {
			/*18862*/
			$1.fw = 9; /*18862*/
		} /*18862*/
		$1.size = ($1.fw + ($1.layers * 4)) + 2; /*18863*/
		$k[$j++] = Infinity; /*18864*/
		for (var _FM = 0, _FN = $1.size * $1.size; _FM < _FN; _FM++) {
			/*18864*/
			$k[$j++] = -1; /*18864*/
		} /*18864*/
		$1.pixs = $a(); /*18864*/
		$1.mid = ((~~(($1.size - 1) / 2)) * $1.size) + (~~(($1.size - 1) / 2)); /*18865*/
		$1.i = 0; /*18868*/
		for (var _FU = 1, _FT = $1.layers; _FU <= _FT; _FU += 1) {
			/*18876*/
			$1.layer = _FU; /*18870*/
			for (var _FY = 0, _FX = (($1.fw + ($1.layer * 4)) * 8) - 1; _FY <= _FX; _FY += 1) {
				/*18875*/
				$1.pos = _FY; /*18872*/
				$k[$j++] = $1.pixs; /*18873*/
				$k[$j++] = $1.layer; /*18873*/
				$k[$j++] = $1.pos; /*18873*/
				$1.lmv(); /*18873*/
				var _Fg = $k[--$j]; /*18873*/
				$put($k[--$j], _Fg, $get($1.databits, ($1.databits.length - $1.i) - 1) - 48); /*18873*/
				$1.i = $1.i + 1; /*18874*/
			} /*18874*/
		} /*18874*/
		if ($eq($1.format, "full")) { //no-else/*18903*/
			$1.fw = 13; /*18880*/
			$1.size = (($1.fw + ($1.layers * 4)) + 2) + ((~~((($1.layers + 10.5) / 7.5) - 1)) * 2); /*18881*/
			$1.mid = ~~(($1.size * $1.size) / 2); /*18882*/
			$k[$j++] = Infinity; /*18883*/
			for (var _Fr = 0, _Fs = $1.size * $1.size; _Fr < _Fs; _Fr++) {
				/*18883*/
				$k[$j++] = -2; /*18883*/
			} /*18883*/
			$1.npixs = $a(); /*18883*/
			for (var _Fw = 0, _Fv = ~~($1.size / 2); _Fw <= _Fv; _Fw += 16) {
				/*18893*/
				$1.i = _Fw; /*18885*/
				for (var _Fz = 0, _Fy = $1.size - 1; _Fz <= _Fy; _Fz += 1) {
					/*18892*/
					$1.j = _Fz; /*18887*/
					$k[$j++] = $1.npixs; /*18888*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*18888*/
					$k[$j++] = $1.i; /*18888*/
					$1.cmv(); /*18888*/
					var _G8 = $k[--$j]; /*18888*/
					$puti($k[--$j], _G8, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*18888*/
					$k[$j++] = $1.npixs; /*18889*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*18889*/
					$k[$j++] = -$1.i; /*18889*/
					$1.cmv(); /*18889*/
					var _GI = $k[--$j]; /*18889*/
					$puti($k[--$j], _GI, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*18889*/
					$k[$j++] = $1.npixs; /*18890*/
					$k[$j++] = $1.i; /*18890*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*18890*/
					$1.cmv(); /*18890*/
					var _GS = $k[--$j]; /*18890*/
					$puti($k[--$j], _GS, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*18890*/
					$k[$j++] = $1.npixs; /*18891*/
					$k[$j++] = -$1.i; /*18891*/
					$k[$j++] = (-(~~($1.size / 2))) + $1.j; /*18891*/
					$1.cmv(); /*18891*/
					var _Gc = $k[--$j]; /*18891*/
					$puti($k[--$j], _Gc, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); /*18891*/
				} /*18891*/
			} /*18891*/
			$1.j = 0; /*18894*/
			for (var _Gg = 0, _Gf = $1.npixs.length - 1; _Gg <= _Gf; _Gg += 1) {
				/*18901*/
				$1.i = _Gg; /*18896*/
				if ($get($1.npixs, $1.i) == -2) { //no-else/*18900*/
					$put($1.npixs, $1.i, $get($1.pixs, $1.j)); /*18898*/
					$1.j = $1.j + 1; /*18899*/
				} /*18899*/
			} /*18899*/
			$1.pixs = $1.npixs; /*18902*/
		} /*18902*/
		$1.fw = ~~($1.fw / 2); /*18906*/
		for (var _Gv = -$1.fw, _Gu = $1.fw; _Gv <= _Gu; _Gv += 1) {
			/*18915*/
			$1.i = _Gv; /*18908*/
			for (var _Gz = -$1.fw, _Gy = $1.fw; _Gz <= _Gy; _Gz += 1) {
				/*18914*/
				$1.j = _Gz; /*18910*/
				$k[$j++] = $1.pixs; /*18911*/
				$k[$j++] = $1.i; /*18911*/
				$k[$j++] = $1.j; /*18911*/
				$1.cmv(); /*18911*/
				if (Math.abs($1.i) > Math.abs($1.j)) {
					/*18912*/
					$k[$j++] = Math.abs($1.i); /*18912*/
				} else {
					/*18912*/
					$k[$j++] = Math.abs($1.j); /*18912*/
				} /*18912*/
				var _H7 = $k[--$j]; /*18912*/
				var _H8 = $k[--$j]; /*18913*/
				$put($k[--$j], _H8, (_H7 + 1) % 2); /*18913*/
			} /*18913*/
		} /*18913*/
		var _Hk = $a([$a([-($1.fw + 1), $1.fw, 1]), $a([-($1.fw + 1), $1.fw + 1, 1]), $a([-$1.fw, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw, 1]), $a([$1.fw + 1, -$1.fw, 1]), $a([$1.fw, $1.fw + 1, 0]), $a([$1.fw + 1, -($1.fw + 1), 0]), $a([$1.fw, -($1.fw + 1), 0]), $a([-$1.fw, -($1.fw + 1), 0]), $a([-($1.fw + 1), -($1.fw + 1), 0]), $a([-($1.fw + 1), -$1.fw, 0])]); /*18923*/
		for (var _Hl = 0, _Hm = _Hk.length; _Hl < _Hm; _Hl++) {
			/*18924*/
			$k[$j++] = $1.pixs; /*18924*/
			$forall($get(_Hk, _Hl)); /*18924*/
			var _Hp = $k[--$j]; /*18924*/
			var _Hq = $k[--$j]; /*18924*/
			var _Hr = $k[--$j]; /*18924*/
			$k[$j++] = _Hp; /*18924*/
			$k[$j++] = _Hr; /*18924*/
			$k[$j++] = _Hq; /*18924*/
			$1.cmv(); /*18924*/
			var _Hs = $k[--$j]; /*18924*/
			var _Ht = $k[--$j]; /*18924*/
			$put($k[--$j], _Hs, _Ht); /*18924*/
		} /*18924*/
		if ($eq($1.format, "full")) {
			/*18940*/
			$1.modemap = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); /*18933*/
		} else {
			/*18940*/
			$1.modemap = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); /*18940*/
		} /*18940*/
		for (var _J6 = 0, _J5 = $1.modemap.length - 1; _J6 <= _J5; _J6 += 1) {
			/*18945*/
			$1.i = _J6; /*18943*/
			$k[$j++] = $1.pixs; /*18944*/
			$forall($get($1.modemap, $1.i)); /*18944*/
			$1.cmv(); /*18944*/
			var _JE = $k[--$j]; /*18944*/
			$put($k[--$j], _JE, $get($1.modebits, $1.i) - 48); /*18944*/
		} /*18944*/
		var _JM = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.size],
			["pixy", $1.size],
			["height", ($1.size * 2) / 72],
			["width", ($1.size * 2) / 72],
			["opt", $1.options]
		]); /*18954*/
		$k[$j++] = _JM; /*18957*/
		if (!$1.dontdraw) { //no-else/*18957*/
			$0.renmatrix(); /*18957*/
		} /*18957*/
	};
	$0.azteccodecompact = function() {
		var $1 = {}; /*18987*/
		$1.options = $k[--$j]; /*18989*/
		$1.barcode = $k[--$j]; /*18990*/
		$1.dontdraw = false; /*18992*/
		$forall($1.options, function() {
			/*19003*/
			var _3 = $k[--$j]; /*19003*/
			$1[$k[--$j]] = _3; /*19003*/
		}); /*19003*/
		$put($1.options, "dontdraw", true); /*19006*/
		$put($1.options, "format", "compact"); /*19007*/
		$k[$j++] = 'args'; /*19009*/
		$k[$j++] = $1.barcode; /*19009*/
		$k[$j++] = $1.options; /*19009*/
		$0.azteccode(); /*19009*/
		var _9 = $k[--$j]; /*19009*/
		$1[$k[--$j]] = _9; /*19009*/
		$put($1.args, "opt", $1.options); /*19011*/
		$k[$j++] = $1.args; /*19014*/
		if (!$1.dontdraw) { //no-else/*19014*/
			$0.renmatrix(); /*19014*/
		} /*19014*/
	};
	$0.aztecrune = function() {
		var $1 = {}; /*19044*/
		$1.options = $k[--$j]; /*19046*/
		$1.barcode = $k[--$j]; /*19047*/
		$1.dontdraw = false; /*19049*/
		$forall($1.options, function() {
			/*19060*/
			var _3 = $k[--$j]; /*19060*/
			$1[$k[--$j]] = _3; /*19060*/
		}); /*19060*/
		$put($1.options, "dontdraw", true); /*19063*/
		$put($1.options, "format", "rune"); /*19064*/
		$k[$j++] = 'args'; /*19066*/
		$k[$j++] = $1.barcode; /*19066*/
		$k[$j++] = $1.options; /*19066*/
		$0.azteccode(); /*19066*/
		var _9 = $k[--$j]; /*19066*/
		$1[$k[--$j]] = _9; /*19066*/
		$put($1.args, "opt", $1.options); /*19068*/
		$k[$j++] = $1.args; /*19071*/
		if (!$1.dontdraw) { //no-else/*19071*/
			$0.renmatrix(); /*19071*/
		} /*19071*/
	};
	$0.codeone = function() {
		var $1 = {}; /*19100*/
		$1.options = $k[--$j]; /*19102*/
		$1.barcode = $k[--$j]; /*19103*/
		$1.dontdraw = false; /*19105*/
		$1.version = "unset"; /*19106*/
		$1.parse = false; /*19107*/
		$1.parsefnc = false; /*19108*/
		$forall($1.options, function() {
			/*19119*/
			var _3 = $k[--$j]; /*19119*/
			$1[$k[--$j]] = _3; /*19119*/
		}); /*19119*/
		$1.barlen = $1.barcode.length; /*19142*/
		$1.stype = $eq($geti($1.version, 0, 1), "S"); /*19144*/
		if ($1.stype) {
			/*19734*/
			$1.vals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); /*19166*/
			$1.normalize = function() {
				$1.base = $k[--$j]; /*19169*/
				$1.num = $k[--$j]; /*19170*/
				for (var _D = $1.num.length - 1; _D >= 1; _D -= 1) {
					/*19175*/
					$1.i = _D; /*19172*/
					var _E = $1.num; /*19173*/
					var _F = $1.i; /*19173*/
					$put(_E, _F - 1, $get(_E, _F - 1) + (~~($get($1.num, $1.i) / $1.base))); /*19173*/
					$put($1.num, $1.i, $get($1.num, $1.i) % $1.base); /*19174*/
				} /*19174*/
				for (;;) {
					/*19181*/
					if ($lt($get($1.num, 0), $1.base)) { //no-else/*19177*/
						break; /*19177*/
					} /*19177*/
					$k[$j++] = Infinity; /*19178*/
					$k[$j++] = 0; /*19178*/
					$forall($1.num); /*19178*/
					$1.num = $a(); /*19178*/
					$put($1.num, 0, $get($1.num, 0) + (~~($get($1.num, 1) / $1.base))); /*19179*/
					$put($1.num, 1, $get($1.num, 1) % $1.base); /*19180*/
				} /*19180*/
				$k[$j++] = Infinity; /*19183*/
				$1.i = true; /*19183*/
				var _g = $1.num; /*19183*/
				for (var _h = 0, _i = _g.length; _h < _i; _h++) {
					/*19183*/
					var _j = $get(_g, _h); /*19183*/
					$k[$j++] = _j; /*19183*/
					if ((_j == 0) && $1.i) {
						/*19183*/
						$j--; /*19183*/
					} else {
						/*19183*/
						$1.i = false; /*19183*/
					} /*19183*/
				} /*19183*/
				$1.num = $a(); /*19183*/
				if ($1.num.length == 0) { //no-else/*19184*/
					$1.num = $a([0]); /*19184*/
				} /*19184*/
				$k[$j++] = $1.num; /*19185*/
			}; /*19186*/
			$1.bigadd = function() {
				var _p = $k[--$j]; /*19189*/
				var _q = $k[--$j]; /*19189*/
				$1.offset = Math.abs(_p.length - _q.length); /*19190*/
				if (_p.length < _q.length) { //no-else/*19191*/
					var _ = _p; /*19191*/
					_p = _q; /*19191*/
					_q = _; /*19191*/
				} /*19191*/
				$1.a = _p; /*19192*/
				$1.b = _q; /*19192*/
				for (var _t = 0, _s = $1.b.length - 1; _t <= _s; _t += 1) {
					/*19195*/
					var _u = $1.a; /*19194*/
					var _v = $1.offset; /*19194*/
					$put(_u, _t + _v, $get(_u, _t + _v) + $get($1.b, _t)); /*19194*/
				} /*19194*/
				$k[$j++] = $1.a; /*19196*/
			}; /*19197*/
			$1.v = $a([1]); /*19200*/
			for (var _13 = 0, _12 = $1.barlen - 1; _13 <= _12; _13 += 1) {
				/*19205*/
				$1.i = _13; /*19202*/
				$k[$j++] = Infinity; /*19203*/
				$forall($get($1.vals, $1.i), function() {
					/*19203*/
					var _17 = $k[--$j]; /*19203*/
					$k[$j++] = (_17 - 48) * ($get($1.barcode, ($1.barlen - $1.i) - 1) - 48); /*19203*/
				}); /*19203*/
				var _1C = $a(); /*19203*/
				$k[$j++] = _1C; /*19204*/
				$k[$j++] = $1.v; /*19204*/
				$1.bigadd(); /*19204*/
				$1.v = $k[--$j]; /*19204*/
			} /*19204*/
			$k[$j++] = 'v'; /*19206*/
			$k[$j++] = $1.v; /*19206*/
			$k[$j++] = 2; /*19206*/
			$1.normalize(); /*19206*/
			var _1G = $k[--$j]; /*19206*/
			$1[$k[--$j]] = _1G; /*19206*/
			$k[$j++] = Infinity; /*19209*/
			for (var _1J = 0, _1K = (5 - ($1.v.length % 5)) % 5; _1J < _1K; _1J++) {
				/*19209*/
				$k[$j++] = 0; /*19209*/
			} /*19209*/
			$aload($1.v); /*19209*/
			$1.v = $a(); /*19209*/
			$1.cws = $a(~~($1.v.length / 5)); /*19210*/
			for (var _1R = 0, _1Q = $1.cws.length - 1; _1R <= _1Q; _1R += 1) {
				/*19216*/
				$1.i = _1R; /*19212*/
				$k[$j++] = 0; /*19214*/
				$forall($geti($1.v, $1.i * 5, 5), function() {
					/*19214*/
					var _1V = $k[--$j]; /*19214*/
					var _1W = $k[--$j]; /*19214*/
					$k[$j++] = (_1W + _1V) * 2; /*19214*/
				}); /*19214*/
				$put($1.cws, $1.i, ~~($k[--$j] / 2)); /*19215*/
			} /*19215*/
			$1.metrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); /*19224*/
		} else {
			/*19734*/
			$1.fnc1 = -1; /*19229*/
			$1.fnc3 = -2; /*19229*/
			var _1g = new Map([
				["FNC1", $1.fnc1],
				["FNC3", $1.fnc3]
			]); /*19232*/
			$1.fncvals = _1g; /*19233*/
			$1.msg = $a($1.barlen); /*19234*/
			$1.i = 0; /*19235*/
			$1.j = 0; /*19235*/
			for (;;) {
				/*19249*/
				if ($1.i == $1.barlen) { //no-else/*19236*/
					break; /*19236*/
				} /*19236*/
				$1.char = $get($1.barcode, $1.i); /*19237*/
				if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*19245*/
					if ($get($1.barcode, $1.i + 1) != 94) {
						/*19243*/
						$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*19240*/
						$1.i = $1.i + 4; /*19241*/
					} else {
						/*19243*/
						$1.i = $1.i + 1; /*19243*/
					} /*19243*/
				} /*19243*/
				$put($1.msg, $1.j, $1.char); /*19246*/
				$1.i = $1.i + 1; /*19247*/
				$1.j = $1.j + 1; /*19248*/
			} /*19248*/
			$1.msg = $geti($1.msg, 0, $1.j); /*19250*/
			$1.msglen = $1.msg.length; /*19251*/
			$1.metrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); /*19267*/
			$1.fullcws = $a([]); /*19270*/
			var _2O = $1.metrics; /*19271*/
			for (var _2P = 0, _2Q = _2O.length; _2P < _2Q; _2P++) {
				/*19282*/
				$1.m = $get(_2O, _2P); /*19272*/
				$1.vers = $get($1.m, 0); /*19273*/
				$1.dcws = $get($1.m, 4); /*19274*/
				$1.okay = true; /*19275*/
				if ($eq($1.version, "unset")) {
					/*19279*/
					if ($1.vers.length != 1) { //no-else/*19277*/
						$1.okay = false; /*19277*/
					} /*19277*/
				} else {
					/*19279*/
					if ($ne($1.version, $1.vers)) { //no-else/*19279*/
						$1.okay = false; /*19279*/
					} /*19279*/
				} /*19279*/
				if ($1.okay) { //no-else/*19281*/
					$k[$j++] = Infinity; /*19281*/
					$aload($1.fullcws); /*19281*/
					$k[$j++] = $1.dcws; /*19281*/
					$1.fullcws = $a(); /*19281*/
				} /*19281*/
			} /*19281*/
			$k[$j++] = Infinity; /*19283*/
			for (var _2e = 0, _2f = 1480; _2e < _2f; _2e++) {
				/*19283*/
				$k[$j++] = 10000; /*19283*/
			} /*19283*/
			$1.numremcws = $a(); /*19283*/
			var _2h = $1.fullcws; /*19284*/
			for (var _2i = 0, _2j = _2h.length; _2i < _2j; _2i++) {
				/*19284*/
				$put($1.numremcws, $get(_2h, _2i) - 1, 1); /*19284*/
			} /*19284*/
			for (var _2m = 1478; _2m >= 0; _2m -= 1) {
				/*19290*/
				$1.i = _2m; /*19286*/
				if ($get($1.numremcws, $1.i) != 1) { //no-else/*19289*/
					$put($1.numremcws, $1.i, $get($1.numremcws, $1.i + 1) + 1); /*19288*/
				} /*19288*/
			} /*19288*/
			$1.lC = -5; /*19293*/
			$1.lB = -6; /*19293*/
			$1.lX = -7; /*19293*/
			$1.lT = -8; /*19293*/
			$1.lD = -9; /*19293*/
			$1.unl = -10; /*19293*/
			$1.fnc2 = -11; /*19294*/
			$1.fnc4 = -12; /*19294*/
			$1.sft1 = -13; /*19294*/
			$1.sft2 = -14; /*19294*/
			$1.sft3 = -15; /*19294*/
			$1.eci = -16; /*19294*/
			$1.pad = -17; /*19294*/
			$1.fnc1lD = -18; /*19294*/
			$1.unlcw = 255; /*19295*/
			$k[$j++] = Infinity; /*19306*/
			for (var _2v = 0; _2v <= 128; _2v += 1) {
				/*19298*/
				$k[$j++] = _2v; /*19298*/
				$k[$j++] = _2v + 1; /*19298*/
			} /*19298*/
			$k[$j++] = $1.pad; /*19303*/
			$k[$j++] = 129; /*19303*/
			for (var _2x = 0; _2x <= 99; _2x += 1) {
				/*19303*/
				var _2z = $cvrs($s(2), _2x, 10); /*19301*/
				var _31 = $strcpy($s(2), "00"); /*19301*/
				$puti(_31, 2 - _2z.length, _2z); /*19301*/
				$k[$j++] = _31; /*19302*/
				$k[$j++] = _2x + 130; /*19302*/
			} /*19302*/
			var _39 = $a([$1.lC, $1.lB, $1.fnc1, $1.fnc2, $1.fnc3, $1.fnc4, $1.fnc1lD]); /*19304*/
			$k[$j++] = 229; /*19304*/
			for (var _3A = 0, _3B = _39.length; _3A < _3B; _3A++) {
				/*19304*/
				var _3E = $k[--$j] + 1; /*19304*/
				$k[$j++] = $get(_39, _3A); /*19304*/
				$k[$j++] = _3E; /*19304*/
				$k[$j++] = _3E; /*19304*/
			} /*19304*/
			$j--; /*19304*/
			$k[$j++] = $1.lX; /*19306*/
			$k[$j++] = 238; /*19306*/
			$k[$j++] = $1.lT; /*19306*/
			$k[$j++] = 239; /*19306*/
			$1.Avals = $d(); /*19308*/
			$k[$j++] = Infinity; /*19310*/
			var _3I = $1.Avals; /*19310*/
			for (var _3N = _3I.size, _3M = _3I.keys(), _3L = 0; _3L < _3N; _3L++) {
				/*19310*/
				var _3J = _3M.next().value; /*19310*/
				$k[$j++] = _3J; /*19310*/
				$k[$j++] = _3I.get(_3J); /*19310*/
				$k[$j++] = Infinity; /*19310*/
				var _3O = $k[--$j]; /*19310*/
				var _3P = $k[--$j]; /*19310*/
				$k[$j++] = _3O; /*19310*/
				$k[$j++] = _3P; /*19310*/
				var _3Q = $a(); /*19310*/
				$k[$j++] = _3Q; /*19310*/
			} /*19310*/
			$1.Avals = $d(); /*19311*/
			$k[$j++] = Infinity; /*19319*/
			$k[$j++] = $1.sft1; /*19318*/
			$k[$j++] = 0; /*19318*/
			$k[$j++] = $1.sft2; /*19318*/
			$k[$j++] = 1; /*19318*/
			$k[$j++] = $1.sft3; /*19318*/
			$k[$j++] = 2; /*19318*/
			$k[$j++] = 32; /*19318*/
			$k[$j++] = 3; /*19318*/
			for (var _3V = 48; _3V <= 57; _3V += 1) {
				/*19318*/
				$k[$j++] = _3V; /*19318*/
				$k[$j++] = _3V - 44; /*19318*/
			} /*19318*/
			for (var _3W = 65; _3W <= 90; _3W += 1) {
				/*19319*/
				$k[$j++] = _3W; /*19319*/
				$k[$j++] = _3W - 51; /*19319*/
			} /*19319*/
			$1.CNvals = $d(); /*19320*/
			$k[$j++] = Infinity; /*19321*/
			for (var _3Y = 0; _3Y <= 31; _3Y += 1) {
				/*19321*/
				$k[$j++] = _3Y; /*19321*/
				$k[$j++] = _3Y; /*19321*/
			} /*19321*/
			$1.C1vals = $d(); /*19321*/
			$k[$j++] = Infinity; /*19330*/
			for (var _3a = 33; _3a <= 47; _3a += 1) {
				/*19323*/
				$k[$j++] = _3a; /*19323*/
				$k[$j++] = _3a - 33; /*19323*/
			} /*19323*/
			for (var _3b = 58; _3b <= 64; _3b += 1) {
				/*19324*/
				$k[$j++] = _3b; /*19324*/
				$k[$j++] = _3b - 43; /*19324*/
			} /*19324*/
			for (var _3c = 91; _3c <= 95; _3c += 1) {
				/*19325*/
				$k[$j++] = _3c; /*19325*/
				$k[$j++] = _3c - 69; /*19325*/
			} /*19325*/
			$k[$j++] = $1.fnc1; /*19330*/
			$k[$j++] = 27; /*19330*/
			$k[$j++] = $1.fnc2; /*19330*/
			$k[$j++] = 28; /*19330*/
			$k[$j++] = $1.fnc3; /*19330*/
			$k[$j++] = 29; /*19330*/
			$k[$j++] = $1.fnc4; /*19330*/
			$k[$j++] = 30; /*19330*/
			$k[$j++] = $1.pad; /*19330*/
			$k[$j++] = 31; /*19330*/
			$1.C2vals = $d(); /*19331*/
			$k[$j++] = Infinity; /*19332*/
			for (var _3j = 96; _3j <= 127; _3j += 1) {
				/*19332*/
				$k[$j++] = _3j; /*19332*/
				$k[$j++] = _3j - 96; /*19332*/
			} /*19332*/
			$1.C3vals = $d(); /*19332*/
			$k[$j++] = Infinity; /*19337*/
			var _3l = $1.CNvals; /*19334*/
			for (var _3q = _3l.size, _3p = _3l.keys(), _3o = 0; _3o < _3q; _3o++) {
				/*19334*/
				var _3m = _3p.next().value; /*19334*/
				$k[$j++] = _3m; /*19334*/
				$k[$j++] = _3l.get(_3m); /*19334*/
				$k[$j++] = Infinity; /*19334*/
				var _3r = $k[--$j]; /*19334*/
				var _3s = $k[--$j]; /*19334*/
				$k[$j++] = _3r; /*19334*/
				$k[$j++] = _3s; /*19334*/
				var _3t = $a(); /*19334*/
				$k[$j++] = _3t; /*19334*/
			} /*19334*/
			var _3u = $1.C1vals; /*19335*/
			for (var _3z = _3u.size, _3y = _3u.keys(), _3x = 0; _3x < _3z; _3x++) {
				/*19335*/
				var _3v = _3y.next().value; /*19335*/
				$k[$j++] = _3v; /*19335*/
				$k[$j++] = _3u.get(_3v); /*19335*/
				$k[$j++] = Infinity; /*19335*/
				var _40 = $k[--$j]; /*19335*/
				var _41 = $k[--$j]; /*19335*/
				$k[$j++] = _40; /*19335*/
				$k[$j++] = $get($1.CNvals, $1.sft1); /*19335*/
				$k[$j++] = _41; /*19335*/
				var _45 = $a(); /*19335*/
				$k[$j++] = _45; /*19335*/
			} /*19335*/
			var _46 = $1.C2vals; /*19336*/
			for (var _4B = _46.size, _4A = _46.keys(), _49 = 0; _49 < _4B; _49++) {
				/*19336*/
				var _47 = _4A.next().value; /*19336*/
				$k[$j++] = _47; /*19336*/
				$k[$j++] = _46.get(_47); /*19336*/
				$k[$j++] = Infinity; /*19336*/
				var _4C = $k[--$j]; /*19336*/
				var _4D = $k[--$j]; /*19336*/
				$k[$j++] = _4C; /*19336*/
				$k[$j++] = $get($1.CNvals, $1.sft2); /*19336*/
				$k[$j++] = _4D; /*19336*/
				var _4H = $a(); /*19336*/
				$k[$j++] = _4H; /*19336*/
			} /*19336*/
			var _4I = $1.C3vals; /*19337*/
			for (var _4N = _4I.size, _4M = _4I.keys(), _4L = 0; _4L < _4N; _4L++) {
				/*19337*/
				var _4J = _4M.next().value; /*19337*/
				$k[$j++] = _4J; /*19337*/
				$k[$j++] = _4I.get(_4J); /*19337*/
				$k[$j++] = Infinity; /*19337*/
				var _4O = $k[--$j]; /*19337*/
				var _4P = $k[--$j]; /*19337*/
				$k[$j++] = _4O; /*19337*/
				$k[$j++] = $get($1.CNvals, $1.sft3); /*19337*/
				$k[$j++] = _4P; /*19337*/
				var _4T = $a(); /*19337*/
				$k[$j++] = _4T; /*19337*/
			} /*19337*/
			$1.Cvals = $d(); /*19338*/
			$k[$j++] = Infinity; /*19346*/
			$k[$j++] = $1.sft1; /*19345*/
			$k[$j++] = 0; /*19345*/
			$k[$j++] = $1.sft2; /*19345*/
			$k[$j++] = 1; /*19345*/
			$k[$j++] = $1.sft3; /*19345*/
			$k[$j++] = 2; /*19345*/
			$k[$j++] = 32; /*19345*/
			$k[$j++] = 3; /*19345*/
			for (var _4Y = 48; _4Y <= 57; _4Y += 1) {
				/*19345*/
				$k[$j++] = _4Y; /*19345*/
				$k[$j++] = _4Y - 44; /*19345*/
			} /*19345*/
			for (var _4Z = 97; _4Z <= 122; _4Z += 1) {
				/*19346*/
				$k[$j++] = _4Z; /*19346*/
				$k[$j++] = _4Z - 83; /*19346*/
			} /*19346*/
			$1.TNvals = $d(); /*19347*/
			$k[$j++] = Infinity; /*19348*/
			for (var _4b = 0; _4b <= 31; _4b += 1) {
				/*19348*/
				$k[$j++] = _4b; /*19348*/
				$k[$j++] = _4b; /*19348*/
			} /*19348*/
			$1.T1vals = $d(); /*19348*/
			$k[$j++] = Infinity; /*19357*/
			for (var _4d = 33; _4d <= 47; _4d += 1) {
				/*19350*/
				$k[$j++] = _4d; /*19350*/
				$k[$j++] = _4d - 33; /*19350*/
			} /*19350*/
			for (var _4e = 58; _4e <= 64; _4e += 1) {
				/*19351*/
				$k[$j++] = _4e; /*19351*/
				$k[$j++] = _4e - 43; /*19351*/
			} /*19351*/
			for (var _4f = 91; _4f <= 95; _4f += 1) {
				/*19352*/
				$k[$j++] = _4f; /*19352*/
				$k[$j++] = _4f - 69; /*19352*/
			} /*19352*/
			$k[$j++] = $1.fnc1; /*19357*/
			$k[$j++] = 27; /*19357*/
			$k[$j++] = $1.fnc2; /*19357*/
			$k[$j++] = 28; /*19357*/
			$k[$j++] = $1.fnc3; /*19357*/
			$k[$j++] = 29; /*19357*/
			$k[$j++] = $1.fnc4; /*19357*/
			$k[$j++] = 30; /*19357*/
			$k[$j++] = $1.pad; /*19357*/
			$k[$j++] = 31; /*19357*/
			$1.T2vals = $d(); /*19358*/
			$k[$j++] = Infinity; /*19362*/
			$k[$j++] = 96; /*19361*/
			$k[$j++] = 0; /*19361*/
			for (var _4m = 65; _4m <= 90; _4m += 1) {
				/*19361*/
				$k[$j++] = _4m; /*19361*/
				$k[$j++] = _4m - 64; /*19361*/
			} /*19361*/
			for (var _4n = 123; _4n <= 127; _4n += 1) {
				/*19362*/
				$k[$j++] = _4n; /*19362*/
				$k[$j++] = _4n - 96; /*19362*/
			} /*19362*/
			$1.T3vals = $d(); /*19363*/
			$k[$j++] = Infinity; /*19368*/
			var _4p = $1.TNvals; /*19365*/
			for (var _4u = _4p.size, _4t = _4p.keys(), _4s = 0; _4s < _4u; _4s++) {
				/*19365*/
				var _4q = _4t.next().value; /*19365*/
				$k[$j++] = _4q; /*19365*/
				$k[$j++] = _4p.get(_4q); /*19365*/
				$k[$j++] = Infinity; /*19365*/
				var _4v = $k[--$j]; /*19365*/
				var _4w = $k[--$j]; /*19365*/
				$k[$j++] = _4v; /*19365*/
				$k[$j++] = _4w; /*19365*/
				var _4x = $a(); /*19365*/
				$k[$j++] = _4x; /*19365*/
			} /*19365*/
			var _4y = $1.T1vals; /*19366*/
			for (var _53 = _4y.size, _52 = _4y.keys(), _51 = 0; _51 < _53; _51++) {
				/*19366*/
				var _4z = _52.next().value; /*19366*/
				$k[$j++] = _4z; /*19366*/
				$k[$j++] = _4y.get(_4z); /*19366*/
				$k[$j++] = Infinity; /*19366*/
				var _54 = $k[--$j]; /*19366*/
				var _55 = $k[--$j]; /*19366*/
				$k[$j++] = _54; /*19366*/
				$k[$j++] = $get($1.TNvals, $1.sft1); /*19366*/
				$k[$j++] = _55; /*19366*/
				var _59 = $a(); /*19366*/
				$k[$j++] = _59; /*19366*/
			} /*19366*/
			var _5A = $1.T2vals; /*19367*/
			for (var _5F = _5A.size, _5E = _5A.keys(), _5D = 0; _5D < _5F; _5D++) {
				/*19367*/
				var _5B = _5E.next().value; /*19367*/
				$k[$j++] = _5B; /*19367*/
				$k[$j++] = _5A.get(_5B); /*19367*/
				$k[$j++] = Infinity; /*19367*/
				var _5G = $k[--$j]; /*19367*/
				var _5H = $k[--$j]; /*19367*/
				$k[$j++] = _5G; /*19367*/
				$k[$j++] = $get($1.TNvals, $1.sft2); /*19367*/
				$k[$j++] = _5H; /*19367*/
				var _5L = $a(); /*19367*/
				$k[$j++] = _5L; /*19367*/
			} /*19367*/
			var _5M = $1.T3vals; /*19368*/
			for (var _5R = _5M.size, _5Q = _5M.keys(), _5P = 0; _5P < _5R; _5P++) {
				/*19368*/
				var _5N = _5Q.next().value; /*19368*/
				$k[$j++] = _5N; /*19368*/
				$k[$j++] = _5M.get(_5N); /*19368*/
				$k[$j++] = Infinity; /*19368*/
				var _5S = $k[--$j]; /*19368*/
				var _5T = $k[--$j]; /*19368*/
				$k[$j++] = _5S; /*19368*/
				$k[$j++] = $get($1.TNvals, $1.sft3); /*19368*/
				$k[$j++] = _5T; /*19368*/
				var _5X = $a(); /*19368*/
				$k[$j++] = _5X; /*19368*/
			} /*19368*/
			$1.Tvals = $d(); /*19369*/
			for (var _5Z = 128; _5Z <= 255; _5Z += 1) {
				/*19377*/
				$1.i = _5Z; /*19373*/
				$k[$j++] = $1.Avals; /*19374*/
				$k[$j++] = $1.i; /*19374*/
				$k[$j++] = Infinity; /*19374*/
				$aload($get($1.Avals, $1.fnc4)); /*19374*/
				$aload($get($1.Avals, $1.i - 128)); /*19374*/
				var _5i = $a(); /*19374*/
				var _5j = $k[--$j]; /*19374*/
				$put($k[--$j], _5j, _5i); /*19374*/
				$k[$j++] = $1.Cvals; /*19375*/
				$k[$j++] = $1.i; /*19375*/
				$k[$j++] = Infinity; /*19375*/
				$aload($get($1.Cvals, $1.fnc4)); /*19375*/
				$aload($get($1.Cvals, $1.i - 128)); /*19375*/
				var _5t = $a(); /*19375*/
				var _5u = $k[--$j]; /*19375*/
				$put($k[--$j], _5u, _5t); /*19375*/
				$k[$j++] = $1.Tvals; /*19376*/
				$k[$j++] = $1.i; /*19376*/
				$k[$j++] = Infinity; /*19376*/
				$aload($get($1.Tvals, $1.fnc4)); /*19376*/
				$aload($get($1.Tvals, $1.i - 128)); /*19376*/
				var _64 = $a(); /*19376*/
				var _65 = $k[--$j]; /*19376*/
				$put($k[--$j], _65, _64); /*19376*/
			} /*19376*/
			$k[$j++] = Infinity; /*19385*/
			$k[$j++] = 13; /*19384*/
			$k[$j++] = 0; /*19384*/
			$k[$j++] = 42; /*19384*/
			$k[$j++] = 1; /*19384*/
			$k[$j++] = 62; /*19384*/
			$k[$j++] = 2; /*19384*/
			$k[$j++] = 32; /*19384*/
			$k[$j++] = 3; /*19384*/
			for (var _67 = 48; _67 <= 57; _67 += 1) {
				/*19384*/
				$k[$j++] = _67; /*19384*/
				$k[$j++] = _67 - 44; /*19384*/
			} /*19384*/
			for (var _68 = 65; _68 <= 90; _68 += 1) {
				/*19385*/
				$k[$j++] = _68; /*19385*/
				$k[$j++] = _68 - 51; /*19385*/
			} /*19385*/
			$1.Xvals = $d(); /*19386*/
			$k[$j++] = Infinity; /*19388*/
			var _6A = $1.Xvals; /*19388*/
			for (var _6F = _6A.size, _6E = _6A.keys(), _6D = 0; _6D < _6F; _6D++) {
				/*19388*/
				var _6B = _6E.next().value; /*19388*/
				$k[$j++] = _6B; /*19388*/
				$k[$j++] = _6A.get(_6B); /*19388*/
				$k[$j++] = Infinity; /*19388*/
				var _6G = $k[--$j]; /*19388*/
				var _6H = $k[--$j]; /*19388*/
				$k[$j++] = _6G; /*19388*/
				$k[$j++] = _6H; /*19388*/
				var _6I = $a(); /*19388*/
				$k[$j++] = _6I; /*19388*/
			} /*19388*/
			$1.Xvals = $d(); /*19389*/
			$k[$j++] = Infinity; /*19392*/
			for (var _6K = 0; _6K <= 255; _6K += 1) {
				/*19392*/
				$k[$j++] = _6K; /*19392*/
				$k[$j++] = _6K; /*19392*/
			} /*19392*/
			$1.Bvals = $d(); /*19393*/
			$k[$j++] = Infinity; /*19395*/
			var _6M = $1.Bvals; /*19395*/
			for (var _6R = _6M.size, _6Q = _6M.keys(), _6P = 0; _6P < _6R; _6P++) {
				/*19395*/
				var _6N = _6Q.next().value; /*19395*/
				$k[$j++] = _6N; /*19395*/
				$k[$j++] = _6M.get(_6N); /*19395*/
				$k[$j++] = Infinity; /*19395*/
				var _6S = $k[--$j]; /*19395*/
				var _6T = $k[--$j]; /*19395*/
				$k[$j++] = _6S; /*19395*/
				$k[$j++] = _6T; /*19395*/
				var _6U = $a(); /*19395*/
				$k[$j++] = _6U; /*19395*/
			} /*19395*/
			$1.Bvals = $d(); /*19396*/
			$1.encvals = $a([$1.Avals, $1.Cvals, $1.Tvals, $1.Xvals, -1, $1.Bvals]); /*19398*/
			$k[$j++] = Infinity; /*19400*/
			for (var _6d = 0, _6e = $1.msglen; _6d < _6e; _6d++) {
				/*19400*/
				$k[$j++] = 0; /*19400*/
			} /*19400*/
			$k[$j++] = 0; /*19400*/
			$1.numD = $a(); /*19400*/
			$k[$j++] = Infinity; /*19401*/
			for (var _6h = 0, _6i = $1.msglen; _6h < _6i; _6h++) {
				/*19401*/
				$k[$j++] = 0; /*19401*/
			} /*19401*/
			$k[$j++] = 9999; /*19401*/
			$1.nextXterm = $a(); /*19401*/
			$k[$j++] = Infinity; /*19402*/
			for (var _6l = 0, _6m = $1.msglen; _6l < _6m; _6l++) {
				/*19402*/
				$k[$j++] = 0; /*19402*/
			} /*19402*/
			$k[$j++] = 9999; /*19402*/
			$1.nextNonX = $a(); /*19402*/
			for (var _6p = $1.msglen - 1; _6p >= 0; _6p -= 1) {
				/*19419*/
				$1.i = _6p; /*19404*/
				$1.barchar = $get($1.msg, $1.i); /*19405*/
				if (($1.barchar >= 48) && ($1.barchar <= 57)) { //no-else/*19408*/
					$put($1.numD, $1.i, $get($1.numD, $1.i + 1) + 1); /*19407*/
				} /*19407*/
				if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) {
					/*19412*/
					$put($1.nextXterm, $1.i, 0); /*19410*/
				} else {
					/*19412*/
					$put($1.nextXterm, $1.i, $get($1.nextXterm, $1.i + 1) + 1); /*19412*/
				} /*19412*/
				var _7C = $get($1.Xvals, $1.barchar) !== undefined; /*19414*/
				if (!_7C) {
					/*19417*/
					$put($1.nextNonX, $1.i, 0); /*19415*/
				} else {
					/*19417*/
					$put($1.nextNonX, $1.i, $get($1.nextNonX, $1.i + 1) + 1); /*19417*/
				} /*19417*/
			} /*19417*/
			$k[$j++] = Infinity; /*19420*/
			var _7K = $1.nextXterm; /*19420*/
			for (var _7L = 0, _7M = _7K.length; _7L < _7M; _7L++) {
				/*19420*/
				var _7N = $get(_7K, _7L); /*19420*/
				$k[$j++] = _7N; /*19420*/
				if (_7N > 10000) { //no-else/*19420*/
					$j--; /*19420*/
					$k[$j++] = 10000; /*19420*/
				} /*19420*/
			} /*19420*/
			$1.nextXterm = $a(); /*19420*/
			$k[$j++] = Infinity; /*19421*/
			var _7P = $1.nextNonX; /*19421*/
			for (var _7Q = 0, _7R = _7P.length; _7Q < _7R; _7Q++) {
				/*19421*/
				var _7S = $get(_7P, _7Q); /*19421*/
				$k[$j++] = _7S; /*19421*/
				if (_7S > 10000) { //no-else/*19421*/
					$j--; /*19421*/
					$k[$j++] = 10000; /*19421*/
				} /*19421*/
			} /*19421*/
			$1.nextNonX = $a(); /*19421*/
			$1.isD = function() {
				$k[$j++] = ($1.char >= 48) && ($1.char <= 57); /*19423*/
			}; /*19423*/
			$1.isC = function() {
				var _7Y = $get($1.CNvals, $1.char) !== undefined; /*19424*/
				$k[$j++] = _7Y; /*19424*/
			}; /*19424*/
			$1.isT = function() {
				var _7b = $get($1.TNvals, $1.char) !== undefined; /*19425*/
				$k[$j++] = _7b; /*19425*/
			}; /*19425*/
			$1.isX = function() {
				var _7e = $get($1.Xvals, $1.char) !== undefined; /*19426*/
				$k[$j++] = _7e; /*19426*/
			}; /*19426*/
			$1.isEA = function() {
				$k[$j++] = $1.char > 127; /*19427*/
			}; /*19427*/
			$1.isFN = function() {
				$k[$j++] = $1.char < 0; /*19428*/
			}; /*19428*/
			$1.XtermFirst = function() {
				var _7h = $k[--$j]; /*19429*/
				$k[$j++] = $lt($get($1.nextXterm, _7h), $get($1.nextNonX, _7h)); /*19429*/
			}; /*19429*/
			$1.A = 0; /*19431*/
			$1.C = 1; /*19431*/
			$1.T = 2; /*19431*/
			$1.X = 3; /*19431*/
			$1.D = 4; /*19431*/
			$1.B = 5; /*19431*/
			$1.lookup = function() {
				$1.ac = 1; /*19434*/
				$1.cc = 2; /*19434*/
				$1.tc = 2; /*19434*/
				$1.xc = 2; /*19434*/
				$1.bc = 3; /*19434*/
				if ($1.mode == $1.A) { //no-else/*19435*/
					$1.ac = 0; /*19435*/
					$1.cc = 1; /*19435*/
					$1.tc = 1; /*19435*/
					$1.xc = 1; /*19435*/
					$1.bc = 2; /*19435*/
				} /*19435*/
				if ($1.mode == $1.C) { //no-else/*19436*/
					$1.cc = 0; /*19436*/
				} /*19436*/
				if ($1.mode == $1.T) { //no-else/*19437*/
					$1.tc = 0; /*19437*/
				} /*19437*/
				if ($1.mode == $1.X) { //no-else/*19438*/
					$1.xc = 0; /*19438*/
				} /*19438*/
				if ($1.mode == $1.B) { //no-else/*19439*/
					$1.bc = 0; /*19439*/
				} /*19439*/
				for (var _7w = 0, _7x = 1; _7w < _7x; _7w++) {
					/*19467*/
					$1.k = 0; /*19441*/
					for (;;) {
						/*19466*/
						if (($1.i + $1.k) == $1.msglen) { //no-else/*19448*/
							var _85 = $a([$1.ac, $1.cc, $1.tc, $1.xc]); /*19443*/
							$k[$j++] = true; /*19443*/
							for (var _86 = 0, _87 = _85.length; _86 < _87; _86++) {
								/*19443*/
								var _8A = $k[--$j]; /*19443*/
								$k[$j++] = _8A && ($1.bc <= Math.ceil($get(_85, _86))); /*19443*/
							} /*19443*/
							if ($k[--$j]) { //no-else/*19443*/
								$k[$j++] = $1.B; /*19443*/
								break; /*19443*/
							} /*19443*/
							var _8H = $a([$1.cc, $1.tc, $1.xc, $1.bc]); /*19444*/
							$k[$j++] = true; /*19444*/
							for (var _8I = 0, _8J = _8H.length; _8I < _8J; _8I++) {
								/*19444*/
								var _8M = $k[--$j]; /*19444*/
								$k[$j++] = _8M && ($1.ac <= Math.ceil($get(_8H, _8I))); /*19444*/
							} /*19444*/
							if ($k[--$j]) { //no-else/*19444*/
								$k[$j++] = $1.A; /*19444*/
								break; /*19444*/
							} /*19444*/
							var _8R = $a([$1.tc, $1.xc]); /*19445*/
							$k[$j++] = true; /*19445*/
							for (var _8S = 0, _8T = _8R.length; _8S < _8T; _8S++) {
								/*19445*/
								var _8W = $k[--$j]; /*19445*/
								$k[$j++] = _8W && (Math.ceil($1.cc) <= Math.ceil($get(_8R, _8S))); /*19445*/
							} /*19445*/
							if ($k[--$j]) { //no-else/*19445*/
								$k[$j++] = $1.C; /*19445*/
								break; /*19445*/
							} /*19445*/
							var _8a = $a([$1.xc]); /*19446*/
							$k[$j++] = true; /*19446*/
							for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) {
								/*19446*/
								var _8f = $k[--$j]; /*19446*/
								$k[$j++] = _8f && (Math.ceil($1.tc) <= Math.ceil($get(_8a, _8b))); /*19446*/
							} /*19446*/
							if ($k[--$j]) { //no-else/*19446*/
								$k[$j++] = $1.T; /*19446*/
								break; /*19446*/
							} /*19446*/
							$k[$j++] = $1.X; /*19447*/
							break; /*19447*/
						} /*19447*/
						$1.char = $get($1.msg, $1.i + $1.k); /*19449*/
						$k[$j++] = 'ac'; /*19450*/
						$k[$j++] = $1.ac; /*19450*/
						$1.isD(); /*19450*/
						if ($k[--$j]) {
							/*19450*/
							var _8p = $k[--$j]; /*19450*/
							$k[$j++] = _8p + (1 / 2); /*19450*/
						} else {
							/*19450*/
							$1.isEA(); /*19450*/
							if ($k[--$j]) {
								/*19450*/
								var _8r = $k[--$j]; /*19450*/
								$k[$j++] = Math.ceil(_8r) + 2; /*19450*/
							} else {
								/*19450*/
								var _8s = $k[--$j]; /*19450*/
								$k[$j++] = Math.ceil(_8s) + 1; /*19450*/
							} /*19450*/
						} /*19450*/
						var _8t = $k[--$j]; /*19450*/
						$1[$k[--$j]] = _8t; /*19450*/
						$k[$j++] = 'cc'; /*19451*/
						$k[$j++] = $1.cc; /*19451*/
						$1.isC(); /*19451*/
						if ($k[--$j]) {
							/*19451*/
							var _8x = $k[--$j]; /*19451*/
							$k[$j++] = _8x + (2 / 3); /*19451*/
						} else {
							/*19451*/
							$1.isEA(); /*19451*/
							if ($k[--$j]) {
								/*19451*/
								var _8z = $k[--$j]; /*19451*/
								$k[$j++] = _8z + (8 / 3); /*19451*/
							} else {
								/*19451*/
								var _90 = $k[--$j]; /*19451*/
								$k[$j++] = _90 + (4 / 3); /*19451*/
							} /*19451*/
						} /*19451*/
						var _91 = $k[--$j]; /*19451*/
						$1[$k[--$j]] = _91; /*19451*/
						$k[$j++] = 'tc'; /*19452*/
						$k[$j++] = $1.tc; /*19452*/
						$1.isT(); /*19452*/
						if ($k[--$j]) {
							/*19452*/
							var _95 = $k[--$j]; /*19452*/
							$k[$j++] = _95 + (2 / 3); /*19452*/
						} else {
							/*19452*/
							$1.isEA(); /*19452*/
							if ($k[--$j]) {
								/*19452*/
								var _97 = $k[--$j]; /*19452*/
								$k[$j++] = _97 + (8 / 3); /*19452*/
							} else {
								/*19452*/
								var _98 = $k[--$j]; /*19452*/
								$k[$j++] = _98 + (4 / 3); /*19452*/
							} /*19452*/
						} /*19452*/
						var _99 = $k[--$j]; /*19452*/
						$1[$k[--$j]] = _99; /*19452*/
						$k[$j++] = 'xc'; /*19453*/
						$k[$j++] = $1.xc; /*19453*/
						$1.isX(); /*19453*/
						if ($k[--$j]) {
							/*19453*/
							var _9D = $k[--$j]; /*19453*/
							$k[$j++] = _9D + (2 / 3); /*19453*/
						} else {
							/*19453*/
							$1.isEA(); /*19453*/
							if ($k[--$j]) {
								/*19453*/
								var _9F = $k[--$j]; /*19453*/
								$k[$j++] = _9F + (13 / 3); /*19453*/
							} else {
								/*19453*/
								var _9G = $k[--$j]; /*19453*/
								$k[$j++] = _9G + (10 / 3); /*19453*/
							} /*19453*/
						} /*19453*/
						var _9H = $k[--$j]; /*19453*/
						$1[$k[--$j]] = _9H; /*19453*/
						$k[$j++] = 'bc'; /*19454*/
						$k[$j++] = $1.bc; /*19454*/
						$1.isFN(); /*19454*/
						if ($k[--$j]) {
							/*19454*/
							var _9L = $k[--$j]; /*19454*/
							$k[$j++] = _9L + 3; /*19454*/
						} else {
							/*19454*/
							var _9M = $k[--$j]; /*19454*/
							$k[$j++] = _9M + 1; /*19454*/
						} /*19454*/
						var _9N = $k[--$j]; /*19454*/
						$1[$k[--$j]] = _9N; /*19454*/
						if ($1.k >= 3) { //no-else/*19464*/
							var _9U = $a([$1.ac, $1.cc, $1.tc, $1.xc]); /*19456*/
							$k[$j++] = true; /*19456*/
							for (var _9V = 0, _9W = _9U.length; _9V < _9W; _9V++) {
								/*19456*/
								var _9Z = $k[--$j]; /*19456*/
								$k[$j++] = _9Z && (($1.bc + 1) <= Math.ceil($get(_9U, _9V))); /*19456*/
							} /*19456*/
							if ($k[--$j]) { //no-else/*19456*/
								$k[$j++] = $1.B; /*19456*/
								break; /*19456*/
							} /*19456*/
							var _9g = $a([$1.cc, $1.tc, $1.xc, $1.bc]); /*19457*/
							$k[$j++] = true; /*19457*/
							for (var _9h = 0, _9i = _9g.length; _9h < _9i; _9h++) {
								/*19457*/
								var _9l = $k[--$j]; /*19457*/
								$k[$j++] = _9l && (($1.ac + 1) <= Math.ceil($get(_9g, _9h))); /*19457*/
							} /*19457*/
							if ($k[--$j]) { //no-else/*19457*/
								$k[$j++] = $1.A; /*19457*/
								break; /*19457*/
							} /*19457*/
							var _9s = $a([$1.ac, $1.cc, $1.xc, $1.bc]); /*19458*/
							$k[$j++] = true; /*19458*/
							for (var _9t = 0, _9u = _9s.length; _9t < _9u; _9t++) {
								/*19458*/
								var _9x = $k[--$j]; /*19458*/
								$k[$j++] = _9x && (($1.tc + 1) <= Math.ceil($get(_9s, _9t))); /*19458*/
							} /*19458*/
							if ($k[--$j]) { //no-else/*19458*/
								$k[$j++] = $1.T; /*19458*/
								break; /*19458*/
							} /*19458*/
							var _A2 = $a([$1.ac, $1.tc]); /*19459*/
							$k[$j++] = true; /*19459*/
							for (var _A3 = 0, _A4 = _A2.length; _A3 < _A4; _A3++) {
								/*19459*/
								var _A7 = $k[--$j]; /*19459*/
								$k[$j++] = _A7 && (($1.cc + 1) <= Math.ceil($get(_A2, _A3))); /*19459*/
							} /*19459*/
							if ($k[--$j]) { //no-else/*19462*/
								if (Math.ceil($1.cc) < Math.ceil($1.xc)) { //no-else/*19460*/
									$k[$j++] = $1.C; /*19460*/
									break; /*19460*/
								} /*19460*/
								if ($1.cc == $1.xc) { //no-else/*19461*/
									$k[$j++] = ($1.i + $1.k) + 1; /*19461*/
									$1.XtermFirst(); /*19461*/
									if ($k[--$j]) {
										/*19461*/
										$k[$j++] = $1.X; /*19461*/
										break; /*19461*/
									} else {
										/*19461*/
										$k[$j++] = $1.C; /*19461*/
										break; /*19461*/
									} /*19461*/
								} /*19461*/
							} /*19461*/
							var _AN = $a([$1.ac, $1.cc, $1.tc, $1.bc]); /*19463*/
							$k[$j++] = true; /*19463*/
							for (var _AO = 0, _AP = _AN.length; _AO < _AP; _AO++) {
								/*19463*/
								var _AS = $k[--$j]; /*19463*/
								$k[$j++] = _AS && (($1.xc + 1) < $get(_AN, _AO)); /*19463*/
							} /*19463*/
							if ($k[--$j]) { //no-else/*19463*/
								$k[$j++] = $1.X; /*19463*/
								break; /*19463*/
							} /*19463*/
						} /*19463*/
						$1.k = $1.k + 1; /*19465*/
					} /*19465*/
				} /*19465*/
			}; /*19468*/
			$1.addtocws = function() {
				var _AW = $k[--$j]; /*19471*/
				$puti($1.cws, $1.j, _AW); /*19471*/
				$1.j = _AW.length + $1.j; /*19472*/
			}; /*19473*/
			$1.tobin = function() {
				var _Ab = $s($k[--$j]); /*19476*/
				$k[$j++] = _Ab; /*19476*/
				for (var _Ad = 0, _Ac = _Ab.length - 1; _Ad <= _Ac; _Ad += 1) {
					/*19476*/
					var _Ae = $k[--$j]; /*19476*/
					$put(_Ae, _Ad, 48); /*19476*/
					$k[$j++] = _Ae; /*19476*/
				} /*19476*/
				var _Af = $k[--$j]; /*19477*/
				var _Ai = $cvrs($s(_Af.length), $k[--$j], 2); /*19477*/
				$puti(_Af, _Af.length - _Ai.length, _Ai); /*19477*/
				$k[$j++] = _Af; /*19478*/
				$k[$j++] = Infinity; /*19478*/
				var _Aj = $k[--$j]; /*19478*/
				var _Ak = $k[--$j]; /*19478*/
				$k[$j++] = _Aj; /*19478*/
				$forall(_Ak, function() {
					/*19478*/
					var _Al = $k[--$j]; /*19478*/
					$k[$j++] = _Al - 48; /*19478*/
				}); /*19478*/
				var _Am = $a(); /*19478*/
				$k[$j++] = _Am; /*19478*/
			}; /*19479*/
			$1.encA = function() {
				for (var _An = 0, _Ao = 1; _An < _Ao; _An++) {
					/*19523*/
					if ($get($1.numD, $1.i) >= 21) { //no-else/*19487*/
						$1.Dbits = $a([1, 1, 1, 1]); /*19484*/
						$1.mode = $1.D; /*19485*/
						break; /*19486*/
					} /*19486*/
					var _Aw = $get($1.numD, $1.i); /*19488*/
					if ((_Aw >= 13) && ((_Aw + $1.i) == $1.msglen)) { //no-else/*19492*/
						$1.Dbits = $a([1, 1, 1, 1]); /*19489*/
						$1.mode = $1.D; /*19490*/
						break; /*19491*/
					} /*19491*/
					if ($get($1.numD, $1.i) >= 2) { //no-else/*19497*/
						var _B4 = $s(2); /*19494*/
						$put(_B4, 0, $get($1.msg, $1.i)); /*19494*/
						$put(_B4, 1, $get($1.msg, $1.i + 1)); /*19494*/
						$k[$j++] = $get($1.Avals, _B4); /*19494*/
						$1.addtocws(); /*19494*/
						$1.i = $1.i + 2; /*19495*/
						break; /*19496*/
					} /*19496*/
					if ($get($1.msg, $1.i) == $1.fnc1) { //no-else/*19513*/
						if ($get($1.numD, $1.i + 1) >= 15) { //no-else/*19505*/
							$k[$j++] = $get($1.Avals, $1.fnc1lD); /*19500*/
							$1.addtocws(); /*19500*/
							$1.i = $1.i + 1; /*19501*/
							$1.Dbits = $a([]); /*19502*/
							$1.mode = $1.D; /*19503*/
							break; /*19504*/
						} /*19504*/
						var _BT = $get($1.numD, $1.i + 1); /*19506*/
						if ((_BT >= 7) && (((_BT + $1.i) + 1) == $1.msglen)) { //no-else/*19512*/
							$k[$j++] = $get($1.Avals, $1.fnc1lD); /*19507*/
							$1.addtocws(); /*19507*/
							$1.i = $1.i + 1; /*19508*/
							$1.Dbits = $a([]); /*19509*/
							$1.mode = $1.D; /*19510*/
							break; /*19511*/
						} /*19511*/
					} /*19511*/
					$k[$j++] = 'newmode'; /*19514*/
					$1.lookup(); /*19514*/
					var _Bc = $k[--$j]; /*19514*/
					$1[$k[--$j]] = _Bc; /*19514*/
					if ($1.newmode != $1.mode) { //no-else/*19519*/
						$k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lD, $1.lB]), $1.newmode)); /*19516*/
						$1.addtocws(); /*19516*/
						$1.mode = $1.newmode; /*19517*/
						break; /*19518*/
					} /*19518*/
					$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*19520*/
					$1.addtocws(); /*19520*/
					$1.i = $1.i + 1; /*19521*/
					break; /*19522*/
				} /*19522*/
			}; /*19524*/
			$1.CTXvalstocws = function() {
				$1.in = $k[--$j]; /*19527*/
				$k[$j++] = Infinity; /*19528*/
				for (var _C0 = 0, _Bz = $1.in.length - 1; _C0 <= _Bz; _C0 += 3) {
					/*19532*/
					$k[$j++] = 0; /*19530*/
					$forall($geti($1.in, _C0, 3), function() {
						/*19530*/
						var _C3 = $k[--$j]; /*19530*/
						var _C4 = $k[--$j]; /*19530*/
						$k[$j++] = (_C4 + _C3) * 40; /*19530*/
					}); /*19530*/
					var _C6 = (~~($k[--$j] / 40)) + 1; /*19531*/
					$k[$j++] = ~~(_C6 / 256); /*19531*/
					$k[$j++] = _C6 % 256; /*19531*/
				} /*19531*/
				$astore($a($counttomark())); /*19533*/
				var _C9 = $k[--$j]; /*19533*/
				var _CA = $k[--$j]; /*19533*/
				$k[$j++] = _C9; /*19533*/
			}; /*19534*/
			$1.encCTX = function() {
				$1.p = 0; /*19537*/
				$1.ctxvals = $a(2220); /*19538*/
				for (;;) {
					/*19616*/
					if ($1.i == $1.msglen) { //no-else/*19542*/
						break; /*19542*/
					} /*19542*/
					var _CK = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)) !== undefined; /*19543*/
					if (!_CK) { //no-else/*19543*/
						break; /*19543*/
					} /*19543*/
					if (($1.p % 3) == 0) { //no-else/*19611*/
						if ($get($1.numD, $1.i) >= 12) { //no-else/*19549*/
							$k[$j++] = $a([$1.unlcw]); /*19546*/
							$1.addtocws(); /*19546*/
							$1.mode = $1.A; /*19547*/
							break; /*19548*/
						} /*19548*/
						var _CU = $get($1.numD, $1.i); /*19550*/
						if ((_CU >= 8) && ((_CU + $1.i) == $1.msglen)) { //no-else/*19554*/
							$k[$j++] = $a([$1.unlcw]); /*19551*/
							$1.addtocws(); /*19551*/
							$1.mode = $1.A; /*19552*/
							break; /*19553*/
						} /*19553*/
						$1.lookup(); /*19555*/
						if ($k[--$j] != $1.mode) { //no-else/*19560*/
							$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*19556*/
							$1.CTXvalstocws(); /*19556*/
							$1.addtocws(); /*19556*/
							$k[$j++] = $a([$1.unlcw]); /*19557*/
							$1.addtocws(); /*19557*/
							$1.mode = $1.A; /*19558*/
							break; /*19559*/
						} /*19559*/
						if (($1.msglen - $1.i) <= 3) { //no-else/*19610*/
							$1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); /*19562*/
							$k[$j++] = Infinity; /*19571*/
							$forall($geti($1.msg, $1.i, $1.msglen - $1.i), function() {
								/*19570*/
								var _Ct = $k[--$j]; /*19565*/
								var _Cx = $get($get($1.encvals, $1.mode), _Ct) !== undefined; /*19565*/
								$k[$j++] = _Ct; /*19569*/
								if (_Cx) {
									/*19568*/
									$aload($get($get($1.encvals, $1.mode), $k[--$j])); /*19566*/
								} else {
									/*19568*/
									$j--; /*19568*/
									$k[$j++] = -1; /*19568*/
									$k[$j++] = -1; /*19568*/
									$k[$j++] = -1; /*19568*/
									$k[$j++] = -1; /*19568*/
								} /*19568*/
							}); /*19568*/
							$1.remvals = $a(); /*19571*/
							if (($1.remcws == 2) && ($1.remvals.length == 3)) { //no-else/*19581*/
								$k[$j++] = Infinity; /*19576*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*19575*/
								$aload($1.remvals); /*19576*/
								var _DA = $a(); /*19576*/
								$k[$j++] = _DA; /*19577*/
								$1.CTXvalstocws(); /*19577*/
								$1.addtocws(); /*19577*/
								$1.mode = $1.A; /*19578*/
								$1.i = $1.msglen; /*19579*/
								break; /*19580*/
							} /*19580*/
							if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //no-else/*19592*/
								$k[$j++] = Infinity; /*19587*/
								$aload($geti($1.ctxvals, 0, $1.p)); /*19585*/
								$aload($1.remvals); /*19586*/
								$aload($get($get($1.encvals, $1.mode), $1.sft1)); /*19587*/
								var _DQ = $a(); /*19587*/
								$k[$j++] = _DQ; /*19588*/
								$1.CTXvalstocws(); /*19588*/
								$1.addtocws(); /*19588*/
								$1.mode = $1.A; /*19589*/
								$1.i = $1.msglen; /*19590*/
								break; /*19591*/
							} /*19591*/
							if (($1.remcws == 2) && ($1.remvals.length == 1)) { //no-else/*19601*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*19595*/
								$1.CTXvalstocws(); /*19595*/
								$1.addtocws(); /*19595*/
								$k[$j++] = $a([$1.unlcw]); /*19596*/
								$1.addtocws(); /*19596*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*19597*/
								$1.addtocws(); /*19597*/
								$1.mode = $1.A; /*19598*/
								$1.i = $1.msglen; /*19599*/
								break; /*19600*/
							} /*19600*/
							if (($1.remcws == 1) && ($1.remvals.length == 1)) { //no-else/*19609*/
								$k[$j++] = $geti($1.ctxvals, 0, $1.p); /*19604*/
								$1.CTXvalstocws(); /*19604*/
								$1.addtocws(); /*19604*/
								$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*19605*/
								$1.addtocws(); /*19605*/
								$1.mode = $1.A; /*19606*/
								$1.i = $1.msglen; /*19607*/
								break; /*19608*/
							} /*19608*/
						} /*19608*/
					} /*19608*/
					var _Dz = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); /*19612*/
					$puti($1.ctxvals, $1.p, _Dz); /*19613*/
					$1.p = _Dz.length + $1.p; /*19614*/
					$1.i = $1.i + 1; /*19615*/
				} /*19615*/
				if ($1.mode != $1.A) { //no-else/*19640*/
					for (;;) {
						/*19624*/
						if (($1.p % 3) == 0) { //no-else/*19621*/
							break; /*19621*/
						} /*19621*/
						$1.i = $1.i - 1; /*19622*/
						$1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; /*19623*/
					} /*19623*/
					$k[$j++] = Infinity; /*19626*/
					$aload($geti($1.ctxvals, 0, $1.p)); /*19626*/
					var _EJ = $a(); /*19626*/
					$k[$j++] = _EJ; /*19627*/
					$1.CTXvalstocws(); /*19627*/
					$1.addtocws(); /*19627*/
					$k[$j++] = $a([$1.unlcw]); /*19628*/
					$1.addtocws(); /*19628*/
					$1.mode = $1.A; /*19629*/
					if ($1.i != $1.msglen) { //no-else/*19639*/
						if ($get($1.numD, $1.i) >= 2) {
							/*19637*/
							var _ES = $s(2); /*19633*/
							$put(_ES, 0, $get($1.msg, $1.i)); /*19633*/
							$put(_ES, 1, $get($1.msg, $1.i + 1)); /*19633*/
							$k[$j++] = $get($1.Avals, _ES); /*19633*/
							$1.addtocws(); /*19633*/
							$1.i = $1.i + 2; /*19634*/
						} else {
							/*19637*/
							$k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); /*19636*/
							$1.addtocws(); /*19636*/
							$1.i = $1.i + 1; /*19637*/
						} /*19637*/
					} /*19637*/
				} /*19637*/
			}; /*19642*/
			$1.encD = function() {
				for (;;) {
					/*19695*/
					if ($get($1.numD, $1.i) < 3) { //no-else/*19685*/
						$1.Drem = (8 - ($1.Dbits.length % 8)) % 8; /*19650*/
						$1.remcws = $get($1.numremcws, $1.j + (~~($1.Dbits.length / 8))); /*19651*/
						if ((($get($1.numremcws, ($1.j + (~~($1.Dbits.length / 8))) - 1) - 1) == 0) && ($1.i == $1.msglen)) { //no-else/*19655*/
							break; /*19655*/
						} /*19655*/
						if (((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) && ($1.remcws == 1)) && ($1.Drem == 0)) { //no-else/*19659*/
							break; /*19659*/
						} /*19659*/
						if (!(((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) && ($1.remcws == 1)) && (($1.Drem == 4) || ($1.Drem == 6)))) { //no-else/*19666*/
							$k[$j++] = Infinity; /*19664*/
							$aload($1.Dbits); /*19664*/
							$k[$j++] = 1; /*19664*/
							$k[$j++] = 1; /*19664*/
							$k[$j++] = 1; /*19664*/
							$k[$j++] = 1; /*19664*/
							$k[$j++] = 1; /*19664*/
							$k[$j++] = 1; /*19664*/
							$1.Dbits = $a(); /*19664*/
							$1.Drem = (8 - ($1.Dbits.length % 8)) % 8; /*19665*/
						} /*19665*/
						if (($1.Drem == 4) || ($1.Drem == 6)) { //no-else/*19677*/
							if ($get($1.numD, $1.i) >= 1) {
								/*19674*/
								$k[$j++] = Infinity; /*19671*/
								$aload($1.Dbits); /*19671*/
								$k[$j++] = ($get($1.msg, $1.i) - 48) + 1; /*19671*/
								$k[$j++] = 4; /*19671*/
								$1.tobin(); /*19671*/
								$aload($k[--$j]); /*19671*/
								$1.Dbits = $a(); /*19671*/
								$1.i = $1.i + 1; /*19672*/
							} else {
								/*19674*/
								$k[$j++] = Infinity; /*19674*/
								$aload($1.Dbits); /*19674*/
								$k[$j++] = 1; /*19674*/
								$k[$j++] = 1; /*19674*/
								$k[$j++] = 1; /*19674*/
								$k[$j++] = 1; /*19674*/
								$1.Dbits = $a(); /*19674*/
							} /*19674*/
							$1.Drem = $1.Drem - 4; /*19676*/
						} /*19676*/
						if ($1.Drem == 2) { //no-else/*19681*/
							$k[$j++] = Infinity; /*19679*/
							$aload($1.Dbits); /*19679*/
							$k[$j++] = 0; /*19679*/
							$k[$j++] = 1; /*19679*/
							$1.Dbits = $a(); /*19679*/
							$1.Drem = 0; /*19680*/
						} /*19680*/
						break; /*19683*/
					} /*19683*/
					$k[$j++] = Infinity; /*19692*/
					$aload($1.Dbits); /*19689*/
					$k[$j++] = 0; /*19690*/
					$forall($geti($1.msg, $1.i, 3), function() {
						/*19690*/
						var _Fa = $k[--$j]; /*19690*/
						var _Fb = $k[--$j]; /*19690*/
						$k[$j++] = (_Fb + (_Fa - 48)) * 10; /*19690*/
					}); /*19690*/
					var _Fc = $k[--$j]; /*19690*/
					$k[$j++] = (~~(_Fc / 10)) + 1; /*19691*/
					$k[$j++] = 10; /*19691*/
					$1.tobin(); /*19691*/
					$aload($k[--$j]); /*19691*/
					$1.Dbits = $a(); /*19692*/
					$1.i = $1.i + 3; /*19693*/
				} /*19693*/
				$k[$j++] = Infinity; /*19697*/
				for (var _Fi = 0, _Fh = $1.Dbits.length - 1; _Fi <= _Fh; _Fi += 8) {
					/*19700*/
					$k[$j++] = 0; /*19699*/
					$forall($geti($1.Dbits, _Fi, 8), function() {
						/*19699*/
						var _Fl = $k[--$j]; /*19699*/
						var _Fm = $k[--$j]; /*19699*/
						$k[$j++] = (_Fm + _Fl) * 2; /*19699*/
					}); /*19699*/
					var _Fn = $k[--$j]; /*19699*/
					$k[$j++] = ~~(_Fn / 2); /*19699*/
				} /*19699*/
				$astore($a($counttomark())); /*19701*/
				var _Fq = $k[--$j]; /*19701*/
				var _Fr = $k[--$j]; /*19701*/
				$k[$j++] = _Fq; /*19701*/
				$1.addtocws(); /*19701*/
				$1.mode = $1.A; /*19702*/
			}; /*19704*/
			$1.encB = function() {
				$1.p = 0; /*19707*/
				$1.bvals = $a(1480); /*19707*/
				for (;;) {
					/*19714*/
					if ($1.i == $1.msglen) { //no-else/*19708*/
						break; /*19708*/
					} /*19708*/
					if ($get($1.msg, $1.i) < 0) { //no-else/*19709*/
						break; /*19709*/
					} /*19709*/
					$1.lookup(); /*19710*/
					if ($k[--$j] != $1.mode) { //no-else/*19710*/
						break; /*19710*/
					} /*19710*/
					$put($1.bvals, $1.p, $get($1.msg, $1.i)); /*19711*/
					$1.p = $1.p + 1; /*19712*/
					$1.i = $1.i + 1; /*19713*/
				} /*19713*/
				$1.remcws = $get($1.numremcws, $1.j + $1.p) - 1; /*19715*/
				$k[$j++] = Infinity; /*19723*/
				if (($1.remcws == 0) && ($1.i == $1.msglen)) {
					/*19720*/
					$k[$j++] = 0; /*19718*/
				} else {
					/*19720*/
					if ($1.p < 250) {
						/*19720*/
						$k[$j++] = $1.p; /*19720*/
					} else {
						/*19720*/
						$k[$j++] = (~~($1.p / 250)) + 249; /*19720*/
						$k[$j++] = $1.p % 250; /*19720*/
					} /*19720*/
				} /*19720*/
				$aload($geti($1.bvals, 0, $1.p)); /*19722*/
				$1.bvals = $a(); /*19723*/
				$k[$j++] = $1.bvals; /*19724*/
				$1.addtocws(); /*19724*/
				$1.mode = $1.A; /*19725*/
			}; /*19726*/
			$1.cws = $a(1480); /*19729*/
			$1.mode = $1.A; /*19730*/
			$1.i = 0; /*19730*/
			$1.j = 0; /*19730*/
			for (;;) {
				/*19733*/
				if ($1.i >= $1.msglen) { //no-else/*19731*/
					break; /*19731*/
				} /*19731*/
				$1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $1.mode)](); /*19732*/
			} /*19732*/
			$1.cws = $geti($1.cws, 0, $1.j); /*19734*/
		} /*19734*/
		$1.i = 0; /*19739*/
		for (;;) {
			/*19759*/
			$1.m = $get($1.metrics, $1.i); /*19741*/
			$1.vers = $get($1.m, 0); /*19742*/
			$1.rows = $get($1.m, 1); /*19743*/
			$1.cols = $get($1.m, 2); /*19744*/
			$1.dcol = $get($1.m, 3); /*19745*/
			$1.dcws = $get($1.m, 4); /*19746*/
			$1.rscw = $get($1.m, 5); /*19747*/
			$1.rsbl = $get($1.m, 6); /*19748*/
			$1.riso = $get($1.m, 7); /*19749*/
			$1.risi = $get($1.m, 8); /*19750*/
			$1.risl = $get($1.m, 9); /*19751*/
			$1.dcpb = ~~($1.dcws / $1.rsbl); /*19752*/
			$1.ecpb = ~~($1.rscw / $1.rsbl); /*19753*/
			$1.okay = true; /*19754*/
			if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //no-else/*19755*/
				$1.okay = false; /*19755*/
			} /*19755*/
			if ($1.cws.length > $1.dcws) { //no-else/*19756*/
				$1.okay = false; /*19756*/
			} /*19756*/
			if ($1.okay) { //no-else/*19757*/
				break; /*19757*/
			} /*19757*/
			$1.i = $1.i + 1; /*19758*/
		} /*19758*/
		if (!$1.stype) {
			/*19765*/
			$k[$j++] = Infinity; /*19763*/
			$aload($1.cws); /*19763*/
			for (var _HC = 0, _HD = $1.dcws - $1.cws.length; _HC < _HD; _HC++) {
				/*19763*/
				$k[$j++] = 129; /*19763*/
			} /*19763*/
			$1.cws = $a(); /*19763*/
		} else {
			/*19765*/
			$k[$j++] = Infinity; /*19765*/
			for (var _HH = 0, _HI = $1.dcws - $1.cws.length; _HH < _HI; _HH++) {
				/*19765*/
				$k[$j++] = 0; /*19765*/
			} /*19765*/
			$aload($1.cws); /*19765*/
			$1.cws = $a(); /*19765*/
		} /*19765*/
		$1.cwbs = $a($1.rsbl); /*19769*/
		$1.ecbs = $a($1.rsbl); /*19770*/
		for (var _HR = 0, _HQ = $1.rsbl - 1; _HR <= _HQ; _HR += 1) {
			/*19779*/
			$1.i = _HR; /*19772*/
			$1.cwb = $a($1.dcpb); /*19773*/
			for (var _HW = 0, _HV = $1.dcpb - 1; _HW <= _HV; _HW += 1) {
				/*19777*/
				$1.j = _HW; /*19775*/
				$put($1.cwb, $1.j, $get($1.cws, ($1.j * $1.rsbl) + $1.i)); /*19776*/
			} /*19776*/
			$put($1.cwbs, $1.i, $1.cwb); /*19778*/
		} /*19778*/
		var _Hi = $1.stype ? 32 : 256; /*19782*/
		$1.gf = _Hi; /*19782*/
		$1['gf-1'] = $1.gf - 1; /*19783*/
		var _Hl = $1.stype ? 37 : 301; /*19784*/
		$1.pm = _Hl; /*19784*/
		$k[$j++] = Infinity; /*19785*/
		$k[$j++] = 1; /*19785*/
		for (var _Hn = 0, _Ho = $1["gf-1"]; _Hn < _Ho; _Hn++) {
			/*19785*/
			var _Hp = $k[--$j]; /*19785*/
			var _Hq = _Hp * 2; /*19785*/
			$k[$j++] = _Hp; /*19785*/
			$k[$j++] = _Hq; /*19785*/
			if (_Hq >= $1.gf) { //no-else/*19785*/
				var _Ht = $k[--$j]; /*19785*/
				$k[$j++] = _Ht ^ $1.pm; /*19785*/
			} /*19785*/
		} /*19785*/
		$1.rsalog = $a(); /*19785*/
		$1.rslog = $a($1.gf); /*19786*/
		for (var _Hz = 1, _Hy = $1["gf-1"]; _Hz <= _Hy; _Hz += 1) {
			/*19787*/
			$put($1.rslog, $get($1.rsalog, _Hz), _Hz); /*19787*/
		} /*19787*/
		$1.rsprod = function() {
			var _I3 = $k[--$j]; /*19789*/
			var _I4 = $k[--$j]; /*19789*/
			$k[$j++] = _I4; /*19793*/
			$k[$j++] = _I3; /*19793*/
			if ((_I3 != 0) && (_I4 != 0)) {
				/*19792*/
				var _I7 = $get($1.rslog, $k[--$j]); /*19790*/
				var _ID = $get($1.rsalog, (_I7 + $get($1.rslog, $k[--$j])) % $1["gf-1"]); /*19790*/
				$k[$j++] = _ID; /*19790*/
			} else {
				/*19792*/
				$j -= 2; /*19792*/
				$k[$j++] = 0; /*19792*/
			} /*19792*/
		}; /*19794*/
		$k[$j++] = Infinity; /*19797*/
		$k[$j++] = 1; /*19797*/
		for (var _IF = 0, _IG = $1.ecpb; _IF < _IG; _IF++) {
			/*19797*/
			$k[$j++] = 0; /*19797*/
		} /*19797*/
		$1.coeffs = $a(); /*19797*/
		for (var _IK = 0, _IJ = $1.ecpb - 1; _IK <= _IJ; _IK += 1) {
			/*19806*/
			$1.i = _IK; /*19799*/
			$put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); /*19800*/
			for (var _IR = $1.i; _IR >= 1; _IR -= 1) {
				/*19804*/
				$1.j = _IR; /*19802*/
				$k[$j++] = $1.coeffs; /*19803*/
				$k[$j++] = $1.j; /*19803*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*19803*/
				$k[$j++] = $get($1.coeffs, $1.j); /*19803*/
				$k[$j++] = $get($1.rsalog, $1.i); /*19803*/
				$1.rsprod(); /*19803*/
				var _Id = $k[--$j]; /*19803*/
				var _Ie = $k[--$j]; /*19803*/
				var _If = $k[--$j]; /*19803*/
				$put($k[--$j], _If, $xo(_Ie, _Id)); /*19803*/
			} /*19803*/
			$k[$j++] = $1.coeffs; /*19805*/
			$k[$j++] = 0; /*19805*/
			$k[$j++] = $get($1.coeffs, 0); /*19805*/
			$k[$j++] = $get($1.rsalog, $1.i); /*19805*/
			$1.rsprod(); /*19805*/
			var _In = $k[--$j]; /*19805*/
			var _Io = $k[--$j]; /*19805*/
			$put($k[--$j], _Io, _In); /*19805*/
		} /*19805*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*19807*/
		for (var _Iv = 0, _Iu = $1.cwbs.length - 1; _Iv <= _Iu; _Iv += 1) {
			/*19822*/
			$1.i = _Iv; /*19811*/
			$k[$j++] = Infinity; /*19812*/
			$aload($get($1.cwbs, $1.i)); /*19812*/
			for (var _J0 = 0, _J1 = $1.ecpb; _J0 < _J1; _J0++) {
				/*19812*/
				$k[$j++] = 0; /*19812*/
			} /*19812*/
			$1.rscws = $a(); /*19812*/
			for (var _J5 = 0, _J4 = $1.dcpb - 1; _J5 <= _J4; _J5 += 1) {
				/*19820*/
				$1.m = _J5; /*19814*/
				$1.k = $get($1.rscws, $1.m); /*19815*/
				for (var _JB = 0, _JA = $1.ecpb - 1; _JB <= _JA; _JB += 1) {
					/*19819*/
					$1.j = _JB; /*19817*/
					$k[$j++] = $1.rscws; /*19818*/
					$k[$j++] = ($1.m + $1.j) + 1; /*19818*/
					$k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); /*19818*/
					$k[$j++] = $1.k; /*19818*/
					$1.rsprod(); /*19818*/
					var _JO = $k[--$j]; /*19818*/
					var _JP = $k[--$j]; /*19818*/
					$put($k[--$j], _JP, $xo(_JO, $get($1.rscws, ($1.m + $1.j) + 1))); /*19818*/
				} /*19818*/
			} /*19818*/
			$put($1.ecbs, $1.i, $geti($1.rscws, $1.dcpb, $1.ecpb)); /*19821*/
		} /*19821*/
		$k[$j++] = Infinity; /*19825*/
		$aload($1.cws); /*19825*/
		for (var _JZ = 0, _Ja = $1.rscw; _JZ < _Ja; _JZ++) {
			/*19825*/
			$k[$j++] = 0; /*19825*/
		} /*19825*/
		$1.cws = $a(); /*19825*/
		for (var _Je = 0, _Jd = $1.rscw - 1; _Je <= _Jd; _Je += 1) {
			/*19829*/
			$1.i = _Je; /*19827*/
			$put($1.cws, $1.dcws + $1.i, $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); /*19828*/
		} /*19828*/
		var _Js = $1.stype ? 5 : 8; /*19832*/
		$1.mmat = $a(($1.dcws + $1.rscw) * _Js); /*19832*/
		$1.r = 0; /*19833*/
		$1.c = 0; /*19833*/
		var _Jv = $1.stype ? 2 : 1; /*19834*/
		for (var _Jy = 0, _Jz = _Jv, _Jx = $1.cws.length - 1; _Jz < 0 ? _Jy >= _Jx : _Jy <= _Jx; _Jy += _Jz) {
			/*19855*/
			$1.i = _Jy; /*19835*/
			if (!$1.stype) {
				/*19849*/
				var _K2 = $strcpy($s(8), "00000000"); /*19837*/
				var _K7 = $cvrs($s(8), $get($1.cws, $1.i), 2); /*19837*/
				$puti(_K2, 8 - _K7.length, _K7); /*19838*/
				$k[$j++] = _K2; /*19838*/
				$k[$j++] = Infinity; /*19838*/
				var _K8 = $k[--$j]; /*19838*/
				var _K9 = $k[--$j]; /*19838*/
				$k[$j++] = _K8; /*19838*/
				$forall(_K9, function() {
					/*19838*/
					var _KA = $k[--$j]; /*19838*/
					$k[$j++] = _KA - 48; /*19838*/
				}); /*19838*/
				var _KB = $a(); /*19838*/
				$1.top = $geti(_KB, 0, 4); /*19839*/
				$1.bot = $geti(_KB, 4, 4); /*19840*/
			} else {
				/*19849*/
				var _KF = $strcpy($s(5), "00000"); /*19842*/
				var _KK = $cvrs($s(5), $get($1.cws, $1.i), 2); /*19842*/
				$puti(_KF, 5 - _KK.length, _KK); /*19843*/
				$k[$j++] = _KF; /*19843*/
				$k[$j++] = Infinity; /*19843*/
				var _KL = $k[--$j]; /*19843*/
				var _KM = $k[--$j]; /*19843*/
				$k[$j++] = _KL; /*19843*/
				$forall(_KM, function() {
					/*19843*/
					var _KN = $k[--$j]; /*19843*/
					$k[$j++] = _KN - 48; /*19843*/
				}); /*19843*/
				$1.c1 = $a(); /*19844*/
				var _KQ = $strcpy($s(5), "00000"); /*19845*/
				var _KV = $cvrs($s(5), $get($1.cws, $1.i + 1), 2); /*19845*/
				$puti(_KQ, 5 - _KV.length, _KV); /*19846*/
				$k[$j++] = _KQ; /*19846*/
				$k[$j++] = Infinity; /*19846*/
				var _KW = $k[--$j]; /*19846*/
				var _KX = $k[--$j]; /*19846*/
				$k[$j++] = _KW; /*19846*/
				$forall(_KX, function() {
					/*19846*/
					var _KY = $k[--$j]; /*19846*/
					$k[$j++] = _KY - 48; /*19846*/
				}); /*19846*/
				$1.c2 = $a(); /*19847*/
				$k[$j++] = Infinity; /*19848*/
				$aload($geti($1.c1, 0, 3)); /*19848*/
				$aload($geti($1.c2, 0, 2)); /*19848*/
				$1.top = $a(); /*19848*/
				$k[$j++] = Infinity; /*19849*/
				$aload($geti($1.c1, 3, 2)); /*19849*/
				$aload($geti($1.c2, 2, 3)); /*19849*/
				$1.bot = $a(); /*19849*/
			} /*19849*/
			$puti($1.mmat, ($1.r * $1.dcol) + $1.c, $1.top); /*19851*/
			$puti($1.mmat, (($1.r + 1) * $1.dcol) + $1.c, $1.bot); /*19852*/
			$1.c = $1.c + $1.top.length; /*19853*/
			if ($1.c == $1.dcol) { //no-else/*19854*/
				$1.c = 0; /*19854*/
				$1.r = $1.r + 2; /*19854*/
			} /*19854*/
		} /*19854*/
		$1.mmv = function() {
			var _L0 = $k[--$j]; /*19858*/
			var _L1 = $k[--$j]; /*19858*/
			$k[$j++] = _L1 + (_L0 * $1.cols); /*19858*/
		}; /*19858*/
		$k[$j++] = Infinity; /*19859*/
		for (var _L4 = 0, _L5 = $1.rows * $1.cols; _L4 < _L5; _L4++) {
			/*19859*/
			$k[$j++] = -1; /*19859*/
		} /*19859*/
		$1.pixs = $a(); /*19859*/
		var _Lb = $a([function() {
			for (var _L8 = 0, _L9 = $1.cols; _L8 < _L9; _L8++) {
				/*19863*/
				$k[$j++] = 0; /*19863*/
			} /*19863*/
		}, function() {
			for (var _LB = 0, _LC = $1.cols; _LB < _LC; _LB++) {
				/*19864*/
				$k[$j++] = 1; /*19864*/
			} /*19864*/
		}, function() {
			$k[$j++] = 0; /*19865*/
			for (var _LE = 0, _LF = $1.cols - 2; _LE < _LF; _LE++) {
				/*19865*/
				$k[$j++] = 1; /*19865*/
			} /*19865*/
			$k[$j++] = 0; /*19865*/
		}, function() {
			$k[$j++] = 0; /*19866*/
			$k[$j++] = 1; /*19866*/
			for (var _LH = 0, _LI = $1.cols - 4; _LH < _LI; _LH++) {
				/*19866*/
				$k[$j++] = 0; /*19866*/
			} /*19866*/
			$k[$j++] = 1; /*19866*/
			$k[$j++] = 0; /*19866*/
		}, function() {
			for (var _LK = 0, _LL = ~~(($1.cols - 1) / 2); _LK < _LL; _LK++) {
				/*19867*/
				$k[$j++] = -1; /*19867*/
			} /*19867*/
			$k[$j++] = 1; /*19867*/
			for (var _LN = 0, _LO = ~~(($1.cols - 1) / 2); _LN < _LO; _LN++) {
				/*19867*/
				$k[$j++] = -1; /*19867*/
			} /*19867*/
		}, function() {
			for (var _LQ = 0, _LR = ~~(($1.cols - 1) / 2); _LQ < _LR; _LQ++) {
				/*19868*/
				$k[$j++] = -1; /*19868*/
			} /*19868*/
			$k[$j++] = 0; /*19868*/
			for (var _LT = 0, _LU = ~~(($1.cols - 1) / 2); _LT < _LU; _LT++) {
				/*19868*/
				$k[$j++] = -1; /*19868*/
			} /*19868*/
		}, function() {
			$k[$j++] = 1; /*19869*/
			for (var _LW = 0, _LX = $1.cols - 2; _LW < _LX; _LW++) {
				/*19869*/
				$k[$j++] = 0; /*19869*/
			} /*19869*/
			$k[$j++] = 1; /*19869*/
		}, function() {
			$k[$j++] = 1; /*19870*/
			$k[$j++] = 0; /*19870*/
			for (var _LZ = 0, _La = $1.cols - 4; _LZ < _La; _LZ++) {
				/*19870*/
				$k[$j++] = 1; /*19870*/
			} /*19870*/
			$k[$j++] = 0; /*19870*/
			$k[$j++] = 1; /*19870*/
		}]); /*19870*/
		$1.artifact = _Lb; /*19871*/
		var _Lc = new Map([
			["A", "121343"],
			["B", "12134343"],
			["C", "12121343"],
			["D", "1213434343"],
			["E", "1212134343"],
			["F", "1212121343"],
			["G", "121213434343"],
			["H", "121212134343"],
			["S", "56661278"],
			["T", "5666666666127878"]
		]); /*19882*/
		$1.cpat = $get(_Lc, $geti($1.vers, 0, 1)); /*19883*/
		$k[$j++] = $1.pixs; /*19884*/
		$k[$j++] = 0; /*19884*/
		$k[$j++] = ~~(($1.rows - $1.cpat.length) / 2); /*19884*/
		$1.mmv(); /*19884*/
		$k[$j++] = Infinity; /*19885*/
		$forall($1.cpat, function() {
			/*19885*/
			$get($1.artifact, $k[--$j] - 49)(); /*19885*/
		}); /*19885*/
		var _Ln = $a(); /*19885*/
		var _Lo = $k[--$j]; /*19885*/
		$puti($k[--$j], _Lo, _Ln); /*19885*/
		for (var _Ls = 0, _Lr = $1.risl - 1; _Ls <= _Lr; _Ls += 1) {
			/*19900*/
			$1.i = _Ls; /*19889*/
			for (var _Lx = $1.riso, _Ly = $1.risi, _Lw = $1.cols - 1; _Ly < 0 ? _Lx >= _Lw : _Lx <= _Lw; _Lx += _Ly) {
				/*19899*/
				$1.j = _Lx; /*19891*/
				var _M0 = (($1.i % 12) == 0) ? 1 : 0; /*19892*/
				var _M1 = $a([1, _M0]); /*19892*/
				$k[$j++] = _M1; /*19893*/
				$k[$j++] = _M1; /*19893*/
				$k[$j++] = $1.pixs; /*19893*/
				$k[$j++] = $1.j; /*19893*/
				$k[$j++] = $1.i; /*19893*/
				$1.mmv(); /*19893*/
				var _M5 = $k[--$j]; /*19894*/
				var _M6 = $k[--$j]; /*19894*/
				$puti(_M6, _M5, $k[--$j]); /*19894*/
				if ($1.i != ($1.risl - 1)) {
					/*19898*/
					$k[$j++] = $1.pixs; /*19896*/
					$k[$j++] = ($1.cols - $1.j) - 2; /*19896*/
					$k[$j++] = ($1.rows - $1.i) - 1; /*19896*/
					$1.mmv(); /*19896*/
					var _MF = $k[--$j]; /*19897*/
					var _MG = $k[--$j]; /*19897*/
					$puti(_MG, _MF, $k[--$j]); /*19897*/
				} else {
					/*19898*/
					$j--; /*19898*/
				} /*19898*/
			} /*19898*/
		} /*19898*/
		var _Mv = new Map([
			["A", $a([$a([12, 5])])],
			["B", $a([$a([16, 7])])],
			["C", $a([$a([26, 12])])],
			["D", $a([])],
			["E", $a([$a([26, 23])])],
			["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
			["G", $a([$a([27, 48]), $a([69, 48])])],
			["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
			["S-10", $a([])],
			["S-20", $a([$a([10, 4])])],
			["S-30", $a([$a([15, 4]), $a([15, 6])])],
			["T-16", $a([$a([8, 10])])],
			["T-32", $a([$a([16, 10]), $a([16, 12])])],
			["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
		]); /*19917*/
		$forall($get(_Mv, $1.vers), function() {
			/*19918*/
			var _Mz = $k[--$j]; /*19918*/
			$k[$j++] = $1.pixs; /*19918*/
			$aload(_Mz); /*19918*/
			$1.mmv(); /*19918*/
			var _N0 = $k[--$j]; /*19918*/
			$put($k[--$j], _N0, 1); /*19918*/
		}); /*19918*/
		$1.j = 0; /*19921*/
		for (var _N4 = 0, _N3 = $1.pixs.length - 1; _N4 <= _N3; _N4 += 1) {
			/*19928*/
			$1.i = _N4; /*19923*/
			if ($get($1.pixs, $1.i) == -1) { //no-else/*19927*/
				$put($1.pixs, $1.i, $get($1.mmat, $1.j)); /*19925*/
				$1.j = $1.j + 1; /*19926*/
			} /*19926*/
		} /*19926*/
		var _NK = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.cols],
			["pixy", $1.rows],
			["height", ($1.rows / 72) * 2],
			["width", ($1.cols / 72) * 2],
			["opt", $1.options]
		]); /*19938*/
		$k[$j++] = _NK; /*19941*/
		if (!$1.dontdraw) { //no-else/*19941*/
			$0.renmatrix(); /*19941*/
		} /*19941*/
	};
	$0.hanxin = function() {
		var $1 = {}; /*19970*/
		$1.options = $k[--$j]; /*19972*/
		$1.barcode = $k[--$j]; /*19973*/
		$1.dontdraw = false; /*19975*/
		$1.version = "unset"; /*19976*/
		$1.eclevel = "unset"; /*19977*/
		$1.parse = false; /*19978*/
		$1.parsefnc = false; /*19979*/
		$1.mask = -1; /*19980*/
		$forall($1.options, function() {
			/*19991*/
			var _3 = $k[--$j]; /*19991*/
			$1[$k[--$j]] = _3; /*19991*/
		}); /*19991*/
		$1.mask = ~~$1.mask; /*19993*/
		$1.barlen = $1.barcode.length; /*20016*/
		var _7 = new Map([]); /*20021*/
		$1.fncvals = _7; /*20021*/
		$1.msg = $a($1.barlen); /*20022*/
		$1.i = 0; /*20023*/
		$1.j = 0; /*20023*/
		for (;;) {
			/*20037*/
			if ($1.i == $1.barlen) { //no-else/*20024*/
				break; /*20024*/
			} /*20024*/
			$1.char = $get($1.barcode, $1.i); /*20025*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*20033*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*20031*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*20028*/
					$1.i = $1.i + 4; /*20029*/
				} else {
					/*20031*/
					$1.i = $1.i + 1; /*20031*/
				} /*20031*/
			} /*20031*/
			$put($1.msg, $1.j, $1.char); /*20034*/
			$1.i = $1.i + 1; /*20035*/
			$1.j = $1.j + 1; /*20036*/
		} /*20036*/
		$1.msg = $geti($1.msg, 0, $1.j); /*20038*/
		$1.msglen = $1.msg.length; /*20039*/
		if ($eq($1.eclevel, "unset")) { //no-else/*20042*/
			$1.eclevel = "L2"; /*20042*/
		} /*20042*/
		$1.tobin = function() {
			var _e = $s($k[--$j]); /*20045*/
			$k[$j++] = _e; /*20045*/
			for (var _g = 0, _f = _e.length - 1; _g <= _f; _g += 1) {
				/*20045*/
				var _h = $k[--$j]; /*20045*/
				$put(_h, _g, 48); /*20045*/
				$k[$j++] = _h; /*20045*/
			} /*20045*/
			var _i = $k[--$j]; /*20046*/
			var _l = $cvrs($s(_i.length), $k[--$j], 2); /*20046*/
			$puti(_i, _i.length - _l.length, _l); /*20047*/
			$k[$j++] = _i; /*20047*/
		}; /*20048*/
		$1.bits = $s((4 + 13) + ($1.msglen * 8)); /*20051*/
		$puti($1.bits, 0, "0011"); /*20052*/
		$k[$j++] = $1.bits; /*20053*/
		$k[$j++] = 4; /*20053*/
		$k[$j++] = $1.msglen; /*20053*/
		$k[$j++] = 13; /*20053*/
		$1.tobin(); /*20053*/
		var _r = $k[--$j]; /*20053*/
		var _s = $k[--$j]; /*20053*/
		$puti($k[--$j], _s, _r); /*20053*/
		for (var _w = 0, _v = $1.msglen - 1; _w <= _v; _w += 1) {
			/*20057*/
			$1.i = _w; /*20055*/
			$k[$j++] = $1.bits; /*20056*/
			$k[$j++] = 17 + ($1.i * 8); /*20056*/
			$k[$j++] = $get($1.msg, $1.i); /*20056*/
			$k[$j++] = 8; /*20056*/
			$1.tobin(); /*20056*/
			var _12 = $k[--$j]; /*20056*/
			var _13 = $k[--$j]; /*20056*/
			$puti($k[--$j], _13, _12); /*20056*/
		} /*20056*/
		$1.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); /*20398*/
		$1.eclval = $get($1.eclevel, 1) - 49; /*20400*/
		for (var _Ik = 0; _Ik <= 83; _Ik += 1) {
			/*20420*/
			$1.i = _Ik; /*20402*/
			$1.m = $get($1.metrics, $1.i); /*20403*/
			$1.vers = $get($1.m, 0); /*20404*/
			$1.size = $get($1.m, 1); /*20405*/
			$1.alnk = $get($1.m, 2); /*20406*/
			$1.alnn = $get($1.m, 3); /*20407*/
			$1.alnr = $1.size - ($1.alnk * $1.alnn); /*20408*/
			$1.nmod = $get($1.m, 4); /*20409*/
			$1.ncws = ~~($1.nmod / 8); /*20410*/
			$1.rbit = $1.nmod % 8; /*20411*/
			$1.ecbs = $geti($1.m, 5 + ($1.eclval * 3), 3); /*20412*/
			$k[$j++] = 'ecws'; /*20413*/
			$k[$j++] = 0; /*20413*/
			$forall($1.ecbs, function() {
				/*20413*/
				var _J7 = $k[--$j]; /*20413*/
				var _JA = $k[--$j]; /*20413*/
				$k[$j++] = _JA + ($get(_J7, 0) * $get(_J7, 2)); /*20413*/
			}); /*20413*/
			var _JB = $k[--$j]; /*20413*/
			$1[$k[--$j]] = _JB; /*20413*/
			$1.dcws = $1.ncws - $1.ecws; /*20414*/
			$1.dmod = $1.dcws * 8; /*20415*/
			$1.okay = true; /*20416*/
			if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //no-else/*20417*/
				$1.okay = false; /*20417*/
			} /*20417*/
			if ($1.bits.length > $1.dmod) { //no-else/*20418*/
				$1.okay = false; /*20418*/
			} /*20418*/
			if ($1.okay) { //no-else/*20419*/
				break; /*20419*/
			} /*20419*/
		} /*20419*/
		if (!$1.okay) { //no-else/*20424*/
			$k[$j++] = 'bwipp.hanxinNoValidSymbol'; /*20423*/
			$k[$j++] = "No valid symbol available"; /*20423*/
			$0.raiseerror(); /*20423*/
		} /*20423*/
		$1.version = $1.vers; /*20426*/
		$1.msgbits = $1.bits; /*20427*/
		$1.e1nb = $get($get($1.ecbs, 0), 0); /*20428*/
		$1.e2nb = $get($get($1.ecbs, 1), 0); /*20428*/
		$1.e3nb = $get($get($1.ecbs, 2), 0); /*20428*/
		$1.e1dcws = $get($get($1.ecbs, 0), 1); /*20429*/
		$1.e2dcws = $get($get($1.ecbs, 1), 1); /*20429*/
		$1.e3dcws = $get($get($1.ecbs, 2), 1); /*20429*/
		$1.e1ecws = $get($get($1.ecbs, 0), 2); /*20430*/
		$1.e2ecws = $get($get($1.ecbs, 1), 2); /*20430*/
		$1.e3ecws = $get($get($1.ecbs, 2), 2); /*20430*/
		$1.pad = $s($1.dmod); /*20433*/
		for (var _Ju = 0, _Jt = $1.pad.length - 1; _Ju <= _Jt; _Ju += 1) {
			/*20434*/
			$put($1.pad, _Ju, 48); /*20434*/
		} /*20434*/
		$puti($1.pad, 0, $1.msgbits); /*20435*/
		$1.cws = $a($1.dcws); /*20438*/
		for (var _K2 = 0, _K1 = $1.cws.length - 1; _K2 <= _K1; _K2 += 1) {
			/*20448*/
			$1.c = _K2; /*20440*/
			$1.cwb = $geti($1.pad, $1.c * 8, 8); /*20441*/
			$1.cw = 0; /*20442*/
			for (var _K6 = 0; _K6 <= 7; _K6 += 1) {
				/*20446*/
				$1.i = _K6; /*20444*/
				$1.cw = $1.cw + ((~~(Math.pow(2, (8 - $1.i) - 1))) * ($get($1.cwb, $1.i) - 48)); /*20445*/
			} /*20445*/
			$put($1.cws, $1.c, $1.cw); /*20447*/
		} /*20447*/
		$1.rscodes = function() {
			$1.rspm = $k[--$j]; /*20452*/
			$1.rsgf = $k[--$j]; /*20453*/
			$1.rsnc = $k[--$j]; /*20454*/
			$1.rscws = $k[--$j]; /*20455*/
			$k[$j++] = Infinity; /*20458*/
			$k[$j++] = 1; /*20458*/
			for (var _KK = 0, _KL = $1.rsgf - 1; _KK < _KL; _KK++) {
				/*20458*/
				var _KM = $k[--$j]; /*20458*/
				var _KN = _KM * 2; /*20458*/
				$k[$j++] = _KM; /*20458*/
				$k[$j++] = _KN; /*20458*/
				if (_KN >= $1.rsgf) { //no-else/*20458*/
					var _KQ = $k[--$j]; /*20458*/
					$k[$j++] = $xo(_KQ, $1.rspm); /*20458*/
				} /*20458*/
			} /*20458*/
			$1.rsalog = $a(); /*20458*/
			$1.rslog = $a($1.rsgf); /*20459*/
			for (var _KW = 1, _KV = $1.rsgf - 1; _KW <= _KV; _KW += 1) {
				/*20460*/
				$put($1.rslog, $get($1.rsalog, _KW), _KW); /*20460*/
			} /*20460*/
			$1.rsprod = function() {
				var _Ka = $k[--$j]; /*20464*/
				var _Kb = $k[--$j]; /*20464*/
				$k[$j++] = _Kb; /*20468*/
				$k[$j++] = _Ka; /*20468*/
				if ((_Ka != 0) && (_Kb != 0)) {
					/*20467*/
					var _Ke = $get($1.rslog, $k[--$j]); /*20465*/
					var _Kk = $get($1.rsalog, (_Ke + $get($1.rslog, $k[--$j])) % ($1.rsgf - 1)); /*20465*/
					$k[$j++] = _Kk; /*20465*/
				} else {
					/*20467*/
					$j -= 2; /*20467*/
					$k[$j++] = 0; /*20467*/
				} /*20467*/
			}; /*20469*/
			$k[$j++] = Infinity; /*20472*/
			$k[$j++] = 1; /*20472*/
			for (var _Km = 0, _Kn = $1.rsnc; _Km < _Kn; _Km++) {
				/*20472*/
				$k[$j++] = 0; /*20472*/
			} /*20472*/
			$1.coeffs = $a(); /*20472*/
			for (var _Kr = 1, _Kq = $1.rsnc; _Kr <= _Kq; _Kr += 1) {
				/*20481*/
				$1.i = _Kr; /*20474*/
				$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*20475*/
				for (var _Ky = $1.i - 1; _Ky >= 1; _Ky -= 1) {
					/*20479*/
					$1.j = _Ky; /*20477*/
					$k[$j++] = $1.coeffs; /*20478*/
					$k[$j++] = $1.j; /*20478*/
					$k[$j++] = $get($1.coeffs, $1.j - 1); /*20478*/
					$k[$j++] = $get($1.coeffs, $1.j); /*20478*/
					$k[$j++] = $get($1.rsalog, $1.i); /*20478*/
					$1.rsprod(); /*20478*/
					var _LA = $k[--$j]; /*20478*/
					var _LB = $k[--$j]; /*20478*/
					var _LC = $k[--$j]; /*20478*/
					$put($k[--$j], _LC, $xo(_LB, _LA)); /*20478*/
				} /*20478*/
				$k[$j++] = $1.coeffs; /*20480*/
				$k[$j++] = 0; /*20480*/
				$k[$j++] = $get($1.coeffs, 0); /*20480*/
				$k[$j++] = $get($1.rsalog, $1.i); /*20480*/
				$1.rsprod(); /*20480*/
				var _LK = $k[--$j]; /*20480*/
				var _LL = $k[--$j]; /*20480*/
				$put($k[--$j], _LL, _LK); /*20480*/
			} /*20480*/
			$1.nd = $1.rscws.length; /*20484*/
			$k[$j++] = Infinity; /*20485*/
			$forall($1.rscws); /*20485*/
			for (var _LQ = 0, _LR = $1.rsnc; _LQ < _LR; _LQ++) {
				/*20485*/
				$k[$j++] = 0; /*20485*/
			} /*20485*/
			$k[$j++] = 0; /*20485*/
			$1.rscws = $a(); /*20485*/
			for (var _LV = 0, _LU = $1.nd - 1; _LV <= _LU; _LV += 1) {
				/*20492*/
				$1.k = $xo($get($1.rscws, _LV), $get($1.rscws, $1.nd)); /*20487*/
				for (var _Ld = 0, _Lc = $1.rsnc - 1; _Ld <= _Lc; _Ld += 1) {
					/*20491*/
					$1.j = _Ld; /*20489*/
					$k[$j++] = $1.rscws; /*20490*/
					$k[$j++] = $1.nd + $1.j; /*20490*/
					$k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); /*20490*/
					$k[$j++] = $1.k; /*20490*/
					$k[$j++] = $get($1.coeffs, ($1.rsnc - $1.j) - 1); /*20490*/
					$1.rsprod(); /*20490*/
					var _Lq = $k[--$j]; /*20490*/
					var _Lr = $k[--$j]; /*20490*/
					var _Ls = $k[--$j]; /*20490*/
					$put($k[--$j], _Ls, $xo(_Lr, _Lq)); /*20490*/
				} /*20490*/
			} /*20490*/
			$k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); /*20495*/
		}; /*20497*/
		$1.dcwsb = $a(($1.e1nb + $1.e2nb) + $1.e3nb); /*20500*/
		$1.ecwsb = $a($1.dcwsb.length); /*20501*/
		$1.in = 0; /*20502*/
		$1.out = 0; /*20502*/
		for (var _M4 = 0, _M5 = $1.e1nb; _M4 < _M5; _M4++) {
			/*20508*/
			$k[$j++] = $geti($1.cws, $1.in, $1.e1dcws); /*20504*/
			$k[$j++] = $1.e1ecws; /*20504*/
			$k[$j++] = 256; /*20504*/
			$k[$j++] = 355; /*20504*/
			$1.rscodes(); /*20504*/
			var _MB = $k[--$j]; /*20505*/
			$put($1.dcwsb, $1.out, $geti(_MB, 0, $1.e1dcws)); /*20505*/
			$put($1.ecwsb, $1.out, $geti(_MB, $1.e1dcws, $1.e1ecws)); /*20506*/
			$1.in = $1.in + $1.e1dcws; /*20507*/
			$1.out = $1.out + 1; /*20507*/
		} /*20507*/
		for (var _MP = 0, _MQ = $1.e2nb; _MP < _MQ; _MP++) {
			/*20514*/
			$k[$j++] = $geti($1.cws, $1.in, $1.e2dcws); /*20510*/
			$k[$j++] = $1.e2ecws; /*20510*/
			$k[$j++] = 256; /*20510*/
			$k[$j++] = 355; /*20510*/
			$1.rscodes(); /*20510*/
			var _MW = $k[--$j]; /*20511*/
			$put($1.dcwsb, $1.out, $geti(_MW, 0, $1.e2dcws)); /*20511*/
			$put($1.ecwsb, $1.out, $geti(_MW, $1.e2dcws, $1.e2ecws)); /*20512*/
			$1.in = $1.in + $1.e2dcws; /*20513*/
			$1.out = $1.out + 1; /*20513*/
		} /*20513*/
		for (var _Mk = 0, _Ml = $1.e3nb; _Mk < _Ml; _Mk++) {
			/*20520*/
			$k[$j++] = $geti($1.cws, $1.in, $1.e3dcws); /*20516*/
			$k[$j++] = $1.e3ecws; /*20516*/
			$k[$j++] = 256; /*20516*/
			$k[$j++] = 355; /*20516*/
			$1.rscodes(); /*20516*/
			var _Mr = $k[--$j]; /*20517*/
			$put($1.dcwsb, $1.out, $geti(_Mr, 0, $1.e3dcws)); /*20517*/
			$put($1.ecwsb, $1.out, $geti(_Mr, $1.e3dcws, $1.e3ecws)); /*20518*/
			$1.in = $1.in + $1.e3dcws; /*20519*/
			$1.out = $1.out + 1; /*20519*/
		} /*20519*/
		$1.cws = $a($1.ncws); /*20523*/
		$1.cw = 0; /*20524*/
		for (var _N8 = 0, _N7 = $1.dcwsb.length - 1; _N8 <= _N7; _N8 += 1) {
			/*20529*/
			$1.i = _N8; /*20526*/
			var _NB = $get($1.dcwsb, $1.i); /*20527*/
			$puti($1.cws, $1.cw, _NB); /*20527*/
			$1.cw = _NB.length + $1.cw; /*20527*/
			var _NH = $get($1.ecwsb, $1.i); /*20528*/
			$puti($1.cws, $1.cw, _NH); /*20528*/
			$1.cw = _NH.length + $1.cw; /*20528*/
		} /*20528*/
		$k[$j++] = Infinity; /*20536*/
		var _NL = $1.ncws; /*20533*/
		var _NM = 12; /*20533*/
		var _NN = _NL - 1; /*20533*/
		if ((_NL - 1) > 12) { //no-else/*20533*/
			var _ = _NM; /*20533*/
			_NM = _NN; /*20533*/
			_NN = _; /*20533*/
		} /*20533*/
		for (var _NP = 0, _NO = _NN; _NP <= _NO; _NP += 1) {
			/*20535*/
			for (var _NS = _NP, _NR = $1.ncws - 1; _NS <= _NR; _NS += 13) {
				/*20534*/
				$k[$j++] = _NS; /*20534*/
				if (_NS < $1.ncws) {
					/*20534*/
					var _NW = $get($1.cws, $k[--$j]); /*20534*/
					$k[$j++] = _NW; /*20534*/
				} else {
					/*20534*/
					$j--; /*20534*/
				} /*20534*/
			} /*20534*/
		} /*20534*/
		$1.cws = $a(); /*20536*/
		if ($1.rbit > 0) { //no-else/*20544*/
			$1.pad = $a($1.cws.length + 1); /*20540*/
			$puti($1.pad, 0, $1.cws); /*20541*/
			$put($1.pad, $1.pad.length - 1, 0); /*20542*/
			$1.cws = $1.pad; /*20543*/
		} /*20543*/
		$k[$j++] = Infinity; /*20547*/
		for (var _Ni = 0, _Nj = $1.size * $1.size; _Ni < _Nj; _Ni++) {
			/*20547*/
			$k[$j++] = -1; /*20547*/
		} /*20547*/
		$1.pixs = $a(); /*20547*/
		$1.qmv = function() {
			var _Nm = $k[--$j]; /*20548*/
			var _Nn = $k[--$j]; /*20548*/
			$k[$j++] = _Nn + (_Nm * $1.size); /*20548*/
		}; /*20548*/
		if ($1.alnn != 0) { //no-else/*20607*/
			$1.trmv = function() {
				var _Nq = $k[--$j]; /*20552*/
				var _Ns = $k[--$j]; /*20552*/
				$k[$j++] = (((_Nq * $1.size) + $1.size) - 1) - _Ns; /*20552*/
			}; /*20552*/
			$1.aplot = function() {
				var _Nt = $k[--$j]; /*20554*/
				var _Nu = $k[--$j]; /*20554*/
				var _Nv = $k[--$j]; /*20554*/
				$k[$j++] = _Nt; /*20554*/
				$k[$j++] = _Nv; /*20554*/
				$k[$j++] = _Nu; /*20554*/
				$k[$j++] = _Nt; /*20554*/
				$k[$j++] = _Nu; /*20554*/
				$k[$j++] = _Nv; /*20554*/
				$1.trmv(); /*20554*/
				var _Nx = $k[--$j]; /*20554*/
				$put($1.pixs, _Nx, $k[--$j]); /*20554*/
				$1.trmv(); /*20555*/
				var _O0 = $k[--$j]; /*20555*/
				$put($1.pixs, _O0, $k[--$j]); /*20555*/
			}; /*20556*/
			$1.i = 0; /*20557*/
			$1.stag = 0; /*20557*/
			for (;;) {
				/*20579*/
				if ($1.i >= $1.size) { //no-else/*20558*/
					break; /*20558*/
				} /*20558*/
				for (var _O6 = 0, _O5 = $1.size - 1; _O6 <= _O5; _O6 += 1) {
					/*20572*/
					$1.j = _O6; /*20560*/
					if (($1.j + $1.alnr) < $1.size) {
						/*20566*/
						$k[$j++] = (((((~~($1.j / $1.alnk)) + $1.stag) % 2) == 0) && (!(($1.i == 0) && ($1.j < $1.alnk)))) || (($1.j % $1.alnk) == 0); /*20564*/
					} else {
						/*20566*/
						$k[$j++] = (($1.alnn + $1.stag) % 2) == 0; /*20566*/
					} /*20566*/
					if ($k[--$j]) { //no-else/*20571*/
						$k[$j++] = $1.j; /*20569*/
						$k[$j++] = $1.i; /*20569*/
						$k[$j++] = 1; /*20569*/
						$1.aplot(); /*20569*/
						var _ON = $1.j; /*20570*/
						var _OO = $1.i; /*20570*/
						$k[$j++] = _ON + 1; /*20570*/
						$k[$j++] = _OO + 1; /*20570*/
						if (((_OO + 1) < $1.size) && ((_ON + 1) < $1.size)) {
							/*20570*/
							$k[$j++] = 0; /*20570*/
							$1.aplot(); /*20570*/
						} else {
							/*20570*/
							$j -= 2; /*20570*/
						} /*20570*/
					} /*20570*/
				} /*20570*/
				if (($1.i + $1.alnr) == $1.size) {
					/*20576*/
					$1.i = ($1.i + $1.alnr) - 1; /*20574*/
				} else {
					/*20576*/
					$1.i = $1.i + $1.alnk; /*20576*/
				} /*20576*/
				$1.stag = 1 - $1.stag; /*20578*/
			} /*20578*/
			for (var _Od = $1.alnk, _Oe = $1.alnk, _Oc = $1.size - 2; _Oe < 0 ? _Od >= _Oc : _Od <= _Oc; _Od += _Oe) {
				/*20606*/
				$1.i = _Od; /*20581*/
				if (((~~($1.i / $1.alnk)) % 2) != 0) { //no-else/*20593*/
					$k[$j++] = $1.pixs; /*20583*/
					$k[$j++] = 0; /*20583*/
					$k[$j++] = $1.i - 1; /*20583*/
					$1.trmv(); /*20583*/
					var _Oj = $k[--$j]; /*20583*/
					$put($k[--$j], _Oj, 0); /*20583*/
					$k[$j++] = $1.pixs; /*20584*/
					$k[$j++] = 0; /*20584*/
					$k[$j++] = $1.i + 1; /*20584*/
					$1.trmv(); /*20584*/
					var _On = $k[--$j]; /*20584*/
					$put($k[--$j], _On, 0); /*20584*/
					$k[$j++] = $1.pixs; /*20585*/
					$k[$j++] = 1; /*20585*/
					$k[$j++] = $1.i - 1; /*20585*/
					$1.trmv(); /*20585*/
					var _Or = $k[--$j]; /*20585*/
					$put($k[--$j], _Or, 0); /*20585*/
					$k[$j++] = $1.pixs; /*20586*/
					$k[$j++] = 1; /*20586*/
					$k[$j++] = $1.i; /*20586*/
					$1.trmv(); /*20586*/
					var _Ov = $k[--$j]; /*20586*/
					$put($k[--$j], _Ov, 0); /*20586*/
					$k[$j++] = $1.pixs; /*20587*/
					$k[$j++] = 1; /*20587*/
					$k[$j++] = $1.i + 1; /*20587*/
					$1.trmv(); /*20587*/
					var _Oz = $k[--$j]; /*20587*/
					$put($k[--$j], _Oz, 0); /*20587*/
					$k[$j++] = $1.pixs; /*20588*/
					$k[$j++] = $1.i - 1; /*20588*/
					$k[$j++] = 0; /*20588*/
					$1.trmv(); /*20588*/
					var _P3 = $k[--$j]; /*20588*/
					$put($k[--$j], _P3, 0); /*20588*/
					$k[$j++] = $1.pixs; /*20589*/
					$k[$j++] = $1.i + 1; /*20589*/
					$k[$j++] = 0; /*20589*/
					$1.trmv(); /*20589*/
					var _P7 = $k[--$j]; /*20589*/
					$put($k[--$j], _P7, 0); /*20589*/
					$k[$j++] = $1.pixs; /*20590*/
					$k[$j++] = $1.i - 1; /*20590*/
					$k[$j++] = 1; /*20590*/
					$1.trmv(); /*20590*/
					var _PB = $k[--$j]; /*20590*/
					$put($k[--$j], _PB, 0); /*20590*/
					$k[$j++] = $1.pixs; /*20591*/
					$k[$j++] = $1.i; /*20591*/
					$k[$j++] = 1; /*20591*/
					$1.trmv(); /*20591*/
					var _PF = $k[--$j]; /*20591*/
					$put($k[--$j], _PF, 0); /*20591*/
					$k[$j++] = $1.pixs; /*20592*/
					$k[$j++] = $1.i + 1; /*20592*/
					$k[$j++] = 1; /*20592*/
					$1.trmv(); /*20592*/
					var _PJ = $k[--$j]; /*20592*/
					$put($k[--$j], _PJ, 0); /*20592*/
				} /*20592*/
				$k[$j++] = $1.pixs; /*20594*/
				$k[$j++] = $1.size - 1; /*20594*/
				$k[$j++] = $1.i - 1; /*20594*/
				$1.trmv(); /*20594*/
				var _PO = $k[--$j]; /*20594*/
				if ($get($k[--$j], _PO) != 1) { //no-else/*20605*/
					$k[$j++] = $1.pixs; /*20595*/
					$k[$j++] = $1.size - 1; /*20595*/
					$k[$j++] = $1.i - 1; /*20595*/
					$1.trmv(); /*20595*/
					var _PU = $k[--$j]; /*20595*/
					$put($k[--$j], _PU, 0); /*20595*/
					$k[$j++] = $1.pixs; /*20596*/
					$k[$j++] = $1.size - 2; /*20596*/
					$k[$j++] = $1.i - 1; /*20596*/
					$1.trmv(); /*20596*/
					var _PZ = $k[--$j]; /*20596*/
					$put($k[--$j], _PZ, 0); /*20596*/
					$k[$j++] = $1.pixs; /*20597*/
					$k[$j++] = $1.size - 2; /*20597*/
					$k[$j++] = $1.i; /*20597*/
					$1.trmv(); /*20597*/
					var _Pe = $k[--$j]; /*20597*/
					$put($k[--$j], _Pe, 0); /*20597*/
					$k[$j++] = $1.pixs; /*20598*/
					$k[$j++] = $1.size - 2; /*20598*/
					$k[$j++] = $1.i + 1; /*20598*/
					$1.trmv(); /*20598*/
					var _Pj = $k[--$j]; /*20598*/
					$put($k[--$j], _Pj, 0); /*20598*/
					$k[$j++] = $1.pixs; /*20599*/
					$k[$j++] = $1.size - 1; /*20599*/
					$k[$j++] = $1.i + 1; /*20599*/
					$1.trmv(); /*20599*/
					var _Po = $k[--$j]; /*20599*/
					$put($k[--$j], _Po, 0); /*20599*/
					$k[$j++] = $1.pixs; /*20600*/
					$k[$j++] = $1.i - 1; /*20600*/
					$k[$j++] = $1.size - 1; /*20600*/
					$1.trmv(); /*20600*/
					var _Pt = $k[--$j]; /*20600*/
					$put($k[--$j], _Pt, 0); /*20600*/
					$k[$j++] = $1.pixs; /*20601*/
					$k[$j++] = $1.i - 1; /*20601*/
					$k[$j++] = $1.size - 2; /*20601*/
					$1.trmv(); /*20601*/
					var _Py = $k[--$j]; /*20601*/
					$put($k[--$j], _Py, 0); /*20601*/
					$k[$j++] = $1.pixs; /*20602*/
					$k[$j++] = $1.i; /*20602*/
					$k[$j++] = $1.size - 2; /*20602*/
					$1.trmv(); /*20602*/
					var _Q3 = $k[--$j]; /*20602*/
					$put($k[--$j], _Q3, 0); /*20602*/
					$k[$j++] = $1.pixs; /*20603*/
					$k[$j++] = $1.i + 1; /*20603*/
					$k[$j++] = $1.size - 2; /*20603*/
					$1.trmv(); /*20603*/
					var _Q8 = $k[--$j]; /*20603*/
					$put($k[--$j], _Q8, 0); /*20603*/
					$k[$j++] = $1.pixs; /*20604*/
					$k[$j++] = $1.i + 1; /*20604*/
					$k[$j++] = $1.size - 1; /*20604*/
					$1.trmv(); /*20604*/
					var _QD = $k[--$j]; /*20604*/
					$put($k[--$j], _QD, 0); /*20604*/
				} /*20604*/
			} /*20604*/
		} /*20604*/
		$1.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); /*20619*/
		$1.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); /*20629*/
		for (var _QZ = 0, _QY = $1.fpat.length - 1; _QZ <= _QY; _QZ += 1) {
			/*20641*/
			$1.y = _QZ; /*20631*/
			for (var _Qd = 0, _Qc = $get($1.fpat, 0).length - 1; _Qd <= _Qc; _Qd += 1) {
				/*20640*/
				$1.x = _Qd; /*20633*/
				$1.fpb = $get($get($1.fpat, $1.y), $1.x); /*20634*/
				$1.fpb2 = $get($get($1.fpat2, $1.y), $1.x); /*20635*/
				$k[$j++] = $1.pixs; /*20636*/
				$k[$j++] = $1.x; /*20636*/
				$k[$j++] = $1.y; /*20636*/
				$1.qmv(); /*20636*/
				var _Qs = $k[--$j]; /*20636*/
				$put($k[--$j], _Qs, $1.fpb); /*20636*/
				$k[$j++] = $1.pixs; /*20637*/
				$k[$j++] = ($1.size - $1.x) - 1; /*20637*/
				$k[$j++] = $1.y; /*20637*/
				$1.qmv(); /*20637*/
				var _Qz = $k[--$j]; /*20637*/
				$put($k[--$j], _Qz, $1.fpb); /*20637*/
				$k[$j++] = $1.pixs; /*20638*/
				$k[$j++] = ($1.size - $1.x) - 1; /*20638*/
				$k[$j++] = ($1.size - $1.y) - 1; /*20638*/
				$1.qmv(); /*20638*/
				var _R7 = $k[--$j]; /*20638*/
				$put($k[--$j], _R7, $1.fpb); /*20638*/
				$k[$j++] = $1.pixs; /*20639*/
				$k[$j++] = $1.x; /*20639*/
				$k[$j++] = ($1.size - $1.y) - 1; /*20639*/
				$1.qmv(); /*20639*/
				var _RE = $k[--$j]; /*20639*/
				$put($k[--$j], _RE, $1.fpb2); /*20639*/
			} /*20639*/
		} /*20639*/
		$1.functionmap = $a([$a([$a([0, 8]), $a([$1.size - 1, $1.size - 9])]), $a([$a([1, 8]), $a([$1.size - 2, $1.size - 9])]), $a([$a([2, 8]), $a([$1.size - 3, $1.size - 9])]), $a([$a([3, 8]), $a([$1.size - 4, $1.size - 9])]), $a([$a([4, 8]), $a([$1.size - 5, $1.size - 9])]), $a([$a([5, 8]), $a([$1.size - 6, $1.size - 9])]), $a([$a([6, 8]), $a([$1.size - 7, $1.size - 9])]), $a([$a([7, 8]), $a([$1.size - 8, $1.size - 9])]), $a([$a([8, 8]), $a([$1.size - 9, $1.size - 9])]), $a([$a([8, 7]), $a([$1.size - 9, $1.size - 8])]), $a([$a([8, 6]), $a([$1.size - 9, $1.size - 7])]), $a([$a([8, 5]), $a([$1.size - 9, $1.size - 6])]), $a([$a([8, 4]), $a([$1.size - 9, $1.size - 5])]), $a([$a([8, 3]), $a([$1.size - 9, $1.size - 4])]), $a([$a([8, 2]), $a([$1.size - 9, $1.size - 3])]), $a([$a([8, 1]), $a([$1.size - 9, $1.size - 2])]), $a([$a([8, 0]), $a([$1.size - 9, $1.size - 1])]), $a([$a([$1.size - 9, 0]), $a([8, $1.size - 1])]), $a([$a([$1.size - 9, 1]), $a([8, $1.size - 2])]), $a([$a([$1.size - 9, 2]), $a([8, $1.size - 3])]), $a([$a([$1.size - 9, 3]), $a([8, $1.size - 4])]), $a([$a([$1.size - 9, 4]), $a([8, $1.size - 5])]), $a([$a([$1.size - 9, 5]), $a([8, $1.size - 6])]), $a([$a([$1.size - 9, 6]), $a([8, $1.size - 7])]), $a([$a([$1.size - 9, 7]), $a([8, $1.size - 8])]), $a([$a([$1.size - 9, 8]), $a([8, $1.size - 9])]), $a([$a([$1.size - 8, 8]), $a([7, $1.size - 9])]), $a([$a([$1.size - 7, 8]), $a([6, $1.size - 9])]), $a([$a([$1.size - 6, 8]), $a([5, $1.size - 9])]), $a([$a([$1.size - 5, 8]), $a([4, $1.size - 9])]), $a([$a([$1.size - 4, 8]), $a([3, $1.size - 9])]), $a([$a([$1.size - 3, 8]), $a([2, $1.size - 9])]), $a([$a([$1.size - 2, 8]), $a([1, $1.size - 9])]), $a([$a([$1.size - 1, 8]), $a([0, $1.size - 9])])]); /*20663*/
		var _U1 = $1.functionmap; /*20664*/
		for (var _U2 = 0, _U3 = _U1.length; _U2 < _U3; _U2++) {
			/*20666*/
			$forall($get(_U1, _U2), function() {
				/*20665*/
				$forall($k[--$j]); /*20665*/
				$1.qmv(); /*20665*/
				$put($1.pixs, $k[--$j], 0); /*20665*/
			}); /*20665*/
		} /*20665*/
		var _UE = $a([function() {
			$j -= 2; /*20669*/
			$k[$j++] = 1; /*20669*/
		}, function() {
			var _U8 = $k[--$j]; /*20670*/
			var _U9 = $k[--$j]; /*20670*/
			$k[$j++] = (_U9 + _U8) % 2; /*20670*/
		}, function() {
			var _UA = $k[--$j]; /*20671*/
			var _UB = $k[--$j]; /*20671*/
			$k[$j++] = (((_UA + _UB) % 3) + (_UB % 3)) % 2; /*20671*/
		}, function() {
			var _UC = $k[--$j]; /*20672*/
			var _UD = $k[--$j]; /*20672*/
			$k[$j++] = ((_UD % _UC) + ((_UC % _UD) + ((_UC % 3) + (_UD % 3)))) % 2; /*20673*/
		}]); /*20673*/
		$1.maskfuncs = _UE; /*20674*/
		if ($1.mask != -1) { //no-else/*20678*/
			$1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); /*20676*/
			$1.bestmaskval = $1.mask - 1; /*20677*/
		} /*20677*/
		$1.masks = $a($1.maskfuncs.length); /*20679*/
		for (var _UP = 0, _UO = $1.masks.length - 1; _UP <= _UO; _UP += 1) {
			/*20693*/
			$1.m = _UP; /*20681*/
			$1.mask = $a($1.size * $1.size); /*20682*/
			for (var _UV = 0, _UU = $1.size - 1; _UV <= _UU; _UV += 1) {
				/*20691*/
				$1.j = _UV; /*20684*/
				for (var _UY = 0, _UX = $1.size - 1; _UY <= _UX; _UY += 1) {
					/*20690*/
					$1.i = _UY; /*20686*/
					$k[$j++] = $1.i + 1; /*20687*/
					$k[$j++] = $1.j + 1; /*20687*/
					$get($1.maskfuncs, $1.m)(); /*20687*/
					var _Ue = $k[--$j]; /*20687*/
					$k[$j++] = _Ue == 0; /*20688*/
					$k[$j++] = $1.pixs; /*20688*/
					$k[$j++] = $1.i; /*20688*/
					$k[$j++] = $1.j; /*20688*/
					$1.qmv(); /*20688*/
					var _Ui = $k[--$j]; /*20688*/
					var _Uk = $get($k[--$j], _Ui); /*20688*/
					var _Um = ($k[--$j] && (_Uk == -1)) ? 1 : 0; /*20688*/
					$k[$j++] = _Um; /*20689*/
					$k[$j++] = $1.mask; /*20689*/
					$k[$j++] = $1.i; /*20689*/
					$k[$j++] = $1.j; /*20689*/
					$1.qmv(); /*20689*/
					var _Uq = $k[--$j]; /*20689*/
					var _Ur = $k[--$j]; /*20689*/
					$put(_Ur, _Uq, $k[--$j]); /*20689*/
				} /*20689*/
			} /*20689*/
			$put($1.masks, $1.m, $1.mask); /*20692*/
		} /*20692*/
		$1.posx = 0; /*20696*/
		$1.posy = 0; /*20697*/
		$1.num = 0; /*20698*/
		for (;;) {
			/*20708*/
			if ($1.posy == $1.size) { //no-else/*20700*/
				break; /*20700*/
			} /*20700*/
			$k[$j++] = $1.pixs; /*20701*/
			$k[$j++] = $1.posx; /*20701*/
			$k[$j++] = $1.posy; /*20701*/
			$1.qmv(); /*20701*/
			var _V1 = $k[--$j]; /*20701*/
			if ($get($k[--$j], _V1) == -1) { //no-else/*20705*/
				var _V6 = $get($1.cws, ~~($1.num / 8)); /*20702*/
				var _V8 = -(7 - ($1.num % 8)); /*20702*/
				$k[$j++] = ((_V8 < 0 ? _V6 >>> -_V8 : _V6 << _V8)) & 1; /*20703*/
				$k[$j++] = $1.pixs; /*20703*/
				$k[$j++] = $1.posx; /*20703*/
				$k[$j++] = $1.posy; /*20703*/
				$1.qmv(); /*20703*/
				var _VC = $k[--$j]; /*20703*/
				var _VD = $k[--$j]; /*20703*/
				$put(_VD, _VC, $k[--$j]); /*20703*/
				$1.num = $1.num + 1; /*20704*/
			} /*20704*/
			$1.posx = $1.posx + 1; /*20706*/
			if ($1.posx == $1.size) { //no-else/*20707*/
				$1.posx = 0; /*20707*/
				$1.posy = $1.posy + 1; /*20707*/
			} /*20707*/
		} /*20707*/
		$1.evalfulln1n3 = function() {
			$1.scrle = $k[--$j]; /*20712*/
			$k[$j++] = 'scr1'; /*20714*/
			$k[$j++] = 0; /*20714*/
			$forall($1.scrle, function() {
				/*20714*/
				var _VM = $k[--$j]; /*20714*/
				$k[$j++] = _VM; /*20714*/
				if (_VM >= 3) { //no-else/*20714*/
					var _VN = $k[--$j]; /*20714*/
					var _VP = $k[--$j] + (_VN * 4); /*20714*/
					$k[$j++] = _VP; /*20714*/
					$k[$j++] = _VP; /*20714*/
				} /*20714*/
				$j--; /*20714*/
			}); /*20714*/
			var _VQ = $k[--$j]; /*20714*/
			$1[$k[--$j]] = _VQ; /*20714*/
			$1.scr3 = 0; /*20715*/
			for (var _VU = 5, _VT = $1.scrle.length - 1; _VU <= _VT; _VU += 2) {
				/*20731*/
				$1.j = _VU; /*20718*/
				if (($get($1.scrle, $1.j) % 3) == 0) { //no-else/*20730*/
					$1.fact = ~~($get($1.scrle, $1.j) / 3); /*20720*/
					$forall($geti($1.scrle, $1.j - 4, 4), function() {
						/*20721*/
						var _Vf = $k[--$j]; /*20721*/
						$k[$j++] = _Vf == $1.fact; /*20721*/
					}); /*20721*/
					var _Vg = $k[--$j]; /*20721*/
					var _Vh = $k[--$j]; /*20721*/
					var _Vi = $k[--$j]; /*20721*/
					if ($k[--$j] && (_Vi && (_Vh && _Vg))) { //no-else/*20729*/
						if (($1.j == 5) || (($1.j + 2) >= $1.scrle.length)) {
							/*20726*/
							$1.scr3 = $1.scr3 + 50; /*20723*/
						} else {
							/*20726*/
							if (($get($1.scrle, $1.j - 5) >= 3) || ($get($1.scrle, $1.j + 1) >= 3)) { //no-else/*20727*/
								$1.scr3 = $1.scr3 + 50; /*20726*/
							} /*20726*/
						} /*20726*/
					} /*20726*/
				} /*20726*/
			} /*20726*/
			for (var _Vx = 1, _Vw = $1.scrle.length - 5; _Vx <= _Vw; _Vx += 2) {
				/*20747*/
				$1.j = _Vx; /*20734*/
				if (($get($1.scrle, $1.j) % 3) == 0) { //no-else/*20746*/
					$1.fact = ~~($get($1.scrle, $1.j) / 3); /*20736*/
					$forall($geti($1.scrle, $1.j + 1, 4), function() {
						/*20737*/
						var _W8 = $k[--$j]; /*20737*/
						$k[$j++] = _W8 == $1.fact; /*20737*/
					}); /*20737*/
					var _W9 = $k[--$j]; /*20737*/
					var _WA = $k[--$j]; /*20737*/
					var _WB = $k[--$j]; /*20737*/
					if ($k[--$j] && (_WB && (_WA && _W9))) { //no-else/*20745*/
						if (($1.j == 1) || (($1.j + 6) >= $1.scrle.length)) {
							/*20742*/
							$1.scr3 = $1.scr3 + 50; /*20739*/
						} else {
							/*20742*/
							if (($get($1.scrle, $1.j - 1) >= 3) || ($get($1.scrle, $1.j + 5) >= 3)) { //no-else/*20743*/
								$1.scr3 = $1.scr3 + 50; /*20742*/
							} /*20742*/
						} /*20742*/
					} /*20742*/
				} /*20742*/
			} /*20742*/
			$k[$j++] = $1.scr1; /*20748*/
			$k[$j++] = $1.scr3; /*20748*/
		}; /*20749*/
		$1.evalfull = function() {
			$1.sym = $k[--$j]; /*20753*/
			$1.n1 = 0; /*20755*/
			$1.n3 = 0; /*20755*/
			$1.rle = $a($1.size + 1); /*20756*/
			$1.lastpairs = $a($1.size); /*20757*/
			$1.thispairs = $a($1.size); /*20758*/
			$1.sizeadd1 = $1.size + 1; /*20759*/
			for (var _Wa = 0, _WZ = $1.size - 1; _Wa <= _WZ; _Wa += 1) {
				/*20784*/
				$1.i = _Wa; /*20761*/
				$k[$j++] = Infinity; /*20764*/
				var _Wc = $1.size; /*20765*/
				$k[$j++] = 0; /*20767*/
				$k[$j++] = 0; /*20767*/
				for (var _We = $1.i, _Wf = _Wc, _Wd = (_Wc * _Wc) - 1; _Wf < 0 ? _We >= _Wd : _We <= _Wd; _We += _Wf) {
					/*20767*/
					var _Wh = $get($1.sym, _We); /*20766*/
					var _Wi = $k[--$j]; /*20766*/
					$k[$j++] = _Wh; /*20766*/
					if ($eq(_Wi, _Wh)) {
						/*20766*/
						var _Wj = $k[--$j]; /*20766*/
						var _Wk = $k[--$j]; /*20766*/
						$k[$j++] = _Wk + 1; /*20766*/
						$k[$j++] = _Wj; /*20766*/
					} else {
						/*20766*/
						var _Wl = $k[--$j]; /*20766*/
						$k[$j++] = 1; /*20766*/
						$k[$j++] = _Wl; /*20766*/
					} /*20766*/
				} /*20766*/
				$j--; /*20768*/
				var _Wn = $counttomark() + 2; /*20769*/
				$astore($geti($1.rle, 0, _Wn - 2)); /*20769*/
				$1.evalfulln1n3(); /*20770*/
				$1.n3 = $k[--$j] + $1.n3; /*20770*/
				$1.n1 = $k[--$j] + $1.n1; /*20770*/
				$j--; /*20771*/
				$1.symrow = $geti($1.sym, $1.i * $1.size, $1.size); /*20774*/
				$k[$j++] = Infinity; /*20775*/
				$k[$j++] = 0; /*20778*/
				$k[$j++] = 0; /*20778*/
				$forall($1.symrow, function() {
					/*20778*/
					var _Wz = $k[--$j]; /*20777*/
					var _X0 = $k[--$j]; /*20777*/
					$k[$j++] = _Wz; /*20777*/
					if ($eq(_X0, _Wz)) {
						/*20777*/
						var _X1 = $k[--$j]; /*20777*/
						var _X2 = $k[--$j]; /*20777*/
						$k[$j++] = _X2 + 1; /*20777*/
						$k[$j++] = _X1; /*20777*/
					} else {
						/*20777*/
						var _X3 = $k[--$j]; /*20777*/
						$k[$j++] = 1; /*20777*/
						$k[$j++] = _X3; /*20777*/
					} /*20777*/
				}); /*20777*/
				$j--; /*20779*/
				var _X5 = $counttomark() + 2; /*20780*/
				$astore($geti($1.rle, 0, _X5 - 2)); /*20780*/
				$1.evalfulln1n3(); /*20781*/
				$1.n3 = $k[--$j] + $1.n3; /*20781*/
				$1.n1 = $k[--$j] + $1.n1; /*20781*/
				$j--; /*20782*/
			} /*20782*/
			$k[$j++] = $1.n1 + $1.n3; /*20786*/
		}; /*20787*/
		$1.bestscore = 999999999; /*20790*/
		for (var _XF = 0, _XE = $1.masks.length - 1; _XF <= _XE; _XF += 1) {
			/*20808*/
			$1.m = _XF; /*20792*/
			$1.masksym = $a($1.size * $1.size); /*20793*/
			for (var _XM = 0, _XL = ($1.size * $1.size) - 1; _XM <= _XL; _XM += 1) {
				/*20797*/
				$1.i = _XM; /*20795*/
				$put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); /*20796*/
			} /*20796*/
			if ($1.masks.length != 1) {
				/*20806*/
				$k[$j++] = $1.masksym; /*20799*/
				$1.evalfull(); /*20799*/
				$1.score = $k[--$j]; /*20799*/
				if ($1.score < $1.bestscore) { //no-else/*20804*/
					$1.bestsym = $1.masksym; /*20801*/
					$1.bestmaskval = $1.m; /*20802*/
					$1.bestscore = $1.score; /*20803*/
				} /*20803*/
			} else {
				/*20806*/
				$1.bestsym = $1.masksym; /*20806*/
			} /*20806*/
		} /*20806*/
		$1.pixs = $1.bestsym; /*20809*/
		$1.funval = (((((~~(($1.size - 21) / 2)) + 20) * 4) + $1.eclval) * 4) + $1.bestmaskval; /*20812*/
		$k[$j++] = $a([($1.funval & 3840) >>> 8, ($1.funval & 240) >>> 4, $1.funval & 15]); /*20816*/
		$k[$j++] = 4; /*20816*/
		$k[$j++] = 16; /*20816*/
		$k[$j++] = 19; /*20816*/
		$1.rscodes(); /*20816*/
		$1.funvals = $k[--$j]; /*20816*/
		$k[$j++] = Infinity; /*20822*/
		$forall($1.funvals, function() {
			/*20820*/
			$k[$j++] = 4; /*20819*/
			$1.tobin(); /*20819*/
			$forall($k[--$j], function() {
				/*20819*/
				var _Xr = $k[--$j]; /*20819*/
				$k[$j++] = _Xr - 48; /*20819*/
			}); /*20819*/
		}); /*20819*/
		$k[$j++] = 0; /*20821*/
		$k[$j++] = 1; /*20821*/
		$k[$j++] = 0; /*20821*/
		$k[$j++] = 1; /*20821*/
		$k[$j++] = 0; /*20821*/
		$k[$j++] = 1; /*20821*/
		$1.funbits = $a(); /*20822*/
		for (var _Xv = 0, _Xu = $1.functionmap.length - 1; _Xv <= _Xu; _Xv += 1) {
			/*20828*/
			$1.i = _Xv; /*20824*/
			$forall($get($1.functionmap, $1.i), function() {
				/*20827*/
				var _Y0 = $k[--$j]; /*20826*/
				$k[$j++] = $1.pixs; /*20826*/
				$aload(_Y0); /*20826*/
				$1.qmv(); /*20826*/
				var _Y4 = $k[--$j]; /*20826*/
				$put($k[--$j], _Y4, $get($1.funbits, $1.i)); /*20826*/
			}); /*20826*/
		} /*20826*/
		var _YC = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.size],
			["pixy", $1.size],
			["height", ($1.size * 2) / 72],
			["width", ($1.size * 2) / 72],
			["opt", $1.options]
		]); /*20838*/
		$k[$j++] = _YC; /*20841*/
		if (!$1.dontdraw) { //no-else/*20841*/
			$0.renmatrix(); /*20841*/
		} /*20841*/
	};
	$0.dotcode = function() {
		var $1 = {}; /*20870*/
		$1.options = $k[--$j]; /*20872*/
		$1.barcode = $k[--$j]; /*20873*/
		$1.dontdraw = false; /*20875*/
		$1.rows = -1; /*20876*/
		$1.columns = -1; /*20877*/
		$1.ratio = -1; /*20878*/
		$1.parse = false; /*20879*/
		$1.parsefnc = false; /*20880*/
		$1.raw = false; /*20881*/
		$1.fast = false; /*20882*/
		$1.mask = -1; /*20883*/
		$forall($1.options, function() {
			/*20894*/
			var _3 = $k[--$j]; /*20894*/
			$1[$k[--$j]] = _3; /*20894*/
		}); /*20894*/
		$1.rows = ~~$1.rows; /*20896*/
		$1.columns = ~~$1.columns; /*20897*/
		$1.ratio = +$1.ratio; /*20898*/
		$1.mask = ~~$1.mask; /*20899*/
		if ((($1.ratio == -1) && ($1.rows == -1)) && ($1.columns == -1)) { //no-else/*20904*/
			$1.ratio = 3 / 2; /*20903*/
		} /*20903*/
		$1.barlen = $1.barcode.length; /*20927*/
		$1.laa = -1; /*20930*/
		$1.lab = -2; /*20930*/
		$1.lac = -3; /*20930*/
		$1.bin = -4; /*20930*/
		$1.sfa = -5; /*20931*/
		$1.sfb = -6; /*20931*/
		$1.sb2 = -7; /*20931*/
		$1.sb3 = -8; /*20931*/
		$1.sb4 = -9; /*20932*/
		$1.sb5 = -10; /*20932*/
		$1.sb6 = -11; /*20932*/
		$1.sfc = -12; /*20932*/
		$1.sc2 = -13; /*20933*/
		$1.sc3 = -14; /*20933*/
		$1.sc4 = -15; /*20933*/
		$1.sc5 = -16; /*20933*/
		$1.sc6 = -17; /*20934*/
		$1.sc7 = -18; /*20934*/
		$1.bsa = -19; /*20934*/
		$1.bsb = -20; /*20934*/
		$1.tma = -21; /*20935*/
		$1.tmb = -22; /*20935*/
		$1.tmc = -23; /*20935*/
		$1.tms = -24; /*20935*/
		$1.fn1 = -25; /*20936*/
		$1.fn2 = -26; /*20936*/
		$1.fn3 = -27; /*20936*/
		$1.crl = -28; /*20936*/
		$1.aim = -29; /*20937*/
		$1.m05 = -30; /*20937*/
		$1.m06 = -31; /*20937*/
		$1.m12 = -32; /*20937*/
		$1.mac = -33; /*20938*/
		$1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.sfb, $1.crl, "96"]), $a([$1.sb2, 9, "97"]), $a([$1.sb3, 28, "98"]), $a([$1.sb4, 29, "99"]), $a([$1.sb5, 30, $1.aim]), $a([$1.sb6, $1.sfa, $1.laa]), $a([$1.lab, $1.laa, $1.sfb]), $a([$1.sc2, $1.sc2, $1.sb2]), $a([$1.sc3, $1.sc3, $1.sb3]), $a([$1.sc4, $1.sc4, $1.sb4]), $a([$1.lac, $1.lac, $1.lab]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.fn2, $1.fn2, $1.fn2]), $a([$1.fn3, $1.fn3, $1.fn3]), $a([$1.bsa, $1.bsa, $1.bsa]), $a([$1.bsb, $1.bsb, $1.bsb]), $a([$1.bin, $1.bin, $1.bin])]); /*20981*/
		$1.charvals = $a([new Map, new Map, new Map]); /*20984*/
		for (var _2n = 0, _2m = $1.charmaps.length - 1; _2n <= _2m; _2n += 1) {
			/*20993*/
			$1.i = _2n; /*20986*/
			$1.encs = $get($1.charmaps, $1.i); /*20987*/
			for (var _2r = 0; _2r <= 2; _2r += 1) {
				/*20992*/
				$1.j = _2r; /*20989*/
				var _2u = $get($1.encs, $1.j); /*20990*/
				$k[$j++] = _2u; /*20990*/
				if ($eq($type(_2u), 'stringtype')) { //no-else/*20990*/
					var _2x = $get($k[--$j], 0); /*20990*/
					$k[$j++] = _2x; /*20990*/
				} /*20990*/
				$put($get($1.charvals, $1.j), $k[--$j], $1.i); /*20991*/
			} /*20991*/
		} /*20991*/
		$1.Avals = $get($1.charvals, 0); /*20994*/
		$1.Bvals = $get($1.charvals, 1); /*20995*/
		$put($1.Bvals, $1.m05, 97); /*20996*/
		$put($1.Bvals, $1.m06, 98); /*20997*/
		$put($1.Bvals, $1.m12, 99); /*20998*/
		$put($1.Bvals, $1.mac, 100); /*20999*/
		$1.Cvals = $get($1.charvals, 2); /*21000*/
		$k[$j++] = Infinity; /*21002*/
		var _3R = $a([$1.sc2, $1.sc3, $1.sc4, $1.sc5, $1.sc6, $1.sc7, $1.tma, $1.tmb, $1.tmc, $1.tms]); /*21002*/
		$k[$j++] = 102; /*21002*/
		for (var _3S = 0, _3T = _3R.length; _3S < _3T; _3S++) {
			/*21002*/
			var _3W = $k[--$j] + 1; /*21002*/
			$k[$j++] = $get(_3R, _3S); /*21002*/
			$k[$j++] = _3W; /*21002*/
			$k[$j++] = _3W; /*21002*/
		} /*21002*/
		$j--; /*21002*/
		$1.BINvals = $d(); /*21003*/
		var _3b = new Map([
			["FNC1", $1.fn1],
			["FNC2", $1.fn2],
			["FNC3", $1.fn3]
		]); /*21008*/
		$1.fncvals = _3b; /*21009*/
		$1.msg = $a($1.barlen); /*21010*/
		$1.i = 0; /*21011*/
		$1.j = 0; /*21011*/
		for (;;) {
			/*21025*/
			if ($1.i == $1.barlen) { //no-else/*21012*/
				break; /*21012*/
			} /*21012*/
			$1.char = $get($1.barcode, $1.i); /*21013*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*21021*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*21019*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*21016*/
					$1.i = $1.i + 4; /*21017*/
				} else {
					/*21019*/
					$1.i = $1.i + 1; /*21019*/
				} /*21019*/
			} /*21019*/
			$put($1.msg, $1.j, $1.char); /*21022*/
			$1.i = $1.i + 1; /*21023*/
			$1.j = $1.j + 1; /*21024*/
		} /*21024*/
		$1.msg = $geti($1.msg, 0, $1.j); /*21026*/
		$1.msglen = $1.msg.length; /*21027*/
		$k[$j++] = Infinity; /*21030*/
		for (var _47 = 0, _48 = $1.msglen + 1; _47 < _48; _47++) {
			/*21030*/
			$k[$j++] = 0; /*21030*/
		} /*21030*/
		$1.nDigits = $a(); /*21030*/
		$k[$j++] = Infinity; /*21031*/
		for (var _4B = 0, _4C = $1.msglen + 1; _4B < _4C; _4B++) {
			/*21031*/
			$k[$j++] = false; /*21031*/
		} /*21031*/
		$1.SeventeenTen = $a(); /*21031*/
		$k[$j++] = Infinity; /*21032*/
		for (var _4F = 0, _4G = $1.msglen + 1; _4F < _4G; _4F++) {
			/*21032*/
			$k[$j++] = false; /*21032*/
		} /*21032*/
		$1.ECI = $a(); /*21032*/
		$k[$j++] = Infinity; /*21033*/
		for (var _4J = 0, _4K = $1.msglen + 1; _4J < _4K; _4J++) {
			/*21033*/
			$k[$j++] = false; /*21033*/
		} /*21033*/
		$1.DatumA = $a(); /*21033*/
		$k[$j++] = Infinity; /*21034*/
		for (var _4N = 0, _4O = $1.msglen + 1; _4N < _4O; _4N++) {
			/*21034*/
			$k[$j++] = false; /*21034*/
		} /*21034*/
		$1.DatumB = $a(); /*21034*/
		$k[$j++] = Infinity; /*21035*/
		for (var _4R = 0, _4S = $1.msglen + 1; _4R < _4S; _4R++) {
			/*21035*/
			$k[$j++] = false; /*21035*/
		} /*21035*/
		$1.DatumC = $a(); /*21035*/
		$k[$j++] = Infinity; /*21036*/
		for (var _4V = 0, _4W = $1.msglen + 8; _4V < _4W; _4V++) {
			/*21036*/
			$k[$j++] = false; /*21036*/
		} /*21036*/
		$1.Binary = $a(); /*21036*/
		$k[$j++] = Infinity; /*21037*/
		for (var _4Z = 0, _4a = $1.msglen + 1; _4Z < _4a; _4Z++) {
			/*21037*/
			$k[$j++] = 0; /*21037*/
		} /*21037*/
		$1.AheadC = $a(); /*21037*/
		$k[$j++] = Infinity; /*21038*/
		for (var _4d = 0, _4e = $1.msglen + 1; _4d < _4e; _4d++) {
			/*21038*/
			$k[$j++] = 0; /*21038*/
		} /*21038*/
		$1.TryC = $a(); /*21038*/
		$k[$j++] = Infinity; /*21039*/
		for (var _4h = 0, _4i = $1.msglen + 1; _4h < _4i; _4h++) {
			/*21039*/
			$k[$j++] = 0; /*21039*/
		} /*21039*/
		$1.AheadA = $a(); /*21039*/
		$k[$j++] = Infinity; /*21040*/
		for (var _4l = 0, _4m = $1.msglen + 1; _4l < _4m; _4l++) {
			/*21040*/
			$k[$j++] = 0; /*21040*/
		} /*21040*/
		$1.AheadB = $a(); /*21040*/
		$k[$j++] = Infinity; /*21041*/
		for (var _4p = 0, _4q = $1.msglen + 1; _4p < _4q; _4p++) {
			/*21041*/
			$k[$j++] = 0; /*21041*/
		} /*21041*/
		$1.UntilEndSeg = $a(); /*21041*/
		for (var _4t = $1.msglen - 1; _4t >= 0; _4t -= 1) {
			/*21096*/
			$1.i = _4t; /*21043*/
			$1.barchar = $get($1.msg, $1.i); /*21044*/
			if (($1.barchar >= 48) && ($1.barchar <= 57)) { //no-else/*21047*/
				$put($1.nDigits, $1.i, $get($1.nDigits, $1.i + 1) + 1); /*21046*/
			} /*21046*/
			var _56 = $get($1.Avals, $1.barchar) !== undefined; /*21048*/
			if (_56) { //no-else/*21048*/
				$put($1.DatumA, $1.i, true); /*21048*/
			} /*21048*/
			var _5B = $get($1.Bvals, $1.barchar) !== undefined; /*21049*/
			if (_5B) { //no-else/*21049*/
				$put($1.DatumB, $1.i, true); /*21049*/
			} /*21049*/
			$1.CRLF = false; /*21050*/
			if (($1.barchar == 13) && ($1.i < ($1.msglen - 1))) { //no-else/*21053*/
				if ($get($1.msg, $1.i + 1) == 10) { //no-else/*21052*/
					$1.CRLF = true; /*21052*/
				} /*21052*/
			} /*21052*/
			if ($1.CRLF) { //no-else/*21054*/
				$put($1.DatumB, $1.i, true); /*21054*/
			} /*21054*/
			if ($get($1.nDigits, $1.i) >= 2) { //no-else/*21055*/
				$put($1.DatumC, $1.i, true); /*21055*/
			} /*21055*/
			if ($1.barchar < 0) { //no-else/*21056*/
				$put($1.DatumC, $1.i, true); /*21056*/
			} /*21056*/
			if ($1.barchar >= 128) { //no-else/*21057*/
				$put($1.Binary, $1.i, true); /*21057*/
			} /*21057*/
			if ($get($1.nDigits, $1.i) >= 10) { //no-else/*21071*/
				$k[$j++] = Infinity; /*21059*/
				$aload($geti($1.msg, $1.i, 10)); /*21060*/
				for (var _5e = 0, _5f = 1; _5e < _5f; _5e++) {
					/*21068*/
					if ($k[--$j] != 48) { //no-else/*21062*/
						$k[$j++] = false; /*21062*/
						break; /*21062*/
					} /*21062*/
					if ($k[--$j] != 49) { //no-else/*21063*/
						$k[$j++] = false; /*21063*/
						break; /*21063*/
					} /*21063*/
					$j -= 6; /*21064*/
					if ($k[--$j] != 55) { //no-else/*21065*/
						$k[$j++] = false; /*21065*/
						break; /*21065*/
					} /*21065*/
					if ($k[--$j] != 49) { //no-else/*21066*/
						$k[$j++] = false; /*21066*/
						break; /*21066*/
					} /*21066*/
					$k[$j++] = true; /*21067*/
				} /*21067*/
				$put($1.SeventeenTen, $1.i, $k[--$j]); /*21069*/
				$cleartomark(); /*21070*/
			} /*21070*/
			if (($get($1.nDigits, $1.i + 1) >= 6) && ($get($1.msg, $1.i) == $1.fn2)) { //no-else/*21074*/
				$put($1.ECI, $1.i, true); /*21073*/
			} /*21073*/
			if (($1.barchar < 0) && ($1.barchar != $1.fn3)) {
				/*21081*/
				$put($1.AheadC, $1.i, $get($1.AheadC, $1.i + 1) + 1); /*21076*/
			} else {
				/*21081*/
				if ($get($1.nDigits, $1.i) <= 1) {
					/*21081*/
					$put($1.AheadC, $1.i, 0); /*21079*/
				} else {
					/*21081*/
					$put($1.AheadC, $1.i, $get($1.AheadC, $1.i + 2) + 1); /*21081*/
				} /*21081*/
			} /*21081*/
			if (($get($1.nDigits, $1.i) > 0) && $gt($get($1.AheadC, $1.i), $get($1.AheadC, $1.i + 1))) { //no-else/*21086*/
				$put($1.TryC, $1.i, $get($1.AheadC, $1.i)); /*21085*/
			} /*21085*/
			if (($get($1.DatumA, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //no-else/*21089*/
				$put($1.AheadA, $1.i, $get($1.AheadA, $1.i + 1) + 1); /*21088*/
			} /*21088*/
			if (($get($1.DatumB, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //no-else/*21092*/
				$k[$j++] = $1.AheadB; /*21091*/
				$k[$j++] = $1.i; /*21091*/
				$k[$j++] = $1.AheadB; /*21091*/
				$k[$j++] = $1.i + 1; /*21091*/
				if ($1.CRLF) { //no-else/*21091*/
					var _6s = $k[--$j]; /*21091*/
					$k[$j++] = _6s + 1; /*21091*/
				} /*21091*/
				var _6t = $k[--$j]; /*21091*/
				var _6v = $get($k[--$j], _6t); /*21091*/
				var _6w = $k[--$j]; /*21091*/
				$put($k[--$j], _6w, _6v + 1); /*21091*/
			} /*21091*/
			if ($1.barchar != $1.fn3) { //no-else/*21095*/
				$put($1.UntilEndSeg, $1.i, $get($1.UntilEndSeg, $1.i + 1) + 1); /*21094*/
			} /*21094*/
		} /*21094*/
		$1.A = 0; /*21098*/
		$1.B = 1; /*21098*/
		$1.C = 2; /*21098*/
		$1.BIN = 3; /*21098*/
		$1.addtocws = function() {
			var _75 = $k[--$j]; /*21101*/
			$puti($1.cws, $1.j, _75); /*21101*/
			$1.j = _75.length + $1.j; /*21102*/
		}; /*21103*/
		$1.base259to103 = function() {
			$1.in = $k[--$j]; /*21107*/
			$1.inlen = $1.in.length; /*21108*/
			$k[$j++] = Infinity; /*21109*/
			for (var _7C = 0, _7D = 5 - $1.inlen; _7C < _7D; _7C++) {
				/*21109*/
				$k[$j++] = 0; /*21109*/
			} /*21109*/
			$aload($1.in); /*21109*/
			$1.in = $a(); /*21109*/
			$1.out = $a(6); /*21110*/
			$k[$j++] = Infinity; /*21111*/
			$aload($geti($1.in, 0, 2)); /*21111*/
			$1.msbs = $a(); /*21111*/
			$k[$j++] = Infinity; /*21115*/
			$aload($1.msbs); /*21113*/
			var _7L = $k[--$j]; /*21113*/
			var _7M = $k[--$j]; /*21113*/
			$k[$j++] = _7L + (_7M * 259); /*21114*/
			for (var _7N = 0, _7O = 2; _7N < _7O; _7N++) {
				/*21114*/
				var _7P = $k[--$j]; /*21114*/
				$k[$j++] = _7P % 103; /*21114*/
				$k[$j++] = ~~(_7P / 103); /*21114*/
			} /*21114*/
			$1.mscs = $a(); /*21115*/
			$k[$j++] = Infinity; /*21116*/
			$aload($geti($1.in, 2, 3)); /*21116*/
			$1.lsbs = $a(); /*21116*/
			$k[$j++] = Infinity; /*21120*/
			$aload($1.lsbs); /*21118*/
			var _7V = $k[--$j]; /*21118*/
			var _7W = $k[--$j]; /*21118*/
			var _7X = $k[--$j]; /*21118*/
			$k[$j++] = (_7V + (_7W * 259)) + (_7X * 67081); /*21119*/
			for (var _7Y = 0, _7Z = 3; _7Y < _7Z; _7Y++) {
				/*21119*/
				var _7a = $k[--$j]; /*21119*/
				$k[$j++] = _7a % 103; /*21119*/
				$k[$j++] = ~~(_7a / 103); /*21119*/
			} /*21119*/
			$1.lscs = $a(); /*21120*/
			var _7d = $get($1.lscs, 0); /*21121*/
			var _7f = $get($1.mscs, 0); /*21121*/
			$put($1.out, 5, (_7d + (_7f * 42)) % 103); /*21122*/
			var _7i = $get($1.lscs, 1); /*21123*/
			var _7k = $get($1.mscs, 0); /*21123*/
			var _7m = $get($1.mscs, 1); /*21123*/
			$put($1.out, 4, ((((~~((_7d + (_7f * 42)) / 103)) + _7i) + (_7k * 68)) + (_7m * 42)) % 103); /*21124*/
			var _7p = $get($1.lscs, 2); /*21125*/
			var _7r = $get($1.mscs, 0); /*21125*/
			var _7t = $get($1.mscs, 1); /*21125*/
			var _7v = $get($1.mscs, 2); /*21125*/
			$put($1.out, 3, (((((~~(((((~~((_7d + (_7f * 42)) / 103)) + _7i) + (_7k * 68)) + (_7m * 42)) / 103)) + _7p) + (_7r * 92)) + (_7t * 68)) + (_7v * 42)) % 103); /*21126*/
			var _7y = $get($1.lscs, 3); /*21127*/
			var _80 = $get($1.mscs, 0); /*21127*/
			var _82 = $get($1.mscs, 1); /*21127*/
			var _84 = $get($1.mscs, 2); /*21127*/
			$put($1.out, 2, (((((~~((((((~~(((((~~((_7d + (_7f * 42)) / 103)) + _7i) + (_7k * 68)) + (_7m * 42)) / 103)) + _7p) + (_7r * 92)) + (_7t * 68)) + (_7v * 42)) / 103)) + _7y) + (_80 * 15)) + (_82 * 92)) + (_84 * 68)) % 103); /*21128*/
			var _87 = $get($1.mscs, 1); /*21129*/
			var _89 = $get($1.mscs, 2); /*21129*/
			$put($1.out, 1, (((~~((((((~~((((((~~(((((~~((_7d + (_7f * 42)) / 103)) + _7i) + (_7k * 68)) + (_7m * 42)) / 103)) + _7p) + (_7r * 92)) + (_7t * 68)) + (_7v * 42)) / 103)) + _7y) + (_80 * 15)) + (_82 * 92)) + (_84 * 68)) / 103)) + (_87 * 15)) + (_89 * 92)) % 103); /*21130*/
			$put($1.out, 0, ((~~((((~~((((((~~((((((~~(((((~~((_7d + (_7f * 42)) / 103)) + _7i) + (_7k * 68)) + (_7m * 42)) / 103)) + _7p) + (_7r * 92)) + (_7t * 68)) + (_7v * 42)) / 103)) + _7y) + (_80 * 15)) + (_82 * 92)) + (_84 * 68)) / 103)) + (_87 * 15)) + (_89 * 92)) / 103)) + ($get($1.mscs, 2) * 15)) % 103); /*21132*/
			$k[$j++] = $geti($1.out, (6 - $1.inlen) - 1, $1.inlen + 1); /*21133*/
		}; /*21134*/
		$1.finaliseBIN = function() {
			if ($1.bpos != 0) { //no-else/*21140*/
				$k[$j++] = $geti($1.bvals, 0, $1.bpos); /*21138*/
				$1.base259to103(); /*21138*/
				$aload($k[--$j]); /*21138*/
				$1.bpos = 0; /*21139*/
			} /*21139*/
		}; /*21141*/
		$1.addtobin = function() {
			$put($1.bvals, $1.bpos, $k[--$j]); /*21144*/
			$1.bpos = $1.bpos + 1; /*21145*/
			if ($1.bpos == 5) { //no-else/*21146*/
				$1.finaliseBIN(); /*21146*/
			} /*21146*/
		}; /*21147*/
		$1.ECIabc = function() {
			$k[$j++] = 0; /*21150*/
			$forall($geti($1.msg, $1.i + 1, 6), function() {
				/*21150*/
				var _8V = $k[--$j]; /*21150*/
				var _8W = $k[--$j]; /*21150*/
				$k[$j++] = (_8W + (_8V - 48)) * 10; /*21150*/
			}); /*21150*/
			var _8Y = ~~($k[--$j] / 10); /*21151*/
			$k[$j++] = _8Y; /*21155*/
			if (_8Y >= 40) { //no-else/*21155*/
				var _8a = $k[--$j] - 40; /*21153*/
				var _8b = _8a % 12769; /*21154*/
				$k[$j++] = (~~(_8a / 12769)) + 40; /*21154*/
				$k[$j++] = ~~(_8b / 113); /*21154*/
				$k[$j++] = _8b % 113; /*21154*/
			} /*21154*/
		}; /*21156*/
		$1.ECIbin = function() {
			$k[$j++] = Infinity; /*21167*/
			$k[$j++] = 0; /*21160*/
			$forall($geti($1.msg, $1.i + 1, 6), function() {
				/*21160*/
				var _8f = $k[--$j]; /*21160*/
				var _8g = $k[--$j]; /*21160*/
				$k[$j++] = (_8g + (_8f - 48)) * 10; /*21160*/
			}); /*21160*/
			var _8i = ~~($k[--$j] / 10); /*21161*/
			$k[$j++] = _8i; /*21169*/
			if (_8i >= 65536) {
				/*21167*/
				var _8j = $k[--$j]; /*21162*/
				var _8k = _8j % 65536; /*21162*/
				$k[$j++] = 258; /*21162*/
				$k[$j++] = ~~(_8j / 65536); /*21162*/
				$k[$j++] = ~~(_8k / 256); /*21162*/
				$k[$j++] = _8k % 256; /*21162*/
			} else {
				/*21167*/
				var _8l = $k[--$j]; /*21164*/
				$k[$j++] = _8l; /*21168*/
				if (_8l >= 256) {
					/*21167*/
					var _8m = $k[--$j]; /*21165*/
					$k[$j++] = 257; /*21165*/
					$k[$j++] = ~~(_8m / 256); /*21165*/
					$k[$j++] = _8m % 256; /*21165*/
				} else {
					/*21167*/
					var _8n = $k[--$j]; /*21167*/
					$k[$j++] = 256; /*21167*/
					$k[$j++] = _8n; /*21167*/
				} /*21167*/
			} /*21167*/
			var _8o = $a(); /*21167*/
			for (var _8p = 0, _8q = _8o.length; _8p < _8q; _8p++) {
				/*21172*/
				$k[$j++] = $get(_8o, _8p); /*21171*/
				$1.addtobin(); /*21171*/
			} /*21171*/
		}; /*21173*/
		$1.encC = function() {
			for (var _8s = 0, _8t = 1; _8s < _8t; _8s++) {
				/*21284*/
				if ($1.i == $1.segstart) { //no-else/*21202*/
					for (var _8w = 0, _8x = 1; _8w < _8x; _8w++) {
						/*21194*/
						if ($1.i > ($1.segend - 7)) { //no-else/*21179*/
							$k[$j++] = 0; /*21179*/
							break; /*21179*/
						} /*21179*/
						if ($get($1.msg, $1.segstart) != 91) { //no-else/*21180*/
							$k[$j++] = 0; /*21180*/
							break; /*21180*/
						} /*21180*/
						if ($get($1.msg, $1.segstart + 1) != 41) { //no-else/*21181*/
							$k[$j++] = 0; /*21181*/
							break; /*21181*/
						} /*21181*/
						if ($get($1.msg, $1.segstart + 2) != 62) { //no-else/*21182*/
							$k[$j++] = 0; /*21182*/
							break; /*21182*/
						} /*21182*/
						if ($get($1.msg, $1.segstart + 3) != 30) { //no-else/*21183*/
							$k[$j++] = 0; /*21183*/
							break; /*21183*/
						} /*21183*/
						var _9E = $get($1.msg, $1.segstart + 4); /*21184*/
						if ((_9E < 48) || (_9E > 57)) { //no-else/*21184*/
							$k[$j++] = 0; /*21184*/
							break; /*21184*/
						} /*21184*/
						var _9H = $get($1.msg, $1.segstart + 5); /*21185*/
						if ((_9H < 48) || (_9H > 57)) { //no-else/*21185*/
							$k[$j++] = 0; /*21185*/
							break; /*21185*/
						} /*21185*/
						if ($get($1.msg, $1.segend - 1) != 4) { //no-else/*21186*/
							$k[$j++] = 0; /*21186*/
							break; /*21186*/
						} /*21186*/
						var _9R = (($get($1.msg, $1.segstart + 4) - 48) * 10) + ($get($1.msg, $1.segstart + 5) - 48); /*21188*/
						$k[$j++] = _9R; /*21188*/
						if ((_9R != 5) && ((_9R != 6) && (_9R != 12))) { //no-else/*21188*/
							$j--; /*21188*/
							$k[$j++] = $1.mac; /*21188*/
							break; /*21188*/
						} /*21188*/
						if ($get($1.msg, $1.segstart + 6) != 29) { //no-else/*21189*/
							$j--; /*21189*/
							$k[$j++] = 0; /*21189*/
							break; /*21189*/
						} /*21189*/
						if ($get($1.msg, $1.segend - 2) != 30) { //no-else/*21190*/
							$j--; /*21190*/
							$k[$j++] = 0; /*21190*/
							break; /*21190*/
						} /*21190*/
						var _9Z = $k[--$j]; /*21191*/
						$k[$j++] = _9Z; /*21191*/
						if (_9Z == 5) { //no-else/*21191*/
							$j--; /*21191*/
							$k[$j++] = $1.m05; /*21191*/
							break; /*21191*/
						} /*21191*/
						if ($k[--$j] == 6) { //no-else/*21192*/
							$k[$j++] = $1.m06; /*21192*/
							break; /*21192*/
						} /*21192*/
						$k[$j++] = $1.m12; /*21193*/
						break; /*21193*/
					} /*21193*/
					$1.inmac = $k[--$j]; /*21195*/
					if ($1.inmac != 0) { //no-else/*21201*/
						$1.mode = $1.B; /*21197*/
						$k[$j++] = $a([$get($1.Bvals, $1.inmac)]); /*21198*/
						$1.addtocws(); /*21198*/
						var _9o = ($1.inmac != $1.mac) ? 7 : 6; /*21199*/
						$1.i = $1.i + _9o; /*21199*/
						break; /*21200*/
					} /*21200*/
				} /*21200*/
				if ($1.i == $1.segstart) { //no-else/*21213*/
					if ($get($1.nDigits, $1.i) >= 2) { //no-else/*21208*/
						$k[$j++] = $a([$get($1.Cvals, $1.fn1)]); /*21207*/
						$1.addtocws(); /*21207*/
					} /*21207*/
					if (($get($1.msg, $1.i) == $1.fn1) && ($get($1.nDigits, $1.i + 1) >= 2)) { //no-else/*21212*/
						$1.i = $1.i + 1; /*21211*/
					} /*21211*/
				} /*21211*/
				if ($get($1.SeventeenTen, $1.i)) { //no-else/*21223*/
					$k[$j++] = $a([$get($1.Cvals, $1.aim), (($get($1.msg, $1.i + 2) - 48) * 10) + ($get($1.msg, $1.i + 3) - 48), (($get($1.msg, $1.i + 4) - 48) * 10) + ($get($1.msg, $1.i + 5) - 48), (($get($1.msg, $1.i + 6) - 48) * 10) + ($get($1.msg, $1.i + 7) - 48)]); /*21220*/
					$1.addtocws(); /*21220*/
					$1.i = $1.i + 10; /*21221*/
					break; /*21222*/
				} /*21222*/
				if ($get($1.DatumC, $1.i)) { //no-else/*21245*/
					var _Ab = $get($1.msg, $1.i); /*21225*/
					if ((_Ab == $1.fn1) || ((_Ab == $1.fn2) || (_Ab == $1.fn3))) { //no-else/*21241*/
						$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*21226*/
						$1.addtocws(); /*21226*/
						if ($get($1.ECI, $1.i)) { //no-else/*21231*/
							$k[$j++] = Infinity; /*21228*/
							$1.ECIabc(); /*21228*/
							var _Ao = $a(); /*21228*/
							$k[$j++] = _Ao; /*21228*/
							$1.addtocws(); /*21228*/
							$1.i = $1.i + 7; /*21229*/
							break; /*21230*/
						} /*21230*/
						if (($get($1.msg, $1.i) == $1.fn3) && ($1.segstart != $1.i)) { //no-else/*21238*/
							$1.i = $1.i + 1; /*21233*/
							$1.inmac = 0; /*21234*/
							$1.segstart = $1.i; /*21235*/
							$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*21236*/
							break; /*21237*/
						} /*21237*/
						$1.i = $1.i + 1; /*21239*/
						break; /*21240*/
					} /*21240*/
					$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*21242*/
					$1.addtocws(); /*21242*/
					$1.i = $1.i + 2; /*21243*/
					break; /*21244*/
				} /*21244*/
				if ($get($1.Binary, $1.i)) { //no-else/*21259*/
					if ($get($1.nDigits, $1.i + 1) > 0) { //no-else/*21255*/
						if ($get($1.msg, $1.i) < 160) {
							/*21251*/
							$k[$j++] = $a([$get($1.Cvals, $1.bsa), $get($1.Avals, $get($1.msg, $1.i) - 128)]); /*21249*/
							$1.addtocws(); /*21249*/
						} else {
							/*21251*/
							$k[$j++] = $a([$get($1.Cvals, $1.bsb), $get($1.Bvals, $get($1.msg, $1.i) - 128)]); /*21251*/
							$1.addtocws(); /*21251*/
						} /*21251*/
						$1.i = $1.i + 1; /*21253*/
						break; /*21254*/
					} /*21254*/
					$k[$j++] = $a([$get($1.Cvals, $1.bin)]); /*21256*/
					$1.addtocws(); /*21256*/
					$1.mode = $1.BIN; /*21257*/
					break; /*21258*/
				} /*21258*/
				$1.m = $get($1.AheadA, $1.i); /*21260*/
				$1.n = $get($1.AheadB, $1.i); /*21260*/
				if ($gt($1.m, $1.n)) { //no-else/*21265*/
					$k[$j++] = $a([$get($1.Cvals, $1.laa)]); /*21262*/
					$1.addtocws(); /*21262*/
					$1.mode = $1.A; /*21263*/
					break; /*21264*/
				} /*21264*/
				if ($1.i == $1.segstart) { //no-else/*21272*/
					var _Bz = $get($1.msg, $1.i); /*21267*/
					if ((_Bz == 9) || ((_Bz == 28) || ((_Bz == 29) || (_Bz == 30)))) { //no-else/*21271*/
						$k[$j++] = $a([$get($1.Cvals, $1.laa)]); /*21268*/
						$1.addtocws(); /*21268*/
						$1.mode = $1.A; /*21269*/
						break; /*21270*/
					} /*21270*/
				} /*21270*/
				if ($1.n > 4) { //no-else/*21277*/
					$k[$j++] = $a([$get($1.Cvals, $1.lab)]); /*21274*/
					$1.addtocws(); /*21274*/
					$1.mode = $1.B; /*21275*/
					break; /*21276*/
				} /*21276*/
				$k[$j++] = $a([$get($1.Cvals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4]), $1.n - 1))]); /*21278*/
				$1.addtocws(); /*21278*/
				for (var _CM = 0, _CN = $1.n; _CM < _CN; _CM++) {
					/*21282*/
					$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*21280*/
					$1.addtocws(); /*21280*/
					$1.i = $1.i + 1; /*21281*/
				} /*21281*/
				break; /*21283*/
			} /*21283*/
		}; /*21285*/
		$1.encB = function() {
			for (var _CV = 0, _CW = 1; _CV < _CW; _CV++) {
				/*21360*/
				$1.n = $get($1.TryC, $1.i); /*21289*/
				if ($1.n >= 2) { //no-else/*21307*/
					if ($1.n > 4) { //no-else/*21295*/
						$k[$j++] = $a([$get($1.Bvals, $1.lac)]); /*21292*/
						$1.addtocws(); /*21292*/
						$1.mode = $1.C; /*21293*/
						break; /*21294*/
					} /*21294*/
					$k[$j++] = $a([$get($1.Bvals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $1.n - 1))]); /*21296*/
					$1.addtocws(); /*21296*/
					for (var _Cs = 0, _Ct = $1.n; _Cs < _Ct; _Cs++) {
						/*21305*/
						if ($get($1.msg, $1.i) < 0) {
							/*21303*/
							$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*21299*/
							$1.addtocws(); /*21299*/
							$1.i = $1.i + 1; /*21300*/
						} else {
							/*21303*/
							$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*21302*/
							$1.addtocws(); /*21302*/
							$1.i = $1.i + 2; /*21303*/
						} /*21303*/
					} /*21303*/
					break; /*21306*/
				} /*21306*/
				if ($get($1.DatumB, $1.i)) { //no-else/*21337*/
					var _DH = $get($1.msg, $1.i); /*21309*/
					if ((_DH == $1.fn1) || ((_DH == $1.fn2) || (_DH == $1.fn3))) { //no-else/*21326*/
						$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*21310*/
						$1.addtocws(); /*21310*/
						if ($get($1.ECI, $1.i)) { //no-else/*21315*/
							$k[$j++] = Infinity; /*21312*/
							$1.ECIabc(); /*21312*/
							var _DU = $a(); /*21312*/
							$k[$j++] = _DU; /*21312*/
							$1.addtocws(); /*21312*/
							$1.i = $1.i + 7; /*21313*/
							break; /*21314*/
						} /*21314*/
						if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //no-else/*21323*/
							$1.i = $1.i + 1; /*21317*/
							$1.mode = $1.C; /*21318*/
							$1.inmac = 0; /*21319*/
							$1.segstart = $1.i; /*21320*/
							$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*21321*/
							break; /*21322*/
						} /*21322*/
						$1.i = $1.i + 1; /*21324*/
						break; /*21325*/
					} /*21325*/
					if (($get($1.msg, $1.i) == 13) && ($1.i < ($1.msglen - 1))) { //no-else/*21333*/
						if ($get($1.msg, $1.i + 1) == 10) { //no-else/*21332*/
							$k[$j++] = $a([$get($1.Bvals, $1.crl)]); /*21329*/
							$1.addtocws(); /*21329*/
							$1.i = $1.i + 2; /*21330*/
							break; /*21331*/
						} /*21331*/
					} /*21331*/
					$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*21334*/
					$1.addtocws(); /*21334*/
					$1.i = $1.i + 1; /*21335*/
					break; /*21336*/
				} /*21336*/
				if ($get($1.Binary, $1.i)) { //no-else/*21351*/
					if ($get($1.DatumB, $1.i + 1)) { //no-else/*21347*/
						if ($get($1.msg, $1.i) < 160) {
							/*21343*/
							$k[$j++] = $a([$get($1.Bvals, $1.bsa), $get($1.Avals, $get($1.msg, $1.i) - 128)]); /*21341*/
							$1.addtocws(); /*21341*/
						} else {
							/*21343*/
							$k[$j++] = $a([$get($1.Bvals, $1.bsb), $get($1.Bvals, $get($1.msg, $1.i) - 128)]); /*21343*/
							$1.addtocws(); /*21343*/
						} /*21343*/
						$1.i = $1.i + 1; /*21345*/
						break; /*21346*/
					} /*21346*/
					$k[$j++] = $a([$get($1.Bvals, $1.bin)]); /*21348*/
					$1.addtocws(); /*21348*/
					$1.mode = $1.BIN; /*21349*/
					break; /*21350*/
				} /*21350*/
				if ($get($1.AheadA, $1.i) == 1) { //no-else/*21356*/
					$k[$j++] = $a([$get($1.Bvals, $1.sfa), $get($1.Avals, $get($1.msg, $1.i))]); /*21353*/
					$1.addtocws(); /*21353*/
					$1.i = $1.i + 1; /*21354*/
					break; /*21355*/
				} /*21355*/
				$k[$j++] = $a([$get($1.Bvals, $1.laa)]); /*21357*/
				$1.addtocws(); /*21357*/
				$1.mode = $1.A; /*21358*/
				break; /*21359*/
			} /*21359*/
		}; /*21361*/
		$1.encA = function() {
			for (var _Et = 0, _Eu = 1; _Et < _Eu; _Et++) {
				/*21433*/
				$1.n = $get($1.TryC, $1.i); /*21365*/
				if ($1.n >= 2) { //no-else/*21383*/
					if ($1.n > 4) { //no-else/*21371*/
						$k[$j++] = $a([$get($1.Avals, $1.lac)]); /*21368*/
						$1.addtocws(); /*21368*/
						$1.mode = $1.C; /*21369*/
						break; /*21370*/
					} /*21370*/
					$k[$j++] = $a([$get($1.Avals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $1.n - 1))]); /*21372*/
					$1.addtocws(); /*21372*/
					for (var _FG = 0, _FH = $1.n; _FG < _FH; _FG++) {
						/*21381*/
						if ($get($1.msg, $1.i) < 0) {
							/*21379*/
							$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*21375*/
							$1.addtocws(); /*21375*/
							$1.i = $1.i + 1; /*21376*/
						} else {
							/*21379*/
							$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*21378*/
							$1.addtocws(); /*21378*/
							$1.i = $1.i + 2; /*21379*/
						} /*21379*/
					} /*21379*/
					break; /*21382*/
				} /*21382*/
				if ($get($1.DatumA, $1.i)) { //no-else/*21406*/
					var _Ff = $get($1.msg, $1.i); /*21385*/
					if ((_Ff == $1.fn1) || ((_Ff == $1.fn2) || (_Ff == $1.fn3))) { //no-else/*21402*/
						$k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); /*21386*/
						$1.addtocws(); /*21386*/
						if ($get($1.ECI, $1.i)) { //no-else/*21391*/
							$k[$j++] = Infinity; /*21388*/
							$1.ECIabc(); /*21388*/
							var _Fs = $a(); /*21388*/
							$k[$j++] = _Fs; /*21388*/
							$1.addtocws(); /*21388*/
							$1.i = $1.i + 7; /*21389*/
							break; /*21390*/
						} /*21390*/
						if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //no-else/*21399*/
							$1.i = $1.i + 1; /*21393*/
							$1.mode = $1.C; /*21394*/
							$1.inmac = 0; /*21395*/
							$1.segstart = $1.i; /*21396*/
							$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*21397*/
							break; /*21398*/
						} /*21398*/
						$1.i = $1.i + 1; /*21400*/
						break; /*21401*/
					} /*21401*/
					$k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); /*21403*/
					$1.addtocws(); /*21403*/
					$1.i = $1.i + 1; /*21404*/
					break; /*21405*/
				} /*21405*/
				if ($get($1.Binary, $1.i)) { //no-else/*21420*/
					if ($get($1.DatumA, $1.i + 1)) { //no-else/*21416*/
						if ($get($1.msg, $1.i) < 160) {
							/*21412*/
							$k[$j++] = $a([$get($1.Avals, $1.bsa), $get($1.Avals, $get($1.msg, $1.i) - 128)]); /*21410*/
							$1.addtocws(); /*21410*/
						} else {
							/*21412*/
							$k[$j++] = $a([$get($1.Avals, $1.bsb), $get($1.Bvals, $get($1.msg, $1.i) - 128)]); /*21412*/
							$1.addtocws(); /*21412*/
						} /*21412*/
						$1.i = $1.i + 1; /*21414*/
						break; /*21415*/
					} /*21415*/
					$k[$j++] = $a([$get($1.Avals, $1.bin)]); /*21417*/
					$1.addtocws(); /*21417*/
					$1.mode = $1.BIN; /*21418*/
					break; /*21419*/
				} /*21419*/
				$1.n = $get($1.AheadB, $1.i); /*21421*/
				if ($1.n > 6) { //no-else/*21426*/
					$k[$j++] = $a([$get($1.Avals, $1.lab)]); /*21423*/
					$1.addtocws(); /*21423*/
					$1.mode = $1.B; /*21424*/
					break; /*21425*/
				} /*21425*/
				$k[$j++] = $a([$get($1.Avals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4, $1.sb5, $1.sb6]), $1.n - 1))]); /*21427*/
				$1.addtocws(); /*21427*/
				for (var _H8 = 0, _H9 = $1.n; _H8 < _H9; _H8++) {
					/*21431*/
					$k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); /*21429*/
					$1.addtocws(); /*21429*/
					$1.i = $1.i + 1; /*21430*/
				} /*21430*/
				break; /*21432*/
			} /*21432*/
		}; /*21434*/
		$1.encBIN = function() {
			for (var _HH = 0, _HI = 1; _HH < _HI; _HH++) {
				/*21495*/
				$1.n = $get($1.TryC, $1.i); /*21438*/
				if ($1.n >= 2) { //no-else/*21457*/
					$k[$j++] = Infinity; /*21440*/
					$1.finaliseBIN(); /*21440*/
					var _HN = $a(); /*21440*/
					$k[$j++] = _HN; /*21440*/
					$1.addtocws(); /*21440*/
					if ($1.n > 7) { //no-else/*21445*/
						var _HT = $k[--$j]; /*21442*/
						$1.mode = $1.C; /*21443*/
						$k[$j++] = _HT + $a([$get($1.BINvals, $1.tmc)]); /*21444*/
						break; /*21444*/
					} /*21444*/
					$k[$j++] = $a([$get($1.BINvals, $get($a([$1.sc2, $1.sc3, $1.sc4, $1.sc5, $1.sc6, $1.sc7]), $1.n - 2))]); /*21446*/
					$1.addtocws(); /*21446*/
					for (var _Hi = 0, _Hj = $1.n; _Hi < _Hj; _Hi++) {
						/*21455*/
						if ($get($1.msg, $1.i) < 0) {
							/*21453*/
							$k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); /*21449*/
							$1.addtocws(); /*21449*/
							$1.i = $1.i + 1; /*21450*/
						} else {
							/*21453*/
							$k[$j++] = $a([(($get($1.msg, $1.i) - 48) * 10) + ($get($1.msg, $1.i + 1) - 48)]); /*21452*/
							$1.addtocws(); /*21452*/
							$1.i = $1.i + 2; /*21453*/
						} /*21453*/
					} /*21453*/
					break; /*21456*/
				} /*21456*/
				if (($get($1.ECI, $1.i) && $get($1.Binary, $1.i + 7))) { //no-else/*21463*/
					$k[$j++] = Infinity; /*21459*/
					$1.ECIbin(); /*21459*/
					var _I8 = $a(); /*21459*/
					$k[$j++] = _I8; /*21459*/
					$1.addtocws(); /*21459*/
					$1.i = $1.i + 7; /*21460*/
					if ($1.i == $1.msglen) { //no-else/*21461*/
						$k[$j++] = Infinity; /*21461*/
						$1.finaliseBIN(); /*21461*/
						var _IC = $a(); /*21461*/
						$k[$j++] = _IC; /*21461*/
						$1.addtocws(); /*21461*/
					} /*21461*/
					break; /*21462*/
				} /*21462*/
				if ($get($1.msg, $1.i) >= 0) { //no-else/*21473*/
					if (((($get($1.Binary, $1.i) || $get($1.Binary, $1.i + 1)) || $get($1.Binary, $1.i + 2)) || $get($1.Binary, $1.i + 3)) || ($get($1.ECI, $1.i + 1) && $get($1.Binary, $1.i + 8))) { //no-else/*21472*/
						$k[$j++] = Infinity; /*21468*/
						$k[$j++] = $get($1.msg, $1.i); /*21468*/
						$1.addtobin(); /*21468*/
						var _Ib = $a(); /*21468*/
						$k[$j++] = _Ib; /*21468*/
						$1.addtocws(); /*21468*/
						$1.i = $1.i + 1; /*21469*/
						if ($1.i == $1.msglen) { //no-else/*21470*/
							$k[$j++] = Infinity; /*21470*/
							$1.finaliseBIN(); /*21470*/
							var _If = $a(); /*21470*/
							$k[$j++] = _If; /*21470*/
							$1.addtocws(); /*21470*/
						} /*21470*/
						break; /*21471*/
					} /*21471*/
				} /*21471*/
				$k[$j++] = Infinity; /*21474*/
				$1.finaliseBIN(); /*21474*/
				var _Ig = $a(); /*21474*/
				$k[$j++] = _Ig; /*21474*/
				$1.addtocws(); /*21474*/
				if ($1.i != ($1.msglen - 1)) { //no-else/*21493*/
					if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //no-else/*21484*/
						$k[$j++] = $a([$get($1.BINvals, $1.tms)]); /*21477*/
						$1.addtocws(); /*21477*/
						$1.i = $1.i + 1; /*21478*/
						$1.mode = $1.C; /*21479*/
						$1.inmac = 0; /*21480*/
						$1.segstart = $1.i; /*21481*/
						$1.segend = $1.i + $get($1.UntilEndSeg, $1.i); /*21482*/
						break; /*21483*/
					} /*21483*/
					if ($gt($get($1.AheadA, $1.i), $get($1.AheadB, $1.i))) {
						/*21490*/
						$k[$j++] = $a([$get($1.BINvals, $1.tma)]); /*21486*/
						$1.addtocws(); /*21486*/
						$1.mode = $1.A; /*21487*/
					} else {
						/*21490*/
						$k[$j++] = $a([$get($1.BINvals, $1.tmb)]); /*21489*/
						$1.addtocws(); /*21489*/
						$1.mode = $1.B; /*21490*/
					} /*21490*/
					break; /*21492*/
				} /*21492*/
				break; /*21494*/
			} /*21494*/
		}; /*21496*/
		$1.cws = $a(($1.barlen * 2) + 1); /*21498*/
		$1.mode = $1.C; /*21499*/
		$1.bvals = $a(5); /*21500*/
		$1.bpos = 0; /*21500*/
		$1.inmac = 0; /*21501*/
		$1.segstart = 0; /*21501*/
		$1.segend = $get($1.UntilEndSeg, 0); /*21501*/
		$1.i = 0; /*21502*/
		$1.j = 0; /*21502*/
		for (;;) {
			/*21515*/
			if ($1.i >= $1.msglen) { //no-else/*21503*/
				break; /*21503*/
			} /*21503*/
			if ($1.inmac != 0) { //no-else/*21513*/
				if (($1.inmac != $1.mac) && ($1.i == ($1.segend - 2))) { //no-else/*21508*/
					$1.i = $1.i + 2; /*21506*/
					if ($1.i >= $1.msglen) { //no-else/*21507*/
						break; /*21507*/
					} /*21507*/
				} /*21507*/
				if (($1.inmac == $1.mac) && ($1.i == ($1.segend - 1))) { //no-else/*21512*/
					$1.i = $1.i + 1; /*21510*/
					if ($1.i >= $1.msglen) { //no-else/*21511*/
						break; /*21511*/
					} /*21511*/
				} /*21511*/
			} /*21511*/
			$1[$get($a(['encA', 'encB', 'encC', 'encBIN']), $1.mode)](); /*21514*/
		} /*21514*/
		$1.cws = $geti($1.cws, 0, $1.j); /*21516*/
		$1.nd = $1.cws.length; /*21519*/
		$1.minarea = (((($1.nd + 3) + (~~($1.nd / 2))) * 9) + 2) * 2; /*21520*/
		if ($1.ratio != -1) {
			/*21548*/
			$1.hgt = Math.sqrt($1.minarea / $1.ratio); /*21522*/
			$1.wid = Math.sqrt($1.minarea * $1.ratio); /*21523*/
			$1.h = ~~$1.hgt; /*21524*/
			$1.w = ~~$1.wid; /*21524*/
			if ((($1.h + $1.w) % 2) == 1) {
				/*21538*/
				if (($1.h * $1.w) < $1.minarea) { //no-else/*21526*/
					$1.h = $1.h + 1; /*21526*/
					$1.w = $1.w + 1; /*21526*/
				} /*21526*/
			} else {
				/*21538*/
				if (($1.hgt * $1.w) < ($1.wid * $1.h)) {
					/*21538*/
					$1.w = $1.w + 1; /*21529*/
					if (($1.h * $1.w) < $1.minarea) { //no-else/*21533*/
						$1.w = $1.w - 1; /*21531*/
						$1.h = $1.h + 1; /*21531*/
						if (($1.h * $1.w) < $1.minarea) { //no-else/*21532*/
							$1.w = $1.w + 2; /*21532*/
						} /*21532*/
					} /*21532*/
				} else {
					/*21538*/
					$1.h = $1.h + 1; /*21535*/
					if (($1.h * $1.w) < $1.minarea) { //no-else/*21539*/
						$1.h = $1.h - 1; /*21537*/
						$1.w = $1.w + 1; /*21537*/
						if (($1.h * $1.w) < $1.minarea) { //no-else/*21538*/
							$1.h = $1.h + 2; /*21538*/
						} /*21538*/
					} /*21538*/
				} /*21538*/
			} /*21538*/
			$1.rows = $1.h; /*21542*/
			$1.columns = $1.w; /*21542*/
		} else {
			/*21548*/
			if ($1.columns == -1) { //no-else/*21546*/
				var _KV = ~~((($1.minarea + $1.rows) - 1) / $1.rows); /*21545*/
				$k[$j++] = 'columns'; /*21545*/
				$k[$j++] = _KV; /*21545*/
				if (((_KV + $1.rows) % 2) == 0) { //no-else/*21545*/
					var _KX = $k[--$j]; /*21545*/
					$k[$j++] = _KX + 1; /*21545*/
				} /*21545*/
				var _KY = $k[--$j]; /*21545*/
				$1[$k[--$j]] = _KY; /*21545*/
			} /*21545*/
			if ($1.rows == -1) { //no-else/*21549*/
				var _Ke = ~~((($1.minarea + $1.columns) - 1) / $1.columns); /*21548*/
				$k[$j++] = 'rows'; /*21548*/
				$k[$j++] = _Ke; /*21548*/
				if (((_Ke + $1.columns) % 2) == 0) { //no-else/*21548*/
					var _Kg = $k[--$j]; /*21548*/
					$k[$j++] = _Kg + 1; /*21548*/
				} /*21548*/
				var _Kh = $k[--$j]; /*21548*/
				$1[$k[--$j]] = _Kh; /*21548*/
			} /*21548*/
		} /*21548*/
		$1.ndots = ~~(($1.rows * $1.columns) / 2); /*21553*/
		for (;;) {
			/*21557*/
			var _Km = $1.nd + 1; /*21555*/
			if ((((_Km + ((~~(_Km / 2)) + 3)) * 9) + 2) > $1.ndots) { //no-else/*21555*/
				break; /*21555*/
			} /*21555*/
			$1.nd = $1.nd + 1; /*21556*/
		} /*21556*/
		$1.nc = (~~($1.nd / 2)) + 3; /*21558*/
		$1.nw = $1.nd + $1.nc; /*21559*/
		$1.rembits = $1.ndots - (($1.nw * 9) + 2); /*21560*/
		if ($1.nd > $1.cws.length) { //no-else/*21567*/
			$k[$j++] = Infinity; /*21566*/
			$aload($1.cws); /*21563*/
			var _Kz = ($1.mode == $1.BIN) ? 109 : 106; /*21564*/
			$k[$j++] = _Kz; /*21565*/
			for (var _L2 = 0, _L3 = ($1.nd - $1.cws.length) - 1; _L2 < _L3; _L2++) {
				/*21565*/
				$k[$j++] = 106; /*21565*/
			} /*21565*/
			$1.cws = $a(); /*21566*/
		} /*21566*/
		$1.encs = $a
		if (($1.rows % 2) == 0) {
			/*21614*/
			$1.sixedges = $a([$a([$1.columns - 1, $1.rows - 2]), $a([0, $1.rows - 2]), $a([$1.columns - 2, $1.rows - 1]), $a([1, $1.rows - 1]), $a([$1.columns - 1, 0]), $a([0, 0])]); /*21605*/
		} else {
			/*21614*/
			$1.sixedges = $a([$a([$1.columns - 2, 0]), $a([$1.columns - 2, $1.rows - 1]), $a([$1.columns - 1, 1]), $a([$1.columns - 1, $1.rows - 2]), $a([0, 0]), $a([0, $1.rows - 1])]); /*21614*/
		} /*21614*/
		$1.dmv = function() {
			var _La = $k[--$j]; /*21617*/
			var _Lb = $k[--$j]; /*21617*/
			$k[$j++] = _Lb + (_La * $1.columns); /*21617*/
		}; /*21617*/
		$1.outline = $a($1.rows * $1.columns); /*21620*/
		for (var _Lh = 0, _Lg = $1.rows - 1; _Lh <= _Lg; _Lh += 1) {
			/*21627*/
			$1.y = _Lh; /*21622*/
			for (var _Lk = 0, _Lj = $1.columns - 1; _Lk <= _Lj; _Lk += 1) {
				/*21626*/
				$1.x = _Lk; /*21624*/
				$k[$j++] = $1.outline; /*21625*/
				$k[$j++] = $1.x; /*21625*/
				$k[$j++] = $1.y; /*21625*/
				$1.dmv(); /*21625*/
				var _Lq = $k[--$j]; /*21625*/
				$put($k[--$j], _Lq, (($1.x + $1.y) % 2) - 1); /*21625*/
			} /*21625*/
		} /*21625*/
		var _Ls = $1.sixedges; /*21628*/
		for (var _Lt = 0, _Lu = _Ls.length; _Lt < _Lu; _Lt++) {
			/*21630*/
			$k[$j++] = $1.outline; /*21629*/
			$aload($get(_Ls, _Lt)); /*21629*/
			$1.dmv(); /*21629*/
			var _Lx = $k[--$j]; /*21629*/
			$put($k[--$j], _Lx, 1); /*21629*/
		} /*21629*/
		$1.clearcol = function() {
			$1.x = $k[--$j]; /*21633*/
			$k[$j++] = true; /*21637*/
			for (var _M3 = $1.x & 1, _M2 = $1.rows - 1; _M3 <= _M2; _M3 += 2) {
				/*21637*/
				$k[$j++] = $1.x; /*21636*/
				$k[$j++] = _M3; /*21636*/
				$1.dmv(); /*21636*/
				if ($get($1.sym, $k[--$j]) == 1) { //no-else/*21636*/
					$j--; /*21636*/
					$k[$j++] = false; /*21636*/
					break; /*21636*/
				} /*21636*/
			} /*21636*/
		}; /*21638*/
		$1.clearrow = function() {
			$1.y = $k[--$j]; /*21641*/
			$k[$j++] = true; /*21645*/
			for (var _MC = $1.y & 1, _MB = $1.columns - 1; _MC <= _MB; _MC += 2) {
				/*21645*/
				$k[$j++] = _MC; /*21644*/
				$k[$j++] = $1.y; /*21644*/
				$1.dmv(); /*21644*/
				if ($get($1.sym, $k[--$j]) == 1) { //no-else/*21644*/
					$j--; /*21644*/
					$k[$j++] = false; /*21644*/
					break; /*21644*/
				} /*21644*/
			} /*21644*/
		}; /*21646*/
		$1.evalsymbol = function() {
			$1.sym = $k[--$j]; /*21650*/
			$1.worst = 9999999; /*21653*/
			var _MM = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); /*21654*/
			for (var _MN = 0, _MO = _MM.length; _MN < _MO; _MN++) {
				/*21672*/
				$aload($get(_MM, _MN)); /*21655*/
				$1.fl = $k[--$j]; /*21655*/
				$1.dir = $k[--$j]; /*21655*/
				$1.sum = 0; /*21656*/
				$1.first = -1; /*21656*/
				$1.last = -1; /*21656*/
				var _MT = $eq($1.dir, 'x') ? $1.columns : $1.rows; /*21657*/
				for (var _MV = 0, _MU = _MT - 1; _MV <= _MU; _MV += 1) {
					/*21668*/
					$1[$1.dir] = _MV; /*21658*/
					var _MX = $1.sym; /*21659*/
					var _MZ = $1[$1.dir]; /*21660*/
					var _Mb = $eq($1.dir, 'x') ? $1.rows : $1.columns; /*21661*/
					var _Me = (_Mb - 1) * $1.fl; /*21662*/
					if ($eq($1.dir, 'y')) { //no-else/*21662*/
						var _ = _Me; /*21662*/
						_Me = _MZ; /*21662*/
						_MZ = _; /*21662*/
					} /*21662*/
					$k[$j++] = _MX; /*21663*/
					$k[$j++] = _MZ; /*21663*/
					$k[$j++] = _Me; /*21663*/
					$1.dmv(); /*21663*/
					var _Mf = $k[--$j]; /*21663*/
					if ($get($k[--$j], _Mf) == 1) { //no-else/*21667*/
						if ($1.first == -1) { //no-else/*21664*/
							$1.first = $1[$1.dir]; /*21664*/
						} /*21664*/
						$1.last = $1[$1.dir]; /*21665*/
						$1.sum = $1.sum + 1; /*21666*/
					} /*21666*/
				} /*21666*/
				var _Ms = $eq($1.dir, 'x') ? $1.rows : $1.columns; /*21670*/
				var _Mt = (($1.sum + $1.last) - $1.first) * _Ms; /*21671*/
				$k[$j++] = _Mt; /*21671*/
				if (_Mt < $1.worst) {
					/*21671*/
					$1.worst = $k[--$j]; /*21671*/
				} else {
					/*21671*/
					$j--; /*21671*/
				} /*21671*/
			} /*21671*/
			$1.pen = 0; /*21674*/
			if ((($1.rows % 2) == 1) || ($1.rows <= 12)) { //no-else/*21692*/
				$1.sum = 0; /*21680*/
				$1.p = 0; /*21680*/
				for (var _N0 = 1, _Mz = $1.columns - 2; _N0 <= _Mz; _N0 += 1) {
					/*21690*/
					$k[$j++] = _N0; /*21682*/
					$1.clearcol(); /*21682*/
					if ($k[--$j]) {
						/*21688*/
						$1.sum = $1.sum + 1; /*21683*/
						$k[$j++] = 'p'; /*21684*/
						if ($1.sum == 1) {
							/*21684*/
							$k[$j++] = $1.rows; /*21684*/
						} else {
							/*21684*/
							$k[$j++] = $1.p * $1.rows; /*21684*/
						} /*21684*/
						var _N7 = $k[--$j]; /*21684*/
						$1[$k[--$j]] = _N7; /*21684*/
					} else {
						/*21688*/
						$1.sum = 0; /*21686*/
						$1.pen = $1.pen + $1.p; /*21687*/
						$1.p = 0; /*21688*/
					} /*21688*/
				} /*21688*/
				$1.pen = $1.pen + $1.p; /*21691*/
			} /*21691*/
			if ((($1.rows % 2) == 0) || ($1.columns <= 12)) { //no-else/*21710*/
				$1.sum = 0; /*21698*/
				$1.p = 0; /*21698*/
				for (var _NH = 1, _NG = $1.rows - 2; _NH <= _NG; _NH += 1) {
					/*21708*/
					$k[$j++] = _NH; /*21700*/
					$1.clearrow(); /*21700*/
					if ($k[--$j]) {
						/*21706*/
						$1.sum = $1.sum + 1; /*21701*/
						$k[$j++] = 'p'; /*21702*/
						if ($1.sum == 1) {
							/*21702*/
							$k[$j++] = $1.columns; /*21702*/
						} else {
							/*21702*/
							$k[$j++] = $1.p * $1.columns; /*21702*/
						} /*21702*/
						var _NO = $k[--$j]; /*21702*/
						$1[$k[--$j]] = _NO; /*21702*/
					} else {
						/*21706*/
						$1.sum = 0; /*21704*/
						$1.pen = $1.pen + $1.p; /*21705*/
						$1.p = 0; /*21706*/
					} /*21706*/
				} /*21706*/
				$1.pen = $1.pen + $1.p; /*21709*/
			} /*21709*/
			$k[$j++] = Infinity; /*21721*/
			for (var _NV = 0, _NW = ($1.columns + 4) * 2; _NV < _NW; _NV++) {
				/*21714*/
				$k[$j++] = 0; /*21714*/
			} /*21714*/
			for (var _Na = 0, _Nb = $1.columns, _NZ = $1.sym.length - 1; _Nb < 0 ? _Na >= _NZ : _Na <= _NZ; _Na += _Nb) {
				/*21719*/
				$k[$j++] = 0; /*21717*/
				$k[$j++] = 0; /*21717*/
				$aload($geti($1.sym, _Na, $1.columns)); /*21717*/
				$k[$j++] = 0; /*21718*/
				$k[$j++] = 0; /*21718*/
			} /*21718*/
			for (var _Ng = 0, _Nh = ($1.columns + 4) * 2; _Ng < _Nh; _Ng++) {
				/*21720*/
				$k[$j++] = 0; /*21720*/
			} /*21720*/
			$1.symp = $a(); /*21721*/
			$1.columns = $1.columns + 4; /*21724*/
			$1.rows = $1.rows + 4; /*21725*/
			$1.sum = 0; /*21726*/
			for (var _Nn = 2, _Nm = $1.rows - 3; _Nn <= _Nm; _Nn += 1) {
				/*21744*/
				$1.y = _Nn; /*21728*/
				for (var _Nr = ($1.y & 1) + 2, _Nq = $1.columns - 3; _Nr <= _Nq; _Nr += 2) {
					/*21743*/
					$1.x = _Nr; /*21730*/
					for (var _Ns = 0, _Nt = 1; _Ns < _Nt; _Ns++) {
						/*21742*/
						$k[$j++] = $1.symp; /*21732*/
						$k[$j++] = $1.x - 1; /*21732*/
						$k[$j++] = $1.y - 1; /*21732*/
						$1.dmv(); /*21732*/
						var _Nx = $k[--$j]; /*21732*/
						if ($get($k[--$j], _Nx) == 1) { //no-else/*21732*/
							break; /*21732*/
						} /*21732*/
						$k[$j++] = $1.symp; /*21733*/
						$k[$j++] = $1.x + 1; /*21733*/
						$k[$j++] = $1.y - 1; /*21733*/
						$1.dmv(); /*21733*/
						var _O3 = $k[--$j]; /*21733*/
						if ($get($k[--$j], _O3) == 1) { //no-else/*21733*/
							break; /*21733*/
						} /*21733*/
						$k[$j++] = $1.symp; /*21734*/
						$k[$j++] = $1.x - 1; /*21734*/
						$k[$j++] = $1.y + 1; /*21734*/
						$1.dmv(); /*21734*/
						var _O9 = $k[--$j]; /*21734*/
						if ($get($k[--$j], _O9) == 1) { //no-else/*21734*/
							break; /*21734*/
						} /*21734*/
						$k[$j++] = $1.symp; /*21735*/
						$k[$j++] = $1.x + 1; /*21735*/
						$k[$j++] = $1.y + 1; /*21735*/
						$1.dmv(); /*21735*/
						var _OF = $k[--$j]; /*21735*/
						if ($get($k[--$j], _OF) == 1) { //no-else/*21735*/
							break; /*21735*/
						} /*21735*/
						$k[$j++] = $1.symp; /*21736*/
						$k[$j++] = $1.x; /*21736*/
						$k[$j++] = $1.y; /*21736*/
						$1.dmv(); /*21736*/
						var _OL = $k[--$j]; /*21736*/
						if ($get($k[--$j], _OL) == 0) { //no-else/*21736*/
							$1.sum = $1.sum + 1; /*21736*/
							break; /*21736*/
						} /*21736*/
						$k[$j++] = $1.symp; /*21737*/
						$k[$j++] = $1.x - 2; /*21737*/
						$k[$j++] = $1.y; /*21737*/
						$1.dmv(); /*21737*/
						var _OS = $k[--$j]; /*21737*/
						if ($get($k[--$j], _OS) == 1) { //no-else/*21737*/
							break; /*21737*/
						} /*21737*/
						$k[$j++] = $1.symp; /*21738*/
						$k[$j++] = $1.x; /*21738*/
						$k[$j++] = $1.y - 2; /*21738*/
						$1.dmv(); /*21738*/
						var _OY = $k[--$j]; /*21738*/
						if ($get($k[--$j], _OY) == 1) { //no-else/*21738*/
							break; /*21738*/
						} /*21738*/
						$k[$j++] = $1.symp; /*21739*/
						$k[$j++] = $1.x + 2; /*21739*/
						$k[$j++] = $1.y; /*21739*/
						$1.dmv(); /*21739*/
						var _Oe = $k[--$j]; /*21739*/
						if ($get($k[--$j], _Oe) == 1) { //no-else/*21739*/
							break; /*21739*/
						} /*21739*/
						$k[$j++] = $1.symp; /*21740*/
						$k[$j++] = $1.x; /*21740*/
						$k[$j++] = $1.y + 2; /*21740*/
						$1.dmv(); /*21740*/
						var _Ok = $k[--$j]; /*21740*/
						if ($get($k[--$j], _Ok) == 1) { //no-else/*21740*/
							break; /*21740*/
						} /*21740*/
						$1.sum = $1.sum + 1; /*21741*/
					} /*21741*/
				} /*21741*/
			} /*21741*/
			$1.columns = $1.columns - 4; /*21745*/
			$1.rows = $1.rows - 4; /*21746*/
			if ($1.worst == 0) {
				/*21751*/
				$k[$j++] = -99999; /*21749*/
			} else {
				/*21751*/
				$k[$j++] = ($1.worst - ($1.sum * $1.sum)) - $1.pen; /*21751*/
			} /*21751*/
		}; /*21754*/
		$k[$j++] = Infinity; /*21757*/
		$k[$j++] = 1; /*21757*/
		for (var _Ov = 0, _Ow = 112; _Ov < _Ow; _Ov++) {
			/*21757*/
			var _Ox = $k[--$j]; /*21757*/
			$k[$j++] = _Ox; /*21757*/
			$k[$j++] = (_Ox * 3) % 113; /*21757*/
		} /*21757*/
		$1.rsalog = $a(); /*21757*/
		$1.step = (~~($1.nw / 112)) + 1; /*21758*/
		$1.offset = function() {
			var _P1 = $k[--$j]; /*21759*/
			$k[$j++] = (_P1 * $1.step) + $1.start; /*21759*/
		}; /*21759*/
		$1.bestscore = -99999999; /*21767*/
		$k[$j++] = 'masks'; /*21772*/
		if ($1.mask != -1) {
			/*21771*/
			$k[$j++] = $a([$1.mask]); /*21769*/
		} else {
			/*21771*/
			if ($1.fast) {
				/*21771*/
				$k[$j++] = $a([3, 2, 1, 0]); /*21771*/
			} else {
				/*21771*/
				$k[$j++] = $a([0, 1, 2, 3]); /*21771*/
			} /*21771*/
		} /*21771*/
		var _P9 = $k[--$j]; /*21772*/
		$1[$k[--$j]] = _P9; /*21772*/
		$1.litmasks = $a(4); /*21773*/
		$forall($1.masks, function() {
			/*21875*/
			$1.mask = $k[--$j]; /*21776*/
			$k[$j++] = Infinity; /*21783*/
			var _PI = $1.cws; /*21781*/
			$k[$j++] = $1.mask; /*21781*/
			$k[$j++] = $get($a([0, 3, 7, 17]), $1.mask); /*21781*/
			$k[$j++] = 0; /*21781*/
			for (var _PJ = 0, _PK = _PI.length; _PJ < _PK; _PJ++) {
				/*21781*/
				var _PM = $k[--$j]; /*21781*/
				var _PN = $k[--$j]; /*21781*/
				$k[$j++] = ($get(_PI, _PJ) + _PM) % 113; /*21781*/
				$k[$j++] = _PN; /*21781*/
				$k[$j++] = _PM + _PN; /*21781*/
			} /*21781*/
			$j -= 2; /*21781*/
			for (var _PP = 0, _PQ = $1.nc; _PP < _PQ; _PP++) {
				/*21782*/
				$k[$j++] = 0; /*21782*/
			} /*21782*/
			$1.rscws = $a(); /*21783*/
			for (var _PU = 0, _PT = $1.step - 1; _PU <= _PT; _PU += 1) {
				/*21806*/
				$1.start = _PU; /*21785*/
				$1.ND = ~~((((($1.nd + 1) - $1.start) + $1.step) - 1) / $1.step); /*21786*/
				$1.NW = ~~((((($1.nw + 1) - $1.start) + $1.step) - 1) / $1.step); /*21787*/
				$1.NC = $1.NW - $1.ND; /*21788*/
				$k[$j++] = Infinity; /*21789*/
				$k[$j++] = 1; /*21789*/
				for (var _Pg = 0, _Ph = $1.NC; _Pg < _Ph; _Pg++) {
					/*21789*/
					$k[$j++] = 0; /*21789*/
				} /*21789*/
				$1.coeffs = $a(); /*21789*/
				for (var _Pl = 1, _Pk = $1.NC; _Pl <= _Pk; _Pl += 1) {
					/*21796*/
					$1.i = _Pl; /*21791*/
					for (var _Pn = $1.NC; _Pn >= 1; _Pn -= 1) {
						/*21795*/
						$1.j = _Pn; /*21793*/
						$put($1.coeffs, $1.j, (($get($1.coeffs, $1.j) + 113) - (($get($1.rsalog, $1.i) * $get($1.coeffs, $1.j - 1)) % 113)) % 113); /*21794*/
					} /*21794*/
				} /*21794*/
				for (var _Q1 = 0, _Q0 = $1.ND - 1; _Q1 <= _Q0; _Q1 += 1) {
					/*21804*/
					$k[$j++] = 't'; /*21798*/
					$k[$j++] = $1.rscws; /*21798*/
					$k[$j++] = _Q1; /*21798*/
					$1.offset(); /*21798*/
					var _Q3 = $k[--$j]; /*21798*/
					var _Q5 = $get($k[--$j], _Q3); /*21798*/
					$k[$j++] = _Q5; /*21798*/
					$k[$j++] = $1.rscws; /*21798*/
					$k[$j++] = $1.ND; /*21798*/
					$1.offset(); /*21798*/
					var _Q8 = $k[--$j]; /*21798*/
					var _QA = $get($k[--$j], _Q8); /*21798*/
					var _QB = $k[--$j]; /*21798*/
					$1[$k[--$j]] = (_QB + _QA) % 113; /*21798*/
					for (var _QF = 0, _QE = $1.NC - 2; _QF <= _QE; _QF += 1) {
						/*21802*/
						$1.j = _QF; /*21800*/
						$k[$j++] = $1.rscws; /*21801*/
						$k[$j++] = $1.ND + $1.j; /*21801*/
						$1.offset(); /*21801*/
						$k[$j++] = $1.rscws; /*21801*/
						$k[$j++] = ($1.ND + $1.j) + 1; /*21801*/
						$1.offset(); /*21801*/
						var _QM = $k[--$j]; /*21801*/
						var _QO = $get($k[--$j], _QM); /*21801*/
						var _QT = $k[--$j]; /*21801*/
						$put($k[--$j], _QT, ((_QO + 113) - (($1.t * $get($1.coeffs, $1.j + 1)) % 113)) % 113); /*21801*/
					} /*21801*/
					$k[$j++] = $1.rscws; /*21803*/
					$k[$j++] = ($1.ND + $1.NC) - 1; /*21803*/
					$1.offset(); /*21803*/
					var _Qc = $k[--$j]; /*21803*/
					$put($k[--$j], _Qc, (113 - (($1.t * $get($1.coeffs, $1.NC)) % 113)) % 113); /*21803*/
				} /*21803*/
				for (var _Qh = $1.ND, _Qg = $1.NW - 1; _Qh <= _Qg; _Qh += 1) {
					/*21805*/
					$k[$j++] = _Qh; /*21805*/
					$k[$j++] = $1.rscws; /*21805*/
					$k[$j++] = _Qh; /*21805*/
					$1.offset(); /*21805*/
					var _Qk = $k[--$j]; /*21805*/
					var _Ql = $k[--$j]; /*21805*/
					var _Qm = $k[--$j]; /*21805*/
					$k[$j++] = _Ql; /*21805*/
					$k[$j++] = _Qk; /*21805*/
					$k[$j++] = 113; /*21805*/
					$k[$j++] = $1.rscws; /*21805*/
					$k[$j++] = _Qm; /*21805*/
					$1.offset(); /*21805*/
					var _Qn = $k[--$j]; /*21805*/
					var _Qp = $get($k[--$j], _Qn); /*21805*/
					var _Qq = $k[--$j]; /*21805*/
					var _Qr = $k[--$j]; /*21805*/
					$put($k[--$j], _Qr, (_Qq - _Qp) % 113); /*21805*/
				} /*21805*/
			} /*21805*/
			$1.bits = $s($1.ndots); /*21809*/
			$puti($1.bits, 0, $get($a(["00", "01", "10", "11"]), $1.mask)); /*21810*/
			for (var _R1 = 1, _R0 = $1.nw; _R1 <= _R0; _R1 += 1) {
				/*21814*/
				$1.i = _R1; /*21812*/
				$puti($1.bits, (($1.i - 1) * 9) + 2, $get($1.encs, $get($1.rscws, $1.i))); /*21813*/
			} /*21813*/
			if ($1.rembits > 0) { //no-else/*21817*/
				$puti($1.bits, ($1.nw * 9) + 2, $geti("11111111111111111", 0, $1.rembits)); /*21816*/
			} /*21816*/
			var _RE = $1.outline; /*21820*/
			$1.pixs = $arrcpy($a(_RE.length), _RE); /*21820*/
			$1.posx = 0; /*21821*/
			$k[$j++] = 'posy'; /*21822*/
			if (($1.rows % 2) == 0) {
				/*21822*/
				$k[$j++] = 0; /*21822*/
			} else {
				/*21822*/
				$k[$j++] = $1.rows - 1; /*21822*/
			} /*21822*/
			var _RJ = $k[--$j]; /*21822*/
			$1[$k[--$j]] = _RJ; /*21822*/
			$forall($geti($1.bits, 0, $1.bits.length - 6), function() {
				/*21841*/
				for (;;) {
					/*21839*/
					$k[$j++] = $1.pixs; /*21825*/
					$k[$j++] = $1.posx; /*21825*/
					$k[$j++] = $1.posy; /*21825*/
					$1.dmv(); /*21825*/
					var _RR = $k[--$j]; /*21825*/
					if ($get($k[--$j], _RR) == -1) { //no-else/*21825*/
						break; /*21825*/
					} /*21825*/
					if (($1.rows % 2) == 0) {
						/*21836*/
						$1.posy = $1.posy + 1; /*21827*/
						if ($1.posy == $1.rows) { //no-else/*21831*/
							$1.posy = 0; /*21829*/
							$1.posx = $1.posx + 1; /*21830*/
						} /*21830*/
					} else {
						/*21836*/
						$1.posx = $1.posx + 1; /*21833*/
						if ($1.posx == $1.columns) { //no-else/*21837*/
							$1.posx = 0; /*21835*/
							$1.posy = $1.posy - 1; /*21836*/
						} /*21836*/
					} /*21836*/
				} /*21836*/
				$k[$j++] = $1.pixs; /*21840*/
				$k[$j++] = $1.posx; /*21840*/
				$k[$j++] = $1.posy; /*21840*/
				$1.dmv(); /*21840*/
				var _Rg = $k[--$j]; /*21840*/
				var _Rh = $k[--$j]; /*21840*/
				$put(_Rh, _Rg, $k[--$j] - 48); /*21840*/
			}); /*21840*/
			for (var _Rj = 0; _Rj <= 5; _Rj += 1) {
				/*21846*/
				$1.i = _Rj; /*21843*/
				$k[$j++] = $1.pixs; /*21844*/
				$aload($get($1.sixedges, $1.i)); /*21844*/
				$1.dmv(); /*21844*/
				var _Rs = $k[--$j]; /*21845*/
				$put($k[--$j], _Rs, $get($1.bits, ($1.bits.length - 6) + $1.i) - 48); /*21845*/
			} /*21845*/
			$k[$j++] = 'score'; /*21849*/
			$k[$j++] = $1.pixs; /*21849*/
			$1.evalsymbol(); /*21849*/
			var _Rv = $k[--$j]; /*21849*/
			$1[$k[--$j]] = _Rv; /*21849*/
			if ($1.score > $1.bestscore) { //no-else/*21854*/
				$1.bestsym = $1.pixs; /*21851*/
				$1.bestscore = $1.score; /*21852*/
				if ($1.fast && ($1.bestscore > (~~(($1.rows * $1.columns) / 2)))) { //no-else/*21853*/
					return true; /*21853*/
				} /*21853*/
			} /*21853*/
			var _S5 = $1.pixs; /*21857*/
			$1.litmask = $arrcpy($a(_S5.length), _S5); /*21857*/
			for (var _S8 = 0; _S8 <= 5; _S8 += 1) {
				/*21862*/
				$1.i = _S8; /*21859*/
				$k[$j++] = $1.litmask; /*21860*/
				$aload($get($1.sixedges, $1.i)); /*21860*/
				$1.dmv(); /*21860*/
				var _SD = $k[--$j]; /*21861*/
				$put($k[--$j], _SD, 1); /*21861*/
			} /*21861*/
			$put($1.litmasks, $1.mask, $1.litmask); /*21863*/
			if ($1.fast) { //no-else/*21873*/
				$k[$j++] = 'score'; /*21867*/
				$k[$j++] = $1.litmask; /*21867*/
				$1.evalsymbol(); /*21867*/
				var _SK = $k[--$j]; /*21867*/
				$1[$k[--$j]] = _SK; /*21867*/
				if ($gt($1.score, $1.bestscore)) { //no-else/*21872*/
					$1.bestsym = $1.litmask; /*21869*/
					$1.bestscore = $1.score; /*21870*/
					if ($1.bestscore > (~~(($1.rows * $1.columns) / 2))) { //no-else/*21871*/
						return true; /*21871*/
					} /*21871*/
				} /*21871*/
			} /*21871*/
		}); /*21871*/
		$1.pixs = $1.bestsym; /*21876*/
		if ((!$1.fast) && ($1.bestscore <= (~~(($1.rows * $1.columns) / 2)))) { //no-else/*21890*/
			$1.bestscore = -99999999; /*21880*/
			$forall($1.masks, function() {
				/*21888*/
				$1.litmask = $get($1.litmasks, $k[--$j]); /*21882*/
				$k[$j++] = 'score'; /*21883*/
				$k[$j++] = $1.litmask; /*21883*/
				$1.evalsymbol(); /*21883*/
				var _Sd = $k[--$j]; /*21883*/
				$1[$k[--$j]] = _Sd; /*21883*/
				if ($1.score > $1.bestscore) { //no-else/*21887*/
					$1.bestsym = $1.litmask; /*21885*/
					$1.bestscore = $1.score; /*21886*/
				} /*21886*/
			}); /*21886*/
			$1.pixs = $1.bestsym; /*21889*/
		} /*21889*/
		var _Sq = new Map([
			["ren", $0.renmatrix],
			["dotty", true],
			["pixs", $1.pixs],
			["pixx", $1.columns],
			["pixy", $1.rows],
			["height", ($1.rows * 2) / 72],
			["width", ($1.columns * 2) / 72],
			["opt", $1.options]
		]); /*21901*/
		$k[$j++] = _Sq; /*21904*/
		if (!$1.dontdraw) { //no-else/*21904*/
			$0.renmatrix(); /*21904*/
		} /*21904*/
	};
	$0.ultracode = function() {
		var $1 = {}; /*21933*/
		$1.options = $k[--$j]; /*21935*/
		$1.barcode = $k[--$j]; /*21936*/
		$1.dontdraw = false; /*21938*/
		$1.eclevel = "EC2"; /*21939*/
		$1.parse = false; /*21940*/
		$1.parsefnc = false; /*21941*/
		$forall($1.options, function() {
			/*21952*/
			var _3 = $k[--$j]; /*21952*/
			$1[$k[--$j]] = _3; /*21952*/
		}); /*21952*/
		$1.barlen = $1.barcode.length; /*21975*/
		$1.fn1 = -1; /*21978*/
		$1.fn3 = -2; /*21978*/
		var _8 = new Map([
			["FNC1", $1.fn1],
			["FNC3", $1.fn3]
		]); /*21981*/
		$1.fncvals = _8; /*21982*/
		$1.msg = $a($1.barlen); /*21983*/
		$1.i = 0; /*21984*/
		$1.j = 0; /*21984*/
		for (;;) {
			/*21998*/
			if ($1.i == $1.barlen) { //no-else/*21985*/
				break; /*21985*/
			} /*21985*/
			$1.char = $get($1.barcode, $1.i); /*21986*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*21994*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*21992*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*21989*/
					$1.i = $1.i + 4; /*21990*/
				} else {
					/*21992*/
					$1.i = $1.i + 1; /*21992*/
				} /*21992*/
			} /*21992*/
			$put($1.msg, $1.j, $1.char); /*21995*/
			$1.i = $1.i + 1; /*21996*/
			$1.j = $1.j + 1; /*21997*/
		} /*21997*/
		$1.msg = $geti($1.msg, 0, $1.j); /*21999*/
		$1.msglen = $1.msg.length; /*22000*/
		$1.start = 257; /*22003*/
		$1.scr = $a([]); /*22004*/
		$1.link1 = 0; /*22005*/
		$1.scp = $a([]); /*22006*/
		$k[$j++] = Infinity; /*22014*/
		$aload($1.scr); /*22008*/
		$aload($1.scp); /*22009*/
		$forall($1.msg, function() {
			/*22013*/
			var _i = $k[--$j]; /*22011*/
			$k[$j++] = _i; /*22011*/
			if (_i == $1.fn1) { //no-else/*22011*/
				$j--; /*22011*/
				$k[$j++] = 268; /*22011*/
			} /*22011*/
			var _k = $k[--$j]; /*22012*/
			$k[$j++] = _k; /*22012*/
			if (_k == $1.fn3) { //no-else/*22012*/
				$j--; /*22012*/
				$k[$j++] = 269; /*22012*/
			} /*22012*/
		}); /*22012*/
		$1.dcws = $a(); /*22014*/
		$1.mcc = $1.dcws.length + 3; /*22015*/
		$1.eclval = $get($1.eclevel, 2) - 48; /*22017*/
		if ($1.eclval != 0) {
			/*22021*/
			$k[$j++] = 'qcc'; /*22019*/
			$k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $1.eclval); /*22019*/
			$k[$j++] = ~~($1.mcc / 25); /*22019*/
			if (($1.mcc % 25) != 0) { //no-else/*22019*/
				var _w = $k[--$j]; /*22019*/
				$k[$j++] = _w + 1; /*22019*/
			} /*22019*/
			var _x = $k[--$j]; /*22019*/
			var _y = $k[--$j]; /*22019*/
			$1[$k[--$j]] = (_y * _x) + 5; /*22019*/
		} else {
			/*22021*/
			$1.qcc = 3; /*22021*/
		} /*22021*/
		$1.acc = ($1.qcc - 3) + (78 * $1.link1); /*22023*/
		$1.tcc = $1.mcc + $1.qcc; /*22024*/
		$1.metrics = $a([$a([2, 4, 34, 5]), $a([3, 33, 82, 13]), $a([4, 82, 158, 23]), $a([5, 134, 282, 30])]); /*22034*/
		for (var _19 = 0; _19 <= 3; _19 += 1) {
			/*22045*/
			$1.i = _19; /*22036*/
			$1.m = $get($1.metrics, $1.i); /*22037*/
			$1.rows = $get($1.m, 0); /*22038*/
			$1.minc = $get($1.m, 1); /*22039*/
			$1.maxc = $get($1.m, 2); /*22040*/
			$1.mcol = $get($1.m, 3); /*22041*/
			$1.okay = true; /*22042*/
			if (($1.tcc < $1.minc) || ($1.tcc > $1.maxc)) { //no-else/*22043*/
				$1.okay = false; /*22043*/
			} /*22043*/
			if ($1.okay) { //no-else/*22044*/
				break; /*22044*/
			} /*22044*/
		} /*22044*/
		if (!$1.okay) { //no-else/*22049*/
			$k[$j++] = 'bwipp.ultracodeNoValidSymbol'; /*22048*/
			$k[$j++] = "No valid symbol available"; /*22048*/
			$0.raiseerror(); /*22048*/
		} /*22048*/
		for (var _1S = $1.mcol; _1S <= 61; _1S += 1) {
			/*22063*/
			$1.columns = _1S; /*22053*/
			$k[$j++] = $1.columns; /*22055*/
			if ($1.columns >= 15) { //no-else/*22055*/
				var _1V = $k[--$j]; /*22055*/
				$k[$j++] = _1V - 1; /*22055*/
			} /*22055*/
			if ($1.columns >= 31) { //no-else/*22056*/
				var _1X = $k[--$j]; /*22056*/
				$k[$j++] = _1X - 1; /*22056*/
			} /*22056*/
			if ($1.columns >= 47) { //no-else/*22057*/
				var _1Z = $k[--$j]; /*22057*/
				$k[$j++] = _1Z - 1; /*22057*/
			} /*22057*/
			var _1d = (($k[--$j] * $1.rows) - 3) - $1.tcc; /*22058*/
			$k[$j++] = _1d; /*22061*/
			if (_1d >= 0) { //no-else/*22061*/
				$1.pads = $k[--$j]; /*22059*/
				break; /*22060*/
			} /*22060*/
			$j--; /*22062*/
		} /*22062*/
		$1.dcc = $1.columns - $1.mcol; /*22064*/
		$k[$j++] = Infinity; /*22075*/
		$k[$j++] = $1.start; /*22071*/
		$k[$j++] = $1.mcc; /*22071*/
		$k[$j++] = $1.acc; /*22071*/
		$aload($1.scr); /*22071*/
		$aload($1.dcws); /*22072*/
		for (var _1n = 0, _1o = $1.qcc; _1n < _1o; _1n++) {
			/*22073*/
			$k[$j++] = 0; /*22073*/
		} /*22073*/
		$k[$j++] = 0; /*22074*/
		$1.rsseq = $a(); /*22075*/
		$k[$j++] = Infinity; /*22078*/
		$k[$j++] = 1; /*22078*/
		for (var _1q = 0, _1r = 282; _1q < _1r; _1q++) {
			/*22078*/
			var _1s = $k[--$j]; /*22078*/
			$k[$j++] = _1s; /*22078*/
			$k[$j++] = (_1s * 3) % 283; /*22078*/
		} /*22078*/
		$1.rsalog = $a(); /*22078*/
		$1.rslog = $a(283); /*22079*/
		for (var _1v = 1; _1v <= 282; _1v += 1) {
			/*22080*/
			$put($1.rslog, $get($1.rsalog, _1v), _1v); /*22080*/
		} /*22080*/
		$1.rsprod = function() {
			var _1z = $k[--$j]; /*22084*/
			var _20 = $k[--$j]; /*22084*/
			$k[$j++] = _20; /*22088*/
			$k[$j++] = _1z; /*22088*/
			if ((_1z != 0) && (_20 != 0)) {
				/*22087*/
				var _23 = $get($1.rslog, $k[--$j]); /*22085*/
				var _28 = $get($1.rsalog, (_23 + $get($1.rslog, $k[--$j])) % 282); /*22085*/
				$k[$j++] = _28; /*22085*/
			} else {
				/*22087*/
				$j -= 2; /*22087*/
				$k[$j++] = 0; /*22087*/
			} /*22087*/
		}; /*22089*/
		$1.n = $1.mcc; /*22092*/
		$1.k = $1.qcc; /*22092*/
		$k[$j++] = Infinity; /*22093*/
		$k[$j++] = 1; /*22093*/
		for (var _2C = 0, _2D = $1.k; _2C < _2D; _2C++) {
			/*22093*/
			$k[$j++] = 0; /*22093*/
		} /*22093*/
		$1.coeffs = $a(); /*22093*/
		for (var _2H = 1, _2G = $1.k; _2H <= _2G; _2H += 1) {
			/*22102*/
			$1.i = _2H; /*22095*/
			$put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); /*22096*/
			for (var _2O = $1.i - 1; _2O >= 1; _2O -= 1) {
				/*22100*/
				$1.j = _2O; /*22098*/
				$k[$j++] = $1.coeffs; /*22099*/
				$k[$j++] = $1.j; /*22099*/
				$k[$j++] = $get($1.coeffs, $1.j - 1); /*22099*/
				$k[$j++] = $get($1.coeffs, $1.j); /*22099*/
				$k[$j++] = $get($1.rsalog, $1.i); /*22099*/
				$1.rsprod(); /*22099*/
				var _2a = $k[--$j]; /*22099*/
				var _2b = $k[--$j]; /*22099*/
				var _2c = $k[--$j]; /*22099*/
				$put($k[--$j], _2c, (_2b + _2a) % 283); /*22099*/
			} /*22099*/
			$k[$j++] = $1.coeffs; /*22101*/
			$k[$j++] = 0; /*22101*/
			$k[$j++] = $get($1.coeffs, 0); /*22101*/
			$k[$j++] = $get($1.rsalog, $1.i); /*22101*/
			$1.rsprod(); /*22101*/
			var _2k = $k[--$j]; /*22101*/
			var _2l = $k[--$j]; /*22101*/
			$put($k[--$j], _2l, _2k); /*22101*/
		} /*22101*/
		$1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); /*22103*/
		for (var _2r = $1.coeffs.length - 1; _2r >= 0; _2r -= 2) {
			/*22104*/
			var _2s = $1.coeffs; /*22104*/
			$put(_2s, _2r, 283 - $get(_2s, _2r)); /*22104*/
		} /*22104*/
		for (var _2w = 0, _2v = $1.n - 1; _2w <= _2v; _2w += 1) {
			/*22113*/
			$1.t = ($get($1.rsseq, _2w) + $get($1.rsseq, $1.n)) % 283; /*22108*/
			for (var _34 = 0, _33 = $1.k - 1; _34 <= _33; _34 += 1) {
				/*22112*/
				$1.j = _34; /*22110*/
				$put($1.rsseq, $1.n + $1.j, ($get($1.rsseq, ($1.n + $1.j) + 1) + (283 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 283))) % 283); /*22111*/
			} /*22111*/
		} /*22111*/
		for (var _3L = $1.n, _3K = $1.n + $1.k; _3L <= _3K; _3L += 1) {
			/*22114*/
			$put($1.rsseq, _3L, (283 - $get($1.rsseq, _3L)) % 283); /*22114*/
		} /*22114*/
		$1.ecws = $geti($1.rsseq, $1.n, $1.k); /*22115*/
		$1.dccu = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); /*22122*/
		$1.dccl = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); /*22129*/
		$1.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); /*22161*/
		$1.rows = ($1.rows * 6) + 1; /*22164*/
		$1.columns = $1.columns + 6; /*22165*/
		$k[$j++] = Infinity; /*22166*/
		for (var _3a = 0, _3b = $1.rows * $1.columns; _3a < _3b; _3a++) {
			/*22166*/
			$k[$j++] = -1; /*22166*/
		} /*22166*/
		$1.pixs = $a(); /*22166*/
		$1.qmv = function() {
			var _3e = $k[--$j]; /*22167*/
			var _3f = $k[--$j]; /*22167*/
			$k[$j++] = _3f + (_3e * $1.columns); /*22167*/
		}; /*22167*/
		for (var _3i = 0, _3h = $1.columns - 1; _3i <= _3h; _3i += 1) {
			/*22176*/
			$1.i = _3i; /*22169*/
			for (var _3l = 0, _3k = $1.rows - 1; _3l <= _3k; _3l += 6) {
				/*22173*/
				$1.j = _3l; /*22171*/
				if ($1.i >= 5) { //no-else/*22172*/
					$k[$j++] = $1.pixs; /*22172*/
					$k[$j++] = $1.i; /*22172*/
					$k[$j++] = $1.j; /*22172*/
					$1.qmv(); /*22172*/
					var _3r = $k[--$j]; /*22172*/
					$put($k[--$j], _3r, ($1.i % 2) * 9); /*22172*/
				} /*22172*/
			} /*22172*/
			$k[$j++] = $1.pixs; /*22174*/
			$k[$j++] = $1.i; /*22174*/
			$k[$j++] = 0; /*22174*/
			$1.qmv(); /*22174*/
			var _3v = $k[--$j]; /*22174*/
			$put($k[--$j], _3v, 9); /*22174*/
			$k[$j++] = $1.pixs; /*22175*/
			$k[$j++] = $1.i; /*22175*/
			$k[$j++] = $1.rows - 1; /*22175*/
			$1.qmv(); /*22175*/
			var _40 = $k[--$j]; /*22175*/
			$put($k[--$j], _40, 9); /*22175*/
		} /*22175*/
		for (var _44 = 1, _43 = $1.rows - 2; _44 <= _43; _44 += 1) {
			/*22189*/
			$1.i = _44; /*22178*/
			for (var _47 = 3, _46 = $1.columns - 1; _47 <= _46; _47 += 16) {
				/*22182*/
				$1.j = _47; /*22180*/
				$k[$j++] = $1.pixs; /*22181*/
				$k[$j++] = $1.j; /*22181*/
				$k[$j++] = $1.i; /*22181*/
				$1.qmv(); /*22181*/
				var _4C = $k[--$j]; /*22181*/
				$put($k[--$j], _4C, (1 - ($1.i % 2)) * 9); /*22181*/
			} /*22181*/
			$k[$j++] = $1.pixs; /*22183*/
			$k[$j++] = 0; /*22183*/
			$k[$j++] = $1.i; /*22183*/
			$1.qmv(); /*22183*/
			var _4G = $k[--$j]; /*22183*/
			$put($k[--$j], _4G, 9); /*22183*/
			$k[$j++] = $1.pixs; /*22184*/
			$k[$j++] = 1; /*22184*/
			$k[$j++] = $1.i; /*22184*/
			$1.qmv(); /*22184*/
			var _4L = $k[--$j]; /*22184*/
			$put($k[--$j], _4L, (1 - ($1.i % 2)) * 9); /*22184*/
			$k[$j++] = $1.pixs; /*22185*/
			$k[$j++] = 2; /*22185*/
			$k[$j++] = $1.i; /*22185*/
			$1.qmv(); /*22185*/
			var _4P = $k[--$j]; /*22185*/
			$put($k[--$j], _4P, 0); /*22185*/
			$k[$j++] = $1.pixs; /*22186*/
			$k[$j++] = 3; /*22186*/
			$k[$j++] = $1.i; /*22186*/
			$1.qmv(); /*22186*/
			var _4T = $k[--$j]; /*22186*/
			$put($k[--$j], _4T, 9); /*22186*/
			$k[$j++] = $1.pixs; /*22187*/
			$k[$j++] = 4; /*22187*/
			$k[$j++] = $1.i; /*22187*/
			$1.qmv(); /*22187*/
			var _4X = $k[--$j]; /*22187*/
			$put($k[--$j], _4X, 0); /*22187*/
			$k[$j++] = $1.pixs; /*22188*/
			$k[$j++] = $1.columns - 1; /*22188*/
			$k[$j++] = $1.i; /*22188*/
			$1.qmv(); /*22188*/
			var _4c = $k[--$j]; /*22188*/
			$put($k[--$j], _4c, 9); /*22188*/
		} /*22188*/
		$1.i = (~~($1.rows / 2)) - 5; /*22192*/
		$k[$j++] = Infinity; /*22196*/
		var _4j = $cvrs($s(5), $get($1.dccu, $1.dcc), 10); /*22194*/
		for (var _4k = 0, _4l = _4j.length; _4k < _4l; _4k++) {
			/*22194*/
			$k[$j++] = $get(_4j, _4k) - 48; /*22194*/
		} /*22194*/
		var _4r = $cvrs($s(5), $get($1.dccl, $1.dcc), 10); /*22196*/
		$k[$j++] = 0; /*22196*/
		for (var _4s = 0, _4t = _4r.length; _4s < _4t; _4s++) {
			/*22196*/
			$k[$j++] = $get(_4r, _4s) - 48; /*22196*/
		} /*22196*/
		var _4v = $a(); /*22196*/
		for (var _4w = 0, _4x = _4v.length; _4w < _4x; _4w++) {
			/*22200*/
			$k[$j++] = $get(_4v, _4w); /*22198*/
			$k[$j++] = $1.pixs; /*22198*/
			$k[$j++] = 2; /*22198*/
			$k[$j++] = $1.i; /*22198*/
			$1.qmv(); /*22198*/
			var _51 = $k[--$j]; /*22198*/
			var _52 = $k[--$j]; /*22198*/
			$put(_52, _51, $k[--$j]); /*22198*/
			$1.i = $1.i + 1; /*22199*/
		} /*22199*/
		$k[$j++] = Infinity; /*22214*/
		$k[$j++] = $1.start; /*22206*/
		$k[$j++] = $1.mcc; /*22206*/
		$aload($1.ecws); /*22206*/
		$k[$j++] = $1.tcc; /*22210*/
		$k[$j++] = 283; /*22210*/
		$k[$j++] = $1.acc; /*22210*/
		$aload($1.scr); /*22210*/
		$aload($1.dcws); /*22211*/
		for (var _5D = 0, _5E = $1.pads; _5D < _5E; _5D++) {
			/*22212*/
			$k[$j++] = 284; /*22212*/
		} /*22212*/
		$k[$j++] = $1.qcc; /*22213*/
		$1.tileseq = $a(); /*22214*/
		$1.x = 5; /*22216*/
		$1.y = 1; /*22216*/
		var _5H = $1.tileseq; /*22217*/
		for (var _5I = 0, _5J = _5H.length; _5I < _5J; _5I++) {
			/*22230*/
			var _5O = $cvrs($s(5), $get($1.tiles, $get(_5H, _5I)), 10); /*22218*/
			for (var _5P = 0, _5Q = _5O.length; _5P < _5Q; _5P++) {
				/*22221*/
				$k[$j++] = $get(_5O, _5P); /*22219*/
				$k[$j++] = $1.pixs; /*22219*/
				$k[$j++] = $1.x; /*22219*/
				$k[$j++] = $1.y; /*22219*/
				$1.qmv(); /*22219*/
				var _5V = $k[--$j]; /*22219*/
				var _5W = $k[--$j]; /*22219*/
				$put(_5W, _5V, $k[--$j] - 48); /*22219*/
				$1.y = $1.y + 1; /*22220*/
			} /*22220*/
			if ($1.y != ($1.rows - 1)) {
				/*22227*/
				$1.y = $1.y + 1; /*22223*/
			} else {
				/*22227*/
				$1.x = $1.x + 1; /*22225*/
				$1.y = 1; /*22225*/
				$k[$j++] = $1.pixs; /*22226*/
				$k[$j++] = $1.x; /*22226*/
				$k[$j++] = $1.y; /*22226*/
				$1.qmv(); /*22226*/
				var _5g = $k[--$j]; /*22226*/
				if ($get($k[--$j], _5g) != -1) { //no-else/*22228*/
					$1.x = $1.x + 1; /*22227*/
				} /*22227*/
			} /*22227*/
		} /*22227*/
		var _5p = new Map([
			[0, "00000000"],
			[9, "000000FF"],
			[1, "FF000000"],
			[3, "00FF0000"],
			[5, "0000FF00"],
			[6, "7F00FF00"]
		]); /*22246*/
		var _5r = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.columns],
			["pixy", $1.rows],
			["height", ($1.rows / 72) * 2],
			["width", ($1.columns / 72) * 2],
			["colormap", _5p],
			["opt", $1.options]
		]); /*22248*/
		$k[$j++] = _5r; /*22251*/
		if (!$1.dontdraw) { //no-else/*22251*/
			$0.renmatrix(); /*22251*/
		} /*22251*/
	};
	$0.jabcode = function() {
		var $1 = {}; /*22280*/
		$1.options = $k[--$j]; /*22282*/
		$1.barcode = $k[--$j]; /*22283*/
		$1.dontdraw = false; /*22285*/
		$1.rows = -1; /*22286*/
		$1.columns = -1; /*22287*/
		$1.slave = false; /*22288*/
		$1.colors = 16; /*22289*/
		$1.eclevel = 6; /*22290*/
		$1.raw = false; /*22291*/
		$1.parse = false; /*22292*/
		$1.parsefnc = false; /*22293*/
		$1.mask = -1; /*22294*/
		$forall($1.options, function() {
			/*22305*/
			var _3 = $k[--$j]; /*22305*/
			$1[$k[--$j]] = _3; /*22305*/
		}); /*22305*/
		$1.rows = ~~$1.rows; /*22307*/
		$1.columns = ~~$1.columns; /*22308*/
		$1.colors = ~~$1.colors; /*22309*/
		$1.eclevel = ~~$1.eclevel; /*22310*/
		$1.mask = ~~$1.mask; /*22311*/
		$1.databpm = ~~(Math.round(Math.log($1.colors) / Math.log(2))); /*22313*/
		var _B = $1.colors; /*22314*/
		$k[$j++] = 'metabpm'; /*22314*/
		$k[$j++] = _B; /*22314*/
		if (_B > 8) { //no-else/*22314*/
			$j--; /*22314*/
			$k[$j++] = 8; /*22314*/
		} /*22314*/
		var _C = $k[--$j]; /*22314*/
		$1[$k[--$j]] = ~~(Math.round(Math.log(_C) / Math.log(2))); /*22314*/
		$1.barlen = $1.barcode.length; /*22337*/
		$1.fn1 = -1; /*22340*/
		var _G = new Map([
			["FNC1", $1.fn1]
		]); /*22342*/
		$1.fncvals = _G; /*22343*/
		$1.msg = $a($1.barlen); /*22344*/
		$1.i = 0; /*22345*/
		$1.j = 0; /*22345*/
		for (;;) {
			/*22359*/
			if ($1.i == $1.barlen) { //no-else/*22346*/
				break; /*22346*/
			} /*22346*/
			$1.char = $get($1.barcode, $1.i); /*22347*/
			if (($1.parsefnc && ($1.char == 94)) && ($1.i < ($1.barlen - 4))) { //no-else/*22355*/
				if ($get($1.barcode, $1.i + 1) != 94) {
					/*22353*/
					$1.char = $get($1.fncvals, $geti($1.barcode, $1.i + 1, 4)); /*22350*/
					$1.i = $1.i + 4; /*22351*/
				} else {
					/*22353*/
					$1.i = $1.i + 1; /*22353*/
				} /*22353*/
			} /*22353*/
			$put($1.msg, $1.j, $1.char); /*22356*/
			$1.i = $1.i + 1; /*22357*/
			$1.j = $1.j + 1; /*22358*/
		} /*22358*/
		$1.msg = $geti($1.msg, 0, $1.j); /*22360*/
		$1.msglen = $1.msg.length; /*22361*/
		$1.addtobits = function() {
			var _l = $k[--$j]; /*22382*/
			$puti($1.bits, $1.j, _l); /*22382*/
			$1.j = _l.length + $1.j; /*22383*/
		}; /*22384*/
		$1.tofixedbits = function() {
			var _q = $strcpy($s(13), "0000000000000"); /*22387*/
			var _r = $k[--$j]; /*22387*/
			var _u = $cvrs($s(13), $k[--$j], 2); /*22387*/
			$puti(_q, _r - _u.length, _u); /*22388*/
			$k[$j++] = $geti(_q, 0, _r); /*22389*/
		}; /*22390*/
		var _x = ($1.msglen <= 15) ? 4 : 17; /*22393*/
		$1.bits = $s(((7 + _x) + ($1.msglen * 8)) + 12); /*22393*/
		$1.j = 0; /*22394*/
		$k[$j++] = 31; /*22395*/
		$k[$j++] = 5; /*22395*/
		$1.tofixedbits(); /*22395*/
		$1.addtobits(); /*22395*/
		$k[$j++] = "00"; /*22396*/
		$1.addtobits(); /*22396*/
		if ($1.msglen <= 15) {
			/*22401*/
			$k[$j++] = $1.msglen; /*22398*/
			$k[$j++] = 4; /*22398*/
			$1.tofixedbits(); /*22398*/
			$1.addtobits(); /*22398*/
		} else {
			/*22401*/
			$k[$j++] = "0000"; /*22400*/
			$1.addtobits(); /*22400*/
			$k[$j++] = $1.msglen - 16; /*22401*/
			$k[$j++] = 13; /*22401*/
			$1.tofixedbits(); /*22401*/
			$1.addtobits(); /*22401*/
		} /*22401*/
		for (var _15 = 0, _14 = $1.msglen - 1; _15 <= _14; _15 += 1) {
			/*22405*/
			$k[$j++] = $get($1.msg, _15); /*22404*/
			$k[$j++] = 8; /*22404*/
			$1.tofixedbits(); /*22404*/
			$1.addtobits(); /*22404*/
		} /*22404*/
		$k[$j++] = 28; /*22406*/
		$k[$j++] = 5; /*22406*/
		$1.tofixedbits(); /*22406*/
		$1.addtobits(); /*22406*/
		$k[$j++] = 31; /*22407*/
		$k[$j++] = 5; /*22407*/
		$1.tofixedbits(); /*22407*/
		$1.addtobits(); /*22407*/
		$k[$j++] = "11"; /*22408*/
		$1.addtobits(); /*22408*/
		$1.diffside = 21; /*22411*/
		$1.sameshape = false; /*22412*/
		$1.sameecc = false; /*22413*/
		$1.hasslaves = false; /*22414*/
		$1.metrics = function() {
			$1.mc = $k[--$j]; /*22418*/
			$1.mr = $k[--$j]; /*22418*/
			var _1A = $1.mc; /*22419*/
			var _1B = $1.mr; /*22419*/
			var _1C = $1.mc; /*22420*/
			var _1D = $1.mr; /*22420*/
			var _1E = $1.colors; /*22422*/
			var _1F = 64; /*22422*/
			if (64 > _1E) { //no-else/*22422*/
				var _ = _1E; /*22422*/
				_1E = _1F; /*22422*/
				_1F = _; /*22422*/
			} /*22422*/
			var _1H = $1.slave ? 7 : 17; /*22423*/
			$k[$j++] = _1A * _1B; /*22451*/
			$k[$j++] = ((((~~((_1C - 25) / 16)) + 2) * ((~~((_1D - 25) / 16)) + 2)) - 4) * 7; /*22451*/
			$k[$j++] = _1F * 2; /*22451*/
			$k[$j++] = _1H * 4; /*22451*/
			if (!$1.slave) {
				/*22450*/
				var _1L = $eq($1.mr, $1.mc) ? 0 : 1; /*22427*/
				$1.metass = _1L; /*22427*/
				var _1M = $1.mr; /*22428*/
				var _1N = $1.mc; /*22428*/
				if ($lt(_1M, _1N)) { //no-else/*22428*/
					var _ = _1N; /*22428*/
					_1N = _1M; /*22428*/
					_1M = _; /*22428*/
				} /*22428*/
				$1.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~((_1M - 21) / 16)); /*22429*/
				$k[$j++] = 'metavlen'; /*22430*/
				if ($1.metass == 0) {
					/*22430*/
					$k[$j++] = $a([2, 2, 3, 4]); /*22430*/
				} else {
					/*22430*/
					$k[$j++] = $a([4, 6, 8, 10]); /*22430*/
				} /*22430*/
				var _1V = $get($k[--$j], $1.metavf); /*22430*/
				$1[$k[--$j]] = _1V; /*22430*/
				$1.metaelen = ($1.metavf * 2) + 10; /*22431*/
				$k[$j++] = (7 + $1.metavlen) + $1.metaelen; /*22434*/
				if ($1.hasslaves) { //no-else/*22434*/
					var _1b = $k[--$j]; /*22434*/
					$k[$j++] = _1b + 4; /*22434*/
				} /*22434*/
				var _1e = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); /*22437*/
				$1.nummetabits = (_1e * $1.metabpm) + 6; /*22437*/
				$k[$j++] = _1e + 6; /*22438*/
			} else {
				/*22450*/
				$k[$j++] = 3; /*22441*/
				if (!$1.sameshape) { //no-else/*22441*/
					var _1h = $k[--$j]; /*22441*/
					$k[$j++] = _1h + 5; /*22441*/
				} /*22441*/
				if ($1.hasslaves) { //no-else/*22442*/
					var _1j = $k[--$j]; /*22442*/
					$k[$j++] = _1j + 3; /*22442*/
				} /*22442*/
				if (!$1.sameecc) { //no-else/*22447*/
					var _1l = $1.mr; /*22444*/
					var _1m = $1.mc; /*22444*/
					if ($lt(_1l, _1m)) { //no-else/*22444*/
						var _ = _1m; /*22444*/
						_1m = _1l; /*22444*/
						_1l = _; /*22444*/
					} /*22444*/
					var _1p = $k[--$j]; /*22446*/
					$k[$j++] = _1p + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~((_1l - 21) / 16)); /*22446*/
				} /*22446*/
				var _1s = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); /*22450*/
				$1.nummetabits = _1s * $1.metabpm; /*22450*/
				$k[$j++] = _1s; /*22450*/
			} /*22450*/
			var _1u = $k[--$j]; /*22453*/
			$1.nummetamodules = _1u; /*22453*/
			var _1v = $k[--$j]; /*22454*/
			var _1w = $k[--$j]; /*22454*/
			var _1x = $k[--$j]; /*22454*/
			$1.numdatamodules = $k[--$j] - (_1x + (_1w + (_1v + _1u))); /*22454*/
			$1.numdatabits = $1.numdatamodules * $1.databpm; /*22455*/
		}; /*22456*/
		$1.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $1.eclevel); /*22459*/
		$1.grosslen = ~~Math.ceil($1.bits.length / $1.coderate); /*22460*/
		$1.snapsize = function() {
			var _27 = (~~Math.ceil($k[--$j])) - 18; /*22461*/
			$k[$j++] = _27; /*22461*/
			if (_27 < 0) { //no-else/*22461*/
				$j--; /*22461*/
				$k[$j++] = 0; /*22461*/
			} /*22461*/
			var _28 = $k[--$j]; /*22461*/
			$k[$j++] = ((~~(_28 / 4)) * 4) + 21; /*22461*/
		}; /*22461*/
		if (($1.rows == -1) && ($1.columns == -1)) {
			/*22490*/
			$k[$j++] = 'size'; /*22464*/
			$k[$j++] = Math.sqrt($1.grosslen); /*22464*/
			$1.snapsize(); /*22464*/
			var _2C = $k[--$j]; /*22464*/
			$1[$k[--$j]] = _2C; /*22464*/
			for (;;) {
				/*22469*/
				$k[$j++] = $1.size; /*22466*/
				$k[$j++] = $1.size; /*22466*/
				$1.metrics(); /*22466*/
				if ($1.grosslen <= $1.numdatabits) { //no-else/*22467*/
					break; /*22467*/
				} /*22467*/
				$1.size = $1.size + 4; /*22468*/
			} /*22468*/
			$1.rows = $1.size; /*22470*/
			$1.columns = $1.size; /*22471*/
		} else {
			/*22490*/
			if (($1.columns == -1) && ($1.rows != -1)) { //no-else/*22480*/
				$k[$j++] = 'columns'; /*22474*/
				$k[$j++] = $1.grosslen / $1.rows; /*22474*/
				$1.snapsize(); /*22474*/
				var _2P = $k[--$j]; /*22474*/
				$1[$k[--$j]] = _2P; /*22474*/
				for (;;) {
					/*22479*/
					$k[$j++] = $1.rows; /*22476*/
					$k[$j++] = $1.columns; /*22476*/
					$1.metrics(); /*22476*/
					if ($1.grosslen <= $1.numdatabits) { //no-else/*22477*/
						break; /*22477*/
					} /*22477*/
					$1.columns = $1.columns + 4; /*22478*/
				} /*22478*/
			} /*22478*/
			if (($1.rows == -1) && ($1.columns != -1)) { //no-else/*22488*/
				$k[$j++] = 'rows'; /*22482*/
				$k[$j++] = $1.grosslen / $1.columns; /*22482*/
				$1.snapsize(); /*22482*/
				var _2a = $k[--$j]; /*22482*/
				$1[$k[--$j]] = _2a; /*22482*/
				for (;;) {
					/*22487*/
					$k[$j++] = $1.rows; /*22484*/
					$k[$j++] = $1.columns; /*22484*/
					$1.metrics(); /*22484*/
					if ($1.grosslen <= $1.numdatabits) { //no-else/*22485*/
						break; /*22485*/
					} /*22485*/
					$1.rows = $1.rows + 4; /*22486*/
				} /*22486*/
			} /*22486*/
			if (($1.rows != -1) && ($1.columns != -1)) { //no-else/*22491*/
				$k[$j++] = $1.rows; /*22490*/
				$k[$j++] = $1.columns; /*22490*/
				$1.metrics(); /*22490*/
			} /*22490*/
		} /*22490*/
		$1.C = $1.numdatabits; /*22493*/
		$1.cols = $1.columns; /*22494*/
		if (($1.rows > 145) || ($1.cols > 145)) { //no-else/*22499*/
			$k[$j++] = 'bwipp.jabcodeNoValidSymbol'; /*22498*/
			$k[$j++] = "No valid symbol available"; /*22498*/
			$0.raiseerror(); /*22498*/
		} /*22498*/
		$1.min = $1.C; /*22502*/
		for (var _2q = 3; _2q <= 8; _2q += 1) {
			/*22514*/
			$1.i = _2q; /*22504*/
			for (var _2s = $1.i + 1; _2s <= 9; _2s += 1) {
				/*22513*/
				$1.j = _2s; /*22506*/
				$1.dist = (((~~($1.C / $1.j)) * $1.j) - ((~~($1.C / $1.j)) * $1.i)) - $1.bits.length; /*22507*/
				if (($1.dist < $1.min) && ($1.dist >= 0)) { //no-else/*22512*/
					$1.datawc = $1.i; /*22509*/
					$1.datawr = $1.j; /*22510*/
					$1.min = $1.dist; /*22511*/
				} /*22511*/
			} /*22511*/
		} /*22511*/
		$1.tmpbits = $s(((~~($1.C / $1.datawr)) * $1.datawr) - ((~~($1.C / $1.datawr)) * $1.datawc)); /*22517*/
		$puti($1.tmpbits, 0, $1.bits); /*22518*/
		for (var _3I = $1.bits.length, _3H = $1.tmpbits.length - 1; _3I <= _3H; _3I += 1) {
			/*22522*/
			var _3K = $get($1.tmpbits, _3I - 1); /*22520*/
			$k[$j++] = _3I; /*22520*/
			$k[$j++] = _3K; /*22520*/
			if ((_3K % 2) == 0) {
				/*22520*/
				var _3L = $k[--$j]; /*22520*/
				$k[$j++] = _3L + 1; /*22520*/
			} else {
				/*22520*/
				var _3M = $k[--$j]; /*22520*/
				$k[$j++] = _3M - 1; /*22520*/
			} /*22520*/
			var _3O = $k[--$j]; /*22521*/
			$put($1.tmpbits, $k[--$j], _3O); /*22521*/
		} /*22521*/
		$1.bits = $1.tmpbits; /*22523*/
		$1.m0 = 22609 + 1; /*22527*/
		$1.m1 = 62509 - 65536; /*22527*/
		$1.m2 = 19605; /*22527*/
		$1.m3 = 32557; /*22527*/
		$1.lcg64_temper = function() {
			$1.p00 = $1.m0 * $1.s0; /*22533*/
			$1.p01 = $1.m0 * $1.s1; /*22533*/
			$1.p02 = $1.m0 * $1.s2; /*22533*/
			$1.p03 = $1.m0 * $1.s3; /*22533*/
			$1.p10 = $1.m1 * $1.s0; /*22534*/
			$1.p11 = $1.m1 * $1.s1; /*22534*/
			$1.p12 = $1.m1 * $1.s2; /*22534*/
			$1.p13 = $1.m1 * $1.s3; /*22534*/
			$1.p20 = $1.m2 * $1.s0; /*22535*/
			$1.p21 = $1.m2 * $1.s1; /*22535*/
			$1.p22 = $1.m2 * $1.s2; /*22535*/
			$1.p23 = $1.m2 * $1.s3; /*22535*/
			$1.p30 = $1.m3 * $1.s0; /*22536*/
			$1.p31 = $1.m3 * $1.s1; /*22536*/
			$1.p32 = $1.m3 * $1.s2; /*22536*/
			$1.p33 = $1.m3 * $1.s3; /*22536*/
			$1.s3 = ($1.p33 % 65536) + 1; /*22538*/
			$1.s2 = (($1.p32 % 65536) + (~~($1.p33 / 65536))) + ($1.p23 % 65536); /*22540*/
			$1.s1 = ((($1.p31 % 65536) + (~~($1.p32 / 65536))) + (($1.p22 % 65536) + (~~($1.p23 / 65536)))) + ($1.p13 % 65536); /*22543*/
			$1.s0 = (((($1.p30 % 65536) + (~~($1.p31 / 65536))) + (($1.p21 % 65536) + (~~($1.p22 / 65536)))) + (($1.p12 % 65536) + (~~($1.p13 / 65536)))) + ($1.p03 % 65536); /*22547*/
			$1.s3 = $1.s3 + 65536; /*22550*/
			$1.s2 = $1.s2 + 65535; /*22551*/
			$1.s1 = $1.s1 + 65535; /*22552*/
			$1.s0 = $1.s0 + 65535; /*22553*/
			$1.s2 = (~~($1.s3 / 65536)) + $1.s2; /*22556*/
			$1.s3 = $1.s3 % 65536; /*22556*/
			$1.s1 = (~~($1.s2 / 65536)) + $1.s1; /*22557*/
			$1.s2 = $1.s2 % 65536; /*22557*/
			$1.s0 = (~~($1.s1 / 65536)) + $1.s0; /*22558*/
			$1.s1 = $1.s1 % 65536; /*22558*/
			$1.s0 = $1.s0 % 65536; /*22559*/
			var _4T = (((($1.s0 - 32768) * 65536) + $1.s1) ^ 2147483648) & 4294967295; /*22564*/
			var _4U = _4T ^ (_4T >>> 11); /*22565*/
			var _4V = _4U ^ ((_4U << 7) & -1658038656); /*22566*/
			var _4W = (_4V ^ ((_4V << 15) & -272236544)) & 4294967295; /*22568*/
			$k[$j++] = _4W ^ (_4W >>> 18); /*22568*/
		}; /*22570*/
		$1.createMatrixA = function() {
			$k[$j++] = 'nb_pcb'; /*22574*/
			if ($1.wr < 4) {
				/*22574*/
				$k[$j++] = ~~($1.Pg_sub_block / 2); /*22574*/
			} else {
				/*22574*/
				$k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; /*22574*/
			} /*22574*/
			var _4c = $k[--$j]; /*22574*/
			$1[$k[--$j]] = _4c; /*22574*/
			$1.offset = ~~Math.ceil($1.Pg_sub_block / 32); /*22575*/
			$1.effwidth = $1.offset * 32; /*22576*/
			$1.matrixA = $a($1.offset * $1.nb_pcb); /*22577*/
			for (var _4m = 0, _4l = ($1.offset * $1.nb_pcb) - 1; _4m <= _4l; _4m += 1) {
				/*22578*/
				$put($1.matrixA, _4m, 0); /*22578*/
			} /*22578*/
			$1.permutation = $a($1.Pg_sub_block); /*22579*/
			for (var _4s = 0, _4r = $1.Pg_sub_block - 1; _4s <= _4r; _4s += 1) {
				/*22580*/
				$put($1.permutation, _4s, _4s); /*22580*/
			} /*22580*/
			for (var _4x = 0, _4w = (~~($1.Pg_sub_block / $1.wr)) - 1; _4x <= _4w; _4x += 1) {
				/*22589*/
				$1.i = _4x; /*22583*/
				for (var _50 = 0, _4z = $1.wr - 1; _50 <= _4z; _50 += 1) {
					/*22588*/
					$1.j = _50; /*22585*/
					var _51 = $1.matrixA; /*22586*/
					var _52 = $1.i; /*22586*/
					var _53 = $1.effwidth; /*22586*/
					var _54 = $1.wr; /*22586*/
					var _55 = $1.j; /*22586*/
					var _5B = 31 - ((($1.i * ($1.effwidth + $1.wr)) + $1.j) % 32); /*22587*/
					$put(_51, ~~(((_52 * (_53 + _54)) + _55) / 32), $get(_51, ~~(((_52 * (_53 + _54)) + _55) / 32)) | ((_5B < 0 ? 1 >>> -_5B : 1 << _5B))); /*22587*/
				} /*22587*/
			} /*22587*/
			$1.s0 = 0; /*22592*/
			$1.s1 = 0; /*22592*/
			$1.s2 = 11; /*22592*/
			$1.s3 = 64569; /*22592*/
			for (var _5E = 1, _5D = $1.wc - 1; _5E <= _5D; _5E += 1) {
				/*22615*/
				$1.i = _5E; /*22594*/
				$1.off_index = (~~($1.Pg_sub_block / $1.wr)) * $1.i; /*22595*/
				for (var _5K = 0, _5J = $1.Pg_sub_block - 1; _5K <= _5J; _5K += 1) {
					/*22614*/
					$1.j = _5K; /*22597*/
					$1.lcg64_temper(); /*22598*/
					var _5L = $k[--$j]; /*22599*/
					$k[$j++] = _5L; /*22599*/
					if (_5L < 0) { //no-else/*22599*/
						var _5M = $k[--$j]; /*22599*/
						$k[$j++] = (_5M ^ 2147483648) + 2147483648; /*22599*/
					} /*22599*/
					$1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); /*22601*/
					for (var _5T = 0, _5S = (~~($1.Pg_sub_block / $1.wr)) - 1; _5T <= _5S; _5T += 1) {
						/*22610*/
						$1.k = _5T; /*22603*/
						var _5U = $1.matrixA; /*22604*/
						var _5V = $1.off_index; /*22604*/
						var _5W = $1.k; /*22604*/
						var _5X = $1.offset; /*22604*/
						var _5Y = $1.j; /*22604*/
						var _5g = $get($1.matrixA, (~~($get($1.permutation, $1.pos) / 32)) + ($1.k * $1.offset)); /*22606*/
						var _5k = -(31 - ($get($1.permutation, $1.pos) % 32)); /*22607*/
						var _5m = 31 - ($1.j % 32); /*22608*/
						$put(_5U, ((_5V + _5W) * _5X) + (~~(_5Y / 32)), $get(_5U, ((_5V + _5W) * _5X) + (~~(_5Y / 32))) | ((_5m < 0 ? (((_5k < 0 ? _5g >>> -_5k : _5g << _5k)) & 1) >>> -_5m : (((_5k < 0 ? _5g >>> -_5k : _5g << _5k)) & 1) << _5m))); /*22609*/
					} /*22609*/
					var _5p = $1.permutation; /*22611*/
					var _5q = $1.Pg_sub_block; /*22611*/
					var _5r = $1.j; /*22611*/
					$put(_5p, (_5q - 1) - _5r, $get($1.permutation, $1.pos)); /*22613*/
					$put($1.permutation, $1.pos, $get(_5p, (_5q - 1) - _5r)); /*22613*/
				} /*22613*/
			} /*22613*/
		}; /*22617*/
		$1.createMetadataMatrixA = function() {
			$1.nb_pcb = ~~($1.Pg_sub_block / 2); /*22621*/
			$1.offset = ~~Math.ceil($1.Pg_sub_block / 32); /*22622*/
			$1.matrixA = $a($1.offset * $1.nb_pcb); /*22623*/
			for (var _64 = 0, _63 = ($1.offset * $1.nb_pcb) - 1; _64 <= _63; _64 += 1) {
				/*22624*/
				$put($1.matrixA, _64, 0); /*22624*/
			} /*22624*/
			$1.permutation = $a($1.Pg_sub_block); /*22625*/
			for (var _6A = 0, _69 = $1.Pg_sub_block - 1; _6A <= _69; _6A += 1) {
				/*22626*/
				$put($1.permutation, _6A, _6A); /*22626*/
			} /*22626*/
			$1.s0 = 0; /*22629*/
			$1.s1 = 0; /*22629*/
			$1.s2 = 0; /*22629*/
			$1.s3 = 38545; /*22629*/
			$1.nb_once = ~~((~~((($1.nb_pcb / $1.wc) * $1.Pg_sub_block) + 3)) / $1.nb_pcb); /*22630*/
			for (var _6I = 0, _6H = $1.nb_pcb - 1; _6I <= _6H; _6I += 1) {
				/*22645*/
				$1.i = _6I; /*22632*/
				for (var _6L = 0, _6K = $1.nb_once - 1; _6L <= _6K; _6L += 1) {
					/*22644*/
					$1.j = _6L; /*22634*/
					$1.lcg64_temper(); /*22635*/
					var _6M = $k[--$j]; /*22636*/
					$k[$j++] = _6M; /*22636*/
					if (_6M < 0) { //no-else/*22636*/
						var _6N = $k[--$j]; /*22636*/
						$k[$j++] = (_6N ^ 2147483648) + 2147483648; /*22636*/
					} /*22636*/
					$1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); /*22638*/
					var _6R = $1.matrixA; /*22639*/
					var _6S = $1.i; /*22639*/
					var _6T = $1.offset; /*22639*/
					var _6W = $get($1.permutation, $1.pos); /*22639*/
					var _6b = 31 - ($get($1.permutation, $1.pos) % 32); /*22640*/
					$put(_6R, (_6S * _6T) + (~~(_6W / 32)), $get(_6R, (_6S * _6T) + (~~(_6W / 32))) | ((_6b < 0 ? 1 >>> -_6b : 1 << _6b))); /*22640*/
					var _6e = $1.permutation; /*22641*/
					var _6f = $1.Pg_sub_block; /*22641*/
					var _6g = $1.j; /*22641*/
					$put(_6e, (_6f - 1) - _6g, $get($1.permutation, $1.pos)); /*22643*/
					$put($1.permutation, $1.pos, $get(_6e, (_6f - 1) - _6g)); /*22643*/
				} /*22643*/
			} /*22643*/
		}; /*22647*/
		$1.GaussJordan = function() {
			$k[$j++] = 'nb_pcb'; /*22651*/
			if ($1.wr < 4) {
				/*22651*/
				$k[$j++] = ~~($1.Pg_sub_block / 2); /*22651*/
			} else {
				/*22651*/
				$k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; /*22651*/
			} /*22651*/
			var _6q = $k[--$j]; /*22651*/
			$1[$k[--$j]] = _6q; /*22651*/
			$1.offset = ~~Math.ceil($1.Pg_sub_block / 32); /*22652*/
			var _6t = $1.matrixA; /*22653*/
			$1.matrixH = $arrcpy($a(_6t.length), _6t); /*22653*/
			$k[$j++] = Infinity; /*22654*/
			for (var _6x = 0, _6y = $1.Pg_sub_block; _6x < _6y; _6x++) {
				/*22654*/
				$k[$j++] = 0; /*22654*/
			} /*22654*/
			$1.column_arrangement = $a(); /*22654*/
			$k[$j++] = Infinity; /*22655*/
			for (var _71 = 0, _72 = $1.Pg_sub_block; _71 < _72; _71++) {
				/*22655*/
				$k[$j++] = false; /*22655*/
			} /*22655*/
			$1.processed_column = $a(); /*22655*/
			$k[$j++] = Infinity; /*22656*/
			for (var _75 = 0, _76 = $1.nb_pcb; _75 < _76; _75++) {
				/*22656*/
				$k[$j++] = 0; /*22656*/
			} /*22656*/
			$1.zero_lines_nb = $a(); /*22656*/
			$k[$j++] = Infinity; /*22657*/
			for (var _79 = 0, _7A = $1.Pg_sub_block * 2; _79 < _7A; _79++) {
				/*22657*/
				$k[$j++] = 0; /*22657*/
			} /*22657*/
			$1.swap_col = $a(); /*22657*/
			$1.zero_lines = 0; /*22658*/
			$1.loop0 = 0; /*22660*/
			for (var _7E = 0, _7D = $1.nb_pcb - 1; _7E <= _7D; _7E += 1) {
				/*22698*/
				$1.i = _7E; /*22662*/
				$1.pivot_column = $1.Pg_sub_block + 1; /*22663*/
				for (var _7I = 0, _7H = $1.Pg_sub_block - 1; _7I <= _7H; _7I += 1) {
					/*22671*/
					$1.j = _7I; /*22665*/
					var _7N = $get($1.matrixH, ~~(((($1.offset * 32) * $1.i) + $1.j) / 32)); /*22666*/
					var _7R = -(31 - (((($1.offset * 32) * $1.i) + $1.j) % 32)); /*22667*/
					if ((((_7R < 0 ? _7N >>> -_7R : _7N << _7R)) & 1) == 1) { //no-else/*22670*/
						$1.pivot_column = $1.j; /*22668*/
						break; /*22669*/
					} /*22669*/
				} /*22669*/
				if ($1.pivot_column < $1.Pg_sub_block) {
					/*22696*/
					$put($1.processed_column, $1.pivot_column, true); /*22673*/
					$put($1.column_arrangement, $1.pivot_column, $1.i); /*22674*/
					if ($1.pivot_column >= $1.nb_pcb) { //no-else/*22678*/
						$put($1.swap_col, $1.loop0 * 2, $1.pivot_column); /*22676*/
						$1.loop0 = $1.loop0 + 1; /*22677*/
					} /*22677*/
					$1.off_index = ~~($1.pivot_column / 32); /*22679*/
					$1.off_index1 = $1.pivot_column % 32; /*22680*/
					for (var _7k = 0, _7j = $1.nb_pcb - 1; _7k <= _7j; _7k += 1) {
						/*22693*/
						$1.j = _7k; /*22682*/
						if ($1.i != $1.j) { //no-else/*22692*/
							var _7r = $get($1.matrixH, $1.off_index + ($1.j * $1.offset)); /*22684*/
							var _7t = -(31 - $1.off_index1); /*22685*/
							if ((((_7t < 0 ? _7r >>> -_7t : _7r << _7t)) & 1) == 1) { //no-else/*22691*/
								for (var _7w = 0, _7v = $1.offset - 1; _7w <= _7v; _7w += 1) {
									/*22690*/
									$1.k = _7w; /*22687*/
									var _7x = $1.matrixH; /*22688*/
									var _7y = $1.offset; /*22688*/
									var _7z = $1.j; /*22688*/
									var _80 = $1.k; /*22688*/
									$put(_7x, (_7y * _7z) + _80, $xo($get(_7x, (_7y * _7z) + _80), $get($1.matrixH, ($1.offset * $1.i) + $1.k))); /*22689*/
								} /*22689*/
							} /*22689*/
						} /*22689*/
					} /*22689*/
				} else {
					/*22696*/
					$put($1.zero_lines_nb, $1.zero_lines, $1.i); /*22695*/
					$1.zero_lines = $1.zero_lines + 1; /*22696*/
				} /*22696*/
			} /*22696*/
			$1.matrix_rank = $1.nb_pcb - $1.zero_lines; /*22700*/
			$1.loop2 = 0; /*22701*/
			for (var _8G = $1.matrix_rank, _8F = $1.nb_pcb - 1; _8G <= _8F; _8G += 1) {
				/*22721*/
				$1.i = _8G; /*22703*/
				if ($get($1.column_arrangement, $1.i) > 0) { //no-else/*22720*/
					for (var _8M = 0, _8L = $1.nb_pcb - 1; _8M <= _8L; _8M += 1) {
						/*22719*/
						$1.j = _8M; /*22706*/
						if ($nt($get($1.processed_column, $1.j))) { //no-else/*22718*/
							$put($1.column_arrangement, $1.j, $get($1.column_arrangement, $1.i)); /*22708*/
							$put($1.column_arrangement, $1.i, 0); /*22709*/
							$put($1.processed_column, $1.j, true); /*22710*/
							$put($1.processed_column, $1.i, false); /*22711*/
							$put($1.swap_col, $1.loop0 * 2, $1.i); /*22712*/
							$put($1.swap_col, ($1.loop0 * 2) + 1, $1.j); /*22713*/
							$put($1.column_arrangement, $1.i, $1.j); /*22714*/
							$1.loop0 = $1.loop0 + 1; /*22715*/
							$1.loop2 = $1.loop2 + 1; /*22716*/
							break; /*22717*/
						} /*22717*/
					} /*22717*/
				} /*22717*/
			} /*22717*/
			$1.loop1 = 0; /*22723*/
			for (var _8o = 0, _8n = $1.nb_pcb - 1; _8o <= _8n; _8o += 1) {
				/*22732*/
				$1.kl = _8o; /*22725*/
				if ($nt($get($1.processed_column, $1.kl)) && ($1.loop1 < ($1.loop0 - $1.loop2))) { //no-else/*22731*/
					$put($1.column_arrangement, $1.kl, $get($1.column_arrangement, $get($1.swap_col, $1.loop1 * 2))); /*22727*/
					$put($1.processed_column, $1.kl, true); /*22728*/
					$put($1.swap_col, ($1.loop1 * 2) + 1, $1.kl); /*22729*/
					$1.loop1 = $1.loop1 + 1; /*22730*/
				} /*22730*/
			} /*22730*/
			$1.loop1 = 0; /*22734*/
			for (var _9A = 0, _99 = $1.nb_pcb - 1; _9A <= _99; _9A += 1) {
				/*22741*/
				$1.kl = _9A; /*22736*/
				if ($nt($get($1.processed_column, $1.kl))) { //no-else/*22740*/
					$put($1.column_arrangement, $1.kl, $get($1.zero_lines_nb, $1.loop1)); /*22738*/
					$1.loop1 = $1.loop1 + 1; /*22739*/
				} /*22739*/
			} /*22739*/
			for (var _9M = 0, _9L = $1.nb_pcb - 1; _9M <= _9L; _9M += 1) {
				/*22750*/
				$1.i = _9M; /*22744*/
				for (var _9P = 0, _9O = $1.offset - 1; _9P <= _9O; _9P += 1) {
					/*22749*/
					$1.j = _9P; /*22746*/
					$put($1.matrixA, ($1.i * $1.offset) + $1.j, $get($1.matrixH, ($get($1.column_arrangement, $1.i) * $1.offset) + $1.j)); /*22748*/
				} /*22748*/
			} /*22748*/
			$1.tmp = 0; /*22752*/
			for (var _9d = 0, _9c = $1.loop0 - 1; _9d <= _9c; _9d += 1) {
				/*22774*/
				$1.i = _9d; /*22754*/
				for (var _9g = 0, _9f = $1.nb_pcb - 1; _9g <= _9f; _9g += 1) {
					/*22773*/
					$1.j = _9g; /*22756*/
					var _9n = $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset)); /*22757*/
					var _9r = -(31 - ($get($1.swap_col, $1.i * 2) % 32)); /*22758*/
					$1.tmp = (((-(((_9r < 0 ? _9n >>> -_9r : _9n << _9r)) & 1)) ^ $1.tmp) & 1) ^ $1.tmp; /*22759*/
					var _9u = $1.matrixA; /*22760*/
					var _9x = $get($1.swap_col, $1.i * 2); /*22760*/
					var _9y = $1.j; /*22760*/
					var _9z = $1.offset; /*22760*/
					var _A7 = $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset)); /*22762*/
					var _AB = -(31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32)); /*22763*/
					var _AM = 31 - ($get($1.swap_col, $1.i * 2) % 32); /*22765*/
					$put(_9u, (~~(_9x / 32)) + (_9y * _9z), $get(_9u, (~~(_9x / 32)) + (_9y * _9z)) ^ (((-(((_AB < 0 ? _A7 >>> -_AB : _A7 << _AB)) & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset))) & ((_AM < 0 ? 1 >>> -_AM : 1 << _AM)))); /*22766*/
					var _AN = $1.matrixA; /*22767*/
					var _AQ = $get($1.swap_col, ($1.i * 2) + 1); /*22767*/
					var _AR = $1.j; /*22767*/
					var _AS = $1.offset; /*22767*/
					var _Af = 31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32); /*22771*/
					$put(_AN, (~~(_AQ / 32)) + (_AR * _AS), $get(_AN, (~~(_AQ / 32)) + (_AR * _AS)) ^ (((-($1.tmp & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset))) & ((_Af < 0 ? 1 >>> -_Af : 1 << _Af)))); /*22772*/
				} /*22772*/
			} /*22772*/
		}; /*22776*/
		$1.createGeneratorMatrix = function() {
			$1.pn = $1.Pg_sub_block - $1.matrix_rank; /*22780*/
			$1.offset = ~~Math.ceil($1.pn / 32); /*22781*/
			$1.effwidth = $1.offset * 32; /*22782*/
			$1.offset_cap = ~~Math.ceil($1.Pg_sub_block / 32); /*22783*/
			$1.G = $a($1.offset * $1.Pg_sub_block); /*22784*/
			for (var _Ar = 0, _Aq = ($1.offset * $1.Pg_sub_block) - 1; _Ar <= _Aq; _Ar += 1) {
				/*22787*/
				$put($1.G, _Ar, 0); /*22786*/
			} /*22786*/
			for (var _Av = 0, _Au = $1.pn - 1; _Av <= _Au; _Av += 1) {
				/*22792*/
				$1.i = _Av; /*22789*/
				var _Aw = $1.G; /*22790*/
				var _Ax = $1.Pg_sub_block; /*22790*/
				var _Ay = $1.pn; /*22790*/
				var _Az = $1.i; /*22790*/
				var _B0 = $1.offset; /*22790*/
				var _B1 = $1.i; /*22790*/
				var _B4 = 31 - ($1.i % 32); /*22791*/
				$put(_Aw, (((_Ax - _Ay) + _Az) * _B0) + (~~(_B1 / 32)), $get(_Aw, (((_Ax - _Ay) + _Az) * _B0) + (~~(_B1 / 32))) | ((_B4 < 0 ? 1 >>> -_B4 : 1 << _B4))); /*22791*/
			} /*22791*/
			$1.matrix_index = $1.Pg_sub_block - $1.pn; /*22793*/
			$1.loop0 = 0; /*22794*/
			for (var _BB = 0, _BA = (($1.Pg_sub_block - $1.pn) * $1.effwidth) - 1; _BB <= _BA; _BB += 1) {
				/*22811*/
				$1.i = _BB; /*22796*/
				if ($1.matrix_index >= $1.Pg_sub_block) { //no-else/*22800*/
					$1.loop0 = $1.loop0 + 1; /*22798*/
					$1.matrix_index = $1.Pg_sub_block - $1.pn; /*22799*/
				} /*22799*/
				if (($1.i % $1.effwidth) < $1.pn) { //no-else/*22810*/
					var _BK = $1.G; /*22802*/
					var _BL = $1.i; /*22802*/
					var _BR = $get($1.matrixA, (~~($1.matrix_index / 32)) + ($1.offset_cap * $1.loop0)); /*22804*/
					var _BT = -(31 - ($1.matrix_index % 32)); /*22805*/
					var _BY = 31 - ($1.i % 32); /*22807*/
					$put(_BK, ~~(_BL / 32), $get(_BK, ~~(_BL / 32)) ^ (((-(((_BT < 0 ? _BR >>> -_BT : _BR << _BT)) & 1)) ^ $get($1.G, ~~($1.i / 32))) & ((_BY < 0 ? 1 >>> -_BY : 1 << _BY)))); /*22808*/
					$1.matrix_index = $1.matrix_index + 1; /*22809*/
				} /*22809*/
			} /*22809*/
		}; /*22813*/
		$1.ldpc = function() {
			$1.wr = $k[--$j]; /*22817*/
			$1.wc = $k[--$j]; /*22818*/
			$k[$j++] = Infinity; /*22819*/
			var _Bc = $k[--$j]; /*22819*/
			var _Bd = $k[--$j]; /*22819*/
			$k[$j++] = _Bc; /*22819*/
			$forall(_Bd, function() {
				/*22819*/
				var _Be = $k[--$j]; /*22819*/
				$k[$j++] = _Be - 48; /*22819*/
			}); /*22819*/
			$1.data = $a(); /*22819*/
			$1.Pn = $1.data.length; /*22821*/
			if ($1.wr != -1) {
				/*22836*/
				$1.Pg = ~~((Math.ceil((Math.ceil(($1.Pn * $1.wr) / ($1.wr - $1.wc))) / $1.wr)) * $1.wr); /*22823*/
				$1.nb_sub_blocks = (~~($1.Pg / 2700)) + 1; /*22824*/
				$1.Pg_sub_block = (~~((~~($1.Pg / $1.nb_sub_blocks)) / $1.wr)) * $1.wr; /*22825*/
				$1.Pn_sub_block = ~~(($1.Pg_sub_block * ($1.wr - $1.wc)) / $1.wr); /*22826*/
				$1.nb_sub_blocks = ~~($1.Pg / $1.Pg_sub_block); /*22827*/
				$k[$j++] = 'encoding_iterations'; /*22828*/
				$k[$j++] = ~~($1.Pg / $1.Pg_sub_block); /*22828*/
				if (($1.Pn_sub_block * $1.nb_sub_blocks) < $1.Pn) { //no-else/*22828*/
					var _C4 = $k[--$j]; /*22828*/
					$k[$j++] = _C4 - 1; /*22828*/
				} /*22828*/
				var _C5 = $k[--$j]; /*22828*/
				$1[$k[--$j]] = _C5; /*22828*/
				$1.createMatrixA(); /*22829*/
			} else {
				/*22836*/
				$1.Pg = $1.Pn * 2; /*22831*/
				$1.nb_sub_blocks = 1; /*22832*/
				$1.Pg_sub_block = $1.Pg; /*22833*/
				$1.Pn_sub_block = $1.Pn; /*22834*/
				$1.encoding_iterations = 1; /*22835*/
				$1.createMetadataMatrixA(); /*22836*/
			} /*22836*/
			$1.GaussJordan(); /*22838*/
			$1.createGeneratorMatrix(); /*22839*/
			$1.ecc_encoded_data = $a($1.Pg); /*22841*/
			$1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); /*22843*/
			for (var _CG = 0, _CF = $1.encoding_iterations - 1; _CG <= _CF; _CG += 1) {
				/*22859*/
				$1.iter = _CG; /*22845*/
				for (var _CJ = 0, _CI = $1.Pg_sub_block - 1; _CJ <= _CI; _CJ += 1) {
					/*22858*/
					$1.i = _CJ; /*22847*/
					$1.temp = 0; /*22848*/
					$1.loop0 = 0; /*22849*/
					$1.offset_index = $1.offset * $1.i; /*22850*/
					for (var _CR = $1.iter * $1.Pn_sub_block, _CQ = (($1.iter + 1) * $1.Pn_sub_block) - 1; _CR <= _CQ; _CR += 1) {
						/*22856*/
						var _CX = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); /*22853*/
						var _CZ = -(31 - ($1.loop0 % 32)); /*22853*/
						$1.temp = ($get($1.data, _CR) & (((_CZ < 0 ? _CX >>> -_CZ : _CX << _CZ)) & 1)) ^ $1.temp; /*22854*/
						$1.loop0 = $1.loop0 + 1; /*22855*/
					} /*22855*/
					$put($1.ecc_encoded_data, $1.i + ($1.iter * $1.Pg_sub_block), $1.temp); /*22857*/
				} /*22857*/
			} /*22857*/
			if ($1.encoding_iterations != $1.nb_sub_blocks) { //no-else/*22883*/
				$1.start = $1.encoding_iterations * $1.Pn_sub_block; /*22862*/
				$1.last_index = $1.encoding_iterations * $1.Pg_sub_block; /*22863*/
				$1.Pg_sub_block = $1.Pg - ($1.encoding_iterations * $1.Pg_sub_block); /*22864*/
				$1.Pn_sub_block = ~~(($1.Pg_sub_block * ($1.wr - $1.wc)) / $1.wr); /*22865*/
				$1.createMatrixA(); /*22866*/
				$1.GaussJordan(); /*22867*/
				$1.createGeneratorMatrix(); /*22868*/
				$1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); /*22869*/
				for (var _Cy = 0, _Cx = $1.Pg_sub_block - 1; _Cy <= _Cx; _Cy += 1) {
					/*22882*/
					$1.i = _Cy; /*22871*/
					$1.temp = 0; /*22872*/
					$1.loop0 = 0; /*22873*/
					$1.offset_index = $1.offset * $1.i; /*22874*/
					for (var _D4 = $1.start, _D3 = $1.Pn - 1; _D4 <= _D3; _D4 += 1) {
						/*22880*/
						var _DA = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); /*22877*/
						var _DC = -(31 - ($1.loop0 % 32)); /*22877*/
						$1.temp = ($get($1.data, _D4) & (((_DC < 0 ? _DA >>> -_DC : _DA << _DC)) & 1)) ^ $1.temp; /*22878*/
						$1.loop0 = $1.loop0 + 1; /*22879*/
					} /*22879*/
					$put($1.ecc_encoded_data, $1.i + $1.last_index, $1.temp); /*22881*/
				} /*22881*/
			} /*22881*/
			$1.out = $s($1.Pg); /*22885*/
			for (var _DN = 0, _DM = $1.Pg - 1; _DN <= _DM; _DN += 1) {
				/*22889*/
				$put($1.out, _DN, $get($1.ecc_encoded_data, _DN) + 48); /*22888*/
			} /*22888*/
			$k[$j++] = $1.out; /*22890*/
		}; /*22892*/
		$k[$j++] = 'bits'; /*22895*/
		$k[$j++] = $1.bits; /*22895*/
		$k[$j++] = $1.datawc; /*22895*/
		$k[$j++] = $1.datawr; /*22895*/
		$1.ldpc(); /*22895*/
		var _DV = $k[--$j]; /*22895*/
		$1[$k[--$j]] = _DV; /*22895*/
		$1.s0 = 0; /*22898*/
		$1.s1 = 0; /*22898*/
		$1.s2 = 3; /*22898*/
		$1.s3 = 30151; /*22898*/
		for (var _DY = $1.bits.length - 1; _DY >= 1; _DY -= 1) {
			/*22908*/
			$1.l = _DY; /*22900*/
			$1.lcg64_temper(); /*22901*/
			var _DZ = $k[--$j]; /*22902*/
			$k[$j++] = _DZ; /*22902*/
			if (_DZ < 0) { //no-else/*22902*/
				var _Da = $k[--$j]; /*22902*/
				$k[$j++] = (_Da ^ 2147483648) + 2147483648; /*22902*/
			} /*22902*/
			$1.r = ~~(($k[--$j] / 4294967296) * ($1.l + 1)); /*22904*/
			$put($1.bits, $1.l, $get($1.bits, $1.r)); /*22906*/
			$put($1.bits, $1.r, $get($1.bits, $1.l)); /*22907*/
		} /*22907*/
		$1.tmpbits = $s($1.C); /*22911*/
		$puti($1.tmpbits, 0, $1.bits); /*22912*/
		$1.j = $1.bits.length; /*22913*/
		for (var _Du = 0, _Dv = ~~((($1.C - $1.j) + 1) / 2); _Du < _Dv; _Du++) {
			/*22918*/
			$put($1.tmpbits, $1.j, 48); /*22915*/
			if (($1.j + 1) < $1.C) { //no-else/*22916*/
				$put($1.tmpbits, $1.j + 1, 49); /*22916*/
			} /*22916*/
			$1.j = $1.j + 2; /*22917*/
		} /*22917*/
		$1.bits = $1.tmpbits; /*22919*/
		if ($1.colors == 4) {
			/*22984*/
			$1.bi = 0; /*22923*/
			$1.gi = 1; /*22923*/
			$1.mi = 2; /*22923*/
			$1.yi = 3; /*22923*/
			$1.ki = 4; /*22924*/
			$1.wi = 5; /*22924*/
			$k[$j++] = Infinity; /*22927*/
			$k[$j++] = $1.bi; /*22927*/
			$k[$j++] = "0000FF"; /*22927*/
			$k[$j++] = $1.gi; /*22927*/
			$k[$j++] = "00FF00"; /*22927*/
			$k[$j++] = $1.mi; /*22927*/
			$k[$j++] = "FF00FF"; /*22927*/
			$k[$j++] = $1.yi; /*22927*/
			$k[$j++] = "FFFF00"; /*22927*/
			$k[$j++] = $1.ki; /*22927*/
			$k[$j++] = "000000"; /*22927*/
			$k[$j++] = $1.wi; /*22927*/
			$k[$j++] = "FFFFFF"; /*22927*/
			$1.palette = $d(); /*22928*/
			$1.metacolorindex = $a([$1.bi, $1.gi, $1.mi, $1.yi]); /*22929*/
			$1.palettelayout = $a([$1.bi, $1.gi, $1.mi, $1.yi]); /*22930*/
		} else {
			/*22984*/
			var _ES = new Map([
				[8, $a([2, 2, 2])],
				[16, $a([4, 2, 2])],
				[32, $a([4, 4, 2])],
				[64, $a([4, 4, 4])],
				[128, $a([8, 4, 4])],
				[256, $a([8, 8, 4])]
			]); /*22939*/
			$1.rgbres = $get(_ES, $1.colors); /*22940*/
			$k[$j++] = 'rvals'; /*22942*/
			$k[$j++] = $get($1.rgbres, 0); /*22942*/
			$k[$j++] = Infinity; /*22942*/
			var _EX = $k[--$j]; /*22942*/
			var _EZ = $k[--$j] - 1; /*22942*/
			$k[$j++] = _EX; /*22942*/
			$k[$j++] = _EZ; /*22942*/
			for (var _Eb = 0, _Ea = _EZ; _Eb <= _Ea; _Eb += 1) {
				/*22942*/
				var _Ec = $k[--$j]; /*22942*/
				$k[$j++] = ~~(Math.round(_Eb * (255 / _Ec))); /*22942*/
				$k[$j++] = _Ec; /*22942*/
			} /*22942*/
			$j--; /*22942*/
			var _Ed = $a(); /*22942*/
			$1[$k[--$j]] = _Ed; /*22942*/
			$k[$j++] = 'gvals'; /*22943*/
			$k[$j++] = $get($1.rgbres, 1); /*22943*/
			$k[$j++] = Infinity; /*22943*/
			var _Eh = $k[--$j]; /*22943*/
			var _Ej = $k[--$j] - 1; /*22943*/
			$k[$j++] = _Eh; /*22943*/
			$k[$j++] = _Ej; /*22943*/
			for (var _El = 0, _Ek = _Ej; _El <= _Ek; _El += 1) {
				/*22943*/
				var _Em = $k[--$j]; /*22943*/
				$k[$j++] = ~~(Math.round(_El * (255 / _Em))); /*22943*/
				$k[$j++] = _Em; /*22943*/
			} /*22943*/
			$j--; /*22943*/
			var _En = $a(); /*22943*/
			$1[$k[--$j]] = _En; /*22943*/
			$k[$j++] = 'bvals'; /*22944*/
			$k[$j++] = $get($1.rgbres, 2); /*22944*/
			$k[$j++] = Infinity; /*22944*/
			var _Er = $k[--$j]; /*22944*/
			var _Et = $k[--$j] - 1; /*22944*/
			$k[$j++] = _Er; /*22944*/
			$k[$j++] = _Et; /*22944*/
			for (var _Ev = 0, _Eu = _Et; _Ev <= _Eu; _Ev += 1) {
				/*22944*/
				var _Ew = $k[--$j]; /*22944*/
				$k[$j++] = ~~(Math.round(_Ev * (255 / _Ew))); /*22944*/
				$k[$j++] = _Ew; /*22944*/
			} /*22944*/
			$j--; /*22944*/
			var _Ex = $a(); /*22944*/
			$1[$k[--$j]] = _Ex; /*22944*/
			var _Ez = $1.colors; /*22946*/
			$1.palette = new Map; /*22946*/
			var _F0 = $1.colors; /*22947*/
			var _F1 = 64; /*22947*/
			if (64 > _F0) { //no-else/*22947*/
				var _ = _F0; /*22947*/
				_F0 = _F1; /*22947*/
				_F1 = _; /*22947*/
			} /*22947*/
			$1.palettelayout = $a(_F1); /*22947*/
			$1.i = 0; /*22948*/
			$1.j = 8; /*22948*/
			$forall($1.rvals, function() {
				/*22982*/
				$1.r = $k[--$j]; /*22950*/
				$forall($1.gvals, function() {
					/*22981*/
					$1.g = $k[--$j]; /*22952*/
					$forall($1.bvals, function() {
						/*22980*/
						$1.b = $k[--$j]; /*22954*/
						var _FD = $strcpy($s(6), "000000"); /*22956*/
						var _FF = $cvrs($s(6), (($1.r << 16) | ($1.g << 8)) | $1.b, 16); /*22956*/
						$puti(_FD, 6 - _FF.length, _FF); /*22956*/
						$k[$j++] = _FD; /*22958*/
						$k[$j++] = false; /*22958*/
						if ($eq(_FD, "000000")) { //no-else/*22958*/
							$1.ki = $1.i; /*22958*/
							$j--; /*22958*/
							$k[$j++] = true; /*22958*/
						} /*22958*/
						var _FH = $k[--$j]; /*22959*/
						var _FI = $k[--$j]; /*22959*/
						$k[$j++] = _FI; /*22959*/
						$k[$j++] = _FH; /*22959*/
						if ($eq(_FI, "0000FF")) { //no-else/*22959*/
							$1.bi = $1.i; /*22959*/
							$j--; /*22959*/
							$k[$j++] = true; /*22959*/
						} /*22959*/
						var _FK = $k[--$j]; /*22960*/
						var _FL = $k[--$j]; /*22960*/
						$k[$j++] = _FL; /*22960*/
						$k[$j++] = _FK; /*22960*/
						if ($eq(_FL, "00FF00")) { //no-else/*22960*/
							$1.gi = $1.i; /*22960*/
							$j--; /*22960*/
							$k[$j++] = true; /*22960*/
						} /*22960*/
						var _FN = $k[--$j]; /*22961*/
						var _FO = $k[--$j]; /*22961*/
						$k[$j++] = _FO; /*22961*/
						$k[$j++] = _FN; /*22961*/
						if ($eq(_FO, "00FFFF")) { //no-else/*22961*/
							$1.ci = $1.i; /*22961*/
							$j--; /*22961*/
							$k[$j++] = true; /*22961*/
						} /*22961*/
						var _FQ = $k[--$j]; /*22962*/
						var _FR = $k[--$j]; /*22962*/
						$k[$j++] = _FR; /*22962*/
						$k[$j++] = _FQ; /*22962*/
						if ($eq(_FR, "FF0000")) { //no-else/*22962*/
							$1.ri = $1.i; /*22962*/
							$j--; /*22962*/
							$k[$j++] = true; /*22962*/
						} /*22962*/
						var _FT = $k[--$j]; /*22963*/
						var _FU = $k[--$j]; /*22963*/
						$k[$j++] = _FU; /*22963*/
						$k[$j++] = _FT; /*22963*/
						if ($eq(_FU, "FF00FF")) { //no-else/*22963*/
							$1.mi = $1.i; /*22963*/
							$j--; /*22963*/
							$k[$j++] = true; /*22963*/
						} /*22963*/
						var _FW = $k[--$j]; /*22964*/
						var _FX = $k[--$j]; /*22964*/
						$k[$j++] = _FX; /*22964*/
						$k[$j++] = _FW; /*22964*/
						if ($eq(_FX, "FFFF00")) { //no-else/*22964*/
							$1.yi = $1.i; /*22964*/
							$j--; /*22964*/
							$k[$j++] = true; /*22964*/
						} /*22964*/
						var _FZ = $k[--$j]; /*22965*/
						var _Fa = $k[--$j]; /*22965*/
						$k[$j++] = _Fa; /*22965*/
						$k[$j++] = _FZ; /*22965*/
						if ($eq(_Fa, "FFFFFF")) { //no-else/*22965*/
							$1.wi = $1.i; /*22965*/
							$j--; /*22965*/
							$k[$j++] = true; /*22965*/
						} /*22965*/
						if ($nt($k[--$j])) { //no-else/*22977*/
							if (($1.colors <= 64) || ((($1.colors == 128) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) || ((($1.colors == 256) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) && (((($1.g == 0) || ($1.g == 73)) || ($1.g == 182)) || ($1.g == 255))))) { //no-else/*22976*/
								$put($1.palettelayout, $1.j, $1.i); /*22974*/
								$1.j = $1.j + 1; /*22975*/
							} /*22975*/
						} /*22975*/
						$put($1.palette, $1.i, $k[--$j]); /*22978*/
						$1.i = $1.i + 1; /*22979*/
					}); /*22979*/
				}); /*22979*/
			}); /*22979*/
			$puti($1.palettelayout, 0, $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi])); /*22983*/
			$1.metacolorindex = $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi]); /*22984*/
		} /*22984*/
		$k[$j++] = Infinity; /*22988*/
		for (var _GL = 0, _GM = $1.rows * $1.cols; _GL < _GM; _GL++) {
			/*22988*/
			$k[$j++] = -1; /*22988*/
		} /*22988*/
		$1.pixs = $a(); /*22988*/
		$1.jmv = function() {
			var _GP = $k[--$j]; /*22989*/
			var _GQ = $k[--$j]; /*22989*/
			$k[$j++] = _GQ + (_GP * $1.cols); /*22989*/
		}; /*22989*/
		if (!$1.slave) {
			/*23019*/
			$1.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); /*22999*/
			$1.fmap = $a([$a([-1, $1.bi, $1.yi]), $a([-1, $1.yi, $1.bi]), $a([-1, $1.gi, $1.mi]), $a([-1, $1.mi, $1.gi])]); /*23005*/
		} else {
			/*23019*/
			$1.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); /*23013*/
			$1.fmap = $a([$a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi])]); /*23019*/
		} /*23019*/
		for (var _H4 = 0; _H4 <= 4; _H4 += 1) {
			/*23031*/
			$1.y = _H4; /*23022*/
			for (var _H5 = 0; _H5 <= 4; _H5 += 1) {
				/*23030*/
				$1.x = _H5; /*23024*/
				$1.fpb = $get($get($1.fpat, $1.y), $1.x); /*23025*/
				$k[$j++] = $1.pixs; /*23026*/
				$k[$j++] = $1.x + 1; /*23026*/
				$k[$j++] = $1.y + 1; /*23026*/
				$1.jmv(); /*23026*/
				var _HI = $k[--$j]; /*23026*/
				$put($k[--$j], _HI, $get($get($1.fmap, 0), $1.fpb)); /*23026*/
				$k[$j++] = $1.pixs; /*23027*/
				$k[$j++] = $1.x + 1; /*23027*/
				$k[$j++] = ($1.rows - $1.y) - 2; /*23027*/
				$1.jmv(); /*23027*/
				var _HS = $k[--$j]; /*23027*/
				$put($k[--$j], _HS, $get($get($1.fmap, 1), $1.fpb)); /*23027*/
				$k[$j++] = $1.pixs; /*23028*/
				$k[$j++] = ($1.x + $1.cols) - 6; /*23028*/
				$k[$j++] = $1.y + 1; /*23028*/
				$1.jmv(); /*23028*/
				var _Hc = $k[--$j]; /*23028*/
				$put($k[--$j], _Hc, $get($get($1.fmap, 2), $1.fpb)); /*23028*/
				$k[$j++] = $1.pixs; /*23029*/
				$k[$j++] = ($1.x + $1.cols) - 6; /*23029*/
				$k[$j++] = ($1.rows - $1.y) - 2; /*23029*/
				$1.jmv(); /*23029*/
				var _Hn = $k[--$j]; /*23029*/
				$put($k[--$j], _Hn, $get($get($1.fmap, 3), $1.fpb)); /*23029*/
			} /*23029*/
		} /*23029*/
		$1.algnpat0 = $a([$a([$1.ki, $1.ki, -1]), $a([$1.ki, $1.wi, $1.ki]), $a([-1, $1.ki, $1.ki])]); /*23038*/
		$1.algnpat1 = $a([$a([-1, $1.ki, $1.ki]), $a([$1.ki, $1.wi, $1.ki]), $a([$1.ki, $1.ki, -1])]); /*23043*/
		$1.num = (~~Math.round($1.cols / 16)) - 1; /*23044*/
		$1.algnrpos = $a([3, 17]); /*23045*/
		if ($1.num > 0) { //no-else/*23048*/
			$k[$j++] = Infinity; /*23047*/
			for (var _IG = 0, _IF = $1.num; _IG <= _IF; _IG += 1) {
				/*23047*/
				$k[$j++] = (~~(_IG * (($1.cols - 7) / $1.num))) + 3; /*23047*/
			} /*23047*/
			$1.algnrpos = $a(); /*23047*/
		} /*23047*/
		$1.num = (~~Math.round($1.rows / 16)) - 1; /*23049*/
		$1.algncpos = $a([3, 17]); /*23050*/
		if ($1.num > 0) { //no-else/*23053*/
			$k[$j++] = Infinity; /*23052*/
			for (var _IP = 0, _IO = $1.num; _IP <= _IO; _IP += 1) {
				/*23052*/
				$k[$j++] = (~~(_IP * (($1.rows - 7) / $1.num))) + 3; /*23052*/
			} /*23052*/
			$1.algncpos = $a(); /*23052*/
		} /*23052*/
		$1.putalgnpat = function() {
			$1.pp = $k[--$j]; /*23055*/
			$1.py = $k[--$j]; /*23056*/
			$1.px = $k[--$j]; /*23057*/
			for (var _IW = 0; _IW <= 2; _IW += 1) {
				/*23064*/
				$1.pb = _IW; /*23059*/
				for (var _IX = 0; _IX <= 2; _IX += 1) {
					/*23063*/
					$1.pa = _IX; /*23061*/
					$k[$j++] = $1.pixs; /*23062*/
					$k[$j++] = $1.px + $1.pa; /*23062*/
					$k[$j++] = $1.py + $1.pb; /*23062*/
					$1.jmv(); /*23062*/
					var _Ii = $k[--$j]; /*23062*/
					$put($k[--$j], _Ii, $get($get($1.pp, $1.pb), $1.pa)); /*23062*/
				} /*23062*/
			} /*23062*/
		}; /*23065*/
		for (var _Im = 0, _Il = $1.algncpos.length - 1; _Im <= _Il; _Im += 1) {
			/*23076*/
			$1.j = _Im; /*23067*/
			$1.y = $get($1.algncpos, $1.j); /*23068*/
			for (var _Is = 0, _Ir = $1.algnrpos.length - 1; _Is <= _Ir; _Is += 1) {
				/*23075*/
				$1.i = _Is; /*23070*/
				$1.x = $get($1.algnrpos, $1.i); /*23071*/
				$k[$j++] = $1.pixs; /*23072*/
				$k[$j++] = $1.x; /*23072*/
				$k[$j++] = $1.y; /*23072*/
				$1.jmv(); /*23072*/
				var _Iz = $k[--$j]; /*23072*/
				if ($get($k[--$j], _Iz) == -1) { //no-else/*23074*/
					$k[$j++] = $1.x - 1; /*23073*/
					$k[$j++] = $1.y - 1; /*23073*/
					if ((($1.i + $1.j) % 2) == 0) {
						/*23073*/
						$k[$j++] = $1.algnpat0; /*23073*/
					} else {
						/*23073*/
						$k[$j++] = $1.algnpat1; /*23073*/
					} /*23073*/
					$1.putalgnpat(); /*23073*/
				} /*23073*/
			} /*23073*/
		} /*23073*/
		if (!$1.slave) {
			/*23128*/
			var _Jr = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); /*23087*/
			for (var _Js = 0, _Jt = _Jr.length; _Js < _Jt; _Js++) {
				/*23091*/
				$aload($get(_Jr, _Js)); /*23089*/
				$1.y = $k[--$j]; /*23089*/
				$1.x = $k[--$j]; /*23089*/
				$k[$j++] = $a([$1.x, $1.y]); /*23090*/
				$k[$j++] = $a([-$1.x, $1.y]); /*23090*/
				$k[$j++] = $a([-$1.x, -$1.y]); /*23090*/
				$k[$j++] = $a([$1.x, -$1.y]); /*23090*/
			} /*23090*/
			$astore($a(176)); /*23092*/
			$1.metadatamap = $k[--$j]; /*23092*/
			$1.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); /*23097*/
			$1.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); /*23102*/
		} else {
			/*23128*/
			$k[$j++] = Infinity; /*23117*/
			for (var _Kj = 1; _Kj <= 19; _Kj += 1) {
				/*23112*/
				$1.i = _Kj; /*23110*/
				$k[$j++] = $a([0, $1.i]); /*23111*/
				$k[$j++] = $a([1, $1.i]); /*23111*/
			} /*23111*/
			for (var _Ko = 5; _Ko <= 12; _Ko += 1) {
				/*23116*/
				$1.i = _Ko; /*23114*/
				$k[$j++] = $a([2, $1.i]); /*23115*/
				$k[$j++] = $a([3, $1.i]); /*23115*/
			} /*23115*/
			$1.metadatamap = $a(); /*23117*/
			$k[$j++] = Infinity; /*23124*/
			for (var _Ku = 5; _Ku <= 12; _Ku += 1) {
				/*23120*/
				$k[$j++] = _Ku; /*23120*/
				$k[$j++] = Infinity; /*23120*/
				var _Kv = $k[--$j]; /*23120*/
				var _Kw = $k[--$j]; /*23120*/
				$k[$j++] = _Kv; /*23120*/
				$k[$j++] = 4; /*23120*/
				$k[$j++] = _Kw; /*23120*/
				var _Kx = $a(); /*23120*/
				$k[$j++] = _Kx; /*23120*/
			} /*23120*/
			for (var _Ky = 12; _Ky >= 5; _Ky -= 1) {
				/*23121*/
				$k[$j++] = _Ky; /*23121*/
				$k[$j++] = Infinity; /*23121*/
				var _Kz = $k[--$j]; /*23121*/
				var _L0 = $k[--$j]; /*23121*/
				$k[$j++] = _Kz; /*23121*/
				$k[$j++] = 5; /*23121*/
				$k[$j++] = _L0; /*23121*/
				var _L1 = $a(); /*23121*/
				$k[$j++] = _L1; /*23121*/
			} /*23121*/
			for (var _L2 = 5; _L2 <= 12; _L2 += 1) {
				/*23122*/
				$k[$j++] = _L2; /*23122*/
				$k[$j++] = Infinity; /*23122*/
				var _L3 = $k[--$j]; /*23122*/
				var _L4 = $k[--$j]; /*23122*/
				$k[$j++] = _L3; /*23122*/
				$k[$j++] = 6; /*23122*/
				$k[$j++] = _L4; /*23122*/
				var _L5 = $a(); /*23122*/
				$k[$j++] = _L5; /*23122*/
			} /*23122*/
			for (var _L6 = 12; _L6 >= 5; _L6 -= 1) {
				/*23123*/
				$k[$j++] = _L6; /*23123*/
				$k[$j++] = Infinity; /*23123*/
				var _L7 = $k[--$j]; /*23123*/
				var _L8 = $k[--$j]; /*23123*/
				$k[$j++] = _L7; /*23123*/
				$k[$j++] = 7; /*23123*/
				$k[$j++] = _L8; /*23123*/
				var _L9 = $a(); /*23123*/
				$k[$j++] = _L9; /*23123*/
			} /*23123*/
			$1.palettemap1 = $a(); /*23124*/
			$k[$j++] = Infinity; /*23128*/
			var _LB = $1.palettemap1; /*23127*/
			for (var _LC = 0, _LD = _LB.length; _LC < _LD; _LC++) {
				/*23127*/
				$k[$j++] = $get(_LB, _LC); /*23127*/
				$k[$j++] = Infinity; /*23127*/
				var _LF = $k[--$j]; /*23127*/
				var _LG = $k[--$j]; /*23127*/
				$k[$j++] = _LF; /*23127*/
				$aload(_LG); /*23127*/
				var _LH = $k[--$j]; /*23127*/
				var _LI = $k[--$j]; /*23127*/
				$k[$j++] = -_LI; /*23127*/
				$k[$j++] = -_LH; /*23127*/
				var _LJ = $a(); /*23127*/
				$k[$j++] = _LJ; /*23127*/
			} /*23127*/
			$1.palettemap2 = $a(); /*23128*/
		} /*23128*/
		var _LL = $1.metadatamap; /*23133*/
		for (var _LM = 0, _LN = _LL.length; _LM < _LN; _LM++) {
			/*23137*/
			var _LO = $get(_LL, _LM); /*23137*/
			var _LP = $get(_LO, 0); /*23134*/
			$k[$j++] = _LO; /*23134*/
			$k[$j++] = _LP; /*23134*/
			if (_LP < 0) {
				/*23134*/
				var _LR = $k[--$j]; /*23134*/
				var _LS = $k[--$j]; /*23134*/
				$put(_LS, 0, (_LR + $1.cols) - 1); /*23134*/
				$k[$j++] = _LS; /*23134*/
			} else {
				/*23134*/
				$j--; /*23134*/
			} /*23134*/
			var _LT = $k[--$j]; /*23135*/
			var _LU = $get(_LT, 1); /*23135*/
			$k[$j++] = _LT; /*23135*/
			$k[$j++] = _LU; /*23135*/
			if (_LU < 0) {
				/*23135*/
				var _LW = $k[--$j]; /*23135*/
				var _LX = $k[--$j]; /*23135*/
				$put(_LX, 1, (_LW + $1.rows) - 1); /*23135*/
				$k[$j++] = _LX; /*23135*/
			} else {
				/*23135*/
				$j--; /*23135*/
			} /*23135*/
			$j--; /*23136*/
		} /*23136*/
		var _LY = $1.palettemap1; /*23138*/
		for (var _LZ = 0, _La = _LY.length; _LZ < _La; _LZ++) {
			/*23142*/
			var _Lb = $get(_LY, _LZ); /*23142*/
			var _Lc = $get(_Lb, 0); /*23139*/
			$k[$j++] = _Lb; /*23139*/
			$k[$j++] = _Lc; /*23139*/
			if (_Lc < 0) {
				/*23139*/
				var _Le = $k[--$j]; /*23139*/
				var _Lf = $k[--$j]; /*23139*/
				$put(_Lf, 0, (_Le + $1.cols) - 1); /*23139*/
				$k[$j++] = _Lf; /*23139*/
			} else {
				/*23139*/
				$j--; /*23139*/
			} /*23139*/
			var _Lg = $k[--$j]; /*23140*/
			var _Lh = $get(_Lg, 1); /*23140*/
			$k[$j++] = _Lg; /*23140*/
			$k[$j++] = _Lh; /*23140*/
			if (_Lh < 0) {
				/*23140*/
				var _Lj = $k[--$j]; /*23140*/
				var _Lk = $k[--$j]; /*23140*/
				$put(_Lk, 1, (_Lj + $1.rows) - 1); /*23140*/
				$k[$j++] = _Lk; /*23140*/
			} else {
				/*23140*/
				$j--; /*23140*/
			} /*23140*/
			$j--; /*23141*/
		} /*23141*/
		var _Ll = $1.palettemap2; /*23143*/
		for (var _Lm = 0, _Ln = _Ll.length; _Lm < _Ln; _Lm++) {
			/*23147*/
			var _Lo = $get(_Ll, _Lm); /*23147*/
			var _Lp = $get(_Lo, 0); /*23144*/
			$k[$j++] = _Lo; /*23144*/
			$k[$j++] = _Lp; /*23144*/
			if (_Lp < 0) {
				/*23144*/
				var _Lr = $k[--$j]; /*23144*/
				var _Ls = $k[--$j]; /*23144*/
				$put(_Ls, 0, (_Lr + $1.cols) - 1); /*23144*/
				$k[$j++] = _Ls; /*23144*/
			} else {
				/*23144*/
				$j--; /*23144*/
			} /*23144*/
			var _Lt = $k[--$j]; /*23145*/
			var _Lu = $get(_Lt, 1); /*23145*/
			$k[$j++] = _Lt; /*23145*/
			$k[$j++] = _Lu; /*23145*/
			if (_Lu < 0) {
				/*23145*/
				var _Lw = $k[--$j]; /*23145*/
				var _Lx = $k[--$j]; /*23145*/
				$put(_Lx, 1, (_Lw + $1.rows) - 1); /*23145*/
				$k[$j++] = _Lx; /*23145*/
			} else {
				/*23145*/
				$j--; /*23145*/
			} /*23145*/
			$j--; /*23146*/
		} /*23146*/
		for (var _M0 = 0, _Lz = $1.nummetamodules - 1; _M0 <= _Lz; _M0 += 1) {
			/*23152*/
			$k[$j++] = $1.pixs; /*23151*/
			$aload($get($1.metadatamap, _M0)); /*23151*/
			$1.jmv(); /*23151*/
			var _M4 = $k[--$j]; /*23151*/
			$put($k[--$j], _M4, 0); /*23151*/
		} /*23151*/
		if (!$1.slave) {
			/*23165*/
			var _M7 = $1.colors; /*23157*/
			var _M8 = 16; /*23157*/
			if (16 > _M7) { //no-else/*23157*/
				var _ = _M7; /*23157*/
				_M7 = _M8; /*23157*/
				_M8 = _; /*23157*/
			} /*23157*/
			for (var _MA = 0, _M9 = _M8 - 1; _MA <= _M9; _MA += 1) {
				/*23162*/
				$1.i = _MA; /*23158*/
				var _MD = $get($1.palettelayout, $1.i); /*23159*/
				$k[$j++] = _MD; /*23160*/
				$k[$j++] = $1.pixs; /*23160*/
				$k[$j++] = _MD; /*23160*/
				$aload($get($1.palettemap1, $1.i)); /*23160*/
				$1.jmv(); /*23160*/
				var _MI = $k[--$j]; /*23160*/
				var _MJ = $k[--$j]; /*23160*/
				$put($k[--$j], _MI, _MJ); /*23160*/
				var _MM = $k[--$j]; /*23161*/
				$k[$j++] = $1.pixs; /*23161*/
				$k[$j++] = _MM; /*23161*/
				$aload($get($1.palettemap2, $1.i)); /*23161*/
				$1.jmv(); /*23161*/
				var _MQ = $k[--$j]; /*23161*/
				var _MR = $k[--$j]; /*23161*/
				$put($k[--$j], _MQ, _MR); /*23161*/
			} /*23161*/
			$1.i = 16; /*23163*/
		} else {
			/*23165*/
			$1.i = 0; /*23165*/
		} /*23165*/
		$1.j = $1.nummetamodules; /*23169*/
		for (var _MX = $1.i, _MW = $1.palettelayout.length - 1; _MX <= _MW; _MX += 2) {
			/*23179*/
			$1.i = _MX; /*23171*/
			var _Ma = $get($1.palettelayout, $1.i); /*23172*/
			$k[$j++] = _Ma; /*23173*/
			$k[$j++] = $1.pixs; /*23173*/
			$k[$j++] = _Ma; /*23173*/
			$aload($get($1.metadatamap, $1.j)); /*23173*/
			$1.jmv(); /*23173*/
			var _Mf = $k[--$j]; /*23173*/
			var _Mg = $k[--$j]; /*23173*/
			$put($k[--$j], _Mf, _Mg); /*23173*/
			var _Mj = $k[--$j]; /*23174*/
			$k[$j++] = $1.pixs; /*23174*/
			$k[$j++] = _Mj; /*23174*/
			$aload($get($1.metadatamap, $1.j + 2)); /*23174*/
			$1.jmv(); /*23174*/
			var _Mn = $k[--$j]; /*23174*/
			var _Mo = $k[--$j]; /*23174*/
			$put($k[--$j], _Mn, _Mo); /*23174*/
			var _Ms = $get($1.palettelayout, $1.i + 1); /*23175*/
			$k[$j++] = _Ms; /*23176*/
			$k[$j++] = $1.pixs; /*23176*/
			$k[$j++] = _Ms; /*23176*/
			$aload($get($1.metadatamap, $1.j + 1)); /*23176*/
			$1.jmv(); /*23176*/
			var _Mx = $k[--$j]; /*23176*/
			var _My = $k[--$j]; /*23176*/
			$put($k[--$j], _Mx, _My); /*23176*/
			var _N1 = $k[--$j]; /*23177*/
			$k[$j++] = $1.pixs; /*23177*/
			$k[$j++] = _N1; /*23177*/
			$aload($get($1.metadatamap, $1.j + 3)); /*23177*/
			$1.jmv(); /*23177*/
			var _N5 = $k[--$j]; /*23177*/
			var _N6 = $k[--$j]; /*23177*/
			$put($k[--$j], _N5, _N6); /*23177*/
			$1.j = $1.j + 4; /*23178*/
		} /*23178*/
		var _NX = $a([function() {
			var _N9 = $k[--$j]; /*23183*/
			var _NA = $k[--$j]; /*23183*/
			$k[$j++] = (_NA + _N9) % $1.colors; /*23183*/
		}, function() {
			$j--; /*23184*/
			var _ND = $k[--$j]; /*23184*/
			$k[$j++] = _ND % $1.colors; /*23184*/
		}, function() {
			var _NE = $k[--$j]; /*23185*/
			var _NF = $k[--$j]; /*23185*/
			$k[$j++] = _NE % $1.colors; /*23185*/
		}, function() {
			var _NH = $k[--$j]; /*23186*/
			var _NI = $k[--$j]; /*23186*/
			$k[$j++] = ((~~(_NH / 3)) + (~~(_NI / 2))) % $1.colors; /*23186*/
		}, function() {
			var _NK = $k[--$j]; /*23187*/
			var _NL = $k[--$j]; /*23187*/
			$k[$j++] = ((~~(_NK / 2)) + (~~(_NL / 3))) % $1.colors; /*23187*/
		}, function() {
			var _NN = $k[--$j]; /*23188*/
			var _NP = $k[--$j] + _NN; /*23188*/
			$k[$j++] = ((~~(_NP / 2)) + (~~(_NP / 3))) % $1.colors; /*23188*/
		}, function() {
			var _NR = $k[--$j]; /*23189*/
			var _NS = $k[--$j]; /*23189*/
			$k[$j++] = (((_NR * (_NS * _NS)) % 7) + (((_NR + (_NS * _NS)) * 2) % 19)) % $1.colors; /*23189*/
		}, function() {
			var _NU = $k[--$j]; /*23190*/
			var _NV = $k[--$j]; /*23190*/
			$k[$j++] = (((_NV * (_NU * _NU)) % 5) + (((_NU * _NU) + (_NV * 2)) % 13)) % $1.colors; /*23190*/
		}]); /*23190*/
		$1.maskfuncs = _NX; /*23191*/
		if ($1.mask != -1) { //no-else/*23195*/
			$1.maskfuncs = $a([$get($1.maskfuncs, $1.mask)]); /*23193*/
			$1.bestmaskval = $1.mask; /*23194*/
		} /*23194*/
		$1.masks = $a($1.maskfuncs.length); /*23196*/
		for (var _Ni = 0, _Nh = $1.masks.length - 1; _Ni <= _Nh; _Ni += 1) {
			/*23209*/
			$1.m = _Ni; /*23198*/
			$1.mask = $a($1.rows * $1.cols); /*23199*/
			for (var _No = 0, _Nn = $1.rows - 1; _No <= _Nn; _No += 1) {
				/*23207*/
				$1.j = _No; /*23201*/
				for (var _Nr = 0, _Nq = $1.cols - 1; _Nr <= _Nq; _Nr += 1) {
					/*23206*/
					$1.i = _Nr; /*23203*/
					$k[$j++] = $1.pixs; /*23204*/
					$k[$j++] = $1.i; /*23204*/
					$k[$j++] = $1.j; /*23204*/
					$1.jmv(); /*23204*/
					var _Nv = $k[--$j]; /*23204*/
					if ($get($k[--$j], _Nv) == -1) {
						/*23204*/
						$k[$j++] = $1.i; /*23204*/
						$k[$j++] = $1.j; /*23204*/
						$get($1.maskfuncs, $1.m)(); /*23204*/
					} else {
						/*23204*/
						$k[$j++] = 0; /*23204*/
					} /*23204*/
					$k[$j++] = $1.mask; /*23205*/
					$k[$j++] = $1.i; /*23205*/
					$k[$j++] = $1.j; /*23205*/
					$1.jmv(); /*23205*/
					var _O6 = $k[--$j]; /*23205*/
					var _O7 = $k[--$j]; /*23205*/
					$put(_O7, _O6, $k[--$j]); /*23205*/
				} /*23205*/
			} /*23205*/
			$put($1.masks, $1.m, $1.mask); /*23208*/
		} /*23208*/
		$1.posx = 0; /*23212*/
		$1.posy = 0; /*23212*/
		$1.i = 0; /*23213*/
		for (;;) {
			/*23223*/
			if ($1.posx == $1.cols) { //no-else/*23215*/
				break; /*23215*/
			} /*23215*/
			$k[$j++] = $1.pixs; /*23216*/
			$k[$j++] = $1.posx; /*23216*/
			$k[$j++] = $1.posy; /*23216*/
			$1.jmv(); /*23216*/
			var _OH = $k[--$j]; /*23216*/
			if ($get($k[--$j], _OH) == -1) { //no-else/*23220*/
				$k[$j++] = 0; /*23217*/
				$forall($geti($1.bits, $1.i, $1.databpm), function() {
					/*23217*/
					var _OO = $k[--$j]; /*23217*/
					var _OP = $k[--$j]; /*23217*/
					$k[$j++] = (_OP + (_OO - 48)) * 2; /*23217*/
				}); /*23217*/
				var _OQ = $k[--$j]; /*23217*/
				$k[$j++] = ~~(_OQ / 2); /*23218*/
				$k[$j++] = $1.pixs; /*23218*/
				$k[$j++] = $1.posx; /*23218*/
				$k[$j++] = $1.posy; /*23218*/
				$1.jmv(); /*23218*/
				var _OU = $k[--$j]; /*23218*/
				var _OV = $k[--$j]; /*23218*/
				$put(_OV, _OU, $k[--$j]); /*23218*/
				$1.i = $1.i + $1.databpm; /*23219*/
			} /*23219*/
			$1.posy = $1.posy + 1; /*23221*/
			if ($1.posy == $1.rows) { //no-else/*23222*/
				$1.posy = 0; /*23222*/
				$1.posx = $1.posx + 1; /*23222*/
			} /*23222*/
		} /*23222*/
		$1.evalrle = function() {
			$1.scrle = $k[--$j]; /*23227*/
			$1.scr1 = 0; /*23228*/
			$1.scr3 = 0; /*23228*/
			for (var _Og = 0, _Of = $1.scrle.length - 2; _Og <= _Of; _Og += 2) {
				/*23250*/
				$1.j = _Og; /*23230*/
				if ($get($1.scrle, $1.j + 1) != -1) { //no-else/*23249*/
					var _Om = $get($1.scrle, $1.j); /*23233*/
					$k[$j++] = _Om; /*23233*/
					if (_Om >= 5) {
						/*23233*/
						$1.scr1 = ($k[--$j] - 2) + $1.scr1; /*23233*/
					} else {
						/*23233*/
						$j--; /*23233*/
					} /*23233*/
					if (($1.j >= 4) && ($1.j <= ($1.scrle.length - 5))) { //no-else/*23248*/
						var _Ou = $geti($1.scrle, $1.j - 4, 10); /*23236*/
						$k[$j++] = _Ou; /*23237*/
						$forall(_Ou, function() {
							/*23237*/
							var _Ov = $k[--$j]; /*23237*/
							$k[$j++] = _Ov == 1; /*23237*/
						}); /*23237*/
						$j--; /*23237*/
						for (var _Ow = 0, _Ox = 4; _Ow < _Ox; _Ow++) {
							/*23237*/
							var _Oy = $k[--$j]; /*23237*/
							var _Oz = $k[--$j]; /*23237*/
							var _P0 = $k[--$j]; /*23237*/
							$k[$j++] = $an(_P0, _Oy); /*23237*/
						} /*23237*/
						if ($k[--$j]) {
							/*23247*/
							$k[$j++] = Infinity; /*23238*/
							var _P2 = $k[--$j]; /*23238*/
							var _P3 = $k[--$j]; /*23238*/
							$k[$j++] = _P2; /*23238*/
							$aload(_P3); /*23238*/
							var _P4 = $k[--$j]; /*23239*/
							var _P5 = $k[--$j]; /*23239*/
							var _P6 = $k[--$j]; /*23239*/
							var _P7 = $k[--$j]; /*23239*/
							var _P8 = $k[--$j]; /*23239*/
							var _P9 = $k[--$j]; /*23239*/
							var _PA = $k[--$j]; /*23239*/
							var _PB = $k[--$j]; /*23239*/
							var _PC = $k[--$j]; /*23239*/
							$k[$j++] = _PC; /*23245*/
							$k[$j++] = _PB; /*23245*/
							$k[$j++] = _PA; /*23245*/
							$k[$j++] = _P9; /*23245*/
							$k[$j++] = _P8; /*23245*/
							$k[$j++] = _P7; /*23245*/
							$k[$j++] = _P6; /*23245*/
							$k[$j++] = _P5; /*23245*/
							$k[$j++] = _P4; /*23245*/
							if (($eq(_PC, _P8) && $eq(_PC, _P4)) && $eq(_PA, _P6)) { //no-else/*23245*/
								var _PD = $k[--$j]; /*23241*/
								var _PE = $k[--$j]; /*23241*/
								var _PF = $k[--$j]; /*23241*/
								$1.c4 = _PF; /*23241*/
								$1.c5 = _PD; /*23241*/
								$k[$j++] = _PF; /*23244*/
								$k[$j++] = _PE; /*23244*/
								if ((($1.c4 == $1.bi) && ($1.c5 == $1.yi)) || ((($1.c4 == $1.yi) && ($1.c5 == $1.bi)) || ((($1.c4 == $1.gi) && ($1.c5 == $1.mi)) || (($1.c4 == $1.mi) && ($1.c5 == $1.gi))))) { //no-else/*23244*/
									$1.scr3 = $1.scr3 + 100; /*23244*/
								} /*23244*/
							} /*23244*/
							$cleartomark(); /*23246*/
						} else {
							/*23247*/
							$j--; /*23247*/
						} /*23247*/
					} /*23247*/
				} /*23247*/
			} /*23247*/
			$k[$j++] = $1.scr1; /*23251*/
			$k[$j++] = $1.scr3; /*23251*/
		}; /*23252*/
		$1.evalmask = function() {
			$1.sym = $k[--$j]; /*23255*/
			$1.n1 = 0; /*23257*/
			$1.n2 = 0; /*23257*/
			$1.n3 = 0; /*23257*/
			var _Pa = $1.rows; /*23258*/
			var _Pb = $1.cols; /*23258*/
			if (_Pa < _Pb) { //no-else/*23258*/
				var _ = _Pb; /*23258*/
				_Pb = _Pa; /*23258*/
				_Pa = _; /*23258*/
			} /*23258*/
			$1.rle = $a((_Pa * 2) + 2); /*23258*/
			$1.lastpairs = $a($1.cols); /*23259*/
			$1.thispairs = $a($1.cols); /*23260*/
			for (var _Pj = 0, _Pi = $1.cols - 1; _Pj <= _Pi; _Pj += 1) {
				/*23272*/
				$1.i = _Pj; /*23264*/
				$k[$j++] = Infinity; /*23265*/
				$k[$j++] = 0; /*23268*/
				$k[$j++] = -1; /*23268*/
				for (var _Pp = $1.i, _Pq = $1.cols, _Po = ($1.rows * $1.cols) - 1; _Pq < 0 ? _Pp >= _Po : _Pp <= _Po; _Pp += _Pq) {
					/*23268*/
					var _Ps = $get($1.sym, _Pp); /*23267*/
					var _Pt = $k[--$j]; /*23267*/
					$k[$j++] = _Pt; /*23267*/
					$k[$j++] = _Ps; /*23267*/
					if ($eq(_Pt, _Ps)) {
						/*23267*/
						$j--; /*23267*/
						var _Pu = $k[--$j]; /*23267*/
						var _Pv = $k[--$j]; /*23267*/
						$k[$j++] = _Pv + 1; /*23267*/
						$k[$j++] = _Pu; /*23267*/
					} else {
						/*23267*/
						var _Pw = $k[--$j]; /*23267*/
						$k[$j++] = 1; /*23267*/
						$k[$j++] = _Pw; /*23267*/
					} /*23267*/
				} /*23267*/
				var _Py = $counttomark() + 2; /*23269*/
				$astore($geti($1.rle, 0, _Py - 2)); /*23269*/
				$1.evalrle(); /*23270*/
				$1.n3 = $k[--$j] + $1.n3; /*23270*/
				$1.n1 = $k[--$j] + $1.n1; /*23270*/
				$j--; /*23271*/
			} /*23271*/
			for (var _Q6 = 0, _Q5 = $1.rows - 1; _Q6 <= _Q5; _Q6 += 1) {
				/*23299*/
				$1.i = _Q6; /*23275*/
				$1.symrow = $geti($1.sym, $1.i * $1.cols, $1.cols); /*23278*/
				$k[$j++] = Infinity; /*23279*/
				$k[$j++] = 0; /*23282*/
				$k[$j++] = -1; /*23282*/
				$forall($1.symrow, function() {
					/*23282*/
					var _QD = $k[--$j]; /*23281*/
					var _QE = $k[--$j]; /*23281*/
					$k[$j++] = _QE; /*23281*/
					$k[$j++] = _QD; /*23281*/
					if ($eq(_QE, _QD)) {
						/*23281*/
						$j--; /*23281*/
						var _QF = $k[--$j]; /*23281*/
						var _QG = $k[--$j]; /*23281*/
						$k[$j++] = _QG + 1; /*23281*/
						$k[$j++] = _QF; /*23281*/
					} else {
						/*23281*/
						var _QH = $k[--$j]; /*23281*/
						$k[$j++] = 1; /*23281*/
						$k[$j++] = _QH; /*23281*/
					} /*23281*/
				}); /*23281*/
				var _QJ = $counttomark() + 2; /*23283*/
				$astore($geti($1.rle, 0, _QJ - 2)); /*23283*/
				$1.evalrle(); /*23284*/
				$1.n3 = $k[--$j] + $1.n3; /*23284*/
				$1.n1 = $k[--$j] + $1.n1; /*23284*/
				$j--; /*23285*/
				var _QP = $1.thispairs; /*23288*/
				$1.thispairs = $1.lastpairs; /*23288*/
				$1.lastpairs = _QP; /*23288*/
				$k[$j++] = -1; /*23289*/
				$forall($1.symrow, function() {
					/*23289*/
					var _QS = $k[--$j]; /*23289*/
					var _QT = $k[--$j]; /*23289*/
					$k[$j++] = _QS; /*23289*/
					$k[$j++] = _QT; /*23289*/
					if ($ne(_QS, _QT)) { //no-else/*23289*/
						$j--; /*23289*/
						var _QU = $k[--$j]; /*23289*/
						$k[$j++] = -1; /*23289*/
						$k[$j++] = _QU; /*23289*/
					} /*23289*/
				}); /*23289*/
				$j--; /*23290*/
				$astore($1.thispairs); /*23291*/
				$j--; /*23291*/
				if ($1.i > 0) { //no-else/*23298*/
					$k[$j++] = Infinity; /*23293*/
					$aload($1.lastpairs); /*23294*/
					$aload($1.thispairs); /*23294*/
					$k[$j++] = $1.n2; /*23295*/
					for (var _Qb = 0, _Qc = $1.cols; _Qb < _Qc; _Qb++) {
						/*23295*/
						var _Qd = $k[--$j]; /*23295*/
						var _Qe = $k[--$j]; /*23295*/
						$k[$j++] = _Qd; /*23295*/
						$k[$j++] = _Qe; /*23295*/
						if (_Qe != -1) {
							/*23295*/
							var _Qg = $k[$j - 1 - ($1.cols + 1)]; /*23295*/
							if ($eq($k[--$j], _Qg)) { //no-else/*23295*/
								var _Qi = $k[--$j]; /*23295*/
								$k[$j++] = _Qi + 3; /*23295*/
							} /*23295*/
						} else {
							/*23295*/
							$j--; /*23295*/
						} /*23295*/
					} /*23295*/
					$1.n2 = $k[--$j]; /*23296*/
					$cleartomark(); /*23297*/
				} /*23297*/
			} /*23297*/
			$k[$j++] = ($1.n1 + $1.n2) + $1.n3; /*23301*/
		}; /*23302*/
		$1.bestscore = 999999999; /*23305*/
		for (var _Qp = 0, _Qo = $1.masks.length - 1; _Qp <= _Qo; _Qp += 1) {
			/*23323*/
			$1.m = _Qp; /*23307*/
			$1.masksym = $a($1.rows * $1.cols); /*23308*/
			for (var _Qw = 0, _Qv = ($1.rows * $1.cols) - 1; _Qw <= _Qv; _Qw += 1) {
				/*23312*/
				$1.i = _Qw; /*23310*/
				$put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); /*23311*/
			} /*23311*/
			if ($1.masks.length != 1) {
				/*23321*/
				$k[$j++] = $1.masksym; /*23314*/
				$1.evalmask(); /*23314*/
				$1.score = $k[--$j]; /*23314*/
				if ($1.score < $1.bestscore) { //no-else/*23319*/
					$1.bestsym = $1.masksym; /*23316*/
					$1.bestmaskval = $1.m; /*23317*/
					$1.bestscore = $1.score; /*23318*/
				} /*23318*/
			} else {
				/*23321*/
				$1.bestsym = $1.masksym; /*23321*/
			} /*23321*/
		} /*23321*/
		$1.pixs = $1.bestsym; /*23324*/
		$1.metamask = $1.bestmaskval; /*23325*/
		$1.addtometapart = function() {
			var _RI = $k[--$j]; /*23329*/
			$puti($1.metapart, $1.p, _RI); /*23329*/
			$1.p = _RI.length + $1.p; /*23330*/
		}; /*23331*/
		$1.addtometabits = function() {
			var _RM = $k[--$j]; /*23334*/
			$puti($1.metabits, $1.q, _RM); /*23334*/
			$1.q = _RM.length + $1.q; /*23335*/
		}; /*23336*/
		$1.metapart = $s(40); /*23338*/
		$1.metabits = $s($1.nummetabits); /*23339*/
		$1.p = 0; /*23340*/
		$1.q = 0; /*23340*/
		if (!$1.slave) {
			/*23395*/
			$k[$j++] = (~~(Math.round(Math.log($1.colors) / Math.log(2)))) - 1; /*23345*/
			$k[$j++] = 3; /*23345*/
			$1.tofixedbits(); /*23345*/
			$1.addtometapart(); /*23345*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*23346*/
			$k[$j++] = 2; /*23346*/
			$k[$j++] = -1; /*23346*/
			$1.ldpc(); /*23346*/
			$1.addtometabits(); /*23346*/
			$1.p = 0; /*23346*/
			$k[$j++] = $1.metass; /*23349*/
			$k[$j++] = 1; /*23349*/
			$1.tofixedbits(); /*23349*/
			$1.addtometapart(); /*23349*/
			$k[$j++] = $1.metavf; /*23350*/
			$k[$j++] = 2; /*23350*/
			$1.tofixedbits(); /*23350*/
			$1.addtometapart(); /*23350*/
			$k[$j++] = $1.metamask; /*23351*/
			$k[$j++] = 3; /*23351*/
			$1.tofixedbits(); /*23351*/
			$1.addtometapart(); /*23351*/
			if ($1.hasslaves) {
				/*23352*/
				$k[$j++] = "1"; /*23352*/
			} else {
				/*23352*/
				$k[$j++] = "0"; /*23352*/
			} /*23352*/
			$1.addtometapart(); /*23352*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*23353*/
			$k[$j++] = 2; /*23353*/
			$k[$j++] = -1; /*23353*/
			$1.ldpc(); /*23353*/
			$1.addtometabits(); /*23353*/
			$1.p = 0; /*23353*/
			if ($1.metass == 0) {
				/*23363*/
				$k[$j++] = ((~~(($1.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $1.metavf)) - 1; /*23358*/
				$k[$j++] = $1.metavlen; /*23358*/
				$1.tofixedbits(); /*23358*/
				$1.addtometapart(); /*23358*/
			} else {
				/*23363*/
				$k[$j++] = (~~(($1.cols - 17) / 4)) - 1; /*23361*/
				$k[$j++] = ~~($1.metavlen / 2); /*23361*/
				$1.tofixedbits(); /*23361*/
				$1.addtometapart(); /*23361*/
				$k[$j++] = (~~(($1.rows - 17) / 4)) - 1; /*23363*/
				$k[$j++] = ~~($1.metavlen / 2); /*23363*/
				$1.tofixedbits(); /*23363*/
				$1.addtometapart(); /*23363*/
			} /*23363*/
			$k[$j++] = $1.datawc - 3; /*23365*/
			$k[$j++] = ~~($1.metaelen / 2); /*23365*/
			$1.tofixedbits(); /*23365*/
			$1.addtometapart(); /*23365*/
			$k[$j++] = $1.datawr - 4; /*23366*/
			$k[$j++] = ~~($1.metaelen / 2); /*23366*/
			$1.tofixedbits(); /*23366*/
			$1.addtometapart(); /*23366*/
			if ($1.hasslaves) { //no-else/*23369*/
				$k[$j++] = 0; /*23368*/
				$k[$j++] = 4; /*23368*/
				$1.tofixedbits(); /*23368*/
				$1.addtometapart(); /*23368*/
			} /*23368*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*23370*/
			$k[$j++] = 2; /*23370*/
			$k[$j++] = -1; /*23370*/
			$1.ldpc(); /*23370*/
			$1.addtometabits(); /*23370*/
			$1.p = 0; /*23370*/
		} else {
			/*23395*/
			var _Ry = $1.sameshape ? 0 : 1; /*23375*/
			$k[$j++] = _Ry; /*23375*/
			$k[$j++] = 1; /*23375*/
			$1.tofixedbits(); /*23375*/
			$1.addtometapart(); /*23375*/
			var _S0 = $1.sameecc ? 0 : 1; /*23376*/
			$k[$j++] = _S0; /*23376*/
			$k[$j++] = 1; /*23376*/
			$1.tofixedbits(); /*23376*/
			$1.addtometapart(); /*23376*/
			var _S2 = $1.hasslaves ? 1 : 0; /*23377*/
			$k[$j++] = _S2; /*23377*/
			$k[$j++] = 1; /*23377*/
			$1.tofixedbits(); /*23377*/
			$1.addtometapart(); /*23377*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*23378*/
			$k[$j++] = 2; /*23378*/
			$k[$j++] = -1; /*23378*/
			$1.ldpc(); /*23378*/
			$1.addtometabits(); /*23378*/
			$1.p = 0; /*23378*/
			if (!$1.sameshape) { //no-else/*23384*/
				$k[$j++] = (~~(($1.diffside - 17) / 4)) - 1; /*23383*/
				$k[$j++] = 5; /*23383*/
				$1.tofixedbits(); /*23383*/
				$1.addtometapart(); /*23383*/
			} /*23383*/
			if ($1.hasslaves) { //no-else/*23387*/
				$k[$j++] = 0; /*23386*/
				$k[$j++] = 3; /*23386*/
				$1.tofixedbits(); /*23386*/
				$1.addtometapart(); /*23386*/
			} /*23386*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*23388*/
			$k[$j++] = 2; /*23388*/
			$k[$j++] = -1; /*23388*/
			$1.ldpc(); /*23388*/
			$1.addtometabits(); /*23388*/
			$1.p = 0; /*23388*/
			if (!$1.sameecc) { //no-else/*23394*/
				$k[$j++] = $1.datawc - 3; /*23392*/
				$k[$j++] = ~~($1.metaelen / 2); /*23392*/
				$1.tofixedbits(); /*23392*/
				$1.addtometapart(); /*23392*/
				$k[$j++] = $1.datawr - 4; /*23393*/
				$k[$j++] = ~~($1.metaelen / 2); /*23393*/
				$1.tofixedbits(); /*23393*/
				$1.addtometapart(); /*23393*/
			} /*23393*/
			$k[$j++] = $geti($1.metapart, 0, $1.p); /*23395*/
			$k[$j++] = 2; /*23395*/
			$k[$j++] = -1; /*23395*/
			$1.ldpc(); /*23395*/
			$1.addtometabits(); /*23395*/
			$1.p = 0; /*23395*/
		} /*23395*/
		for (var _SN = $1.q, _SM = $1.nummetabits - 1; _SN <= _SM; _SN += 1) {
			/*23400*/
			$put($1.metabits, _SN, 48); /*23399*/
		} /*23399*/
		$1.i = 0; /*23403*/
		$1.j = 0; /*23403*/
		if (!$1.slave) { //no-else/*23411*/
			$forall($geti($1.metabits, $1.i, 6), function() {
				/*23409*/
				if ($1.colors == 4) {
					/*23406*/
					$k[$j++] = $a([$1.bi, $1.yi]); /*23406*/
				} else {
					/*23406*/
					$k[$j++] = $a([$1.ki, $1.wi]); /*23406*/
				} /*23406*/
				var _Sa = $k[--$j]; /*23406*/
				var _Sc = $get(_Sa, $k[--$j] - 48); /*23406*/
				$k[$j++] = _Sc; /*23407*/
				$k[$j++] = $1.pixs; /*23407*/
				$aload($get($1.metadatamap, $1.j)); /*23407*/
				$1.jmv(); /*23407*/
				var _Sh = $k[--$j]; /*23407*/
				var _Si = $k[--$j]; /*23407*/
				$put(_Si, _Sh, $k[--$j]); /*23407*/
				$1.j = $1.j + 1; /*23408*/
			}); /*23408*/
			$1.i = $1.i + 6; /*23410*/
		} /*23410*/
		for (var _Sp = 0, _Sq = ~~(($1.nummetabits - $1.i) / $1.metabpm); _Sp < _Sq; _Sp++) {
			/*23418*/
			$k[$j++] = 0; /*23413*/
			$forall($geti($1.metabits, $1.i, $1.metabpm), function() {
				/*23413*/
				var _Sv = $k[--$j]; /*23413*/
				var _Sw = $k[--$j]; /*23413*/
				$k[$j++] = (_Sw + (_Sv - 48)) * 2; /*23413*/
			}); /*23413*/
			var _Sz = $get($1.metacolorindex, ~~($k[--$j] / 2)); /*23414*/
			$k[$j++] = _Sz; /*23415*/
			$k[$j++] = $1.pixs; /*23415*/
			$aload($get($1.metadatamap, $1.j)); /*23415*/
			$1.jmv(); /*23415*/
			var _T4 = $k[--$j]; /*23415*/
			var _T5 = $k[--$j]; /*23415*/
			$put(_T5, _T4, $k[--$j]); /*23415*/
			$1.i = $1.i + $1.metabpm; /*23416*/
			$1.j = $1.j + 1; /*23417*/
		} /*23417*/
		var _TH = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.pixs],
			["pixx", $1.cols],
			["pixy", $1.rows],
			["colormap", $1.palette],
			["height", ($1.rows * 2) / 72],
			["width", ($1.cols * 2) / 72],
			["opt", $1.options]
		]); /*23428*/
		$k[$j++] = _TH; /*23431*/
		if (!$1.dontdraw) { //no-else/*23431*/
			$0.renmatrix(); /*23431*/
		} /*23431*/
	};
	$0['gs1-cc'] = function() {
		var $1 = {}; /*23462*/
		$1.options = $k[--$j]; /*23464*/
		$1.barcode = $k[--$j]; /*23465*/
		$1.dontdraw = false; /*23467*/
		$1.ccversion = "a"; /*23468*/
		$1.cccolumns = -1; /*23469*/
		$1.lintype = ""; /*23470*/
		$1.linwidth = -1; /*23471*/
		$forall($1.options, function() {
			/*23482*/
			var _3 = $k[--$j]; /*23482*/
			$1[$k[--$j]] = _3; /*23482*/
		}); /*23482*/
		$1.cccolumns = ~~$1.cccolumns; /*23484*/
		$1.linwidth = ~~$1.linwidth; /*23485*/
		if ($1.cccolumns == -1) { //no-else/*23504*/
			$k[$j++] = Infinity; /*23502*/
			$k[$j++] = 'ean13'; /*23495*/
			$k[$j++] = 4; /*23495*/
			$k[$j++] = 'upca'; /*23495*/
			$k[$j++] = 4; /*23495*/
			$k[$j++] = 'ean8'; /*23495*/
			$k[$j++] = 3; /*23495*/
			$k[$j++] = 'upce'; /*23495*/
			$k[$j++] = 2; /*23495*/
			$k[$j++] = 'gs1-128'; /*23495*/
			if ($ne($1.ccversion, "c")) {
				/*23495*/
				$k[$j++] = 4; /*23495*/
			} else {
				/*23495*/
				$k[$j++] = ~~(($1.linwidth - 52) / 17); /*23495*/
			} /*23495*/
			$k[$j++] = 'databaromni'; /*23502*/
			$k[$j++] = 4; /*23502*/
			$k[$j++] = 'databarstacked'; /*23502*/
			$k[$j++] = 2; /*23502*/
			$k[$j++] = 'databarstackedomni'; /*23502*/
			$k[$j++] = 2; /*23502*/
			$k[$j++] = 'databartruncated'; /*23502*/
			$k[$j++] = 4; /*23502*/
			$k[$j++] = 'databarlimited'; /*23502*/
			$k[$j++] = 3; /*23502*/
			$k[$j++] = 'databarexpanded'; /*23502*/
			$k[$j++] = 4; /*23502*/
			$k[$j++] = 'databarexpandedstacked'; /*23502*/
			$k[$j++] = 4; /*23502*/
			$1.cccolumns = $get($d(), $1.lintype); /*23503*/
		} /*23503*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*23508*/
			$1.out = $s($1.in.length); /*23509*/
			$1.j = 0; /*23510*/
			$k[$j++] = $1.in; /*23524*/
			for (;;) {
				/*23524*/
				$search($k[--$j], "^"); /*23513*/
				if ($k[--$j]) {
					/*23522*/
					var _J = $k[--$j]; /*23514*/
					$puti($1.out, $1.j, _J); /*23514*/
					$1.j = (_J.length + $1.j) + 1; /*23515*/
					$j--; /*23516*/
					var _N = $k[--$j]; /*23517*/
					$put($1.out, $1.j - 1, ~~$z($geti(_N, 0, 3))); /*23517*/
					$k[$j++] = $geti(_N, 3, _N.length - 3); /*23518*/
				} else {
					/*23522*/
					var _S = $k[--$j]; /*23520*/
					$puti($1.out, $1.j, _S); /*23520*/
					$1.j = _S.length + $1.j; /*23521*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*23522*/
					break; /*23522*/
				} /*23522*/
			} /*23522*/
		}; /*23525*/
		$1.ais = $a([]); /*23528*/
		$1.vals = $a([]); /*23529*/
		var _b = $1.barcode; /*23530*/
		$k[$j++] = $geti(_b, 1, _b.length - 1); /*23543*/
		for (;;) {
			/*23543*/
			var _d = $k[--$j]; /*23532*/
			$k[$j++] = _d; /*23532*/
			if ($eq(_d, "")) { //no-else/*23532*/
				break; /*23532*/
			} /*23532*/
			$search($k[--$j], ")"); /*23533*/
			$j--; /*23533*/
			var _f = $k[--$j]; /*23534*/
			var _g = $k[--$j]; /*23534*/
			var _h = $k[--$j]; /*23535*/
			$k[$j++] = _f; /*23535*/
			$search(_h, "("); /*23535*/
			if ($k[--$j]) {
				/*23538*/
				var _j = $k[--$j]; /*23536*/
				var _k = $k[--$j]; /*23536*/
				var _l = $k[--$j]; /*23536*/
				var _m = $k[--$j]; /*23536*/
				$k[$j++] = _l; /*23536*/
				$k[$j++] = _m; /*23536*/
				$k[$j++] = _j; /*23536*/
			} else {
				/*23538*/
				var _n = $k[--$j]; /*23538*/
				var _o = $k[--$j]; /*23538*/
				$k[$j++] = ""; /*23538*/
				$k[$j++] = _o; /*23538*/
				$k[$j++] = _n; /*23538*/
			} /*23538*/
			$k[$j++] = Infinity; /*23540*/
			$aload($1.ais); /*23540*/
			var _r = $k[$j - 1 - ($counttomark() + 2)]; /*23540*/
			$k[$j++] = _r; /*23540*/
			$1.ais = $a(); /*23540*/
			$k[$j++] = Infinity; /*23541*/
			$aload($1.vals); /*23541*/
			var _v = $k[$j - 1 - ($counttomark() + 1)]; /*23541*/
			$k[$j++] = _v; /*23541*/
			$1.expand(); /*23541*/
			$1.vals = $a(); /*23541*/
			$j -= 2; /*23542*/
		} /*23542*/
		$j--; /*23544*/
		$1.isupper = function() {
			var _x = $k[--$j]; /*23547*/
			$k[$j++] = (_x >= 65) && (_x <= 90); /*23547*/
		}; /*23547*/
		$1.isnum0 = function() {
			var _y = $k[--$j]; /*23548*/
			$k[$j++] = (_y >= 48) && (_y <= 57); /*23548*/
		}; /*23548*/
		$1.isnum1 = function() {
			var _z = $k[--$j]; /*23549*/
			$k[$j++] = (_z >= 49) && (_z <= 57); /*23549*/
		}; /*23549*/
		for (;;) {
			/*23595*/
			if ($1.ais.length >= 1) { //no-else/*23557*/
				if (($eq($get($1.ais, 0), "10") || $eq($get($1.ais, 0), "11")) || $eq($get($1.ais, 0), "17")) { //no-else/*23556*/
					$k[$j++] = -1; /*23555*/
					$k[$j++] = "10"; /*23555*/
					break; /*23555*/
				} /*23555*/
			} /*23555*/
			if ($1.ais.length >= 1) { //no-else/*23590*/
				if ($eq($get($1.ais, 0), "90")) { //no-else/*23589*/
					$1.v = $get($1.vals, 0); /*23562*/
					if ($1.v.length >= 1) { //no-else/*23567*/
						$k[$j++] = $get($1.v, 0); /*23564*/
						$1.isupper(); /*23564*/
						if ($k[--$j]) { //no-else/*23566*/
							$k[$j++] = 0; /*23565*/
							$k[$j++] = "11"; /*23565*/
							break; /*23565*/
						} /*23565*/
					} /*23565*/
					if ($1.v.length >= 2) { //no-else/*23573*/
						$k[$j++] = $get($1.v, 0); /*23569*/
						$1.isnum1(); /*23569*/
						$k[$j++] = $get($1.v, 1); /*23570*/
						$1.isupper(); /*23570*/
						var _1L = $k[--$j]; /*23570*/
						if (($k[--$j] && _1L)) { //no-else/*23572*/
							$k[$j++] = 1; /*23571*/
							$k[$j++] = "11"; /*23571*/
							break; /*23571*/
						} /*23571*/
					} /*23571*/
					if ($1.v.length >= 3) { //no-else/*23580*/
						$k[$j++] = $get($1.v, 0); /*23575*/
						$1.isnum1(); /*23575*/
						$k[$j++] = $get($1.v, 1); /*23576*/
						$1.isnum0(); /*23576*/
						var _1S = $k[--$j]; /*23576*/
						var _1T = $k[--$j]; /*23576*/
						$k[$j++] = $an(_1T, _1S); /*23577*/
						$k[$j++] = $get($1.v, 2); /*23577*/
						$1.isupper(); /*23577*/
						var _1W = $k[--$j]; /*23577*/
						if (($k[--$j] && _1W)) { //no-else/*23579*/
							$k[$j++] = 2; /*23578*/
							$k[$j++] = "11"; /*23578*/
							break; /*23578*/
						} /*23578*/
					} /*23578*/
					if ($1.v.length >= 4) { //no-else/*23588*/
						$k[$j++] = $get($1.v, 0); /*23582*/
						$1.isnum1(); /*23582*/
						$k[$j++] = $get($1.v, 1); /*23583*/
						$1.isnum0(); /*23583*/
						var _1d = $k[--$j]; /*23583*/
						var _1e = $k[--$j]; /*23583*/
						$k[$j++] = $an(_1e, _1d); /*23584*/
						$k[$j++] = $get($1.v, 2); /*23584*/
						$1.isnum0(); /*23584*/
						var _1h = $k[--$j]; /*23584*/
						var _1i = $k[--$j]; /*23584*/
						$k[$j++] = $an(_1i, _1h); /*23585*/
						$k[$j++] = $get($1.v, 3); /*23585*/
						$1.isupper(); /*23585*/
						var _1l = $k[--$j]; /*23585*/
						if (($k[--$j] && _1l)) { //no-else/*23587*/
							$k[$j++] = 3; /*23586*/
							$k[$j++] = "11"; /*23586*/
							break; /*23586*/
						} /*23586*/
					} /*23586*/
				} /*23586*/
			} /*23586*/
			$k[$j++] = -1; /*23593*/
			$k[$j++] = "0"; /*23593*/
			break; /*23593*/
		} /*23593*/
		$1.method = $k[--$j]; /*23596*/
		$1.npre = $k[--$j]; /*23597*/
		$1.fnc1 = -1; /*23599*/
		$1.lnumeric = -2; /*23599*/
		$1.lalphanumeric = -3; /*23599*/
		$1.liso646 = -4; /*23599*/
		$1.tobin = function() {
			var _1q = $s($k[--$j]); /*23602*/
			$k[$j++] = _1q; /*23602*/
			for (var _1s = 0, _1r = _1q.length - 1; _1s <= _1r; _1s += 1) {
				/*23602*/
				var _1t = $k[--$j]; /*23602*/
				$put(_1t, _1s, 48); /*23602*/
				$k[$j++] = _1t; /*23602*/
			} /*23602*/
			var _1u = $k[--$j]; /*23603*/
			var _1x = $cvrs($s(_1u.length), $k[--$j], 2); /*23603*/
			$puti(_1u, _1u.length - _1x.length, _1x); /*23603*/
			$k[$j++] = _1u; /*23603*/
		}; /*23604*/
		$k[$j++] = Infinity; /*23609*/
		for (var _1y = 65; _1y <= 90; _1y += 1) {
			/*23607*/
			$k[$j++] = _1y; /*23607*/
			$k[$j++] = _1y - 65; /*23607*/
			$k[$j++] = 5; /*23607*/
			$1.tobin(); /*23607*/
		} /*23607*/
		for (var _1z = 48; _1z <= 57; _1z += 1) {
			/*23608*/
			$k[$j++] = _1z; /*23608*/
			$k[$j++] = _1z + 4; /*23608*/
			$k[$j++] = 6; /*23608*/
			$1.tobin(); /*23608*/
		} /*23608*/
		$k[$j++] = $1.fnc1; /*23609*/
		$k[$j++] = "11111"; /*23609*/
		$1.alpha = $d(); /*23610*/
		$k[$j++] = Infinity; /*23622*/
		for (var _22 = 0; _22 <= 119; _22 += 1) {
			/*23621*/
			var _24 = $strcpy($s(2), "00"); /*23614*/
			var _26 = $cvrs($s(2), _22, 11); /*23614*/
			$puti(_24, 2 - _26.length, _26); /*23615*/
			$k[$j++] = _22; /*23616*/
			$k[$j++] = _24; /*23616*/
			if ($get(_24, 0) == 65) { //no-else/*23616*/
				var _28 = $k[--$j]; /*23616*/
				$put(_28, 0, 94); /*23616*/
				$k[$j++] = _28; /*23616*/
			} /*23616*/
			var _29 = $k[--$j]; /*23617*/
			$k[$j++] = _29; /*23617*/
			if ($get(_29, 1) == 65) { //no-else/*23617*/
				var _2B = $k[--$j]; /*23617*/
				$put(_2B, 1, 94); /*23617*/
				$k[$j++] = _2B; /*23617*/
			} /*23617*/
			var _2C = $k[--$j]; /*23618*/
			var _2F = $strcpy($s(7), "0000000"); /*23619*/
			var _2H = $cvrs($s(7), $k[--$j] + 8, 2); /*23619*/
			$puti(_2F, 7 - _2H.length, _2H); /*23620*/
			$k[$j++] = _2C; /*23620*/
			$k[$j++] = _2F; /*23620*/
		} /*23620*/
		$k[$j++] = $1.lalphanumeric; /*23622*/
		$k[$j++] = "0000"; /*23622*/
		$1.numeric = $d(); /*23623*/
		$k[$j++] = Infinity; /*23632*/
		for (var _2K = 48; _2K <= 57; _2K += 1) {
			/*23626*/
			$k[$j++] = _2K; /*23626*/
			$k[$j++] = _2K - 43; /*23626*/
			$k[$j++] = 5; /*23626*/
			$1.tobin(); /*23626*/
		} /*23626*/
		$k[$j++] = $1.fnc1; /*23628*/
		$k[$j++] = "01111"; /*23628*/
		for (var _2M = 65; _2M <= 90; _2M += 1) {
			/*23628*/
			$k[$j++] = _2M; /*23628*/
			$k[$j++] = _2M - 33; /*23628*/
			$k[$j++] = 6; /*23628*/
			$1.tobin(); /*23628*/
		} /*23628*/
		$k[$j++] = 42; /*23630*/
		$k[$j++] = "111010"; /*23630*/
		for (var _2N = 44; _2N <= 47; _2N += 1) {
			/*23630*/
			$k[$j++] = _2N; /*23630*/
			$k[$j++] = _2N + 15; /*23630*/
			$k[$j++] = 6; /*23630*/
			$1.tobin(); /*23630*/
		} /*23630*/
		$k[$j++] = $1.lnumeric; /*23632*/
		$k[$j++] = "000"; /*23632*/
		$k[$j++] = $1.liso646; /*23632*/
		$k[$j++] = "00100"; /*23632*/
		$1.alphanumeric = $d(); /*23633*/
		$k[$j++] = Infinity; /*23647*/
		for (var _2R = 48; _2R <= 57; _2R += 1) {
			/*23636*/
			$k[$j++] = _2R; /*23636*/
			$k[$j++] = _2R - 43; /*23636*/
			$k[$j++] = 5; /*23636*/
			$1.tobin(); /*23636*/
		} /*23636*/
		$k[$j++] = $1.fnc1; /*23638*/
		$k[$j++] = "01111"; /*23638*/
		for (var _2T = 65; _2T <= 90; _2T += 1) {
			/*23638*/
			$k[$j++] = _2T; /*23638*/
			$k[$j++] = _2T - 1; /*23638*/
			$k[$j++] = 7; /*23638*/
			$1.tobin(); /*23638*/
		} /*23638*/
		for (var _2U = 97; _2U <= 122; _2U += 1) {
			/*23639*/
			$k[$j++] = _2U; /*23639*/
			$k[$j++] = _2U - 7; /*23639*/
			$k[$j++] = 7; /*23639*/
			$1.tobin(); /*23639*/
		} /*23639*/
		$k[$j++] = 33; /*23642*/
		$k[$j++] = "11101000"; /*23642*/
		$k[$j++] = 34; /*23642*/
		$k[$j++] = "11101001"; /*23642*/
		for (var _2V = 37; _2V <= 47; _2V += 1) {
			/*23642*/
			$k[$j++] = _2V; /*23642*/
			$k[$j++] = _2V + 197; /*23642*/
			$k[$j++] = 8; /*23642*/
			$1.tobin(); /*23642*/
		} /*23642*/
		for (var _2W = 58; _2W <= 63; _2W += 1) {
			/*23643*/
			$k[$j++] = _2W; /*23643*/
			$k[$j++] = _2W + 187; /*23643*/
			$k[$j++] = 8; /*23643*/
			$1.tobin(); /*23643*/
		} /*23643*/
		$k[$j++] = 95; /*23647*/
		$k[$j++] = "11111011"; /*23647*/
		$k[$j++] = 32; /*23647*/
		$k[$j++] = "11111100"; /*23647*/
		$k[$j++] = $1.lnumeric; /*23647*/
		$k[$j++] = "000"; /*23647*/
		$k[$j++] = $1.lalphanumeric; /*23647*/
		$k[$j++] = "00100"; /*23647*/
		$1.iso646 = $d(); /*23648*/
		if ($eq($1.method, "10")) { //no-else/*23681*/
			if ($eq($get($1.ais, 0), "11") || $eq($get($1.ais, 0), "17")) {
				/*23665*/
				var _2g = $get($1.vals, 0); /*23652*/
				var _2l = $strcpy($s(16), "0000000000000000"); /*23656*/
				var _2n = $cvrs($s(16), ((~~$z($geti(_2g, 0, 2))) * 384) + ((((~~$z($geti(_2g, 2, 2))) - 1) * 32) + (~~$z($geti(_2g, 4, 2)))), 2); /*23656*/
				$puti(_2l, 16 - _2n.length, _2n); /*23657*/
				$k[$j++] = _2l; /*23660*/
				$k[$j++] = Infinity; /*23660*/
				var _2o = $k[--$j]; /*23659*/
				var _2p = $k[--$j]; /*23659*/
				$k[$j++] = _2o; /*23659*/
				$k[$j++] = 1; /*23659*/
				$k[$j++] = 0; /*23659*/
				$forall(_2p, function() {
					/*23659*/
					var _2q = $k[--$j]; /*23659*/
					$k[$j++] = _2q - 48; /*23659*/
				}); /*23659*/
				var _2t = $eq($get($1.ais, 0), "11") ? 0 : 1; /*23660*/
				$k[$j++] = _2t; /*23660*/
				$1.cdf = $a(); /*23661*/
				$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*23662*/
				$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*23663*/
			} else {
				/*23665*/
				$1.cdf = $a([1, 0, 1, 1]); /*23665*/
			} /*23665*/
			if ($1.ais.length != 0) {
				/*23678*/
				if ($eq($get($1.ais, 0), "10")) {
					/*23674*/
					$k[$j++] = Infinity; /*23669*/
					$forall($get($1.vals, 0)); /*23669*/
					$1.gpf = $a(); /*23669*/
					if ($1.ais.length > 1) { //no-else/*23670*/
						$k[$j++] = Infinity; /*23670*/
						$aload($1.gpf); /*23670*/
						$k[$j++] = $1.fnc1; /*23670*/
						$1.gpf = $a(); /*23670*/
					} /*23670*/
					$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*23671*/
					$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*23672*/
				} else {
					/*23674*/
					$1.gpf = $a([$1.fnc1]); /*23674*/
				} /*23674*/
			} else {
				/*23678*/
				$k[$j++] = Infinity; /*23677*/
				$aload($1.cdf); /*23677*/
				$k[$j++] = 0; /*23677*/
				$k[$j++] = 0; /*23677*/
				$k[$j++] = 0; /*23677*/
				$k[$j++] = 0; /*23677*/
				$k[$j++] = 0; /*23677*/
				$k[$j++] = 1; /*23677*/
				$k[$j++] = 1; /*23677*/
				$k[$j++] = 1; /*23677*/
				$k[$j++] = 1; /*23677*/
				$1.cdf = $a(); /*23677*/
				$1.gpf = $a([]); /*23678*/
			} /*23678*/
			$1.mode = "numeric"; /*23680*/
		} /*23680*/
		if ($eq($1.method, "11")) { //no-else/*23774*/
			$1.cdf = $a([1, 1]); /*23684*/
			$1.ai90 = $get($1.vals, 0); /*23685*/
			if (($1.npre + 1) != $1.ai90.length) {
				/*23689*/
				$k[$j++] = $geti($1.ai90, $1.npre + 1, ($1.ai90.length - $1.npre) - 1); /*23687*/
			} else {
				/*23689*/
				$k[$j++] = ""; /*23689*/
			} /*23689*/
			$1.ai90rem = $k[--$j]; /*23691*/
			$k[$j++] = 'nalpha'; /*23692*/
			$k[$j++] = 0; /*23692*/
			$forall($1.ai90rem, function() {
				/*23692*/
				var _3a = $k[--$j]; /*23692*/
				if ((_3a >= 65) && (_3a <= 90)) { //no-else/*23692*/
					var _3b = $k[--$j]; /*23692*/
					$k[$j++] = _3b + 1; /*23692*/
				} /*23692*/
			}); /*23692*/
			var _3c = $k[--$j]; /*23692*/
			$1[$k[--$j]] = _3c; /*23692*/
			$k[$j++] = 'nnums'; /*23693*/
			$k[$j++] = 0; /*23693*/
			$forall($1.ai90rem, function() {
				/*23693*/
				var _3f = $k[--$j]; /*23693*/
				if ((_3f >= 48) && (_3f <= 57)) { //no-else/*23693*/
					var _3g = $k[--$j]; /*23693*/
					$k[$j++] = _3g + 1; /*23693*/
				} /*23693*/
			}); /*23693*/
			var _3h = $k[--$j]; /*23693*/
			$1[$k[--$j]] = _3h; /*23693*/
			$k[$j++] = 'mode'; /*23694*/
			if ($gt($1.nalpha, $1.nnums)) {
				/*23694*/
				$k[$j++] = "alpha"; /*23694*/
			} else {
				/*23694*/
				$k[$j++] = "numeric"; /*23694*/
			} /*23694*/
			var _3l = $k[--$j]; /*23694*/
			$1[$k[--$j]] = _3l; /*23694*/
			if (($1.nalpha + $1.nnums) != $1.ai90rem.length) { //no-else/*23695*/
				$1.mode = "alphanumeric"; /*23695*/
			} /*23695*/
			$k[$j++] = Infinity; /*23701*/
			$aload($1.cdf); /*23697*/
			if ($eq($1.mode, "alphanumeric")) { //no-else/*23698*/
				$k[$j++] = 0; /*23698*/
			} /*23698*/
			if ($eq($1.mode, "numeric")) { //no-else/*23699*/
				$k[$j++] = 1; /*23699*/
				$k[$j++] = 0; /*23699*/
			} /*23699*/
			if ($eq($1.mode, "alpha")) { //no-else/*23700*/
				$k[$j++] = 1; /*23700*/
				$k[$j++] = 1; /*23700*/
			} /*23700*/
			$1.cdf = $a(); /*23701*/
			$k[$j++] = 'ais1'; /*23702*/
			if ($1.ais.length > 1) {
				/*23702*/
				$k[$j++] = $get($1.ais, 1); /*23702*/
			} else {
				/*23702*/
				$k[$j++] = -1; /*23702*/
			} /*23702*/
			var _3y = $k[--$j]; /*23702*/
			$1[$k[--$j]] = _3y; /*23702*/
			$k[$j++] = 'vals1'; /*23703*/
			if ($1.vals.length > 1) {
				/*23703*/
				$k[$j++] = $get($1.vals, 1); /*23703*/
			} else {
				/*23703*/
				$k[$j++] = -1; /*23703*/
			} /*23703*/
			var _43 = $k[--$j]; /*23703*/
			$1[$k[--$j]] = _43; /*23703*/
			if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) {
				/*23707*/
				$k[$j++] = Infinity; /*23705*/
				$aload($1.cdf); /*23705*/
				if ($eq($1.ais1, "21")) {
					/*23705*/
					$k[$j++] = 1; /*23705*/
					$k[$j++] = 0; /*23705*/
				} else {
					/*23705*/
					$k[$j++] = 1; /*23705*/
					$k[$j++] = 1; /*23705*/
				} /*23705*/
				$1.cdf = $a(); /*23705*/
			} else {
				/*23707*/
				$k[$j++] = Infinity; /*23707*/
				$aload($1.cdf); /*23707*/
				$k[$j++] = 0; /*23707*/
				$1.cdf = $a(); /*23707*/
			} /*23707*/
			$k[$j++] = 'nval'; /*23709*/
			if ($1.npre != 0) {
				/*23709*/
				$k[$j++] = ~~$z($geti($1.ai90, 0, $1.npre)); /*23709*/
			} else {
				/*23709*/
				$k[$j++] = 0; /*23709*/
			} /*23709*/
			var _4G = $k[--$j]; /*23709*/
			$1[$k[--$j]] = _4G; /*23709*/
			$search("BDHIJKLNPQRSTVXZ", $geti($1.ai90, $1.npre, 1)); /*23710*/
			if ($k[--$j]) {
				/*23714*/
				var _4M = $k[--$j]; /*23711*/
				var _4N = $k[--$j]; /*23711*/
				var _4O = $k[--$j]; /*23711*/
				$1.aval = _4M.length; /*23712*/
			} else {
				/*23714*/
				$j--; /*23714*/
				$1.aval = -1; /*23714*/
			} /*23714*/
			if (($1.nval < 31) && ($1.aval != -1)) {
				/*23740*/
				var _4S = $strcpy($s(5), "00000"); /*23717*/
				var _4V = $cvrs($s(5), $1.nval, 2); /*23717*/
				$puti(_4S, 5 - _4V.length, _4V); /*23718*/
				$k[$j++] = _4S; /*23719*/
				$k[$j++] = Infinity; /*23719*/
				var _4W = $k[--$j]; /*23719*/
				var _4X = $k[--$j]; /*23719*/
				$k[$j++] = _4W; /*23719*/
				$forall(_4X, function() {
					/*23719*/
					var _4Y = $k[--$j]; /*23719*/
					$k[$j++] = _4Y - 48; /*23719*/
				}); /*23719*/
				$1.nbits = $a(); /*23719*/
				var _4b = $strcpy($s(4), "0000"); /*23720*/
				var _4e = $cvrs($s(4), $1.aval, 2); /*23720*/
				$puti(_4b, 4 - _4e.length, _4e); /*23721*/
				$k[$j++] = _4b; /*23722*/
				$k[$j++] = Infinity; /*23722*/
				var _4f = $k[--$j]; /*23722*/
				var _4g = $k[--$j]; /*23722*/
				$k[$j++] = _4f; /*23722*/
				$forall(_4g, function() {
					/*23722*/
					var _4h = $k[--$j]; /*23722*/
					$k[$j++] = _4h - 48; /*23722*/
				}); /*23722*/
				$1.abits = $a(); /*23722*/
				$k[$j++] = Infinity; /*23727*/
				$aload($1.cdf); /*23724*/
				$aload($1.nbits); /*23725*/
				$aload($1.abits); /*23726*/
				$1.cdf = $a(); /*23727*/
			} else {
				/*23740*/
				var _4o = $strcpy($s(10), "0000000000"); /*23729*/
				var _4r = $cvrs($s(10), $1.nval, 2); /*23729*/
				$puti(_4o, 10 - _4r.length, _4r); /*23730*/
				$k[$j++] = _4o; /*23731*/
				$k[$j++] = Infinity; /*23731*/
				var _4s = $k[--$j]; /*23731*/
				var _4t = $k[--$j]; /*23731*/
				$k[$j++] = _4s; /*23731*/
				$forall(_4t, function() {
					/*23731*/
					var _4u = $k[--$j]; /*23731*/
					$k[$j++] = _4u - 48; /*23731*/
				}); /*23731*/
				$1.nbits = $a(); /*23731*/
				var _4x = $strcpy($s(5), "00000"); /*23732*/
				var _52 = $cvrs($s(5), $get($1.ai90, $1.npre) - 65, 2); /*23732*/
				$puti(_4x, 5 - _52.length, _52); /*23733*/
				$k[$j++] = _4x; /*23734*/
				$k[$j++] = Infinity; /*23734*/
				var _53 = $k[--$j]; /*23734*/
				var _54 = $k[--$j]; /*23734*/
				$k[$j++] = _53; /*23734*/
				$forall(_54, function() {
					/*23734*/
					var _55 = $k[--$j]; /*23734*/
					$k[$j++] = _55 - 48; /*23734*/
				}); /*23734*/
				$1.abits = $a(); /*23734*/
				$k[$j++] = Infinity; /*23740*/
				$aload($1.cdf); /*23736*/
				$k[$j++] = 1; /*23738*/
				$k[$j++] = 1; /*23738*/
				$k[$j++] = 1; /*23738*/
				$k[$j++] = 1; /*23738*/
				$k[$j++] = 1; /*23738*/
				$aload($1.nbits); /*23738*/
				$aload($1.abits); /*23739*/
				$1.cdf = $a(); /*23740*/
			} /*23740*/
			if ($eq($1.mode, "numeric")) {
				/*23759*/
				$k[$j++] = Infinity; /*23743*/
				$forall($1.ai90rem); /*23743*/
				if ($1.ais.length > 1) { //no-else/*23743*/
					$k[$j++] = $1.fnc1; /*23743*/
				} /*23743*/
				$1.gpf = $a(); /*23743*/
			} else {
				/*23759*/
				$k[$j++] = 'encs'; /*23745*/
				if ($eq($1.mode, "alpha")) {
					/*23745*/
					$k[$j++] = $1.alpha; /*23745*/
				} else {
					/*23745*/
					$k[$j++] = $1.alphanumeric; /*23745*/
				} /*23745*/
				var _5J = $k[--$j]; /*23745*/
				$1[$k[--$j]] = _5J; /*23745*/
				$k[$j++] = Infinity; /*23746*/
				$forall($1.ai90rem); /*23746*/
				if ($1.ais.length > 1) { //no-else/*23746*/
					$k[$j++] = $1.fnc1; /*23746*/
				} /*23746*/
				$1.in = $a(); /*23746*/
				$1.out = $a($1.in.length * 6); /*23747*/
				$1.j = 0; /*23748*/
				for (var _5T = 0, _5S = $1.in.length - 1; _5T <= _5S; _5T += 1) {
					/*23753*/
					var _5X = $get($1.encs, $get($1.in, _5T)); /*23750*/
					$k[$j++] = _5X; /*23751*/
					$k[$j++] = _5X; /*23751*/
					$k[$j++] = Infinity; /*23751*/
					var _5Y = $k[--$j]; /*23751*/
					var _5Z = $k[--$j]; /*23751*/
					$k[$j++] = _5Y; /*23751*/
					$forall(_5Z, function() {
						/*23751*/
						var _5a = $k[--$j]; /*23751*/
						$k[$j++] = _5a - 48; /*23751*/
					}); /*23751*/
					$puti($1.out, $1.j, $a()); /*23751*/
					$1.j = $k[--$j].length + $1.j; /*23752*/
				} /*23752*/
				$k[$j++] = Infinity; /*23757*/
				$aload($1.cdf); /*23755*/
				$aload($geti($1.out, 0, $1.j)); /*23756*/
				$1.cdf = $a(); /*23757*/
				$1.gpf = $a([]); /*23758*/
				if (($1.ais.length > 1) || $ne($1.mode, "alpha")) { //no-else/*23759*/
					$1.mode = "numeric"; /*23759*/
				} /*23759*/
			} /*23759*/
			$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*23761*/
			$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*23762*/
			if ($1.ais.length != 0) { //no-else/*23773*/
				if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) { //no-else/*23772*/
					$k[$j++] = Infinity; /*23768*/
					$aload($1.gpf); /*23766*/
					$forall($1.vals1); /*23767*/
					$1.gpf = $a(); /*23768*/
					$1.ais = $geti($1.ais, 1, $1.ais.length - 1); /*23769*/
					$1.vals = $geti($1.vals, 1, $1.vals.length - 1); /*23770*/
					if ($1.ais.length != 0) { //no-else/*23771*/
						$k[$j++] = Infinity; /*23771*/
						$aload($1.gpf); /*23771*/
						$k[$j++] = $1.fnc1; /*23771*/
						$1.gpf = $a(); /*23771*/
					} /*23771*/
				} /*23771*/
			} /*23771*/
		} /*23771*/
		if ($eq($1.method, "0")) { //no-else/*23780*/
			$1.cdf = $a([0]); /*23777*/
			$1.gpf = $a([]); /*23778*/
			$1.mode = "numeric"; /*23779*/
		} /*23779*/
		$1.aifixed = new Map; /*23785*/
		$k[$j++] = Infinity; /*23787*/
		for (var _6D = 0; _6D <= 4; _6D += 1) {
			/*23787*/
			$k[$j++] = _6D; /*23787*/
		} /*23787*/
		var _6E = $a(); /*23787*/
		for (var _6F = 0, _6G = _6E.length; _6F < _6G; _6F++) {
			/*23790*/
			var _6J = $strcpy($s(2), "00"); /*23789*/
			$put(_6J, 1, $get(_6E, _6F) + 48); /*23789*/
			$put($1.aifixed, _6J, _6J); /*23789*/
		} /*23789*/
		$k[$j++] = Infinity; /*23795*/
		for (var _6L = 11; _6L <= 20; _6L += 1) {
			/*23792*/
			$k[$j++] = _6L; /*23792*/
		} /*23792*/
		$k[$j++] = 23; /*23794*/
		for (var _6M = 31; _6M <= 36; _6M += 1) {
			/*23794*/
			$k[$j++] = _6M; /*23794*/
		} /*23794*/
		$k[$j++] = 41; /*23795*/
		var _6N = $a(); /*23795*/
		for (var _6O = 0, _6P = _6N.length; _6O < _6P; _6O++) {
			/*23798*/
			var _6S = $cvrs($s(2), $get(_6N, _6O), 10); /*23797*/
			$put($1.aifixed, _6S, _6S); /*23797*/
		} /*23797*/
		for (var _6W = 0, _6V = $1.ais.length - 1; _6W <= _6V; _6W += 1) {
			/*23816*/
			$1.i = _6W; /*23802*/
			$1.ai = $get($1.ais, $1.i); /*23803*/
			$1.val = $get($1.vals, $1.i); /*23804*/
			var _6g = $a(($1.gpf.length + $1.ai.length) + $1.val.length); /*23805*/
			$puti(_6g, 0, $1.gpf); /*23806*/
			$k[$j++] = _6g; /*23807*/
			$k[$j++] = _6g; /*23807*/
			$k[$j++] = $1.gpf.length; /*23807*/
			$k[$j++] = $1.ai; /*23807*/
			$k[$j++] = Infinity; /*23807*/
			var _6k = $k[--$j]; /*23807*/
			var _6l = $k[--$j]; /*23807*/
			$k[$j++] = _6k; /*23807*/
			$forall(_6l); /*23807*/
			var _6m = $a(); /*23807*/
			var _6n = $k[--$j]; /*23807*/
			$puti($k[--$j], _6n, _6m); /*23807*/
			var _6p = $k[--$j]; /*23808*/
			$k[$j++] = _6p; /*23808*/
			$k[$j++] = _6p; /*23808*/
			$k[$j++] = $1.gpf.length + $1.ai.length; /*23808*/
			$k[$j++] = $1.val; /*23808*/
			$k[$j++] = Infinity; /*23808*/
			var _6t = $k[--$j]; /*23808*/
			var _6u = $k[--$j]; /*23808*/
			$k[$j++] = _6t; /*23808*/
			$forall(_6u); /*23808*/
			var _6v = $a(); /*23808*/
			var _6w = $k[--$j]; /*23808*/
			$puti($k[--$j], _6w, _6v); /*23808*/
			$1.gpf = $k[--$j]; /*23809*/
			var _74 = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*23810*/
			if (($1.i != ($1.ais.length - 1)) && (!_74)) { //no-else/*23815*/
				var _76 = $a($1.gpf.length + 1); /*23811*/
				$puti(_76, 0, $1.gpf); /*23812*/
				$put(_76, $1.gpf.length, $1.fnc1); /*23813*/
				$1.gpf = _76; /*23814*/
			} /*23814*/
		} /*23814*/
		$1.rembits = function() {
			$1.used = $k[--$j]; /*23820*/
			if ($ne($1.ccversion, "c")) {
				/*23849*/
				var _7K = new Map([
					["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
					["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
				]); /*23831*/
				$1.bitcaps = $get($get(_7K, $1.ccversion), $1.cccolumns - 2); /*23833*/
				$k[$j++] = -1; /*23834*/
				$forall($1.bitcaps, function() {
					/*23834*/
					var _7Q = $k[--$j]; /*23834*/
					$k[$j++] = _7Q; /*23834*/
					if ($ge(_7Q, $1.used)) { //no-else/*23834*/
						var _7S = $k[--$j]; /*23834*/
						var _7T = $k[--$j]; /*23834*/
						$k[$j++] = _7S; /*23834*/
						$k[$j++] = _7T; /*23834*/
					} /*23834*/
					$j--; /*23834*/
				}); /*23834*/
				var _7U = $k[--$j]; /*23835*/
				$k[$j++] = _7U; /*23835*/
				if (_7U != -1) { //no-else/*23835*/
					var _7W = $k[--$j]; /*23835*/
					$k[$j++] = _7W - $1.used; /*23835*/
				} /*23835*/
			} else {
				/*23849*/
				var _7X = new Map([
					["c", -1]
				]); /*23837*/
				var _7Z = $get(_7X, $1.ccversion); /*23837*/
				var _7b = ~~Math.ceil($1.used / 8); /*23838*/
				$1.m = ((~~(_7b / 6)) * 5) + (_7b % 6); /*23838*/
				if ($1.m <= 40) { //no-else/*23839*/
					$k[$j++] = 8; /*23839*/
				} /*23839*/
				if (($1.m >= 41) && ($1.m <= 160)) { //no-else/*23840*/
					$k[$j++] = 16; /*23840*/
				} /*23840*/
				if (($1.m >= 161) && ($1.m <= 320)) { //no-else/*23841*/
					$k[$j++] = 32; /*23841*/
				} /*23841*/
				if ($1.m >= 321) { //no-else/*23842*/
					$k[$j++] = 64; /*23842*/
				} /*23842*/
				$1.eccws = $k[--$j]; /*23843*/
				$1.m = ($1.m + $1.eccws) + 3; /*23844*/
				$1.c = ~~(($1.linwidth - 52) / 17); /*23845*/
				if ((~~($1.m / $1.c)) > 90) { //no-else/*23846*/
					$1.c = $1.c + 1; /*23846*/
				} /*23846*/
				$1.r = ~~Math.ceil($1.m / $1.c); /*23847*/
				var _7u = (($1.c * $1.r) - $1.eccws) - 3; /*23848*/
				$1.tgt = (((~~(_7u / 5)) * 6) + (_7u % 5)) * 8; /*23848*/
				if ($1.used <= 8296) {
					/*23849*/
					$k[$j++] = $1.tgt - $1.used; /*23849*/
				} else {
					/*23849*/
					$k[$j++] = -1; /*23849*/
				} /*23849*/
			} /*23849*/
			var _7y = $k[--$j]; /*23851*/
			$k[$j++] = _7y; /*23864*/
			if (_7y == -1) { //no-else/*23864*/
				$j--; /*23852*/
				if ($eq($1.ccversion, "a")) {
					/*23860*/
					$1.ccversion = "b"; /*23854*/
				} else {
					/*23860*/
					if ($eq($1.ccversion, "b") && $eq($1.lintype, "gs1-128")) {
						/*23860*/
						$1.ccversion = "c"; /*23857*/
						$1.cccolumns = ~~(($1.linwidth - 52) / 17); /*23858*/
					} else {
						/*23860*/
						$1.ccversion = -1; /*23860*/
					} /*23860*/
				} /*23860*/
				$k[$j++] = $1.used; /*23863*/
				$1.rembits(); /*23863*/
			} /*23863*/
		}; /*23865*/
		$1.encode = function() {
			var _84 = $k[--$j]; /*23868*/
			$k[$j++] = _84; /*23868*/
			if ($ne(_84, 'raw')) {
				/*23868*/
				var _85 = $k[--$j]; /*23868*/
				var _87 = $get(_85, $k[--$j]); /*23868*/
				$k[$j++] = _87; /*23868*/
			} else {
				/*23868*/
				$j--; /*23868*/
			} /*23868*/
			$k[$j++] = Infinity; /*23869*/
			var _88 = $k[--$j]; /*23869*/
			var _89 = $k[--$j]; /*23869*/
			$k[$j++] = _88; /*23869*/
			$forall(_89, function() {
				/*23869*/
				var _8A = $k[--$j]; /*23869*/
				$k[$j++] = _8A - 48; /*23869*/
			}); /*23869*/
			var _8B = $a(); /*23869*/
			$puti($1.gpfenc, $1.j, _8B); /*23871*/
			$1.j = _8B.length + $1.j; /*23872*/
		}; /*23873*/
		$k[$j++] = Infinity; /*23876*/
		for (var _8G = 0, _8H = $1.gpf.length; _8G < _8H; _8G++) {
			/*23876*/
			$k[$j++] = 0; /*23876*/
		} /*23876*/
		$k[$j++] = 0; /*23876*/
		$k[$j++] = -1; /*23876*/
		$1.numericruns = $a(); /*23876*/
		$k[$j++] = Infinity; /*23877*/
		for (var _8K = 0, _8L = $1.gpf.length; _8K < _8L; _8K++) {
			/*23877*/
			$k[$j++] = 0; /*23877*/
		} /*23877*/
		$k[$j++] = 0; /*23877*/
		$1.alphanumericruns = $a(); /*23877*/
		$k[$j++] = Infinity; /*23878*/
		for (var _8O = 0, _8P = $1.gpf.length; _8O < _8P; _8O++) {
			/*23878*/
			$k[$j++] = 0; /*23878*/
		} /*23878*/
		$k[$j++] = 9999; /*23878*/
		$1.nextiso646only = $a(); /*23878*/
		for (var _8S = $1.gpf.length - 1; _8S >= 0; _8S -= 1) {
			/*23900*/
			$1.i = _8S; /*23880*/
			var _8X = $strcpy($s(2), "00"); /*23882*/
			var _8a = $get($1.gpf, $1.i); /*23883*/
			$k[$j++] = $get($1.gpf, $1.i); /*23883*/
			$k[$j++] = _8X; /*23883*/
			$k[$j++] = _8X; /*23883*/
			$k[$j++] = 0; /*23883*/
			$k[$j++] = _8a; /*23883*/
			if (_8a == $1.fnc1) { //no-else/*23883*/
				$j--; /*23883*/
				$k[$j++] = 94; /*23883*/
			} /*23883*/
			var _8c = $k[--$j]; /*23883*/
			var _8d = $k[--$j]; /*23883*/
			$put($k[--$j], _8d, _8c); /*23883*/
			if ($1.i < ($1.gpf.length - 1)) { //no-else/*23884*/
				var _8h = $k[--$j]; /*23884*/
				var _8k = $get($1.gpf, $1.i + 1); /*23884*/
				$k[$j++] = _8h; /*23884*/
				$k[$j++] = _8h; /*23884*/
				$k[$j++] = 1; /*23884*/
				$k[$j++] = _8k; /*23884*/
				if (_8k == $1.fnc1) { //no-else/*23884*/
					$j--; /*23884*/
					$k[$j++] = 94; /*23884*/
				} /*23884*/
				var _8m = $k[--$j]; /*23884*/
				var _8n = $k[--$j]; /*23884*/
				$put($k[--$j], _8n, _8m); /*23884*/
			} /*23884*/
			var _8r = $get($1.numeric, $k[--$j]) !== undefined; /*23885*/
			if (_8r) {
				/*23888*/
				$put($1.numericruns, $1.i, $get($1.numericruns, $1.i + 2) + 2); /*23886*/
			} else {
				/*23888*/
				$put($1.numericruns, $1.i, 0); /*23888*/
			} /*23888*/
			var _8z = $k[--$j]; /*23890*/
			var _91 = $get($1.alphanumeric, _8z) !== undefined; /*23890*/
			$k[$j++] = _8z; /*23894*/
			if (_91) {
				/*23893*/
				$put($1.alphanumericruns, $1.i, $get($1.alphanumericruns, $1.i + 1) + 1); /*23891*/
			} else {
				/*23893*/
				$put($1.alphanumericruns, $1.i, 0); /*23893*/
			} /*23893*/
			var _99 = $k[--$j]; /*23895*/
			var _9B = $get($1.iso646, _99) !== undefined; /*23895*/
			var _9D = $get($1.alphanumeric, _99) !== undefined; /*23895*/
			if (_9B && (!_9D)) {
				/*23898*/
				$put($1.nextiso646only, $1.i, 0); /*23896*/
			} else {
				/*23898*/
				$put($1.nextiso646only, $1.i, $get($1.nextiso646only, $1.i + 1) + 1); /*23898*/
			} /*23898*/
		} /*23898*/
		$1.gpfenc = $a(8296); /*23903*/
		$1.i = 0; /*23904*/
		$1.j = 0; /*23904*/
		for (;;) {
			/*23994*/
			if ($1.i == $1.gpf.length) { //no-else/*23906*/
				break; /*23906*/
			} /*23906*/
			for (;;) {
				/*23993*/
				if ($eq($1.mode, "numeric")) { //no-else/*23942*/
					if ($1.i <= ($1.gpf.length - 2)) {
						/*23939*/
						var _9R = $s(2); /*23911*/
						var _9U = $get($1.gpf, $1.i); /*23912*/
						$k[$j++] = _9R; /*23912*/
						$k[$j++] = _9R; /*23912*/
						$k[$j++] = 0; /*23912*/
						$k[$j++] = _9U; /*23912*/
						if (_9U == $1.fnc1) { //no-else/*23912*/
							$j--; /*23912*/
							$k[$j++] = 94; /*23912*/
						} /*23912*/
						var _9W = $k[--$j]; /*23912*/
						var _9X = $k[--$j]; /*23912*/
						$put($k[--$j], _9X, _9W); /*23912*/
						var _9Z = $k[--$j]; /*23913*/
						var _9c = $get($1.gpf, $1.i + 1); /*23913*/
						$k[$j++] = _9Z; /*23913*/
						$k[$j++] = _9Z; /*23913*/
						$k[$j++] = 1; /*23913*/
						$k[$j++] = _9c; /*23913*/
						if (_9c == $1.fnc1) { //no-else/*23913*/
							$j--; /*23913*/
							$k[$j++] = 94; /*23913*/
						} /*23913*/
						var _9e = $k[--$j]; /*23913*/
						var _9f = $k[--$j]; /*23913*/
						$put($k[--$j], _9f, _9e); /*23913*/
						var _9h = $k[--$j]; /*23914*/
						var _9j = $get($1.numeric, _9h) !== undefined; /*23914*/
						$k[$j++] = _9h; /*23918*/
						if (_9j) { //no-else/*23918*/
							$k[$j++] = $1.numeric; /*23915*/
							$1.encode(); /*23915*/
							$1.i = $1.i + 2; /*23916*/
							break; /*23917*/
						} /*23917*/
						$j--; /*23919*/
						$k[$j++] = $1.lalphanumeric; /*23920*/
						$k[$j++] = $1.numeric; /*23920*/
						$1.encode(); /*23920*/
						$1.mode = "alphanumeric"; /*23921*/
						break; /*23922*/
					} else {
						/*23939*/
						var _9q = $get($1.gpf, $1.i); /*23924*/
						if ((_9q < 48) || (_9q > 57)) { //no-else/*23928*/
							$k[$j++] = $1.lalphanumeric; /*23925*/
							$k[$j++] = $1.numeric; /*23925*/
							$1.encode(); /*23925*/
							$1.mode = "alphanumeric"; /*23926*/
							break; /*23927*/
						} /*23927*/
						$k[$j++] = 'rem'; /*23929*/
						$k[$j++] = $1.cdf.length + $1.j; /*23929*/
						$1.rembits(); /*23929*/
						var _9v = $k[--$j]; /*23929*/
						$1[$k[--$j]] = _9v; /*23929*/
						if (($1.rem >= 4) && ($1.rem <= 6)) {
							/*23939*/
							var _A2 = $geti($strcpy($s(6), "000000"), 0, $1.rem); /*23931*/
							var _A7 = $cvrs($s(4), $get($1.gpf, $1.i) - 47, 2); /*23932*/
							$puti(_A2, 4 - _A7.length, _A7); /*23933*/
							$k[$j++] = _A2; /*23933*/
							$k[$j++] = 'raw'; /*23933*/
							$1.encode(); /*23933*/
							$1.i = $1.i + 1; /*23934*/
							break; /*23935*/
						} else {
							/*23939*/
							var _A9 = $s(2); /*23937*/
							$put(_A9, 0, $get($1.gpf, $1.i)); /*23937*/
							$put(_A9, 1, 94); /*23937*/
							$k[$j++] = _A9; /*23937*/
							$k[$j++] = $1.numeric; /*23937*/
							$1.encode(); /*23937*/
							$1.i = $1.i + 1; /*23938*/
							break; /*23939*/
						} /*23939*/
					} /*23939*/
				} /*23939*/
				if ($eq($1.mode, "alphanumeric")) { //no-else/*23969*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*23950*/
						$k[$j++] = $1.fnc1; /*23946*/
						$k[$j++] = $1.alphanumeric; /*23946*/
						$1.encode(); /*23946*/
						$1.mode = "numeric"; /*23947*/
						$1.i = $1.i + 1; /*23948*/
						break; /*23949*/
					} /*23949*/
					var _AP = $get($1.gpf, $1.i); /*23951*/
					var _AR = $get($1.iso646, _AP) !== undefined; /*23951*/
					var _AT = $get($1.alphanumeric, _AP) !== undefined; /*23951*/
					if (_AR && (!_AT)) { //no-else/*23955*/
						$k[$j++] = $1.liso646; /*23952*/
						$k[$j++] = $1.alphanumeric; /*23952*/
						$1.encode(); /*23952*/
						$1.mode = "iso646"; /*23953*/
						break; /*23954*/
					} /*23954*/
					if ($get($1.numericruns, $1.i) >= 6) { //no-else/*23960*/
						$k[$j++] = $1.lnumeric; /*23957*/
						$k[$j++] = $1.alphanumeric; /*23957*/
						$1.encode(); /*23957*/
						$1.mode = "numeric"; /*23958*/
						break; /*23959*/
					} /*23959*/
					var _Ad = $get($1.numericruns, $1.i); /*23961*/
					if ((_Ad >= 4) && ((_Ad + $1.i) == $1.gpf.length)) { //no-else/*23965*/
						$k[$j++] = $1.lnumeric; /*23962*/
						$k[$j++] = $1.alphanumeric; /*23962*/
						$1.encode(); /*23962*/
						$1.mode = "numeric"; /*23963*/
						break; /*23964*/
					} /*23964*/
					$k[$j++] = $get($1.gpf, $1.i); /*23966*/
					$k[$j++] = $1.alphanumeric; /*23966*/
					$1.encode(); /*23966*/
					$1.i = $1.i + 1; /*23967*/
					break; /*23968*/
				} /*23968*/
				if ($eq($1.mode, "iso646")) { //no-else/*23991*/
					if ($get($1.gpf, $1.i) == $1.fnc1) { //no-else/*23977*/
						$k[$j++] = $1.fnc1; /*23973*/
						$k[$j++] = $1.iso646; /*23973*/
						$1.encode(); /*23973*/
						$1.mode = "numeric"; /*23974*/
						$1.i = $1.i + 1; /*23975*/
						break; /*23976*/
					} /*23976*/
					if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*23982*/
						$k[$j++] = $1.lnumeric; /*23979*/
						$k[$j++] = $1.iso646; /*23979*/
						$1.encode(); /*23979*/
						$1.mode = "numeric"; /*23980*/
						break; /*23981*/
					} /*23981*/
					if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //no-else/*23987*/
						$k[$j++] = $1.lalphanumeric; /*23984*/
						$k[$j++] = $1.iso646; /*23984*/
						$1.encode(); /*23984*/
						$1.mode = "alphanumeric"; /*23985*/
						break; /*23986*/
					} /*23986*/
					$k[$j++] = $get($1.gpf, $1.i); /*23988*/
					$k[$j++] = $1.iso646; /*23988*/
					$1.encode(); /*23988*/
					$1.i = $1.i + 1; /*23989*/
					break; /*23990*/
				} /*23990*/
			} /*23990*/
		} /*23990*/
		$1.gpf = $geti($1.gpfenc, 0, $1.j); /*23995*/
		$k[$j++] = 'pad'; /*23998*/
		$k[$j++] = $1.cdf.length + $1.gpf.length; /*23998*/
		$1.rembits(); /*23998*/
		var _BM = $a($k[--$j]); /*23998*/
		$1[$k[--$j]] = _BM; /*23998*/
		if ($1.pad.length > 0) { //no-else/*24010*/
			for (var _BR = 0, _BQ = $1.pad.length - 1; _BR <= _BQ; _BR += 5) {
				/*24003*/
				$1.i = _BR; /*24001*/
				var _BS = $1.pad; /*24002*/
				var _BT = $1.i; /*24002*/
				var _BU = $a([0, 0, 1, 0, 0]); /*24002*/
				var _BV = $1.pad; /*24002*/
				var _BW = $1.i; /*24002*/
				var _BX = 5; /*24002*/
				var _BY = _BV.length - _BW; /*24002*/
				if ((_BV.length - _BW) > 5) { //no-else/*24002*/
					var _ = _BX; /*24002*/
					_BX = _BY; /*24002*/
					_BY = _; /*24002*/
				} /*24002*/
				$puti(_BS, _BT, $geti(_BU, 0, _BY)); /*24002*/
			} /*24002*/
			if ($eq($1.mode, "numeric")) { //no-else/*24006*/
				$k[$j++] = Infinity; /*24005*/
				$k[$j++] = 0; /*24005*/
				$k[$j++] = 0; /*24005*/
				$k[$j++] = 0; /*24005*/
				$k[$j++] = 0; /*24005*/
				$aload($1.pad); /*24005*/
				$1.pad = $geti($a(), 0, $1.pad.length); /*24005*/
			} /*24005*/
			if ($eq($1.mode, "alpha")) { //no-else/*24009*/
				$k[$j++] = Infinity; /*24008*/
				$k[$j++] = 1; /*24008*/
				$k[$j++] = 1; /*24008*/
				$k[$j++] = 1; /*24008*/
				$k[$j++] = 1; /*24008*/
				$k[$j++] = 1; /*24008*/
				$aload($1.pad); /*24008*/
				$1.pad = $geti($a(), 0, $1.pad.length); /*24008*/
			} /*24008*/
		} /*24008*/
		$k[$j++] = Infinity; /*24017*/
		$aload($1.cdf); /*24014*/
		$aload($1.gpf); /*24015*/
		$aload($1.pad); /*24016*/
		$1.bits = $a(); /*24017*/
		if ($1.ccversion == "a") { //no-else/*24072*/
			$k[$j++] = Infinity; /*24023*/
			$k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); /*24022*/
			for (var _Bq = 0, _Br = 68; _Bq < _Br; _Bq++) {
				/*24022*/
				$k[$j++] = $a(7); /*24022*/
			} /*24022*/
			$1.pwr928 = $a(); /*24023*/
			for (var _Bu = 1; _Bu <= 68; _Bu += 1) {
				/*24033*/
				$1.j = _Bu; /*24025*/
				$1.v = 0; /*24026*/
				for (var _Bv = 6; _Bv >= 1; _Bv -= 1) {
					/*24031*/
					$1.i = _Bv; /*24028*/
					$1.v = ($get($get($1.pwr928, $1.j - 1), $1.i) * 2) + (~~($1.v / 928)); /*24029*/
					$put($get($1.pwr928, $1.j), $1.i, $1.v % 928); /*24030*/
				} /*24030*/
				$put($get($1.pwr928, $1.j), 0, ($get($get($1.pwr928, $1.j - 1), 0) * 2) + (~~($1.v / 928))); /*24032*/
			} /*24032*/
			$k[$j++] = Infinity; /*24034*/
			for (var _CF = 0, _CG = 28; _CF < _CG; _CF++) {
				/*24034*/
				$k[$j++] = 0; /*24034*/
			} /*24034*/
			$1.cws = $a(); /*24034*/
			$1.b = 0; /*24035*/
			$1.c = 0; /*24035*/
			for (;;) {
				/*24059*/
				if ($1.b == $1.bits.length) { //no-else/*24037*/
					break; /*24037*/
				} /*24037*/
				var _CK = $1.bits; /*24038*/
				var _CL = $1.b; /*24038*/
				var _CM = $1.bits; /*24038*/
				var _CN = $1.b; /*24038*/
				var _CO = _CM.length - _CN; /*24038*/
				var _CP = 69; /*24038*/
				if (69 > (_CM.length - _CN)) { //no-else/*24038*/
					var _ = _CO; /*24038*/
					_CO = _CP; /*24038*/
					_CP = _; /*24038*/
				} /*24038*/
				$1.bs = $geti(_CK, _CL, _CP); /*24038*/
				$1.bsl = $1.bs.length; /*24039*/
				$1.cs = $geti($1.cws, $1.c, (~~($1.bsl / 10)) + 1); /*24040*/
				$1.csl = $1.cs.length; /*24041*/
				for (var _CZ = 0, _CY = $1.bsl - 1; _CZ <= _CY; _CZ += 1) {
					/*24051*/
					$1.i = _CZ; /*24043*/
					for (var _Cc = 0, _Cb = $1.csl - 1; _Cc <= _Cb; _Cc += 1) {
						/*24050*/
						$1.j = _Cc; /*24045*/
						var _Cd = $1.cs; /*24046*/
						var _Ce = $1.j; /*24046*/
						$put(_Cd, _Ce, $get(_Cd, _Ce) + ($get($get($1.pwr928, $1.i), ($1.j + 7) - $1.csl) * $get($1.bs, ($1.bsl - $1.i) - 1))); /*24049*/
					} /*24049*/
				} /*24049*/
				for (var _Cr = $1.csl - 1; _Cr >= 1; _Cr -= 1) {
					/*24056*/
					$1.i = _Cr; /*24053*/
					var _Cs = $1.cs; /*24054*/
					var _Ct = $1.i; /*24054*/
					$put(_Cs, _Ct - 1, $get(_Cs, _Ct - 1) + (~~($get($1.cs, $1.i) / 928))); /*24054*/
					var _Cy = $1.cs; /*24055*/
					var _Cz = $1.i; /*24055*/
					$put(_Cy, _Cz, $get(_Cy, _Cz) % 928); /*24055*/
				} /*24055*/
				$1.b = $1.b + $1.bsl; /*24057*/
				$1.c = $1.c + $1.csl; /*24058*/
			} /*24058*/
			$1.cws = $geti($1.cws, 0, $1.c); /*24060*/
			$1.barcode = $s($1.cws.length * 4); /*24061*/
			for (var _DC = 0, _DB = $1.cws.length - 1; _DC <= _DB; _DC += 1) {
				/*24067*/
				$1.i = _DC; /*24063*/
				var _DE = $strcpy($s(4), "^   "); /*24064*/
				var _DJ = $cvrs($s(4), $get($1.cws, $1.i), 10); /*24064*/
				$puti(_DE, 4 - _DJ.length, _DJ); /*24065*/
				$puti($1.barcode, $1.i * 4, _DE); /*24066*/
			} /*24066*/
			$put($1.options, "dontdraw", true); /*24068*/
			$put($1.options, "cca", true); /*24069*/
			$put($1.options, "columns", $1.cccolumns); /*24070*/
			$k[$j++] = 'args'; /*24071*/
			$k[$j++] = $1.barcode; /*24071*/
			$k[$j++] = $1.options; /*24071*/
			$0.micropdf417(); /*24071*/
			var _DS = $k[--$j]; /*24071*/
			$1[$k[--$j]] = _DS; /*24071*/
		} /*24071*/
		if ($1.ccversion == "b") { //no-else/*24085*/
			$1.barcode = $s(~~($1.bits.length / 8)); /*24075*/
			for (var _DZ = 0, _DY = $1.barcode.length - 1; _DZ <= _DY; _DZ += 1) {
				/*24080*/
				$1.i = _DZ; /*24077*/
				$k[$j++] = 0; /*24078*/
				$forall($geti($1.bits, $1.i * 8, 8), function() {
					/*24078*/
					var _Dd = $k[--$j]; /*24078*/
					var _De = $k[--$j]; /*24078*/
					$k[$j++] = (_De + _Dd) * 2; /*24078*/
				}); /*24078*/
				$put($1.barcode, $1.i, ~~($k[--$j] / 2)); /*24079*/
			} /*24079*/
			$put($1.options, "dontdraw", true); /*24081*/
			$put($1.options, "ccb", true); /*24082*/
			$put($1.options, "columns", $1.cccolumns); /*24083*/
			$k[$j++] = 'args'; /*24084*/
			$k[$j++] = $1.barcode; /*24084*/
			$k[$j++] = $1.options; /*24084*/
			$0.micropdf417(); /*24084*/
			var _Do = $k[--$j]; /*24084*/
			$1[$k[--$j]] = _Do; /*24084*/
		} /*24084*/
		if ($1.ccversion == "c") { //no-else/*24098*/
			$1.barcode = $s(~~($1.bits.length / 8)); /*24088*/
			for (var _Dv = 0, _Du = $1.barcode.length - 1; _Dv <= _Du; _Dv += 1) {
				/*24093*/
				$1.i = _Dv; /*24090*/
				$k[$j++] = 0; /*24091*/
				$forall($geti($1.bits, $1.i * 8, 8), function() {
					/*24091*/
					var _Dz = $k[--$j]; /*24091*/
					var _E0 = $k[--$j]; /*24091*/
					$k[$j++] = (_E0 + _Dz) * 2; /*24091*/
				}); /*24091*/
				$put($1.barcode, $1.i, ~~($k[--$j] / 2)); /*24092*/
			} /*24092*/
			$put($1.options, "dontdraw", true); /*24094*/
			$put($1.options, "ccc", true); /*24095*/
			$put($1.options, "columns", $1.cccolumns); /*24096*/
			$k[$j++] = 'args'; /*24097*/
			$k[$j++] = $1.barcode; /*24097*/
			$k[$j++] = $1.options; /*24097*/
			$0.pdf417(); /*24097*/
			var _EA = $k[--$j]; /*24097*/
			$1[$k[--$j]] = _EA; /*24097*/
		} /*24097*/
		$k[$j++] = $1.args; /*24101*/
		if (!$1.dontdraw) { //no-else/*24101*/
			$0.renmatrix(); /*24101*/
		} /*24101*/
	};
	$0.ean13composite = function() {
		var $1 = {}; /*24133*/
		$1.options = $k[--$j]; /*24135*/
		$1.barcode = $k[--$j]; /*24136*/
		$1.dontdraw = false; /*24138*/
		$forall($1.options, function() {
			/*24149*/
			var _3 = $k[--$j]; /*24149*/
			$1[$k[--$j]] = _3; /*24149*/
		}); /*24149*/
		$search($1.barcode, "|"); /*24152*/
		if ($k[--$j]) {
			/*24157*/
			$1.linear = $k[--$j]; /*24153*/
			$j--; /*24154*/
			$1.comp = $k[--$j]; /*24155*/
		} else {
			/*24157*/
			$j--; /*24157*/
		} /*24157*/
		$$.save(); /*24160*/
		$put($1.options, "lintype", "ean13"); /*24162*/
		$put($1.options, "inkspread", "0"); /*24163*/
		$put($1.options, "dontdraw", true); /*24164*/
		$k[$j++] = $1.linear; /*24167*/
		$k[$j++] = $1.options; /*24167*/
		$0.ean13(); /*24167*/
		$0.renlinear(); /*24167*/
		$$.rmoveto(-1, 72); /*24170*/
		$k[$j++] = Infinity; /*24181*/
		$k[$j++] = Infinity; /*24177*/
		$k[$j++] = 0; /*24173*/
		$k[$j++] = 1; /*24173*/
		for (var _E = 0, _F = 93; _E < _F; _E++) {
			/*24173*/
			$k[$j++] = 0; /*24173*/
		} /*24173*/
		$k[$j++] = 1; /*24174*/
		$k[$j++] = 0; /*24174*/
		$k[$j++] = 1; /*24174*/
		$k[$j++] = 0; /*24174*/
		for (var _G = 0, _H = 93; _G < _H; _G++) {
			/*24174*/
			$k[$j++] = 0; /*24174*/
		} /*24174*/
		$k[$j++] = 0; /*24175*/
		$k[$j++] = 1; /*24175*/
		$k[$j++] = 0; /*24175*/
		$k[$j++] = 1; /*24175*/
		for (var _I = 0, _J = 93; _I < _J; _I++) {
			/*24175*/
			$k[$j++] = 0; /*24175*/
		} /*24175*/
		$k[$j++] = 1; /*24175*/
		$k[$j++] = 0; /*24175*/
		var _K = $a(); /*24177*/
		$k[$j++] = 'ren'; /*24181*/
		$k[$j++] = $0.renmatrix; /*24181*/
		$k[$j++] = 'pixs'; /*24181*/
		$k[$j++] = _K; /*24181*/
		$k[$j++] = 'pixx'; /*24181*/
		$k[$j++] = 97; /*24181*/
		$k[$j++] = 'pixy'; /*24181*/
		$k[$j++] = 3; /*24181*/
		$k[$j++] = 'height'; /*24181*/
		$k[$j++] = 6 / 72; /*24181*/
		$k[$j++] = 'width'; /*24181*/
		$k[$j++] = 97 / 72; /*24181*/
		$k[$j++] = 'opt'; /*24181*/
		$k[$j++] = $1.options; /*24181*/
		var _M = $d(); /*24181*/
		$k[$j++] = _M; /*24182*/
		$0.renmatrix(); /*24182*/
		$$.rmoveto(-2, 6); /*24185*/
		$k[$j++] = $1.comp; /*24185*/
		$k[$j++] = $1.options; /*24185*/
		$0["gs1-cc"](); /*24185*/
		$0.renmatrix(); /*24185*/
		$$.restore(); /*24187*/
	};
	$0.ean8composite = function() {
		var $1 = {}; /*24219*/
		$1.options = $k[--$j]; /*24221*/
		$1.barcode = $k[--$j]; /*24222*/
		$1.dontdraw = false; /*24224*/
		$forall($1.options, function() {
			/*24235*/
			var _3 = $k[--$j]; /*24235*/
			$1[$k[--$j]] = _3; /*24235*/
		}); /*24235*/
		$search($1.barcode, "|"); /*24238*/
		if ($k[--$j]) {
			/*24243*/
			$1.linear = $k[--$j]; /*24239*/
			$j--; /*24240*/
			$1.comp = $k[--$j]; /*24241*/
		} else {
			/*24243*/
			$j--; /*24243*/
		} /*24243*/
		$$.save(); /*24246*/
		$put($1.options, "lintype", "ean8"); /*24249*/
		$put($1.options, "inkspread", "0"); /*24250*/
		$put($1.options, "dontdraw", true); /*24251*/
		$k[$j++] = $1.linear; /*24254*/
		$k[$j++] = $1.options; /*24254*/
		$0.ean8(); /*24254*/
		$0.renlinear(); /*24254*/
		$$.rmoveto(-1, 72); /*24257*/
		$k[$j++] = Infinity; /*24268*/
		$k[$j++] = Infinity; /*24264*/
		$k[$j++] = 0; /*24260*/
		$k[$j++] = 1; /*24260*/
		for (var _E = 0, _F = 65; _E < _F; _E++) {
			/*24260*/
			$k[$j++] = 0; /*24260*/
		} /*24260*/
		$k[$j++] = 1; /*24261*/
		$k[$j++] = 0; /*24261*/
		$k[$j++] = 1; /*24261*/
		$k[$j++] = 0; /*24261*/
		for (var _G = 0, _H = 65; _G < _H; _G++) {
			/*24261*/
			$k[$j++] = 0; /*24261*/
		} /*24261*/
		$k[$j++] = 0; /*24262*/
		$k[$j++] = 1; /*24262*/
		$k[$j++] = 0; /*24262*/
		$k[$j++] = 1; /*24262*/
		for (var _I = 0, _J = 65; _I < _J; _I++) {
			/*24262*/
			$k[$j++] = 0; /*24262*/
		} /*24262*/
		$k[$j++] = 1; /*24262*/
		$k[$j++] = 0; /*24262*/
		var _K = $a(); /*24264*/
		$k[$j++] = 'ren'; /*24268*/
		$k[$j++] = $0.renmatrix; /*24268*/
		$k[$j++] = 'pixs'; /*24268*/
		$k[$j++] = _K; /*24268*/
		$k[$j++] = 'pixx'; /*24268*/
		$k[$j++] = 69; /*24268*/
		$k[$j++] = 'pixy'; /*24268*/
		$k[$j++] = 3; /*24268*/
		$k[$j++] = 'height'; /*24268*/
		$k[$j++] = 6 / 72; /*24268*/
		$k[$j++] = 'width'; /*24268*/
		$k[$j++] = 69 / 72; /*24268*/
		$k[$j++] = 'opt'; /*24268*/
		$k[$j++] = $1.options; /*24268*/
		var _M = $d(); /*24268*/
		$k[$j++] = _M; /*24269*/
		$0.renmatrix(); /*24269*/
		$k[$j++] = $1.comp; /*24272*/
		$k[$j++] = $1.options; /*24272*/
		$0["gs1-cc"](); /*24272*/
		var _P = $k[--$j]; /*24273*/
		$$.rmoveto(69 - $get(_P, "pixx"), 6); /*24273*/
		$k[$j++] = _P; /*24274*/
		$0.renmatrix(); /*24274*/
		$$.restore(); /*24276*/
	};
	$0.upcacomposite = function() {
		var $1 = {}; /*24308*/
		$1.options = $k[--$j]; /*24310*/
		$1.barcode = $k[--$j]; /*24311*/
		$1.dontdraw = false; /*24313*/
		$forall($1.options, function() {
			/*24324*/
			var _3 = $k[--$j]; /*24324*/
			$1[$k[--$j]] = _3; /*24324*/
		}); /*24324*/
		$search($1.barcode, "|"); /*24327*/
		if ($k[--$j]) {
			/*24332*/
			$1.linear = $k[--$j]; /*24328*/
			$j--; /*24329*/
			$1.comp = $k[--$j]; /*24330*/
		} else {
			/*24332*/
			$j--; /*24332*/
		} /*24332*/
		$$.save(); /*24335*/
		$put($1.options, "lintype", "ean13"); /*24337*/
		$put($1.options, "inkspread", "0"); /*24338*/
		$put($1.options, "dontdraw", true); /*24339*/
		$k[$j++] = $1.linear; /*24342*/
		$k[$j++] = $1.options; /*24342*/
		$0.upca(); /*24342*/
		$0.renlinear(); /*24342*/
		$$.rmoveto(-1, 72); /*24345*/
		$k[$j++] = Infinity; /*24356*/
		$k[$j++] = Infinity; /*24352*/
		$k[$j++] = 0; /*24348*/
		$k[$j++] = 1; /*24348*/
		for (var _E = 0, _F = 93; _E < _F; _E++) {
			/*24348*/
			$k[$j++] = 0; /*24348*/
		} /*24348*/
		$k[$j++] = 1; /*24349*/
		$k[$j++] = 0; /*24349*/
		$k[$j++] = 1; /*24349*/
		$k[$j++] = 0; /*24349*/
		for (var _G = 0, _H = 93; _G < _H; _G++) {
			/*24349*/
			$k[$j++] = 0; /*24349*/
		} /*24349*/
		$k[$j++] = 0; /*24350*/
		$k[$j++] = 1; /*24350*/
		$k[$j++] = 0; /*24350*/
		$k[$j++] = 1; /*24350*/
		for (var _I = 0, _J = 93; _I < _J; _I++) {
			/*24350*/
			$k[$j++] = 0; /*24350*/
		} /*24350*/
		$k[$j++] = 1; /*24350*/
		$k[$j++] = 0; /*24350*/
		var _K = $a(); /*24352*/
		$k[$j++] = 'ren'; /*24356*/
		$k[$j++] = $0.renmatrix; /*24356*/
		$k[$j++] = 'pixs'; /*24356*/
		$k[$j++] = _K; /*24356*/
		$k[$j++] = 'pixx'; /*24356*/
		$k[$j++] = 97; /*24356*/
		$k[$j++] = 'pixy'; /*24356*/
		$k[$j++] = 3; /*24356*/
		$k[$j++] = 'height'; /*24356*/
		$k[$j++] = 6 / 72; /*24356*/
		$k[$j++] = 'width'; /*24356*/
		$k[$j++] = 97 / 72; /*24356*/
		$k[$j++] = 'opt'; /*24356*/
		$k[$j++] = $1.options; /*24356*/
		var _M = $d(); /*24356*/
		$k[$j++] = _M; /*24357*/
		$0.renmatrix(); /*24357*/
		$$.rmoveto(-2, 6); /*24360*/
		$k[$j++] = $1.comp; /*24360*/
		$k[$j++] = $1.options; /*24360*/
		$0["gs1-cc"](); /*24360*/
		$0.renmatrix(); /*24360*/
		$$.restore(); /*24362*/
	};
	$0.upcecomposite = function() {
		var $1 = {}; /*24394*/
		$1.options = $k[--$j]; /*24396*/
		$1.barcode = $k[--$j]; /*24397*/
		$1.dontdraw = false; /*24399*/
		$forall($1.options, function() {
			/*24410*/
			var _3 = $k[--$j]; /*24410*/
			$1[$k[--$j]] = _3; /*24410*/
		}); /*24410*/
		$search($1.barcode, "|"); /*24413*/
		if ($k[--$j]) {
			/*24418*/
			$1.linear = $k[--$j]; /*24414*/
			$j--; /*24415*/
			$1.comp = $k[--$j]; /*24416*/
		} else {
			/*24418*/
			$j--; /*24418*/
		} /*24418*/
		$k[$j++] = Infinity; /*24433*/
		$k[$j++] = Infinity; /*24429*/
		$k[$j++] = 0; /*24425*/
		$k[$j++] = 1; /*24425*/
		for (var _9 = 0, _A = 49; _9 < _A; _9++) {
			/*24425*/
			$k[$j++] = 0; /*24425*/
		} /*24425*/
		$k[$j++] = 1; /*24426*/
		$k[$j++] = 0; /*24426*/
		$k[$j++] = 1; /*24426*/
		$k[$j++] = 0; /*24426*/
		for (var _B = 0, _C = 49; _B < _C; _B++) {
			/*24426*/
			$k[$j++] = 0; /*24426*/
		} /*24426*/
		$k[$j++] = 0; /*24427*/
		$k[$j++] = 1; /*24427*/
		$k[$j++] = 0; /*24427*/
		$k[$j++] = 1; /*24427*/
		for (var _D = 0, _E = 49; _D < _E; _D++) {
			/*24427*/
			$k[$j++] = 0; /*24427*/
		} /*24427*/
		$k[$j++] = 1; /*24427*/
		$k[$j++] = 0; /*24427*/
		var _F = $a(); /*24429*/
		$k[$j++] = 'ren'; /*24433*/
		$k[$j++] = $0.renmatrix; /*24433*/
		$k[$j++] = 'pixs'; /*24433*/
		$k[$j++] = _F; /*24433*/
		$k[$j++] = 'pixx'; /*24433*/
		$k[$j++] = 53; /*24433*/
		$k[$j++] = 'pixy'; /*24433*/
		$k[$j++] = 3; /*24433*/
		$k[$j++] = 'height'; /*24433*/
		$k[$j++] = 6 / 72; /*24433*/
		$k[$j++] = 'width'; /*24433*/
		$k[$j++] = 53 / 72; /*24433*/
		$k[$j++] = 'opt'; /*24433*/
		$k[$j++] = $1.options; /*24433*/
		$1.sep = $d(); /*24434*/
		$$.save(); /*24436*/
		$put($1.options, "lintype", "upce"); /*24438*/
		$put($1.options, "inkspread", "0"); /*24439*/
		$put($1.options, "dontdraw", true); /*24440*/
		$k[$j++] = $1.linear; /*24443*/
		$k[$j++] = $1.options; /*24443*/
		$0.upce(); /*24443*/
		$0.renlinear(); /*24443*/
		$$.rmoveto(-1, 72); /*24446*/
		$k[$j++] = Infinity; /*24457*/
		$k[$j++] = Infinity; /*24453*/
		$k[$j++] = 0; /*24449*/
		$k[$j++] = 1; /*24449*/
		for (var _N = 0, _O = 49; _N < _O; _N++) {
			/*24449*/
			$k[$j++] = 0; /*24449*/
		} /*24449*/
		$k[$j++] = 1; /*24450*/
		$k[$j++] = 0; /*24450*/
		$k[$j++] = 1; /*24450*/
		$k[$j++] = 0; /*24450*/
		for (var _P = 0, _Q = 49; _P < _Q; _P++) {
			/*24450*/
			$k[$j++] = 0; /*24450*/
		} /*24450*/
		$k[$j++] = 0; /*24451*/
		$k[$j++] = 1; /*24451*/
		$k[$j++] = 0; /*24451*/
		$k[$j++] = 1; /*24451*/
		for (var _R = 0, _S = 49; _R < _S; _R++) {
			/*24451*/
			$k[$j++] = 0; /*24451*/
		} /*24451*/
		$k[$j++] = 1; /*24451*/
		$k[$j++] = 0; /*24451*/
		var _T = $a(); /*24453*/
		$k[$j++] = 'ren'; /*24457*/
		$k[$j++] = $0.renmatrix; /*24457*/
		$k[$j++] = 'pixs'; /*24457*/
		$k[$j++] = _T; /*24457*/
		$k[$j++] = 'pixx'; /*24457*/
		$k[$j++] = 53; /*24457*/
		$k[$j++] = 'pixy'; /*24457*/
		$k[$j++] = 3; /*24457*/
		$k[$j++] = 'height'; /*24457*/
		$k[$j++] = 6 / 72; /*24457*/
		$k[$j++] = 'width'; /*24457*/
		$k[$j++] = 53 / 72; /*24457*/
		$k[$j++] = 'opt'; /*24457*/
		$k[$j++] = $1.options; /*24457*/
		var _V = $d(); /*24457*/
		$k[$j++] = _V; /*24458*/
		$0.renmatrix(); /*24458*/
		$$.rmoveto(-2, 6); /*24461*/
		$k[$j++] = $1.comp; /*24461*/
		$k[$j++] = $1.options; /*24461*/
		$0["gs1-cc"](); /*24461*/
		$0.renmatrix(); /*24461*/
		$$.restore(); /*24463*/
	};
	$0.databaromnicomposite = function() {
		var $1 = {}; /*24495*/
		$1.options = $k[--$j]; /*24497*/
		$1.barcode = $k[--$j]; /*24498*/
		$1.dontdraw = false; /*24500*/
		$forall($1.options, function() {
			/*24511*/
			var _3 = $k[--$j]; /*24511*/
			$1[$k[--$j]] = _3; /*24511*/
		}); /*24511*/
		$search($1.barcode, "|"); /*24514*/
		if ($k[--$j]) {
			/*24519*/
			$1.linear = $k[--$j]; /*24515*/
			$j--; /*24516*/
			$1.comp = $k[--$j]; /*24517*/
		} else {
			/*24519*/
			$j--; /*24519*/
		} /*24519*/
		$$.save(); /*24522*/
		$put($1.options, "lintype", "databaromni"); /*24524*/
		$put($1.options, "linkage", true); /*24525*/
		$put($1.options, "inkspread", "0"); /*24526*/
		$put($1.options, "dontdraw", true); /*24527*/
		$k[$j++] = $1.linear; /*24530*/
		$k[$j++] = $1.options; /*24530*/
		$0.databaromni(); /*24530*/
		var _F = $k[--$j]; /*24531*/
		$1.linsbs = $get(_F, "sbs"); /*24531*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*24532*/
		$k[$j++] = _F; /*24533*/
		$0.renlinear(); /*24533*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*24537*/
			for (var _N = $1.fp, _M = $1.fp + 12; _N <= _M; _N += 1) {
				/*24550*/
				$1.i = _N; /*24539*/
				if ($get($1.bot, $1.i) == 0) {
					/*24547*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*24544*/
						$k[$j++] = 1; /*24542*/
					} else {
						/*24544*/
						var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*24544*/
						$k[$j++] = _X; /*24544*/
					} /*24544*/
				} else {
					/*24547*/
					$k[$j++] = 0; /*24547*/
				} /*24547*/
				$put($1.sep, $1.i, $k[--$j]); /*24549*/
			} /*24549*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*24551*/
			$k[$j++] = true; /*24552*/
			for (var _c = 0; _c <= 12; _c += 1) {
				/*24552*/
				var _i = $k[--$j]; /*24552*/
				$k[$j++] = _i && $eq($get($1.bot, _c + $1.fp), $get($1.f3, _c)); /*24552*/
			} /*24552*/
			if ($k[--$j]) { //no-else/*24555*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*24554*/
			} /*24554*/
		}; /*24556*/
		$k[$j++] = Infinity; /*24557*/
		$k[$j++] = 0; /*24558*/
		$forall($1.linsbs, function() {
			/*24558*/
			var _o = $k[--$j]; /*24558*/
			var _p = $k[--$j]; /*24558*/
			var _q = (_p == 1) ? 0 : 1; /*24558*/
			$k[$j++] = _p; /*24558*/
			for (var _r = 0, _s = _o; _r < _s; _r++) {
				/*24558*/
				$k[$j++] = _q /*24558*/
			} /*24558*/
		}); /*24558*/
		$astore($a($counttomark() - 1)); /*24559*/
		$1.bot = $k[--$j]; /*24559*/
		$j -= 2; /*24559*/
		$k[$j++] = Infinity; /*24560*/
		$forall($1.bot, function() {
			/*24560*/
			var _x = $k[--$j]; /*24560*/
			$k[$j++] = 1 - _x; /*24560*/
		}); /*24560*/
		$1.sep = $a(); /*24560*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*24561*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*24562*/
		$k[$j++] = 18; /*24563*/
		$1.sepfinder(); /*24563*/
		$k[$j++] = 64; /*24563*/
		$1.sepfinder(); /*24563*/
		$$.rmoveto(0, $1.linheight); /*24564*/
		var _19 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*24571*/
		$k[$j++] = _19; /*24572*/
		$0.renmatrix(); /*24572*/
		$$.rmoveto(-5, 1); /*24575*/
		$k[$j++] = $1.comp; /*24575*/
		$k[$j++] = $1.options; /*24575*/
		$0["gs1-cc"](); /*24575*/
		$0.renmatrix(); /*24575*/
		$$.restore(); /*24577*/
	};
	$0.databarstackedcomposite = function() {
		var $1 = {}; /*24608*/
		$1.options = $k[--$j]; /*24610*/
		$1.barcode = $k[--$j]; /*24611*/
		$1.dontdraw = false; /*24613*/
		$forall($1.options, function() {
			/*24624*/
			var _3 = $k[--$j]; /*24624*/
			$1[$k[--$j]] = _3; /*24624*/
		}); /*24624*/
		$search($1.barcode, "|"); /*24627*/
		if ($k[--$j]) {
			/*24632*/
			$1.linear = $k[--$j]; /*24628*/
			$j--; /*24629*/
			$1.comp = $k[--$j]; /*24630*/
		} else {
			/*24632*/
			$j--; /*24632*/
		} /*24632*/
		$$.save(); /*24635*/
		$put($1.options, "lintype", "databarstacked"); /*24637*/
		$put($1.options, "linkage", true); /*24638*/
		$put($1.options, "inkspread", "0"); /*24639*/
		$put($1.options, "dontdraw", true); /*24640*/
		$k[$j++] = $1.linear; /*24643*/
		$k[$j++] = $1.options; /*24643*/
		$0.databarstacked(); /*24643*/
		var _F = $k[--$j]; /*24644*/
		$1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); /*24644*/
		$1.linheight = $get(_F, "pixy"); /*24645*/
		$k[$j++] = _F; /*24646*/
		$0.renmatrix(); /*24646*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*24650*/
			for (var _O = $1.fp, _N = $1.fp + 12; _O <= _N; _O += 1) {
				/*24663*/
				$1.i = _O; /*24652*/
				if ($get($1.bot, $1.i) == 0) {
					/*24660*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*24657*/
						$k[$j++] = 1; /*24655*/
					} else {
						/*24657*/
						var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*24657*/
						$k[$j++] = _Y; /*24657*/
					} /*24657*/
				} else {
					/*24660*/
					$k[$j++] = 0; /*24660*/
				} /*24660*/
				$put($1.sep, $1.i, $k[--$j]); /*24662*/
			} /*24662*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*24664*/
			$k[$j++] = true; /*24665*/
			for (var _d = 0; _d <= 12; _d += 1) {
				/*24665*/
				var _j = $k[--$j]; /*24665*/
				$k[$j++] = _j && $eq($get($1.bot, _d + $1.fp), $get($1.f3, _d)); /*24665*/
			} /*24665*/
			if ($k[--$j]) { //no-else/*24668*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*24667*/
			} /*24667*/
		}; /*24669*/
		$k[$j++] = Infinity; /*24670*/
		$forall($1.bot, function() {
			/*24670*/
			var _p = $k[--$j]; /*24670*/
			$k[$j++] = 1 - _p; /*24670*/
		}); /*24670*/
		$1.sep = $a(); /*24670*/
		$puti($1.sep, 0, $a([0, 0, 0, 0])); /*24671*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*24672*/
		$k[$j++] = 18; /*24673*/
		$1.sepfinder(); /*24673*/
		$$.rmoveto(0, $1.linheight); /*24674*/
		var _11 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*24681*/
		$k[$j++] = _11; /*24682*/
		$0.renmatrix(); /*24682*/
		$$.rmoveto(1, 1); /*24685*/
		$k[$j++] = $1.comp; /*24685*/
		$k[$j++] = $1.options; /*24685*/
		$0["gs1-cc"](); /*24685*/
		$0.renmatrix(); /*24685*/
		$$.restore(); /*24687*/
	};
	$0.databarstackedomnicomposite = function() {
		var $1 = {}; /*24718*/
		$1.options = $k[--$j]; /*24720*/
		$1.barcode = $k[--$j]; /*24721*/
		$1.dontdraw = false; /*24723*/
		$forall($1.options, function() {
			/*24734*/
			var _3 = $k[--$j]; /*24734*/
			$1[$k[--$j]] = _3; /*24734*/
		}); /*24734*/
		$search($1.barcode, "|"); /*24737*/
		if ($k[--$j]) {
			/*24742*/
			$1.linear = $k[--$j]; /*24738*/
			$j--; /*24739*/
			$1.comp = $k[--$j]; /*24740*/
		} else {
			/*24742*/
			$j--; /*24742*/
		} /*24742*/
		$$.save(); /*24745*/
		$put($1.options, "lintype", "databarstackedomni"); /*24747*/
		$put($1.options, "linkage", true); /*24748*/
		$put($1.options, "inkspread", "0"); /*24749*/
		$put($1.options, "dontdraw", true); /*24750*/
		$k[$j++] = $1.linear; /*24753*/
		$k[$j++] = $1.options; /*24753*/
		$0.databarstackedomni(); /*24753*/
		var _F = $k[--$j]; /*24754*/
		$1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); /*24754*/
		$1.linheight = $get(_F, "pixy"); /*24755*/
		$k[$j++] = _F; /*24756*/
		$0.renmatrix(); /*24756*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*24760*/
			for (var _O = $1.fp, _N = $1.fp + 12; _O <= _N; _O += 1) {
				/*24773*/
				$1.i = _O; /*24762*/
				if ($get($1.bot, $1.i) == 0) {
					/*24770*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*24767*/
						$k[$j++] = 1; /*24765*/
					} else {
						/*24767*/
						var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*24767*/
						$k[$j++] = _Y; /*24767*/
					} /*24767*/
				} else {
					/*24770*/
					$k[$j++] = 0; /*24770*/
				} /*24770*/
				$put($1.sep, $1.i, $k[--$j]); /*24772*/
			} /*24772*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*24774*/
			$k[$j++] = true; /*24775*/
			for (var _d = 0; _d <= 12; _d += 1) {
				/*24775*/
				var _j = $k[--$j]; /*24775*/
				$k[$j++] = _j && $eq($get($1.bot, _d + $1.fp), $get($1.f3, _d)); /*24775*/
			} /*24775*/
			if ($k[--$j]) { //no-else/*24778*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*24777*/
			} /*24777*/
		}; /*24779*/
		$k[$j++] = Infinity; /*24780*/
		$forall($1.bot, function() {
			/*24780*/
			var _p = $k[--$j]; /*24780*/
			$k[$j++] = 1 - _p; /*24780*/
		}); /*24780*/
		$1.sep = $a(); /*24780*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*24781*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*24782*/
		$k[$j++] = 18; /*24783*/
		$1.sepfinder(); /*24783*/
		$$.rmoveto(0, $1.linheight); /*24784*/
		var _11 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*24791*/
		$k[$j++] = _11; /*24792*/
		$0.renmatrix(); /*24792*/
		$$.rmoveto(1, 1); /*24795*/
		$k[$j++] = $1.comp; /*24795*/
		$k[$j++] = $1.options; /*24795*/
		$0["gs1-cc"](); /*24795*/
		$0.renmatrix(); /*24795*/
		$$.restore(); /*24797*/
	};
	$0.databartruncatedcomposite = function() {
		var $1 = {}; /*24829*/
		$1.options = $k[--$j]; /*24831*/
		$1.barcode = $k[--$j]; /*24832*/
		$1.dontdraw = false; /*24834*/
		$forall($1.options, function() {
			/*24845*/
			var _3 = $k[--$j]; /*24845*/
			$1[$k[--$j]] = _3; /*24845*/
		}); /*24845*/
		$search($1.barcode, "|"); /*24848*/
		if ($k[--$j]) {
			/*24853*/
			$1.linear = $k[--$j]; /*24849*/
			$j--; /*24850*/
			$1.comp = $k[--$j]; /*24851*/
		} else {
			/*24853*/
			$j--; /*24853*/
		} /*24853*/
		$$.save(); /*24856*/
		$put($1.options, "lintype", "databartruncated"); /*24858*/
		$put($1.options, "linkage", true); /*24859*/
		$put($1.options, "inkspread", "0"); /*24860*/
		$put($1.options, "dontdraw", true); /*24861*/
		$k[$j++] = $1.linear; /*24864*/
		$k[$j++] = $1.options; /*24864*/
		$0.databartruncated(); /*24864*/
		var _F = $k[--$j]; /*24865*/
		$1.linsbs = $get(_F, "sbs"); /*24865*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*24866*/
		$k[$j++] = _F; /*24867*/
		$0.renlinear(); /*24867*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*24871*/
			for (var _N = $1.fp, _M = $1.fp + 12; _N <= _M; _N += 1) {
				/*24884*/
				$1.i = _N; /*24873*/
				if ($get($1.bot, $1.i) == 0) {
					/*24881*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*24878*/
						$k[$j++] = 1; /*24876*/
					} else {
						/*24878*/
						var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*24878*/
						$k[$j++] = _X; /*24878*/
					} /*24878*/
				} else {
					/*24881*/
					$k[$j++] = 0; /*24881*/
				} /*24881*/
				$put($1.sep, $1.i, $k[--$j]); /*24883*/
			} /*24883*/
			$1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); /*24885*/
			$k[$j++] = true; /*24886*/
			for (var _c = 0; _c <= 12; _c += 1) {
				/*24886*/
				var _i = $k[--$j]; /*24886*/
				$k[$j++] = _i && $eq($get($1.bot, _c + $1.fp), $get($1.f3, _c)); /*24886*/
			} /*24886*/
			if ($k[--$j]) { //no-else/*24889*/
				$puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); /*24888*/
			} /*24888*/
		}; /*24890*/
		$k[$j++] = Infinity; /*24891*/
		$k[$j++] = 0; /*24892*/
		$forall($1.linsbs, function() {
			/*24892*/
			var _o = $k[--$j]; /*24892*/
			var _p = $k[--$j]; /*24892*/
			var _q = (_p == 1) ? 0 : 1; /*24892*/
			$k[$j++] = _p; /*24892*/
			for (var _r = 0, _s = _o; _r < _s; _r++) {
				/*24892*/
				$k[$j++] = _q /*24892*/
			} /*24892*/
		}); /*24892*/
		$astore($a($counttomark() - 1)); /*24893*/
		$1.bot = $k[--$j]; /*24893*/
		$j -= 2; /*24893*/
		$k[$j++] = Infinity; /*24894*/
		$forall($1.bot, function() {
			/*24894*/
			var _x = $k[--$j]; /*24894*/
			$k[$j++] = 1 - _x; /*24894*/
		}); /*24894*/
		$1.sep = $a(); /*24894*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*24895*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*24896*/
		$k[$j++] = 18; /*24897*/
		$1.sepfinder(); /*24897*/
		$k[$j++] = 64; /*24897*/
		$1.sepfinder(); /*24897*/
		$$.rmoveto(0, $1.linheight); /*24898*/
		var _19 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*24905*/
		$k[$j++] = _19; /*24906*/
		$0.renmatrix(); /*24906*/
		$$.rmoveto(-5, 1); /*24909*/
		$k[$j++] = $1.comp; /*24909*/
		$k[$j++] = $1.options; /*24909*/
		$0["gs1-cc"](); /*24909*/
		$0.renmatrix(); /*24909*/
		$$.restore(); /*24911*/
	};
	$0.databarlimitedcomposite = function() {
		var $1 = {}; /*24943*/
		$1.options = $k[--$j]; /*24945*/
		$1.barcode = $k[--$j]; /*24946*/
		$1.dontdraw = false; /*24948*/
		$forall($1.options, function() {
			/*24959*/
			var _3 = $k[--$j]; /*24959*/
			$1[$k[--$j]] = _3; /*24959*/
		}); /*24959*/
		$search($1.barcode, "|"); /*24962*/
		if ($k[--$j]) {
			/*24967*/
			$1.linear = $k[--$j]; /*24963*/
			$j--; /*24964*/
			$1.comp = $k[--$j]; /*24965*/
		} else {
			/*24967*/
			$j--; /*24967*/
		} /*24967*/
		$$.save(); /*24970*/
		$put($1.options, "lintype", "databarlimited"); /*24972*/
		$put($1.options, "linkage", true); /*24973*/
		$put($1.options, "inkspread", "0"); /*24974*/
		$put($1.options, "dontdraw", true); /*24975*/
		$k[$j++] = $1.linear; /*24978*/
		$k[$j++] = $1.options; /*24978*/
		$0.databarlimited(); /*24978*/
		var _F = $k[--$j]; /*24979*/
		$1.linsbs = $get(_F, "sbs"); /*24979*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*24980*/
		$k[$j++] = _F; /*24981*/
		$0.renlinear(); /*24981*/
		$k[$j++] = Infinity; /*24984*/
		$k[$j++] = 1; /*24985*/
		$forall($1.linsbs, function() {
			/*24985*/
			var _K = $k[--$j]; /*24985*/
			var _L = $k[--$j]; /*24985*/
			var _M = (_L == 0) ? 1 : 0; /*24985*/
			$k[$j++] = _L; /*24985*/
			for (var _N = 0, _O = _K; _N < _O; _N++) {
				/*24985*/
				$k[$j++] = _M /*24985*/
			} /*24985*/
		}); /*24985*/
		$astore($a($counttomark() - 1)); /*24986*/
		$1.sep = $k[--$j]; /*24986*/
		$j -= 2; /*24986*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*24987*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*24988*/
		$$.rmoveto(0, $1.linheight); /*24989*/
		var _c = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*24996*/
		$k[$j++] = _c; /*24997*/
		$0.renmatrix(); /*24997*/
		$k[$j++] = $1.comp; /*25000*/
		$k[$j++] = $1.options; /*25000*/
		$0["gs1-cc"](); /*25000*/
		var _f = $k[--$j]; /*25001*/
		$$.rmoveto(72 - $get(_f, "pixx"), 1); /*25001*/
		$k[$j++] = _f; /*25002*/
		$0.renmatrix(); /*25002*/
		$$.restore(); /*25004*/
	};
	$0.databarexpandedcomposite = function() {
		var $1 = {}; /*25036*/
		$1.options = $k[--$j]; /*25038*/
		$1.barcode = $k[--$j]; /*25039*/
		$1.dontdraw = false; /*25041*/
		$forall($1.options, function() {
			/*25052*/
			var _3 = $k[--$j]; /*25052*/
			$1[$k[--$j]] = _3; /*25052*/
		}); /*25052*/
		$search($1.barcode, "|"); /*25055*/
		if ($k[--$j]) {
			/*25060*/
			$1.linear = $k[--$j]; /*25056*/
			$j--; /*25057*/
			$1.comp = $k[--$j]; /*25058*/
		} else {
			/*25060*/
			$j--; /*25060*/
		} /*25060*/
		$$.save(); /*25063*/
		$put($1.options, "lintype", "databarexpanded"); /*25065*/
		$put($1.options, "linkage", true); /*25066*/
		$put($1.options, "inkspread", "0"); /*25067*/
		$put($1.options, "dontdraw", true); /*25068*/
		$k[$j++] = $1.linear; /*25071*/
		$k[$j++] = $1.options; /*25071*/
		$0.databarexpanded(); /*25071*/
		var _F = $k[--$j]; /*25072*/
		$1.linsbs = $get(_F, "sbs"); /*25072*/
		$1.linheight = $get($get(_F, "bhs"), 0) * 72; /*25073*/
		$k[$j++] = _F; /*25074*/
		$0.renlinear(); /*25074*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*25078*/
			for (var _N = $1.fp, _M = $1.fp + 12; _N <= _M; _N += 1) {
				/*25091*/
				$1.i = _N; /*25080*/
				if ($get($1.bot, $1.i) == 0) {
					/*25088*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*25085*/
						$k[$j++] = 1; /*25083*/
					} else {
						/*25085*/
						var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*25085*/
						$k[$j++] = _X; /*25085*/
					} /*25085*/
				} else {
					/*25088*/
					$k[$j++] = 0; /*25088*/
				} /*25088*/
				$put($1.sep, $1.i, $k[--$j]); /*25090*/
			} /*25090*/
		}; /*25092*/
		$k[$j++] = Infinity; /*25093*/
		$k[$j++] = 0; /*25094*/
		$forall($1.linsbs, function() {
			/*25094*/
			var _c = $k[--$j]; /*25094*/
			var _d = $k[--$j]; /*25094*/
			var _e = (_d == 1) ? 0 : 1; /*25094*/
			$k[$j++] = _d; /*25094*/
			for (var _f = 0, _g = _c; _f < _g; _f++) {
				/*25094*/
				$k[$j++] = _e /*25094*/
			} /*25094*/
		}); /*25094*/
		$astore($a($counttomark() - 1)); /*25095*/
		$1.bot = $k[--$j]; /*25095*/
		$j -= 2; /*25095*/
		$k[$j++] = Infinity; /*25096*/
		$forall($1.bot, function() {
			/*25096*/
			var _l = $k[--$j]; /*25096*/
			$k[$j++] = 1 - _l; /*25096*/
		}); /*25096*/
		$1.sep = $a(); /*25096*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*25097*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*25098*/
		$k[$j++] = Infinity; /*25101*/
		for (var _u = 18, _t = $1.bot.length - 13; _u <= _t; _u += 98) {
			/*25100*/
			$k[$j++] = _u; /*25100*/
		} /*25100*/
		for (var _x = 69, _w = $1.bot.length - 13; _x <= _w; _x += 98) {
			/*25101*/
			$k[$j++] = _x; /*25101*/
		} /*25101*/
		var _y = $a(); /*25101*/
		for (var _z = 0, _10 = _y.length; _z < _10; _z++) {
			/*25102*/
			$k[$j++] = $get(_y, _z); /*25102*/
			$1.sepfinder(); /*25102*/
		} /*25102*/
		$$.rmoveto(0, $1.linheight); /*25103*/
		var _17 = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*25110*/
		$k[$j++] = _17; /*25111*/
		$0.renmatrix(); /*25111*/
		$$.rmoveto(1, 1); /*25114*/
		$k[$j++] = $1.comp; /*25114*/
		$k[$j++] = $1.options; /*25114*/
		$0["gs1-cc"](); /*25114*/
		$0.renmatrix(); /*25114*/
		$$.restore(); /*25116*/
	};
	$0.databarexpandedstackedcomposite = function() {
		var $1 = {}; /*25147*/
		$1.options = $k[--$j]; /*25149*/
		$1.barcode = $k[--$j]; /*25150*/
		$1.dontdraw = false; /*25152*/
		$forall($1.options, function() {
			/*25163*/
			var _3 = $k[--$j]; /*25163*/
			$1[$k[--$j]] = _3; /*25163*/
		}); /*25163*/
		$search($1.barcode, "|"); /*25166*/
		if ($k[--$j]) {
			/*25171*/
			$1.linear = $k[--$j]; /*25167*/
			$j--; /*25168*/
			$1.comp = $k[--$j]; /*25169*/
		} else {
			/*25171*/
			$j--; /*25171*/
		} /*25171*/
		$$.save(); /*25174*/
		$put($1.options, "lintype", "databarexpandedstacked"); /*25176*/
		$put($1.options, "linkage", true); /*25177*/
		$put($1.options, "inkspread", "0"); /*25178*/
		$put($1.options, "dontdraw", true); /*25179*/
		$k[$j++] = $1.linear; /*25182*/
		$k[$j++] = $1.options; /*25182*/
		$0.databarexpandedstacked(); /*25182*/
		var _F = $k[--$j]; /*25183*/
		$1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); /*25183*/
		$1.linheight = $get(_F, "pixy"); /*25184*/
		$k[$j++] = _F; /*25185*/
		$0.renmatrix(); /*25185*/
		$1.sepfinder = function() {
			$1.fp = $k[--$j]; /*25189*/
			for (var _O = $1.fp, _N = $1.fp + 12; _O <= _N; _O += 1) {
				/*25202*/
				$1.i = _O; /*25191*/
				if ($get($1.bot, $1.i) == 0) {
					/*25199*/
					if ($get($1.bot, $1.i - 1) == 1) {
						/*25196*/
						$k[$j++] = 1; /*25194*/
					} else {
						/*25196*/
						var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; /*25196*/
						$k[$j++] = _Y; /*25196*/
					} /*25196*/
				} else {
					/*25199*/
					$k[$j++] = 0; /*25199*/
				} /*25199*/
				$put($1.sep, $1.i, $k[--$j]); /*25201*/
			} /*25201*/
		}; /*25203*/
		$k[$j++] = Infinity; /*25204*/
		$forall($1.bot, function() {
			/*25204*/
			var _d = $k[--$j]; /*25204*/
			$k[$j++] = 1 - _d; /*25204*/
		}); /*25204*/
		$1.sep = $a(); /*25204*/
		$puti($1.sep, 0, $a([0, 0, 0])); /*25205*/
		$puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); /*25206*/
		$k[$j++] = Infinity; /*25209*/
		for (var _m = 19, _l = $1.bot.length - 13; _m <= _l; _m += 98) {
			/*25208*/
			$k[$j++] = _m; /*25208*/
		} /*25208*/
		for (var _p = 70, _o = $1.bot.length - 13; _p <= _o; _p += 98) {
			/*25209*/
			$k[$j++] = _p; /*25209*/
		} /*25209*/
		var _q = $a(); /*25209*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*25210*/
			$k[$j++] = $get(_q, _r); /*25210*/
			$1.sepfinder(); /*25210*/
		} /*25210*/
		$$.rmoveto(0, $1.linheight); /*25211*/
		var _z = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*25218*/
		$k[$j++] = _z; /*25219*/
		$0.renmatrix(); /*25219*/
		var _12 = ($get($1.bot, 0) == 0) ? 2 : 0; /*25222*/
		$$.rmoveto(_12, 1); /*25222*/
		$k[$j++] = $1.comp; /*25223*/
		$k[$j++] = $1.options; /*25223*/
		$0["gs1-cc"](); /*25223*/
		$0.renmatrix(); /*25223*/
		$$.restore(); /*25225*/
	};
	$0['gs1-128composite'] = function() {
		var $1 = {}; /*25257*/
		$1.options = $k[--$j]; /*25259*/
		$1.barcode = $k[--$j]; /*25260*/
		$1.dontdraw = false; /*25262*/
		$forall($1.options, function() {
			/*25273*/
			var _3 = $k[--$j]; /*25273*/
			$1[$k[--$j]] = _3; /*25273*/
		}); /*25273*/
		$search($1.barcode, "|"); /*25276*/
		if ($k[--$j]) {
			/*25281*/
			$1.linear = $k[--$j]; /*25277*/
			$j--; /*25278*/
			$1.comp = $k[--$j]; /*25279*/
		} else {
			/*25281*/
			$j--; /*25281*/
		} /*25281*/
		$$.save(); /*25284*/
		$put($1.options, "inkspread", "0"); /*25286*/
		$put($1.options, "dontdraw", true); /*25287*/
		$put($1.options, "linkagea", true); /*25290*/
		$k[$j++] = $1.linear; /*25291*/
		$k[$j++] = Infinity; /*25291*/
		$forall($1.options); /*25291*/
		var _E = $d(); /*25291*/
		$k[$j++] = _E; /*25291*/
		$0["gs1-128"](); /*25291*/
		var _G = $get($k[--$j], "sbs"); /*25292*/
		$k[$j++] = 0; /*25292*/
		$forall(_G, function() {
			/*25292*/
			var _H = $k[--$j]; /*25292*/
			var _I = $k[--$j]; /*25292*/
			$k[$j++] = _I + _H; /*25292*/
		}); /*25292*/
		$1.linwidth = $k[--$j]; /*25292*/
		$put($1.options, "lintype", "gs1-128"); /*25295*/
		$put($1.options, "linwidth", $1.linwidth); /*25296*/
		$k[$j++] = $1.comp; /*25297*/
		$k[$j++] = $1.options; /*25297*/
		$0["gs1-cc"](); /*25297*/
		$1.compsym = $k[--$j]; /*25297*/
		if ($get($1.compsym, "pixx") == 99) {
			/*25298*/
			$k[$j++] = "a"; /*25298*/
		} else {
			/*25298*/
			$k[$j++] = "c"; /*25298*/
		} /*25298*/
		$1.linktype = $k[--$j]; /*25298*/
		if ($eq($1.linktype, "a")) {
			/*25306*/
			$put($1.options, "linkagea", true); /*25302*/
			$put($1.options, "linkagec", false); /*25303*/
		} else {
			/*25306*/
			$put($1.options, "linkagea", false); /*25305*/
			$put($1.options, "linkagec", true); /*25306*/
		} /*25306*/
		$k[$j++] = $1.linear; /*25308*/
		$k[$j++] = Infinity; /*25308*/
		$forall($1.options); /*25308*/
		var _a = $d(); /*25308*/
		$k[$j++] = _a; /*25308*/
		$0["gs1-128"](); /*25308*/
		var _b = $k[--$j]; /*25309*/
		$1.linsbs = $get(_b, "sbs"); /*25309*/
		$1.linheight = $get($get(_b, "bhs"), 0) * 72; /*25310*/
		$k[$j++] = _b; /*25311*/
		$0.renlinear(); /*25311*/
		$k[$j++] = Infinity; /*25314*/
		$k[$j++] = 1; /*25315*/
		$forall($1.linsbs, function() {
			/*25315*/
			var _g = $k[--$j]; /*25315*/
			var _h = $k[--$j]; /*25315*/
			var _i = (_h == 0) ? 1 : 0; /*25315*/
			$k[$j++] = _h; /*25315*/
			for (var _j = 0, _k = _g; _j < _k; _j++) {
				/*25315*/
				$k[$j++] = _i /*25315*/
			} /*25315*/
		}); /*25315*/
		$astore($a($counttomark() - 1)); /*25316*/
		$1.sep = $k[--$j]; /*25316*/
		$j -= 2; /*25316*/
		$$.rmoveto(0, $1.linheight); /*25317*/
		var _t = new Map([
			["ren", $0.renmatrix],
			["pixs", $1.sep],
			["pixx", $1.sep.length],
			["pixy", 1],
			["height", 1 / 72],
			["width", $1.sep.length / 72],
			["opt", $1.options]
		]); /*25324*/
		$k[$j++] = _t; /*25325*/
		$0.renmatrix(); /*25325*/
		if ($eq($1.linktype, "a")) {
			/*25334*/
			$1.s = ~~(($1.linwidth - 2) / 11); /*25329*/
			$1.p = ~~(($1.s - 9) / 2); /*25330*/
			$k[$j++] = 'x'; /*25331*/
			$k[$j++] = ((($1.s - $1.p) - 1) * 11) + 10; /*25331*/
			if ($1.p == 0) { //no-else/*25331*/
				var _10 = $k[--$j]; /*25331*/
				$k[$j++] = _10 + 2; /*25331*/
			} /*25331*/
			var _11 = $k[--$j]; /*25331*/
			$1[$k[--$j]] = _11 - 99; /*25331*/
			$$.rmoveto($1.x, 1); /*25332*/
		} else {
			/*25334*/
			$$.rmoveto(-7, 1); /*25334*/
		} /*25334*/
		$k[$j++] = $1.compsym; /*25337*/
		$0.renmatrix(); /*25337*/
		$$.restore(); /*25339*/
	};
	$0.gs1datamatrix = function() {
		var $1 = {}; /*25369*/
		$1.options = $k[--$j]; /*25371*/
		$1.barcode = $k[--$j]; /*25372*/
		$1.dontdraw = false; /*25374*/
		$forall($1.options, function() {
			/*25385*/
			var _3 = $k[--$j]; /*25385*/
			$1[$k[--$j]] = _3; /*25385*/
		}); /*25385*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*25389*/
			$1.out = $s($1.in.length); /*25390*/
			$1.j = 0; /*25391*/
			$k[$j++] = $1.in; /*25405*/
			for (;;) {
				/*25405*/
				$search($k[--$j], "^"); /*25394*/
				if ($k[--$j]) {
					/*25403*/
					var _B = $k[--$j]; /*25395*/
					$puti($1.out, $1.j, _B); /*25395*/
					$1.j = (_B.length + $1.j) + 1; /*25396*/
					$j--; /*25397*/
					var _F = $k[--$j]; /*25398*/
					$put($1.out, $1.j - 1, ~~$z($geti(_F, 0, 3))); /*25398*/
					$k[$j++] = $geti(_F, 3, _F.length - 3); /*25399*/
				} else {
					/*25403*/
					var _K = $k[--$j]; /*25401*/
					$puti($1.out, $1.j, _K); /*25401*/
					$1.j = _K.length + $1.j; /*25402*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*25403*/
					break; /*25403*/
				} /*25403*/
			} /*25403*/
		}; /*25406*/
		$1.ais = $a([]); /*25409*/
		$1.vals = $a([]); /*25410*/
		var _T = $1.barcode; /*25411*/
		$k[$j++] = $geti(_T, 1, _T.length - 1); /*25424*/
		for (;;) {
			/*25424*/
			var _V = $k[--$j]; /*25413*/
			$k[$j++] = _V; /*25413*/
			if ($eq(_V, "")) { //no-else/*25413*/
				break; /*25413*/
			} /*25413*/
			$search($k[--$j], ")"); /*25414*/
			$j--; /*25414*/
			var _X = $k[--$j]; /*25415*/
			var _Y = $k[--$j]; /*25415*/
			var _Z = $k[--$j]; /*25416*/
			$k[$j++] = _X; /*25416*/
			$search(_Z, "("); /*25416*/
			if ($k[--$j]) {
				/*25419*/
				var _b = $k[--$j]; /*25417*/
				var _c = $k[--$j]; /*25417*/
				var _d = $k[--$j]; /*25417*/
				var _e = $k[--$j]; /*25417*/
				$k[$j++] = _d; /*25417*/
				$k[$j++] = _e; /*25417*/
				$k[$j++] = _b; /*25417*/
			} else {
				/*25419*/
				var _f = $k[--$j]; /*25419*/
				var _g = $k[--$j]; /*25419*/
				$k[$j++] = ""; /*25419*/
				$k[$j++] = _g; /*25419*/
				$k[$j++] = _f; /*25419*/
			} /*25419*/
			$k[$j++] = Infinity; /*25421*/
			$aload($1.ais); /*25421*/
			var _j = $k[$j - 1 - ($counttomark() + 2)]; /*25421*/
			$k[$j++] = _j; /*25421*/
			$1.ais = $a(); /*25421*/
			$k[$j++] = Infinity; /*25422*/
			$aload($1.vals); /*25422*/
			var _n = $k[$j - 1 - ($counttomark() + 1)]; /*25422*/
			$k[$j++] = _n; /*25422*/
			$1.expand(); /*25422*/
			$1.vals = $a(); /*25422*/
			$j -= 2; /*25423*/
		} /*25423*/
		$j--; /*25425*/
		$1.aifixed = new Map; /*25430*/
		$k[$j++] = Infinity; /*25432*/
		for (var _p = 0; _p <= 4; _p += 1) {
			/*25432*/
			$k[$j++] = _p; /*25432*/
		} /*25432*/
		var _q = $a(); /*25432*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*25435*/
			var _v = $strcpy($s(2), "00"); /*25434*/
			$put(_v, 1, $get(_q, _r) + 48); /*25434*/
			$put($1.aifixed, _v, _v); /*25434*/
		} /*25434*/
		$k[$j++] = Infinity; /*25440*/
		for (var _x = 11; _x <= 20; _x += 1) {
			/*25437*/
			$k[$j++] = _x; /*25437*/
		} /*25437*/
		$k[$j++] = 23; /*25439*/
		for (var _y = 31; _y <= 36; _y += 1) {
			/*25439*/
			$k[$j++] = _y; /*25439*/
		} /*25439*/
		$k[$j++] = 41; /*25440*/
		var _z = $a(); /*25440*/
		for (var _10 = 0, _11 = _z.length; _10 < _11; _10++) {
			/*25443*/
			var _14 = $cvrs($s(2), $get(_z, _10), 10); /*25442*/
			$put($1.aifixed, _14, _14); /*25442*/
		} /*25442*/
		$1.fnc1 = -1; /*25446*/
		$1.dmtx = $a([$1.fnc1]); /*25447*/
		for (var _1A = 0, _19 = $1.ais.length - 1; _1A <= _19; _1A += 1) {
			/*25463*/
			$1.i = _1A; /*25449*/
			$1.ai = $get($1.ais, $1.i); /*25450*/
			$1.val = $get($1.vals, $1.i); /*25451*/
			var _1K = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); /*25452*/
			$puti(_1K, 0, $1.dmtx); /*25453*/
			$k[$j++] = _1K; /*25454*/
			$k[$j++] = _1K; /*25454*/
			$k[$j++] = $1.dmtx.length; /*25454*/
			$k[$j++] = $1.ai; /*25454*/
			$k[$j++] = Infinity; /*25454*/
			var _1O = $k[--$j]; /*25454*/
			var _1P = $k[--$j]; /*25454*/
			$k[$j++] = _1O; /*25454*/
			$forall(_1P); /*25454*/
			var _1Q = $a(); /*25454*/
			var _1R = $k[--$j]; /*25454*/
			$puti($k[--$j], _1R, _1Q); /*25454*/
			var _1T = $k[--$j]; /*25455*/
			$k[$j++] = _1T; /*25455*/
			$k[$j++] = _1T; /*25455*/
			$k[$j++] = $1.dmtx.length + $1.ai.length; /*25455*/
			$k[$j++] = $1.val; /*25455*/
			$k[$j++] = Infinity; /*25455*/
			var _1X = $k[--$j]; /*25455*/
			var _1Y = $k[--$j]; /*25455*/
			$k[$j++] = _1X; /*25455*/
			$forall(_1Y); /*25455*/
			var _1Z = $a(); /*25455*/
			var _1a = $k[--$j]; /*25455*/
			$puti($k[--$j], _1a, _1Z); /*25455*/
			$1.dmtx = $k[--$j]; /*25456*/
			var _1i = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*25457*/
			if (($1.i != ($1.ais.length - 1)) && (!_1i)) { //no-else/*25462*/
				var _1k = $a($1.dmtx.length + 1); /*25458*/
				$puti(_1k, 0, $1.dmtx); /*25459*/
				$put(_1k, $1.dmtx.length, $1.fnc1); /*25460*/
				$1.dmtx = _1k; /*25461*/
			} /*25461*/
		} /*25461*/
		$1.barcode = $s(($1.dmtx.length + 1) * 5); /*25466*/
		$1.i = 0; /*25467*/
		$1.j = 0; /*25467*/
		for (;;) {
			/*25477*/
			if ($1.i == $1.dmtx.length) { //no-else/*25468*/
				break; /*25468*/
			} /*25468*/
			var _1u = $get($1.dmtx, $1.i); /*25469*/
			$k[$j++] = _1u; /*25474*/
			if (_1u == $1.fnc1) {
				/*25473*/
				$j--; /*25470*/
				$puti($1.barcode, $1.j, "^FNC1"); /*25470*/
				$1.j = $1.j + 4; /*25471*/
			} else {
				/*25473*/
				$put($1.barcode, $1.j, $k[--$j]); /*25473*/
			} /*25473*/
			$1.i = $1.i + 1; /*25475*/
			$1.j = $1.j + 1; /*25476*/
		} /*25476*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*25478*/
		$put($1.options, "dontdraw", true); /*25481*/
		$put($1.options, "parsefnc", true); /*25482*/
		$k[$j++] = 'args'; /*25483*/
		$k[$j++] = $1.barcode; /*25483*/
		$k[$j++] = $1.options; /*25483*/
		$0.datamatrix(); /*25483*/
		var _2B = $k[--$j]; /*25483*/
		$1[$k[--$j]] = _2B; /*25483*/
		$put($1.args, "opt", $1.options); /*25485*/
		$k[$j++] = $1.args; /*25488*/
		if (!$1.dontdraw) { //no-else/*25488*/
			$0.renmatrix(); /*25488*/
		} /*25488*/
	};
	$0.gs1datamatrixrectangular = function() {
		var $1 = {}; /*25518*/
		$1.options = $k[--$j]; /*25520*/
		$1.barcode = $k[--$j]; /*25521*/
		$1.dontdraw = false; /*25523*/
		$forall($1.options, function() {
			/*25534*/
			var _3 = $k[--$j]; /*25534*/
			$1[$k[--$j]] = _3; /*25534*/
		}); /*25534*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*25538*/
			$1.out = $s($1.in.length); /*25539*/
			$1.j = 0; /*25540*/
			$k[$j++] = $1.in; /*25554*/
			for (;;) {
				/*25554*/
				$search($k[--$j], "^"); /*25543*/
				if ($k[--$j]) {
					/*25552*/
					var _B = $k[--$j]; /*25544*/
					$puti($1.out, $1.j, _B); /*25544*/
					$1.j = (_B.length + $1.j) + 1; /*25545*/
					$j--; /*25546*/
					var _F = $k[--$j]; /*25547*/
					$put($1.out, $1.j - 1, ~~$z($geti(_F, 0, 3))); /*25547*/
					$k[$j++] = $geti(_F, 3, _F.length - 3); /*25548*/
				} else {
					/*25552*/
					var _K = $k[--$j]; /*25550*/
					$puti($1.out, $1.j, _K); /*25550*/
					$1.j = _K.length + $1.j; /*25551*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*25552*/
					break; /*25552*/
				} /*25552*/
			} /*25552*/
		}; /*25555*/
		$1.ais = $a([]); /*25558*/
		$1.vals = $a([]); /*25559*/
		var _T = $1.barcode; /*25560*/
		$k[$j++] = $geti(_T, 1, _T.length - 1); /*25573*/
		for (;;) {
			/*25573*/
			var _V = $k[--$j]; /*25562*/
			$k[$j++] = _V; /*25562*/
			if ($eq(_V, "")) { //no-else/*25562*/
				break; /*25562*/
			} /*25562*/
			$search($k[--$j], ")"); /*25563*/
			$j--; /*25563*/
			var _X = $k[--$j]; /*25564*/
			var _Y = $k[--$j]; /*25564*/
			var _Z = $k[--$j]; /*25565*/
			$k[$j++] = _X; /*25565*/
			$search(_Z, "("); /*25565*/
			if ($k[--$j]) {
				/*25568*/
				var _b = $k[--$j]; /*25566*/
				var _c = $k[--$j]; /*25566*/
				var _d = $k[--$j]; /*25566*/
				var _e = $k[--$j]; /*25566*/
				$k[$j++] = _d; /*25566*/
				$k[$j++] = _e; /*25566*/
				$k[$j++] = _b; /*25566*/
			} else {
				/*25568*/
				var _f = $k[--$j]; /*25568*/
				var _g = $k[--$j]; /*25568*/
				$k[$j++] = ""; /*25568*/
				$k[$j++] = _g; /*25568*/
				$k[$j++] = _f; /*25568*/
			} /*25568*/
			$k[$j++] = Infinity; /*25570*/
			$aload($1.ais); /*25570*/
			var _j = $k[$j - 1 - ($counttomark() + 2)]; /*25570*/
			$k[$j++] = _j; /*25570*/
			$1.ais = $a(); /*25570*/
			$k[$j++] = Infinity; /*25571*/
			$aload($1.vals); /*25571*/
			var _n = $k[$j - 1 - ($counttomark() + 1)]; /*25571*/
			$k[$j++] = _n; /*25571*/
			$1.expand(); /*25571*/
			$1.vals = $a(); /*25571*/
			$j -= 2; /*25572*/
		} /*25572*/
		$j--; /*25574*/
		$1.aifixed = new Map; /*25579*/
		$k[$j++] = Infinity; /*25581*/
		for (var _p = 0; _p <= 4; _p += 1) {
			/*25581*/
			$k[$j++] = _p; /*25581*/
		} /*25581*/
		var _q = $a(); /*25581*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*25584*/
			var _v = $strcpy($s(2), "00"); /*25583*/
			$put(_v, 1, $get(_q, _r) + 48); /*25583*/
			$put($1.aifixed, _v, _v); /*25583*/
		} /*25583*/
		$k[$j++] = Infinity; /*25589*/
		for (var _x = 11; _x <= 20; _x += 1) {
			/*25586*/
			$k[$j++] = _x; /*25586*/
		} /*25586*/
		$k[$j++] = 23; /*25588*/
		for (var _y = 31; _y <= 36; _y += 1) {
			/*25588*/
			$k[$j++] = _y; /*25588*/
		} /*25588*/
		$k[$j++] = 41; /*25589*/
		var _z = $a(); /*25589*/
		for (var _10 = 0, _11 = _z.length; _10 < _11; _10++) {
			/*25592*/
			var _14 = $cvrs($s(2), $get(_z, _10), 10); /*25591*/
			$put($1.aifixed, _14, _14); /*25591*/
		} /*25591*/
		$1.fnc1 = -1; /*25595*/
		$1.dmtx = $a([$1.fnc1]); /*25596*/
		for (var _1A = 0, _19 = $1.ais.length - 1; _1A <= _19; _1A += 1) {
			/*25612*/
			$1.i = _1A; /*25598*/
			$1.ai = $get($1.ais, $1.i); /*25599*/
			$1.val = $get($1.vals, $1.i); /*25600*/
			var _1K = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); /*25601*/
			$puti(_1K, 0, $1.dmtx); /*25602*/
			$k[$j++] = _1K; /*25603*/
			$k[$j++] = _1K; /*25603*/
			$k[$j++] = $1.dmtx.length; /*25603*/
			$k[$j++] = $1.ai; /*25603*/
			$k[$j++] = Infinity; /*25603*/
			var _1O = $k[--$j]; /*25603*/
			var _1P = $k[--$j]; /*25603*/
			$k[$j++] = _1O; /*25603*/
			$forall(_1P); /*25603*/
			var _1Q = $a(); /*25603*/
			var _1R = $k[--$j]; /*25603*/
			$puti($k[--$j], _1R, _1Q); /*25603*/
			var _1T = $k[--$j]; /*25604*/
			$k[$j++] = _1T; /*25604*/
			$k[$j++] = _1T; /*25604*/
			$k[$j++] = $1.dmtx.length + $1.ai.length; /*25604*/
			$k[$j++] = $1.val; /*25604*/
			$k[$j++] = Infinity; /*25604*/
			var _1X = $k[--$j]; /*25604*/
			var _1Y = $k[--$j]; /*25604*/
			$k[$j++] = _1X; /*25604*/
			$forall(_1Y); /*25604*/
			var _1Z = $a(); /*25604*/
			var _1a = $k[--$j]; /*25604*/
			$puti($k[--$j], _1a, _1Z); /*25604*/
			$1.dmtx = $k[--$j]; /*25605*/
			var _1i = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*25606*/
			if (($1.i != ($1.ais.length - 1)) && (!_1i)) { //no-else/*25611*/
				var _1k = $a($1.dmtx.length + 1); /*25607*/
				$puti(_1k, 0, $1.dmtx); /*25608*/
				$put(_1k, $1.dmtx.length, $1.fnc1); /*25609*/
				$1.dmtx = _1k; /*25610*/
			} /*25610*/
		} /*25610*/
		$1.barcode = $s(($1.dmtx.length + 1) * 5); /*25615*/
		$1.i = 0; /*25616*/
		$1.j = 0; /*25616*/
		for (;;) {
			/*25626*/
			if ($1.i == $1.dmtx.length) { //no-else/*25617*/
				break; /*25617*/
			} /*25617*/
			var _1u = $get($1.dmtx, $1.i); /*25618*/
			$k[$j++] = _1u; /*25623*/
			if (_1u == $1.fnc1) {
				/*25622*/
				$j--; /*25619*/
				$puti($1.barcode, $1.j, "^FNC1"); /*25619*/
				$1.j = $1.j + 4; /*25620*/
			} else {
				/*25622*/
				$put($1.barcode, $1.j, $k[--$j]); /*25622*/
			} /*25622*/
			$1.i = $1.i + 1; /*25624*/
			$1.j = $1.j + 1; /*25625*/
		} /*25625*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*25627*/
		$put($1.options, "dontdraw", true); /*25630*/
		$put($1.options, "parsefnc", true); /*25631*/
		$put($1.options, "format", "rectangle"); /*25632*/
		$k[$j++] = 'args'; /*25633*/
		$k[$j++] = $1.barcode; /*25633*/
		$k[$j++] = $1.options; /*25633*/
		$0.datamatrix(); /*25633*/
		var _2C = $k[--$j]; /*25633*/
		$1[$k[--$j]] = _2C; /*25633*/
		$put($1.args, "opt", $1.options); /*25635*/
		$k[$j++] = $1.args; /*25638*/
		if (!$1.dontdraw) { //no-else/*25638*/
			$0.renmatrix(); /*25638*/
		} /*25638*/
	};
	$0.gs1qrcode = function() {
		var $1 = {}; /*25667*/
		$1.options = $k[--$j]; /*25669*/
		$1.barcode = $k[--$j]; /*25670*/
		$1.dontdraw = false; /*25672*/
		$forall($1.options, function() {
			/*25683*/
			var _3 = $k[--$j]; /*25683*/
			$1[$k[--$j]] = _3; /*25683*/
		}); /*25683*/
		$1.expand = function() {
			$1.in = $k[--$j]; /*25687*/
			$1.out = $s($1.in.length); /*25688*/
			$1.j = 0; /*25689*/
			$k[$j++] = $1.in; /*25703*/
			for (;;) {
				/*25703*/
				$search($k[--$j], "^"); /*25692*/
				if ($k[--$j]) {
					/*25701*/
					var _B = $k[--$j]; /*25693*/
					$puti($1.out, $1.j, _B); /*25693*/
					$1.j = (_B.length + $1.j) + 1; /*25694*/
					$j--; /*25695*/
					var _F = $k[--$j]; /*25696*/
					$put($1.out, $1.j - 1, ~~$z($geti(_F, 0, 3))); /*25696*/
					$k[$j++] = $geti(_F, 3, _F.length - 3); /*25697*/
				} else {
					/*25701*/
					var _K = $k[--$j]; /*25699*/
					$puti($1.out, $1.j, _K); /*25699*/
					$1.j = _K.length + $1.j; /*25700*/
					$k[$j++] = $geti($1.out, 0, $1.j); /*25701*/
					break; /*25701*/
				} /*25701*/
			} /*25701*/
		}; /*25704*/
		$1.ais = $a([]); /*25707*/
		$1.vals = $a([]); /*25708*/
		var _T = $1.barcode; /*25709*/
		$k[$j++] = $geti(_T, 1, _T.length - 1); /*25722*/
		for (;;) {
			/*25722*/
			var _V = $k[--$j]; /*25711*/
			$k[$j++] = _V; /*25711*/
			if ($eq(_V, "")) { //no-else/*25711*/
				break; /*25711*/
			} /*25711*/
			$search($k[--$j], ")"); /*25712*/
			$j--; /*25712*/
			var _X = $k[--$j]; /*25713*/
			var _Y = $k[--$j]; /*25713*/
			var _Z = $k[--$j]; /*25714*/
			$k[$j++] = _X; /*25714*/
			$search(_Z, "("); /*25714*/
			if ($k[--$j]) {
				/*25717*/
				var _b = $k[--$j]; /*25715*/
				var _c = $k[--$j]; /*25715*/
				var _d = $k[--$j]; /*25715*/
				var _e = $k[--$j]; /*25715*/
				$k[$j++] = _d; /*25715*/
				$k[$j++] = _e; /*25715*/
				$k[$j++] = _b; /*25715*/
			} else {
				/*25717*/
				var _f = $k[--$j]; /*25717*/
				var _g = $k[--$j]; /*25717*/
				$k[$j++] = ""; /*25717*/
				$k[$j++] = _g; /*25717*/
				$k[$j++] = _f; /*25717*/
			} /*25717*/
			$k[$j++] = Infinity; /*25719*/
			$aload($1.ais); /*25719*/
			var _j = $k[$j - 1 - ($counttomark() + 2)]; /*25719*/
			$k[$j++] = _j; /*25719*/
			$1.ais = $a(); /*25719*/
			$k[$j++] = Infinity; /*25720*/
			$aload($1.vals); /*25720*/
			var _n = $k[$j - 1 - ($counttomark() + 1)]; /*25720*/
			$k[$j++] = _n; /*25720*/
			$1.expand(); /*25720*/
			$1.vals = $a(); /*25720*/
			$j -= 2; /*25721*/
		} /*25721*/
		$j--; /*25723*/
		$1.aifixed = new Map; /*25728*/
		$k[$j++] = Infinity; /*25730*/
		for (var _p = 0; _p <= 4; _p += 1) {
			/*25730*/
			$k[$j++] = _p; /*25730*/
		} /*25730*/
		var _q = $a(); /*25730*/
		for (var _r = 0, _s = _q.length; _r < _s; _r++) {
			/*25733*/
			var _v = $strcpy($s(2), "00"); /*25732*/
			$put(_v, 1, $get(_q, _r) + 48); /*25732*/
			$put($1.aifixed, _v, _v); /*25732*/
		} /*25732*/
		$k[$j++] = Infinity; /*25738*/
		for (var _x = 11; _x <= 20; _x += 1) {
			/*25735*/
			$k[$j++] = _x; /*25735*/
		} /*25735*/
		$k[$j++] = 23; /*25737*/
		for (var _y = 31; _y <= 36; _y += 1) {
			/*25737*/
			$k[$j++] = _y; /*25737*/
		} /*25737*/
		$k[$j++] = 41; /*25738*/
		var _z = $a(); /*25738*/
		for (var _10 = 0, _11 = _z.length; _10 < _11; _10++) {
			/*25741*/
			var _14 = $cvrs($s(2), $get(_z, _10), 10); /*25740*/
			$put($1.aifixed, _14, _14); /*25740*/
		} /*25740*/
		$1.fnc1 = -1; /*25744*/
		$1.qrc = $a([$1.fnc1]); /*25745*/
		for (var _1A = 0, _19 = $1.ais.length - 1; _1A <= _19; _1A += 1) {
			/*25761*/
			$1.i = _1A; /*25747*/
			$1.ai = $get($1.ais, $1.i); /*25748*/
			$1.val = $get($1.vals, $1.i); /*25749*/
			var _1K = $a(($1.qrc.length + $1.ai.length) + $1.val.length); /*25750*/
			$puti(_1K, 0, $1.qrc); /*25751*/
			$k[$j++] = _1K; /*25752*/
			$k[$j++] = _1K; /*25752*/
			$k[$j++] = $1.qrc.length; /*25752*/
			$k[$j++] = $1.ai; /*25752*/
			$k[$j++] = Infinity; /*25752*/
			var _1O = $k[--$j]; /*25752*/
			var _1P = $k[--$j]; /*25752*/
			$k[$j++] = _1O; /*25752*/
			$forall(_1P); /*25752*/
			var _1Q = $a(); /*25752*/
			var _1R = $k[--$j]; /*25752*/
			$puti($k[--$j], _1R, _1Q); /*25752*/
			var _1T = $k[--$j]; /*25753*/
			$k[$j++] = _1T; /*25753*/
			$k[$j++] = _1T; /*25753*/
			$k[$j++] = $1.qrc.length + $1.ai.length; /*25753*/
			$k[$j++] = $1.val; /*25753*/
			$k[$j++] = Infinity; /*25753*/
			var _1X = $k[--$j]; /*25753*/
			var _1Y = $k[--$j]; /*25753*/
			$k[$j++] = _1X; /*25753*/
			$forall(_1Y); /*25753*/
			var _1Z = $a(); /*25753*/
			var _1a = $k[--$j]; /*25753*/
			$puti($k[--$j], _1a, _1Z); /*25753*/
			$1.qrc = $k[--$j]; /*25754*/
			var _1i = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; /*25755*/
			if (($1.i != ($1.ais.length - 1)) && (!_1i)) { //no-else/*25760*/
				var _1k = $a($1.qrc.length + 1); /*25756*/
				$puti(_1k, 0, $1.qrc); /*25757*/
				$put(_1k, $1.qrc.length, $1.fnc1); /*25758*/
				$1.qrc = _1k; /*25759*/
			} /*25759*/
		} /*25759*/
		$1.barcode = $s(($1.qrc.length + 1) * 5); /*25764*/
		$1.i = 0; /*25765*/
		$1.j = 0; /*25765*/
		for (;;) {
			/*25775*/
			if ($1.i == $1.qrc.length) { //no-else/*25766*/
				break; /*25766*/
			} /*25766*/
			var _1u = $get($1.qrc, $1.i); /*25767*/
			$k[$j++] = _1u; /*25772*/
			if (_1u == $1.fnc1) {
				/*25771*/
				$j--; /*25768*/
				$puti($1.barcode, $1.j, "^FNC1"); /*25768*/
				$1.j = $1.j + 4; /*25769*/
			} else {
				/*25771*/
				$put($1.barcode, $1.j, $k[--$j]); /*25771*/
			} /*25771*/
			$1.i = $1.i + 1; /*25773*/
			$1.j = $1.j + 1; /*25774*/
		} /*25774*/
		$1.barcode = $geti($1.barcode, 0, $1.j); /*25776*/
		$put($1.options, "dontdraw", true); /*25779*/
		$put($1.options, "parsefnc", true); /*25780*/
		$k[$j++] = 'args'; /*25781*/
		$k[$j++] = $1.barcode; /*25781*/
		$k[$j++] = $1.options; /*25781*/
		$0.qrcode(); /*25781*/
		var _2B = $k[--$j]; /*25781*/
		$1[$k[--$j]] = _2B; /*25781*/
		$put($1.args, "opt", $1.options); /*25783*/
		$k[$j++] = $1.args; /*25786*/
		if (!$1.dontdraw) { //no-else/*25786*/
			$0.renmatrix(); /*25786*/
		} /*25786*/
	};
	$0.hibccode39 = function() {
		var $1 = {}; /*25816*/
		$1.options = $k[--$j]; /*25818*/
		$1.barcode = $k[--$j]; /*25819*/
		$1.dontdraw = false; /*25821*/
		$1.textfont = 'Courier'; /*25822*/
		$1.textsize = 10; /*25823*/
		$1.textyoffset = -8.5; /*25824*/
		$1.textxoffset = 0; /*25825*/
		$1.validatecheck = false; /*25826*/
		$forall($1.options, function() {
			/*25837*/
			var _3 = $k[--$j]; /*25837*/
			$1[$k[--$j]] = _3; /*25837*/
		}); /*25837*/
		$1.textfont = "" + $1.textfont; /*25839*/
		$1.textsize = +$1.textsize; /*25840*/
		$1.textyoffset = +$1.textyoffset; /*25841*/
		$1.textxoffset = +$1.textxoffset; /*25842*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*25845*/
		$1.charvals = new Map; /*25846*/
		for (var _9 = 0; _9 <= 42; _9 += 1) {
			/*25847*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*25847*/
		} /*25847*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*25854*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*25851*/
			if (!_J) { //no-else/*25853*/
				$k[$j++] = 'bwipp.hibccode39badCharacter'; /*25852*/
				$k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*25852*/
				$0.raiseerror(); /*25852*/
			} /*25852*/
		} /*25852*/
		$k[$j++] = 'barlen'; /*25856*/
		$k[$j++] = $1.barcode.length; /*25856*/
		if ($1.validatecheck) { //no-else/*25856*/
			var _M = $k[--$j]; /*25856*/
			$k[$j++] = _M - 1; /*25856*/
		} /*25856*/
		var _N = $k[--$j]; /*25856*/
		$1[$k[--$j]] = _N; /*25856*/
		$1.checksum = 41; /*25858*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*25862*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum; /*25861*/
		} /*25861*/
		$1.checksum = $1.checksum % 43; /*25863*/
		if ($1.validatecheck) { //no-else/*25869*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*25867*/
				$k[$j++] = 'bwipp.hibccode39badCheckDigit'; /*25866*/
				$k[$j++] = "Incorrect HIBC Code 39 check digit provided"; /*25866*/
				$0.raiseerror(); /*25866*/
			} /*25866*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*25868*/
		} /*25868*/
		var _j = $s($1.barlen + 2); /*25871*/
		$puti(_j, 1, $1.barcode); /*25871*/
		$1.barcode = _j; /*25871*/
		$put($1.barcode, 0, 43); /*25872*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*25873*/
		$1.text = $s($1.barlen + 4); /*25875*/
		$put($1.text, 0, 42); /*25876*/
		$puti($1.text, 1, $1.barcode); /*25877*/
		var _10 = $get($1.barcode, $1.barlen + 1); /*25878*/
		$k[$j++] = $1.text; /*25878*/
		$k[$j++] = $1.barlen + 2; /*25878*/
		$k[$j++] = _10; /*25878*/
		if (_10 == 32) { //no-else/*25878*/
			$j--; /*25878*/
			$k[$j++] = 95; /*25878*/
		} /*25878*/
		var _11 = $k[--$j]; /*25878*/
		var _12 = $k[--$j]; /*25878*/
		$put($k[--$j], _12, _11); /*25878*/
		$put($1.text, $1.barlen + 3, 42); /*25879*/
		$put($1.options, "dontdraw", true); /*25882*/
		$put($1.options, "includecheck", false); /*25883*/
		$put($1.options, "validatecheck", false); /*25884*/
		$k[$j++] = 'args'; /*25885*/
		$k[$j++] = $1.barcode; /*25885*/
		$k[$j++] = $1.options; /*25885*/
		$0.code39(); /*25885*/
		var _1B = $k[--$j]; /*25885*/
		$1[$k[--$j]] = _1B; /*25885*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*25887*/
		$put($1.args, "textxalign", "center"); /*25888*/
		$put($1.args, "opt", $1.options); /*25889*/
		$k[$j++] = $1.args; /*25892*/
		if (!$1.dontdraw) { //no-else/*25892*/
			$0.renlinear(); /*25892*/
		} /*25892*/
	};
	$0.hibccode128 = function() {
		var $1 = {}; /*25922*/
		$1.options = $k[--$j]; /*25924*/
		$1.barcode = $k[--$j]; /*25925*/
		$1.dontdraw = false; /*25927*/
		$1.textfont = 'Courier'; /*25928*/
		$1.textsize = 10; /*25929*/
		$1.textyoffset = -8.5; /*25930*/
		$1.textxoffset = 0; /*25931*/
		$1.validatecheck = false; /*25932*/
		$forall($1.options, function() {
			/*25943*/
			var _3 = $k[--$j]; /*25943*/
			$1[$k[--$j]] = _3; /*25943*/
		}); /*25943*/
		$1.textfont = "" + $1.textfont; /*25945*/
		$1.textsize = +$1.textsize; /*25946*/
		$1.textyoffset = +$1.textyoffset; /*25947*/
		$1.textxoffset = +$1.textxoffset; /*25948*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*25951*/
		$1.charvals = new Map; /*25952*/
		for (var _9 = 0; _9 <= 42; _9 += 1) {
			/*25953*/
			$put($1.charvals, $geti($1.barchars, _9, 1), _9); /*25953*/
		} /*25953*/
		for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) {
			/*25960*/
			var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; /*25957*/
			if (!_J) { //no-else/*25959*/
				$k[$j++] = 'bwipp.hibccode128badCharacter'; /*25958*/
				$k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*25958*/
				$0.raiseerror(); /*25958*/
			} /*25958*/
		} /*25958*/
		$k[$j++] = 'barlen'; /*25962*/
		$k[$j++] = $1.barcode.length; /*25962*/
		if ($1.validatecheck) { //no-else/*25962*/
			var _M = $k[--$j]; /*25962*/
			$k[$j++] = _M - 1; /*25962*/
		} /*25962*/
		var _N = $k[--$j]; /*25962*/
		$1[$k[--$j]] = _N; /*25962*/
		$1.checksum = 41; /*25964*/
		for (var _R = 0, _Q = $1.barlen - 1; _R <= _Q; _R += 1) {
			/*25968*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum; /*25967*/
		} /*25967*/
		$1.checksum = $1.checksum % 43; /*25969*/
		if ($1.validatecheck) { //no-else/*25975*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*25973*/
				$k[$j++] = 'bwipp.hibccode128badCheckDigit'; /*25972*/
				$k[$j++] = "Incorrect HIBC Code 128 check digit provided"; /*25972*/
				$0.raiseerror(); /*25972*/
			} /*25972*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*25974*/
		} /*25974*/
		var _j = $s($1.barlen + 2); /*25977*/
		$puti(_j, 1, $1.barcode); /*25977*/
		$1.barcode = _j; /*25977*/
		$put($1.barcode, 0, 43); /*25978*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*25979*/
		$1.text = $s($1.barlen + 4); /*25981*/
		$put($1.text, 0, 42); /*25982*/
		$puti($1.text, 1, $1.barcode); /*25983*/
		var _10 = $get($1.barcode, $1.barlen + 1); /*25984*/
		$k[$j++] = $1.text; /*25984*/
		$k[$j++] = $1.barlen + 2; /*25984*/
		$k[$j++] = _10; /*25984*/
		if (_10 == 32) { //no-else/*25984*/
			$j--; /*25984*/
			$k[$j++] = 95; /*25984*/
		} /*25984*/
		var _11 = $k[--$j]; /*25984*/
		var _12 = $k[--$j]; /*25984*/
		$put($k[--$j], _12, _11); /*25984*/
		$put($1.text, $1.barlen + 3, 42); /*25985*/
		$put($1.options, "dontdraw", true); /*25988*/
		$put($1.options, "validatecheck", false); /*25989*/
		$k[$j++] = 'args'; /*25990*/
		$k[$j++] = $1.barcode; /*25990*/
		$k[$j++] = $1.options; /*25990*/
		$0.code128(); /*25990*/
		var _1A = $k[--$j]; /*25990*/
		$1[$k[--$j]] = _1A; /*25990*/
		$put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); /*25992*/
		$put($1.args, "textxalign", "center"); /*25993*/
		$put($1.args, "opt", $1.options); /*25994*/
		$k[$j++] = $1.args; /*25997*/
		if (!$1.dontdraw) { //no-else/*25997*/
			$0.renlinear(); /*25997*/
		} /*25997*/
	};
	$0.hibcdatamatrix = function() {
		var $1 = {}; /*26027*/
		$1.options = $k[--$j]; /*26029*/
		$1.barcode = $k[--$j]; /*26030*/
		$1.dontdraw = false; /*26032*/
		$1.validatecheck = false; /*26033*/
		$forall($1.options, function() {
			/*26044*/
			var _3 = $k[--$j]; /*26044*/
			$1[$k[--$j]] = _3; /*26044*/
		}); /*26044*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*26047*/
		$1.charvals = new Map; /*26048*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*26049*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*26049*/
		} /*26049*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*26056*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*26053*/
			if (!_F) { //no-else/*26055*/
				$k[$j++] = 'bwipp.hibcdatamatrixBadCharacter'; /*26054*/
				$k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*26054*/
				$0.raiseerror(); /*26054*/
			} /*26054*/
		} /*26054*/
		$k[$j++] = 'barlen'; /*26058*/
		$k[$j++] = $1.barcode.length; /*26058*/
		if ($1.validatecheck) { //no-else/*26058*/
			var _I = $k[--$j]; /*26058*/
			$k[$j++] = _I - 1; /*26058*/
		} /*26058*/
		var _J = $k[--$j]; /*26058*/
		$1[$k[--$j]] = _J; /*26058*/
		$1.checksum = 41; /*26060*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*26064*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*26063*/
		} /*26063*/
		$1.checksum = $1.checksum % 43; /*26065*/
		if ($1.validatecheck) { //no-else/*26071*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*26069*/
				$k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit'; /*26068*/
				$k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; /*26068*/
				$0.raiseerror(); /*26068*/
			} /*26068*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*26070*/
		} /*26070*/
		var _f = $s($1.barlen + 2); /*26073*/
		$puti(_f, 1, $1.barcode); /*26073*/
		$1.barcode = _f; /*26073*/
		$put($1.barcode, 0, 43); /*26074*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*26075*/
		$put($1.options, "dontdraw", true); /*26078*/
		$put($1.options, "validatecheck", false); /*26079*/
		$k[$j++] = 'args'; /*26080*/
		$k[$j++] = $1.barcode; /*26080*/
		$k[$j++] = $1.options; /*26080*/
		$0.datamatrix(); /*26080*/
		var _r = $k[--$j]; /*26080*/
		$1[$k[--$j]] = _r; /*26080*/
		$put($1.args, "opt", $1.options); /*26082*/
		$k[$j++] = $1.args; /*26085*/
		if (!$1.dontdraw) { //no-else/*26085*/
			$0.renmatrix(); /*26085*/
		} /*26085*/
	};
	$0.hibcdatamatrixrectangular = function() {
		var $1 = {}; /*26115*/
		$1.options = $k[--$j]; /*26117*/
		$1.barcode = $k[--$j]; /*26118*/
		$1.dontdraw = false; /*26120*/
		$1.validatecheck = false; /*26121*/
		$forall($1.options, function() {
			/*26132*/
			var _3 = $k[--$j]; /*26132*/
			$1[$k[--$j]] = _3; /*26132*/
		}); /*26132*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*26135*/
		$1.charvals = new Map; /*26136*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*26137*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*26137*/
		} /*26137*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*26144*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*26141*/
			if (!_F) { //no-else/*26143*/
				$k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter'; /*26142*/
				$k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*26142*/
				$0.raiseerror(); /*26142*/
			} /*26142*/
		} /*26142*/
		$k[$j++] = 'barlen'; /*26146*/
		$k[$j++] = $1.barcode.length; /*26146*/
		if ($1.validatecheck) { //no-else/*26146*/
			var _I = $k[--$j]; /*26146*/
			$k[$j++] = _I - 1; /*26146*/
		} /*26146*/
		var _J = $k[--$j]; /*26146*/
		$1[$k[--$j]] = _J; /*26146*/
		$1.checksum = 41; /*26148*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*26152*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*26151*/
		} /*26151*/
		$1.checksum = $1.checksum % 43; /*26153*/
		if ($1.validatecheck) { //no-else/*26159*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*26157*/
				$k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit'; /*26156*/
				$k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; /*26156*/
				$0.raiseerror(); /*26156*/
			} /*26156*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*26158*/
		} /*26158*/
		var _f = $s($1.barlen + 2); /*26161*/
		$puti(_f, 1, $1.barcode); /*26161*/
		$1.barcode = _f; /*26161*/
		$put($1.barcode, 0, 43); /*26162*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*26163*/
		$put($1.options, "dontdraw", true); /*26166*/
		$put($1.options, "validatecheck", false); /*26167*/
		$put($1.options, "format", "rectangle"); /*26168*/
		$k[$j++] = 'args'; /*26169*/
		$k[$j++] = $1.barcode; /*26169*/
		$k[$j++] = $1.options; /*26169*/
		$0.datamatrix(); /*26169*/
		var _s = $k[--$j]; /*26169*/
		$1[$k[--$j]] = _s; /*26169*/
		$put($1.args, "opt", $1.options); /*26171*/
		$k[$j++] = $1.args; /*26174*/
		if (!$1.dontdraw) { //no-else/*26174*/
			$0.renmatrix(); /*26174*/
		} /*26174*/
	};
	$0.hibcpdf417 = function() {
		var $1 = {}; /*26204*/
		$1.options = $k[--$j]; /*26206*/
		$1.barcode = $k[--$j]; /*26207*/
		$1.dontdraw = false; /*26209*/
		$1.columns = 2; /*26210*/
		$1.validatecheck = false; /*26211*/
		$forall($1.options, function() {
			/*26222*/
			var _3 = $k[--$j]; /*26222*/
			$1[$k[--$j]] = _3; /*26222*/
		}); /*26222*/
		$1.columns = ~~$1.columns; /*26224*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*26227*/
		$1.charvals = new Map; /*26228*/
		for (var _6 = 0; _6 <= 42; _6 += 1) {
			/*26229*/
			$put($1.charvals, $geti($1.barchars, _6, 1), _6); /*26229*/
		} /*26229*/
		for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) {
			/*26236*/
			var _G = $get($1.charvals, $geti($1.barcode, _C, 1)) !== undefined; /*26233*/
			if (!_G) { //no-else/*26235*/
				$k[$j++] = 'bwipp.hibcpdf417BadCharacter'; /*26234*/
				$k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*26234*/
				$0.raiseerror(); /*26234*/
			} /*26234*/
		} /*26234*/
		$k[$j++] = 'barlen'; /*26238*/
		$k[$j++] = $1.barcode.length; /*26238*/
		if ($1.validatecheck) { //no-else/*26238*/
			var _J = $k[--$j]; /*26238*/
			$k[$j++] = _J - 1; /*26238*/
		} /*26238*/
		var _K = $k[--$j]; /*26238*/
		$1[$k[--$j]] = _K; /*26238*/
		$1.checksum = 41; /*26240*/
		for (var _O = 0, _N = $1.barlen - 1; _O <= _N; _O += 1) {
			/*26244*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _O, 1)) + $1.checksum; /*26243*/
		} /*26243*/
		$1.checksum = $1.checksum % 43; /*26245*/
		if ($1.validatecheck) { //no-else/*26251*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*26249*/
				$k[$j++] = 'bwipp.hibcpdf417BadCheckDigit'; /*26248*/
				$k[$j++] = "Incorrect HIBC PDF417 check digit provided"; /*26248*/
				$0.raiseerror(); /*26248*/
			} /*26248*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*26250*/
		} /*26250*/
		var _g = $s($1.barlen + 2); /*26253*/
		$puti(_g, 1, $1.barcode); /*26253*/
		$1.barcode = _g; /*26253*/
		$put($1.barcode, 0, 43); /*26254*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*26255*/
		$put($1.options, "dontdraw", true); /*26258*/
		$put($1.options, "columns", $1.columns); /*26259*/
		$put($1.options, "validatecheck", false); /*26260*/
		$k[$j++] = 'args'; /*26261*/
		$k[$j++] = $1.barcode; /*26261*/
		$k[$j++] = $1.options; /*26261*/
		$0.pdf417(); /*26261*/
		var _u = $k[--$j]; /*26261*/
		$1[$k[--$j]] = _u; /*26261*/
		$put($1.args, "opt", $1.options); /*26263*/
		$k[$j++] = $1.args; /*26266*/
		if (!$1.dontdraw) { //no-else/*26266*/
			$0.renmatrix(); /*26266*/
		} /*26266*/
	};
	$0.hibcmicropdf417 = function() {
		var $1 = {}; /*26296*/
		$1.options = $k[--$j]; /*26298*/
		$1.barcode = $k[--$j]; /*26299*/
		$1.dontdraw = false; /*26301*/
		$1.columns = 2; /*26302*/
		$1.validatecheck = false; /*26303*/
		$forall($1.options, function() {
			/*26314*/
			var _3 = $k[--$j]; /*26314*/
			$1[$k[--$j]] = _3; /*26314*/
		}); /*26314*/
		$1.columns = ~~$1.columns; /*26316*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*26319*/
		$1.charvals = new Map; /*26320*/
		for (var _6 = 0; _6 <= 42; _6 += 1) {
			/*26321*/
			$put($1.charvals, $geti($1.barchars, _6, 1), _6); /*26321*/
		} /*26321*/
		for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) {
			/*26328*/
			var _G = $get($1.charvals, $geti($1.barcode, _C, 1)) !== undefined; /*26325*/
			if (!_G) { //no-else/*26327*/
				$k[$j++] = 'bwipp.hibcmicropdf417BadCharacter'; /*26326*/
				$k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*26326*/
				$0.raiseerror(); /*26326*/
			} /*26326*/
		} /*26326*/
		$k[$j++] = 'barlen'; /*26330*/
		$k[$j++] = $1.barcode.length; /*26330*/
		if ($1.validatecheck) { //no-else/*26330*/
			var _J = $k[--$j]; /*26330*/
			$k[$j++] = _J - 1; /*26330*/
		} /*26330*/
		var _K = $k[--$j]; /*26330*/
		$1[$k[--$j]] = _K; /*26330*/
		$1.checksum = 41; /*26332*/
		for (var _O = 0, _N = $1.barlen - 1; _O <= _N; _O += 1) {
			/*26336*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _O, 1)) + $1.checksum; /*26335*/
		} /*26335*/
		$1.checksum = $1.checksum % 43; /*26337*/
		if ($1.validatecheck) { //no-else/*26343*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*26341*/
				$k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit'; /*26340*/
				$k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; /*26340*/
				$0.raiseerror(); /*26340*/
			} /*26340*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*26342*/
		} /*26342*/
		var _g = $s($1.barlen + 2); /*26345*/
		$puti(_g, 1, $1.barcode); /*26345*/
		$1.barcode = _g; /*26345*/
		$put($1.barcode, 0, 43); /*26346*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*26347*/
		$put($1.options, "dontdraw", true); /*26350*/
		$put($1.options, "columns", $1.columns); /*26351*/
		$put($1.options, "validatecheck", false); /*26352*/
		$k[$j++] = 'args'; /*26353*/
		$k[$j++] = $1.barcode; /*26353*/
		$k[$j++] = $1.options; /*26353*/
		$0.micropdf417(); /*26353*/
		var _u = $k[--$j]; /*26353*/
		$1[$k[--$j]] = _u; /*26353*/
		$put($1.args, "opt", $1.options); /*26355*/
		$k[$j++] = $1.args; /*26358*/
		if (!$1.dontdraw) { //no-else/*26358*/
			$0.renmatrix(); /*26358*/
		} /*26358*/
	};
	$0.hibcqrcode = function() {
		var $1 = {}; /*26388*/
		$1.options = $k[--$j]; /*26390*/
		$1.barcode = $k[--$j]; /*26391*/
		$1.dontdraw = false; /*26393*/
		$1.validatecheck = false; /*26394*/
		$forall($1.options, function() {
			/*26405*/
			var _3 = $k[--$j]; /*26405*/
			$1[$k[--$j]] = _3; /*26405*/
		}); /*26405*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*26408*/
		$1.charvals = new Map; /*26409*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*26410*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*26410*/
		} /*26410*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*26417*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*26414*/
			if (!_F) { //no-else/*26416*/
				$k[$j++] = 'bwipp.hibcqrcodeBadCharacter'; /*26415*/
				$k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*26415*/
				$0.raiseerror(); /*26415*/
			} /*26415*/
		} /*26415*/
		$k[$j++] = 'barlen'; /*26419*/
		$k[$j++] = $1.barcode.length; /*26419*/
		if ($1.validatecheck) { //no-else/*26419*/
			var _I = $k[--$j]; /*26419*/
			$k[$j++] = _I - 1; /*26419*/
		} /*26419*/
		var _J = $k[--$j]; /*26419*/
		$1[$k[--$j]] = _J; /*26419*/
		$1.checksum = 41; /*26421*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*26425*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*26424*/
		} /*26424*/
		$1.checksum = $1.checksum % 43; /*26426*/
		if ($1.validatecheck) { //no-else/*26432*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*26430*/
				$k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit'; /*26429*/
				$k[$j++] = "Incorrect HIBC QR Code check digit provided"; /*26429*/
				$0.raiseerror(); /*26429*/
			} /*26429*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*26431*/
		} /*26431*/
		var _f = $s($1.barlen + 2); /*26434*/
		$puti(_f, 1, $1.barcode); /*26434*/
		$1.barcode = _f; /*26434*/
		$put($1.barcode, 0, 43); /*26435*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*26436*/
		$put($1.options, "dontdraw", true); /*26439*/
		$put($1.options, "validatecheck", false); /*26440*/
		$k[$j++] = 'args'; /*26441*/
		$k[$j++] = $1.barcode; /*26441*/
		$k[$j++] = $1.options; /*26441*/
		$0.qrcode(); /*26441*/
		var _r = $k[--$j]; /*26441*/
		$1[$k[--$j]] = _r; /*26441*/
		$put($1.args, "opt", $1.options); /*26443*/
		$k[$j++] = $1.args; /*26446*/
		if (!$1.dontdraw) { //no-else/*26446*/
			$0.renmatrix(); /*26446*/
		} /*26446*/
	};
	$0.hibccodablockf = function() {
		var $1 = {}; /*26476*/
		$1.options = $k[--$j]; /*26478*/
		$1.barcode = $k[--$j]; /*26479*/
		$1.dontdraw = false; /*26481*/
		$1.validatecheck = false; /*26482*/
		$forall($1.options, function() {
			/*26493*/
			var _3 = $k[--$j]; /*26493*/
			$1[$k[--$j]] = _3; /*26493*/
		}); /*26493*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*26496*/
		$1.charvals = new Map; /*26497*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*26498*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*26498*/
		} /*26498*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*26505*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*26502*/
			if (!_F) { //no-else/*26504*/
				$k[$j++] = 'bwipp.codablockfBadCharacter'; /*26503*/
				$k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*26503*/
				$0.raiseerror(); /*26503*/
			} /*26503*/
		} /*26503*/
		$k[$j++] = 'barlen'; /*26507*/
		$k[$j++] = $1.barcode.length; /*26507*/
		if ($1.validatecheck) { //no-else/*26507*/
			var _I = $k[--$j]; /*26507*/
			$k[$j++] = _I - 1; /*26507*/
		} /*26507*/
		var _J = $k[--$j]; /*26507*/
		$1[$k[--$j]] = _J; /*26507*/
		$1.checksum = 41; /*26509*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*26513*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*26512*/
		} /*26512*/
		$1.checksum = $1.checksum % 43; /*26514*/
		if ($1.validatecheck) { //no-else/*26520*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*26518*/
				$k[$j++] = 'bwipp.hibccodablockfBadCheckDigit'; /*26517*/
				$k[$j++] = "Incorrect HIBC Codablock F check digit provided"; /*26517*/
				$0.raiseerror(); /*26517*/
			} /*26517*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*26519*/
		} /*26519*/
		var _f = $s($1.barlen + 2); /*26522*/
		$puti(_f, 1, $1.barcode); /*26522*/
		$1.barcode = _f; /*26522*/
		$put($1.barcode, 0, 43); /*26523*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*26524*/
		$put($1.options, "dontdraw", true); /*26527*/
		$put($1.options, "validatecheck", false); /*26528*/
		$k[$j++] = 'args'; /*26529*/
		$k[$j++] = $1.barcode; /*26529*/
		$k[$j++] = $1.options; /*26529*/
		$0.codablockf(); /*26529*/
		var _r = $k[--$j]; /*26529*/
		$1[$k[--$j]] = _r; /*26529*/
		$put($1.args, "opt", $1.options); /*26531*/
		$k[$j++] = $1.args; /*26534*/
		if (!$1.dontdraw) { //no-else/*26534*/
			$0.renmatrix(); /*26534*/
		} /*26534*/
	};
	$0.hibcazteccode = function() {
		var $1 = {}; /*26564*/
		$1.options = $k[--$j]; /*26566*/
		$1.barcode = $k[--$j]; /*26567*/
		$1.dontdraw = false; /*26569*/
		$1.validatecheck = false; /*26570*/
		$forall($1.options, function() {
			/*26581*/
			var _3 = $k[--$j]; /*26581*/
			$1[$k[--$j]] = _3; /*26581*/
		}); /*26581*/
		$1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; /*26584*/
		$1.charvals = new Map; /*26585*/
		for (var _5 = 0; _5 <= 42; _5 += 1) {
			/*26586*/
			$put($1.charvals, $geti($1.barchars, _5, 1), _5); /*26586*/
		} /*26586*/
		for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) {
			/*26593*/
			var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; /*26590*/
			if (!_F) { //no-else/*26592*/
				$k[$j++] = 'bwipp.hibcazteccodeBadCharacter'; /*26591*/
				$k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; /*26591*/
				$0.raiseerror(); /*26591*/
			} /*26591*/
		} /*26591*/
		$k[$j++] = 'barlen'; /*26595*/
		$k[$j++] = $1.barcode.length; /*26595*/
		if ($1.validatecheck) { //no-else/*26595*/
			var _I = $k[--$j]; /*26595*/
			$k[$j++] = _I - 1; /*26595*/
		} /*26595*/
		var _J = $k[--$j]; /*26595*/
		$1[$k[--$j]] = _J; /*26595*/
		$1.checksum = 41; /*26597*/
		for (var _N = 0, _M = $1.barlen - 1; _N <= _M; _N += 1) {
			/*26601*/
			$1.checksum = $get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum; /*26600*/
		} /*26600*/
		$1.checksum = $1.checksum % 43; /*26602*/
		if ($1.validatecheck) { //no-else/*26608*/
			if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //no-else/*26606*/
				$k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit'; /*26605*/
				$k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; /*26605*/
				$0.raiseerror(); /*26605*/
			} /*26605*/
			$1.barcode = $geti($1.barcode, 0, $1.barlen); /*26607*/
		} /*26607*/
		var _f = $s($1.barlen + 2); /*26610*/
		$puti(_f, 1, $1.barcode); /*26610*/
		$1.barcode = _f; /*26610*/
		$put($1.barcode, 0, 43); /*26611*/
		$put($1.barcode, $1.barlen + 1, $get($1.barchars, $1.checksum)); /*26612*/
		$put($1.options, "dontdraw", true); /*26615*/
		$put($1.options, "validatecheck", false); /*26616*/
		$k[$j++] = 'args'; /*26617*/
		$k[$j++] = $1.barcode; /*26617*/
		$k[$j++] = $1.options; /*26617*/
		$0.azteccode(); /*26617*/
		var _r = $k[--$j]; /*26617*/
		$1[$k[--$j]] = _r; /*26617*/
		$put($1.args, "opt", $1.options); /*26619*/
		$k[$j++] = $1.args; /*26622*/
		if (!$1.dontdraw) { //no-else/*26622*/
			$0.renmatrix(); /*26622*/
		} /*26622*/
	};
	$0.channelcode = function() {
		var $1 = {}; /*26652*/
		$1.options = $k[--$j]; /*26654*/
		$1.barcode = $k[--$j]; /*26655*/
		$1.dontdraw = false; /*26657*/
		$1.shortfinder = false; /*26658*/
		$1.includetext = false; /*26659*/
		$1.includecheck = false; /*26660*/
		$1.height = 1; /*26661*/
		$forall($1.options, function() {
			/*26672*/
			var _3 = $k[--$j]; /*26672*/
			$1[$k[--$j]] = _3; /*26672*/
		}); /*26672*/
		$1.height = +$1.height; /*26674*/
		if (($1.barcode.length < 2) || ($1.barcode.length > 7)) { //no-else/*26679*/
			$k[$j++] = 'bwipp.channelcodeBadLength'; /*26678*/
			$k[$j++] = "Channel Code must be 2 to 7 digits"; /*26678*/
			$0.raiseerror(); /*26678*/
		} /*26678*/
		$forall($1.barcode, function() {
			/*26684*/
			var _9 = $k[--$j]; /*26681*/
			if ((_9 < 48) || (_9 > 57)) { //no-else/*26683*/
				$k[$j++] = 'bwipp.channelcodeBadCharacter'; /*26682*/
				$k[$j++] = "Channel Code must contain only digits"; /*26682*/
				$0.raiseerror(); /*26682*/
			} /*26682*/
		}); /*26682*/
		if ((~~$z($1.barcode)) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $1.barcode.length - 2)) { //no-else/*26687*/
			$k[$j++] = 'bwipp.channelcodeTooBig'; /*26686*/
			$k[$j++] = "The Channel Code value is too big for the number of channels"; /*26686*/
			$0.raiseerror(); /*26686*/
		} /*26686*/
		$1.nextb = function() {
			var _E = $k[--$j]; /*26690*/
			var _N = (($get($1.s, _E) + ($get($1.b, _E - 1) + ($get($1.b, _E - 2) + $get($1.s, _E - 1)))) > 4) ? 1 : 2; /*26695*/
			$k[$j++] = _E; /*26711*/
			$k[$j++] = _N; /*26711*/
			if (_E < ($1.chan + 2)) {
				/*26709*/
				var _P = $k[--$j]; /*26697*/
				var _Q = $k[--$j]; /*26697*/
				var _R = $k[--$j]; /*26697*/
				$k[$j++] = _R; /*26700*/
				$k[$j++] = _Q; /*26700*/
				$k[$j++] = _P; /*26700*/
				for (var _T = _P, _S = _R; _T <= _S; _T += 1) {
					/*26700*/
					var _V = $k[--$j]; /*26698*/
					var _W = $k[--$j]; /*26698*/
					$put($1.b, _W, _T); /*26698*/
					var _X = $k[--$j]; /*26699*/
					var _Y = $k[--$j]; /*26699*/
					$k[$j++] = _Y; /*26699*/
					$k[$j++] = _X; /*26699*/
					$k[$j++] = _W; /*26699*/
					$k[$j++] = _V; /*26699*/
					$k[$j++] = (_X - _T) + 1; /*26699*/
					$k[$j++] = _Y; /*26699*/
					$k[$j++] = _W + 1; /*26699*/
					$1.nexts(); /*26699*/
				} /*26699*/
			} else {
				/*26709*/
				var _Z = $k[--$j]; /*26702*/
				var _a = $k[--$j]; /*26702*/
				var _b = $k[--$j]; /*26702*/
				$k[$j++] = _b; /*26710*/
				$k[$j++] = _a; /*26710*/
				$k[$j++] = _Z; /*26710*/
				if ($le(_Z, _b)) { //no-else/*26710*/
					var _d = $k[--$j]; /*26703*/
					var _e = $k[--$j]; /*26703*/
					var _f = $k[--$j]; /*26703*/
					$put($1.b, _e, _f); /*26703*/
					$k[$j++] = _f; /*26708*/
					$k[$j++] = _e; /*26708*/
					$k[$j++] = _d; /*26708*/
					if ($1.value == $1.target) { //no-else/*26708*/
						$k[$j++] = Infinity; /*26707*/
						for (var _i = 3; _i <= 10; _i += 1) {
							/*26706*/
							$k[$j++] = $get($1.s, _i); /*26706*/
							$k[$j++] = $get($1.b, _i); /*26706*/
						} /*26706*/
						$1.out = $geti($a(), 0, $1.chan * 2); /*26707*/
					} /*26707*/
					$1.value = $1.value + 1; /*26709*/
				} /*26709*/
			} /*26709*/
			$j -= 4; /*26712*/
		}; /*26713*/
		$1.nexts = function() {
			var _r = $k[--$j]; /*26716*/
			$k[$j++] = _r; /*26716*/
			if (_r < ($1.chan + 2)) {
				/*26716*/
				$k[$j++] = 1; /*26716*/
			} else {
				/*26716*/
				var _t = $k[--$j]; /*26716*/
				var _u = $k[--$j]; /*26716*/
				$k[$j++] = _u; /*26716*/
				$k[$j++] = _t; /*26716*/
				$k[$j++] = _u; /*26716*/
			} /*26716*/
			var _v = $k[--$j]; /*26716*/
			var _w = $k[--$j]; /*26716*/
			var _x = $k[--$j]; /*26716*/
			$k[$j++] = _x; /*26719*/
			$k[$j++] = _w; /*26719*/
			for (var _z = _v, _y = _x; _z <= _y; _z += 1) {
				/*26719*/
				var _11 = $k[--$j]; /*26717*/
				$put($1.s, _11, _z); /*26717*/
				var _12 = $k[--$j]; /*26718*/
				var _13 = $k[--$j]; /*26718*/
				$k[$j++] = _13; /*26718*/
				$k[$j++] = _12; /*26718*/
				$k[$j++] = _11; /*26718*/
				$k[$j++] = (_12 - _z) + 1; /*26718*/
				$k[$j++] = _13; /*26718*/
				$k[$j++] = _11; /*26718*/
				$1.nextb(); /*26718*/
			} /*26718*/
			$j -= 3; /*26720*/
		}; /*26721*/
		$1.encode = function() {
			$1.chan = $k[--$j]; /*26724*/
			$1.target = $k[--$j]; /*26725*/
			$1.value = 0; /*26726*/
			$1.out = -1; /*26727*/
			$1.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); /*26728*/
			$1.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); /*26729*/
			var _18 = $1.chan; /*26730*/
			$k[$j++] = _18; /*26730*/
			$k[$j++] = _18; /*26730*/
			$k[$j++] = 3; /*26730*/
			$1.nexts(); /*26730*/
			$k[$j++] = $1.out; /*26731*/
		}; /*26732*/
		$1.barlen = $1.barcode.length; /*26734*/
		$k[$j++] = 'finder'; /*26737*/
		if ($1.shortfinder) {
			/*26737*/
			$k[$j++] = $a([1, 1, 1, 1, 1]); /*26737*/
		} else {
			/*26737*/
			$k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); /*26737*/
		} /*26737*/
		var _1E = $k[--$j]; /*26737*/
		$1[$k[--$j]] = _1E; /*26737*/
		$k[$j++] = 'data'; /*26740*/
		$k[$j++] = ~~$z($1.barcode); /*26740*/
		$k[$j++] = $1.barlen + 1; /*26740*/
		$1.encode(); /*26740*/
		var _1I = $k[--$j]; /*26740*/
		$1[$k[--$j]] = _1I; /*26740*/
		$1.check = $a([]); /*26743*/
		if ($1.includecheck) { //no-else/*26759*/
			$1.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $1.barlen); /*26753*/
			$k[$j++] = 0; /*26757*/
			for (var _1Z = 0, _1Y = $1.data.length - 1; _1Z <= _1Y; _1Z += 1) {
				/*26757*/
				var _1e = $k[--$j]; /*26756*/
				$k[$j++] = _1e + (($get($1.data, _1Z) - 1) * $get($1.mod23, _1Z)); /*26756*/
			} /*26756*/
			var _1f = $k[--$j]; /*26758*/
			$k[$j++] = _1f % 23; /*26758*/
			$k[$j++] = 3; /*26758*/
			$1.encode(); /*26758*/
			$1.check = $k[--$j]; /*26758*/
		} /*26758*/
		$k[$j++] = Infinity; /*26766*/
		$aload($1.finder); /*26763*/
		$aload($1.data); /*26764*/
		$aload($1.check); /*26765*/
		$1.sbs = $a(); /*26766*/
		$1.txt = $a($1.barlen); /*26769*/
		for (var _1p = 0, _1o = $1.barlen - 1; _1p <= _1o; _1p += 1) {
			/*26773*/
			$1.i = _1p; /*26771*/
			$put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); /*26772*/
		} /*26772*/
		$k[$j++] = Infinity; /*26783*/
		var _1w = $1.sbs; /*26778*/
		$k[$j++] = Infinity; /*26780*/
		for (var _1y = 0, _1z = ~~(($1.sbs.length + 1) / 2); _1y < _1z; _1y++) {
			/*26779*/
			$k[$j++] = $1.height; /*26779*/
		} /*26779*/
		var _21 = $a(); /*26780*/
		$k[$j++] = Infinity; /*26781*/
		for (var _23 = 0, _24 = ~~(($1.sbs.length + 1) / 2); _23 < _24; _23++) {
			/*26780*/
			$k[$j++] = 0; /*26780*/
		} /*26780*/
		var _25 = $a(); /*26781*/
		$k[$j++] = 'ren'; /*26783*/
		$k[$j++] = $0.renlinear; /*26783*/
		$k[$j++] = 'sbs'; /*26783*/
		$k[$j++] = _1w; /*26783*/
		$k[$j++] = 'bhs'; /*26783*/
		$k[$j++] = _21; /*26783*/
		$k[$j++] = 'bbs'; /*26783*/
		$k[$j++] = _25; /*26783*/
		$k[$j++] = 'txt'; /*26783*/
		$k[$j++] = $1.txt; /*26783*/
		$k[$j++] = 'textxalign'; /*26783*/
		$k[$j++] = "center"; /*26783*/
		$k[$j++] = 'opt'; /*26783*/
		$k[$j++] = $1.options; /*26783*/
		var _28 = $d(); /*26783*/
		$k[$j++] = _28; /*26786*/
		if (!$1.dontdraw) { //no-else/*26786*/
			$0.renlinear(); /*26786*/
		} /*26786*/
	};
	$0.renlinear = function() {
		if ($0.bwipjs_dontdraw) { //no-else/*26807*/
			return; /*26807*/
		} /*26807*/
		var $1 = {}; /*26808*/
		$1.args = $k[--$j]; /*26810*/
		$1.sbs = $a([]); /*26813*/
		$1.bhs = $a([]); /*26814*/
		$1.bbs = $a([]); /*26815*/
		$1.txt = $a([]); /*26816*/
		$1.barcolor = "unset"; /*26817*/
		$1.includetext = false; /*26818*/
		$1.textcolor = "unset"; /*26819*/
		$1.textxalign = "unset"; /*26820*/
		$1.textyalign = "unset"; /*26821*/
		$1.textfont = "Courier"; /*26822*/
		$1.textsize = 10; /*26823*/
		$1.textxoffset = 0; /*26824*/
		$1.textyoffset = 0; /*26825*/
		$1.textgaps = 0; /*26826*/
		$1.alttext = ""; /*26827*/
		$1.bordercolor = "unset"; /*26828*/
		$1.backgroundcolor = "unset"; /*26829*/
		$1.inkspread = 0; /*26830*/
		$1.width = 0; /*26831*/
		$1.barratio = 1; /*26832*/
		$1.spaceratio = 1; /*26833*/
		$1.showborder = false; /*26834*/
		$1.borderleft = 10; /*26835*/
		$1.borderright = 10; /*26836*/
		$1.bordertop = 1; /*26837*/
		$1.borderbottom = 1; /*26838*/
		$1.borderwidth = 0.5; /*26839*/
		$1.guardwhitespace = false; /*26840*/
		$1.guardleftpos = 0; /*26841*/
		$1.guardleftypos = 0; /*26842*/
		$1.guardrightpos = 0; /*26843*/
		$1.guardrightypos = 0; /*26844*/
		$1.guardwidth = 7; /*26845*/
		$1.guardheight = 7; /*26846*/
		$forall($1.args, function() {
			/*26849*/
			var _7 = $k[--$j]; /*26849*/
			$1[$k[--$j]] = _7; /*26849*/
		}); /*26849*/
		var _9 = $1.opt; /*26850*/
		for (var _E = _9.size, _D = _9.keys(), _C = 0; _C < _E; _C++) {
			/*26850*/
			var _A = _D.next().value; /*26850*/
			$1[_A] = _9.get(_A); /*26850*/
		} /*26850*/
		$1.barcolor = "" + $1.barcolor; /*26852*/
		$1.textcolor = "" + $1.textcolor; /*26853*/
		$1.textxalign = "" + $1.textxalign; /*26854*/
		$1.textyalign = "" + $1.textyalign; /*26855*/
		$1.textfont = "" + $1.textfont; /*26856*/
		$1.textsize = +$1.textsize; /*26857*/
		$1.textxoffset = +$1.textxoffset; /*26858*/
		$1.textyoffset = +$1.textyoffset; /*26859*/
		$1.textgaps = +$1.textgaps; /*26860*/
		$1.alttext = "" + $1.alttext; /*26861*/
		$1.bordercolor = "" + $1.bordercolor; /*26862*/
		$1.backgroundcolor = "" + $1.backgroundcolor; /*26863*/
		$1.inkspread = +$1.inkspread; /*26864*/
		$1.width = +$1.width; /*26865*/
		$1.barratio = +$1.barratio; /*26866*/
		$1.spaceratio = +$1.spaceratio; /*26867*/
		$1.borderleft = +$1.borderleft; /*26868*/
		$1.borderright = +$1.borderright; /*26869*/
		$1.bordertop = +$1.bordertop; /*26870*/
		$1.borderbottom = +$1.borderbottom; /*26871*/
		$1.borderwidth = +$1.borderwidth; /*26872*/
		$1.guardleftpos = +$1.guardleftpos; /*26873*/
		$1.guardleftypos = +$1.guardleftypos; /*26874*/
		$1.guardrightpos = +$1.guardrightpos; /*26875*/
		$1.guardrightypos = +$1.guardrightypos; /*26876*/
		$1.guardwidth = +$1.guardwidth; /*26877*/
		$1.guardheight = +$1.guardheight; /*26878*/
		$1.bars = $a(~~(($1.sbs.length + 1) / 2)); /*26881*/
		$1.x = 0; /*26882*/
		$1.maxh = 0; /*26882*/
		for (var _k = 0, _j = ((~~(($1.sbs.length + 1) / 2)) * 2) - 2; _k <= _j; _k += 1) {
			/*26901*/
			$1.i = _k; /*26884*/
			if (($1.i % 2) == 0) {
				/*26898*/
				$1.d = (($get($1.sbs, $1.i) * $1.barratio) - $1.barratio) + 1; /*26886*/
				if ($get($1.sbs, $1.i) != 0) {
					/*26895*/
					$1.h = $get($1.bhs, ~~($1.i / 2)) * 72; /*26888*/
					$1.c = ($1.d / 2) + $1.x; /*26889*/
					$1.y = $get($1.bbs, ~~($1.i / 2)) * 72; /*26890*/
					$1.w = $1.d - $1.inkspread; /*26891*/
					$put($1.bars, ~~($1.i / 2), $a([$1.h, $1.c, $1.y, $1.w])); /*26892*/
					if (($1.h + $1.y) > $1.maxh) { //no-else/*26893*/
						$1.maxh = $1.h + $1.y; /*26893*/
					} /*26893*/
				} else {
					/*26895*/
					$put($1.bars, ~~($1.i / 2), -1); /*26895*/
				} /*26895*/
			} else {
				/*26898*/
				$1.d = (($get($1.sbs, $1.i) * $1.spaceratio) - $1.spaceratio) + 1; /*26898*/
			} /*26898*/
			$1.x = $1.x + $1.d; /*26900*/
		} /*26900*/
		$$.save(); /*26903*/
		var _1P = $$.currpos(); /*26905*/
		$$.translate(_1P.x, _1P.y); /*26905*/
		if ($1.width != 0) { //no-else/*26910*/
			$$.scale(($1.width * 72) / $1.x, 1); /*26909*/
		} /*26909*/
		$$.newpath(); /*26913*/
		$$.moveto(-$1.borderleft, -$1.borderbottom); /*26914*/
		$$.rlineto(($1.x + $1.borderleft) + $1.borderright, 0); /*26915*/
		$$.rlineto(0, ($1.maxh + $1.borderbottom) + $1.bordertop); /*26916*/
		$$.rlineto(-(($1.x + $1.borderleft) + $1.borderright), 0); /*26917*/
		$$.rlineto(0, -(($1.maxh + $1.borderbottom) + $1.bordertop)); /*26918*/
		$$.closepath(); /*26919*/
		if ($1.showborder) { //no-else/*26927*/
			$$.save(); /*26923*/
			if ($ne($1.bordercolor, "unset")) { //no-else/*26924*/
				$$.setcolor($1.bordercolor); /*26924*/
			} /*26924*/
			$$.setlinewidth($1.borderwidth); /*26925*/
			$$.stroke(); /*26925*/
			$$.restore(); /*26926*/
		} /*26926*/
		$$.save(); /*26930*/
		if ($ne($1.barcolor, "unset")) { //no-else/*26932*/
			$$.setcolor($1.barcolor); /*26932*/
		} /*26932*/
		var _1n = $1.bars; /*26933*/
		for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) {
			/*26939*/
			var _1q = $get(_1n, _1o); /*26939*/
			$k[$j++] = _1q; /*26938*/
			if (_1q != -1) {
				/*26937*/
				$aload($k[--$j]); /*26935*/
				$$.newpath(); /*26935*/
				$$.setlinewidth($k[--$j]); /*26935*/
				var _1t = $k[--$j]; /*26935*/
				$$.moveto($k[--$j], _1t); /*26935*/
				$$.rlineto(0, $k[--$j]); /*26935*/
				$$.stroke(); /*26935*/
			} else {
				/*26937*/
				$j--; /*26937*/
			} /*26937*/
		} /*26937*/
		$$.restore(); /*26940*/
		if ($ne($1.textcolor, "unset")) { //no-else/*26943*/
			$$.setcolor($1.textcolor); /*26943*/
		} /*26943*/
		if ($1.includetext) { //no-else/*27000*/
			if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) {
				/*26998*/
				$1.s = 0; /*26946*/
				$1.fn = ""; /*26946*/
				var _22 = $1.txt; /*26947*/
				for (var _23 = 0, _24 = _22.length; _23 < _24; _23++) {
					/*26956*/
					$forall($get(_22, _23)); /*26948*/
					var _26 = $k[--$j]; /*26949*/
					var _27 = $k[--$j]; /*26949*/
					$k[$j++] = _27; /*26954*/
					$k[$j++] = _26; /*26954*/
					if ((_26 != $1.s) || $ne(_27, $1.fn)) {
						/*26953*/
						var _2A = $k[--$j]; /*26950*/
						var _2B = $k[--$j]; /*26950*/
						$1.s = _2A; /*26950*/
						$1.fn = _2B; /*26950*/
						$$.selectfont(_2B, _2A); /*26951*/
					} else {
						/*26953*/
						$j -= 2; /*26953*/
					} /*26953*/
					var _2C = $k[--$j]; /*26955*/
					$$.moveto($k[--$j], _2C); /*26955*/
					$$.show($k[--$j], 0, 0); /*26955*/
				} /*26955*/
			} else {
				/*26998*/
				$$.selectfont($1.textfont, $1.textsize); /*26958*/
				if ($eq($1.alttext, "")) {
					/*26964*/
					$k[$j++] = Infinity; /*26960*/
					var _2I = $1.txt; /*26960*/
					for (var _2J = 0, _2K = _2I.length; _2J < _2K; _2J++) {
						/*26960*/
						$forall($get($get(_2I, _2J), 0)); /*26960*/
					} /*26960*/
					$1.txt = $a(); /*26960*/
					$1.tstr = $s($1.txt.length); /*26961*/
					for (var _2S = 0, _2R = $1.txt.length - 1; _2S <= _2R; _2S += 1) {
						/*26962*/
						$put($1.tstr, _2S, $get($1.txt, _2S)); /*26962*/
					} /*26962*/
				} else {
					/*26964*/
					$1.tstr = $1.alttext; /*26964*/
				} /*26964*/
				if ($1.tstr.length == 0) {
					/*26974*/
					$k[$j++] = 0; /*26969*/
				} else {
					/*26974*/
					$$.save(); /*26971*/
					$$.newpath(); /*26972*/
					$$.moveto(0, 0); /*26972*/
					$$.charpath("0", false); /*26972*/
					var _2Y = $$.pathbbox(); /*26972*/
					$$.restore(); /*26974*/
					$k[$j++] = _2Y.ury; /*26974*/
				} /*26974*/
				$1.textascent = $k[--$j]; /*26983*/
				var _2b = $$.stringwidth($1.tstr); /*26984*/
				$1.textwidth = _2b.w + (($1.tstr.length - 1) * $1.textgaps); /*26984*/
				$1.textxpos = $1.textxoffset + (($1.x - $1.textwidth) / 2); /*26986*/
				if ($eq($1.textxalign, "left")) { //no-else/*26987*/
					$1.textxpos = $1.textxoffset; /*26987*/
				} /*26987*/
				if ($eq($1.textxalign, "right")) { //no-else/*26988*/
					$1.textxpos = ($1.x - $1.textxoffset) - $1.textwidth; /*26988*/
				} /*26988*/
				if ($eq($1.textxalign, "offleft")) { //no-else/*26989*/
					$1.textxpos = -($1.textwidth + $1.textxoffset); /*26989*/
				} /*26989*/
				if ($eq($1.textxalign, "offright")) { //no-else/*26990*/
					$1.textxpos = $1.x + $1.textxoffset; /*26990*/
				} /*26990*/
				if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.x)) { //no-else/*26994*/
					$1.textxpos = 0; /*26992*/
					$1.textgaps = ($1.x - $1.textwidth) / ($1.tstr.length - 1); /*26993*/
				} /*26993*/
				$1.textypos = -(($1.textyoffset + $1.textascent) + 1); /*26995*/
				if ($eq($1.textyalign, "above")) { //no-else/*26996*/
					$1.textypos = ($1.textyoffset + $1.maxh) + 1; /*26996*/
				} /*26996*/
				if ($eq($1.textyalign, "center")) { //no-else/*26997*/
					$1.textypos = $1.textyoffset + (($1.maxh - $1.textascent) / 2); /*26997*/
				} /*26997*/
				$$.moveto($1.textxpos, $1.textypos); /*26998*/
				$$.show($1.tstr, $1.textgaps, 0); /*26998*/
			} /*26998*/
		} /*26998*/
		if ($1.guardwhitespace) { //no-else/*27013*/
			$$.selectfont("OCR-B", $1.guardheight * 2); /*27004*/
			if ($1.guardleftpos != 0) { //no-else/*27008*/
				$$.moveto((-$1.guardleftpos) - 1, ($1.guardleftypos - ($1.guardheight / 2)) - 1.5); /*27006*/
				$$.show("<", 0, 0); /*27007*/
			} /*27007*/
			if ($1.guardrightpos != 0) { //no-else/*27012*/
				$$.moveto((($1.guardrightpos + $1.x) - $1.guardwidth) + 1, ($1.guardrightypos - ($1.guardheight / 2)) - 1.5); /*27010*/
				$$.show(">", 0, 0); /*27011*/
			} /*27011*/
		} /*27011*/
		$$.restore(); /*27015*/
	};
	$0.renmaximatrix = function() {
		if ($0.bwipjs_dontdraw) { //no-else/*27035*/
			return; /*27035*/
		} /*27035*/
		var $1 = {}; /*27037*/
		$1.args = $k[--$j]; /*27039*/
		$1.barcolor = "unset"; /*27042*/
		$1.backgroundcolor = "unset"; /*27043*/
		$forall($1.args, function() {
			/*27046*/
			var _3 = $k[--$j]; /*27046*/
			$1[$k[--$j]] = _3; /*27046*/
		}); /*27046*/
		var _5 = $1.opt; /*27047*/
		for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) {
			/*27047*/
			var _6 = _9.next().value; /*27047*/
			$1[_6] = _5.get(_6); /*27047*/
		} /*27047*/
		$1.barcolor = "" + $1.barcolor; /*27049*/
		$1.backgroundcolor = "" + $1.backgroundcolor; /*27050*/
		$$.save(); /*27052*/
		if ($ne($1.barcolor, "unset")) { //no-else/*27054*/
			$$.setcolor($1.barcolor); /*27054*/
		} /*27054*/
		$$.maxicode($1.pixs); /*27055*/
		$$.restore(); /*27057*/
	};
	// bwip-js/barcode-ftr.js
	//
	// This code is injected below the cross-compiled barcode.ps.

	// The BWIPP symbol is a factory object.  When called, it returns this
	// function, which is a re-usable postscript emulation for BWIPP.
	return function(bwipjs, encoder, text, opts, dontdraw) {
		if (!$0[encoder]) {
			throw new Error('bwipp.unknownEncoder: ' + encoder);
		}
		if (typeof text !== 'string') {
			throw new Error('bwipp.typeError: barcode text not a string (' +
				text + ')');
		}
		opts = opts || {};
		if (typeof opts === 'string') {
			var tmp = opts.split(' ');
			opts = {};
			for (var i = 0; i < tmp.length; i++) {
				if (!tmp[i]) {
					continue;
				}
				var eq = tmp[i].indexOf('=');
				if (eq == -1) {
					opts[tmp[i]] = true;
				} else {
					opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
				}
			}
		} else if (typeof opts !== 'object' || opts.constructor !== Object) {
			throw new Error('bwipp.typeError: options not an object');
		}

		// Convert utf-16 to utf-8 but leave binary (8-bit) strings untouched.
		if (/[\u0100-\uffff]/.test(text)) {
			text = unescape(encodeURIComponent(text));
		}

		// Handle the `parse` option here rather than in BWIPP - eliminates
		// conflict with the parsefnc option and allows removing the parsing
		// code from BWIPP.
		if (opts.parse) {
			text = text.replace(/\^(\d\d\d)/g, function($0, $1) {
				var v = +$1;
				if (v > 255) {
					throw new Error('bwipp.rangeError:' +
						' ^NNN out-of-range (' + $0 + ')');
				}
				return String.fromCharCode(v);
			});
			delete opts.parse;
		}

		// Don't draw? (See file runtest)
		$0.bwipjs_dontdraw = dontdraw || false;

		// Convert opts to a Map
		var map = new Map;
		for (var id in opts) {
			if (opts.hasOwnProperty(id)) {
				map.set(id, opts[id]);
			}
		}

		// Invoke the encoder
		$$ = bwipjs;
		$k = [text, map];
		$j = 2;
		$0[encoder]();

		// Return what is left on the stack.  This branch should only be taken
		// when running tests with the dontdraw option.
		if ($j) {
			return $k.splice(0, $j);
		}

		return true;
	}
}
BWIPP.VERSION = '2019-11-08';
// file : bwipjs.js
//
// Graphics-context interface to the BWIPP cross-compiled code

var BWIPJS = (function() {
"use strict";

// Math.floor(), etc. are notoriously slow.  Caching seems to help.
var floor = Math.floor;
var round = Math.round;
var ceil  = Math.ceil;
var min	  = Math.min;
var max	  = Math.max;

function BWIPJS(drawing) {
	if (this.constructor !== BWIPJS) {
		return new BWIPJS(drawing);
	}
	this.gstk	 = [];		// Graphics save/restore stack
	this.cmds	 = [];		// Graphics primitives to replay when rendering
	this.drawing = drawing;	// Drawing interface

	this.reset();

	// Drawing surface bounding box
	this.minx = this.miny = Infinity;
	this.maxx = this.maxy = -Infinity;
};

// All graphics state that must be saved/restored is given a prefix of g_
BWIPJS.prototype.reset = function() {
	// Current Transform Matrix - since we don't do rotation, we can fake
	// the matrix math
	this.g_tdx	= 0;		// CTM x-offset
	this.g_tdy	= 0;		// CTM y-offset
	this.g_tsx	= 1;		// CTM x-scale factor
	this.g_tsy	= 1;		// CTM y-scale factor

	this.g_posx	= 0;		// current x position
	this.g_posy	= 0;		// current y position
	this.g_penw	= 1;		// current line/pen width
	this.g_path	= [];		// current path
	this.g_font	= null;		// current font object
	this.g_rgb  = [0,0,0];	// current color (black)
};
BWIPJS.prototype.save = function() {
	// clone all g_ properties
	var ctx = {};
	for (var id in this) {
		if (id.indexOf('g_') == 0) {
			ctx[id] = clone(this[id]);
		}
	}
	this.gstk.push(ctx);

	// Perform a deep clone of the graphics state properties
	function clone(v) {
		if (v instanceof Array) {
			var t = [];
			for (var i = 0; i < v.length; i++)
				t[i] = clone(v[i]);
			return t;
		}
		if (v instanceof Object) {
			var t = {};
			for (var id in v)
				t[id] = clone(v[id]);
			return t;
		}
		return v;
	}
};
BWIPJS.prototype.restore = function() {
	if (!this.gstk.length) {
		throw new Error('grestore: stack underflow');
	}
	var ctx = this.gstk.pop();
	for (var id in ctx) {
		this[id] = ctx[id];
	}
};
// Per the postscript spec:
//	As discussed in Section 4.4.1, Current Path, points entered into a path
//	are immediately converted to device coordinates by the current
//	transformation matrix (CTM); subsequent modifications to the CTM do not
//	affect existing points.  `currentpoint` computes the user space
//	coordinates corresponding to the current point according to the current
//	value of the CTM. Thus, if a current point is set and then the CTM is
//	changed, the coordinates returned by currentpoint will be different
//	from those that were originally specified for the point. 
BWIPJS.prototype.currpos = function() {
	return { x:(this.g_posx-this.g_tdx)/this.g_tsx,
			 y:(this.g_posy-this.g_tdy)/this.g_tsy
		};
};
BWIPJS.prototype.currfont = function() {
	return this.g_font;
};
BWIPJS.prototype.translate = function(x, y) {
	this.g_tdx = this.g_tsx * x;
	this.g_tdy = this.g_tsy * y;
};
BWIPJS.prototype.scale = function(x, y) {
	this.g_tsx *= x;
	this.g_tsy *= y;
	var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);
	if (sxy && sxy[0] && sxy[1]) {
		this.g_tsx = sxy[0];
		this.g_tsy = sxy[1];
	}
};
BWIPJS.prototype.setlinewidth = function(w) {
	this.g_penw = w;
};
BWIPJS.prototype.selectfont = function(f, z) {
	this.g_font = { FontName:this.jsstring(f), FontSize:+z };
};
BWIPJS.prototype.getfont = function() {
	return this.g_font.FontName;
};
// Special function for converting a Uint8Array string to string.
BWIPJS.prototype.jsstring = function(s) {
	if (s instanceof Uint8Array) {
		// Postscript (like C) treats nul-char as end of string.
		for (var i = 0, l = s.length; i < l && s[i]; i++);
		if (i < l) {
			return String.fromCharCode.apply(null,s.subarray(0, i));
		}
		return String.fromCharCode.apply(null,s)
	}
	return ''+s;
};
// Special function to replace setanycolor in BWIPP
// Takes a string of hex digits either 6 chars in length (rrggbb) or
// 8 chars (ccmmyykk).
BWIPJS.prototype.setcolor = function(s) {
	if (s instanceof Uint8Array) {
		s = this.jsstring(s);
	}
	if (s.length == 6) {
		var r = parseInt(s.substr(0,2), 16);
		var g = parseInt(s.substr(2,2), 16);
		var b = parseInt(s.substr(4,2), 16);
		this.g_rgb = [ r, g, b ];
	} else if (s.length == 8) {
		var c = parseInt(s.substr(0,2), 16) / 255;
		var m = parseInt(s.substr(2,2), 16) / 255;
		var y = parseInt(s.substr(4,2), 16) / 255;
		var k = parseInt(s.substr(6,2), 16) / 255;
		var r = round((1-c) * (1-k) * 255);
		var g = round((1-m) * (1-k) * 255);
		var b = round((1-y) * (1-k) * 255);
		this.g_rgb = [ r, g, b ];
	}
};
// Returns the current rgb values as a 'RRGGBB'
BWIPJS.prototype.getRGB = function() {
	var r = this.g_rgb[0].toString(16);
	var g = this.g_rgb[1].toString(16);
	var b = this.g_rgb[2].toString(16);
	return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(g.length) + g;
};
BWIPJS.prototype.newpath = function() {
	this.g_path = [];
};
BWIPJS.prototype.closepath = function() {
	var path = this.g_path;
	var plen = path.length;
	if (!plen) return;

	var f = plen-1;
	for ( ; f >= 0 && path[f].op == 'l'; f--);
	f++;
	if (f < plen-1) {
		var poly = [];
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		for (var i = f; i < plen; i++) {
			var a = path[i];
			poly.push([ a.x0, a.y0 ]);
			if (xmin > a.x0) xmin = a.x0;
			if (xmax < a.x0) xmax = a.x0;
			if (ymin > a.y0) ymin = a.y0;
			if (ymax < a.y0) ymax = a.y0;
		}
		var a = path[plen-1];
		var b = path[f];
		if (a.x1 != b.x0 || a.y1 != b.y0) {
			poly.push([ a.x1, a.y1 ]);
			if (xmin > a.x1) xmin = a.x1;
			if (xmax < a.x1) xmax = a.x1;
			if (ymin > a.y1) ymin = a.y1;
			if (ymax < a.y1) ymax = a.y1;
		}
		path.splice(f, plen-f,
					{ op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });
	} else {
		path.push({ op:'c' });
	}
};
BWIPJS.prototype.moveto = function(x,y) {
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
};
BWIPJS.prototype.rmoveto = function(x,y) {
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
};
BWIPJS.prototype.lineto = function(x,y) {
	var x0 = this.g_posx;
	var y0 = this.g_posy;
	var x1 = this.g_posx = this.g_tdx + this.g_tsx * x;
	var y1 = this.g_posy = this.g_tdy + this.g_tsy * y;

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
BWIPJS.prototype.rlineto = function(x,y) {
	var x0 = this.g_posx;
	var y0 = this.g_posy;
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
	var x1 = this.g_posx;
	var y1 = this.g_posy;

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
// implements both arc and arcn
BWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {
	if (sa == ea) {
		return;
	}
	// For now, we only implement full circles...
	if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {
		throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');
	}

	x = this.g_tdx + this.g_tsx * x;
	y = this.g_tdy + this.g_tsy * y;

	// e == ellipse
	var rx = r * this.g_tsx;
	var ry = r * this.g_tsy;
	this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,
								x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });
};
BWIPJS.prototype.stringwidth = function(str) {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var size = +this.g_font.FontSize || 10;

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);

	return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,
			 a:bbox.ascent/tsy, d:bbox.descent/tsy };
};
BWIPJS.prototype.charpath = function(str, b) {
	var sw = this.stringwidth(str);

	// Emulate the char-path by placing a rectangle around it
	this.rlineto(0, sw.a);
	this.rlineto(sw.w, 0);
	this.rlineto(0, -sw.h);
};
BWIPJS.prototype.pathbbox = function() {
	if (!this.g_path.length)	throw new Error('pathbbox: --nocurrentpoint--');
	var path = this.g_path;
	var llx = Infinity;
	var lly = Infinity;
	var urx = -Infinity;
	var ury = -Infinity;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'c') {
			continue;
		}
		if (a.x0 < a.x1) {
			if (llx > a.x0) llx = a.x0;
			if (urx < a.x1) urx = a.x1;
		} else {
			if (llx > a.x1) llx = a.x1;
			if (urx < a.x0) urx = a.x0;
		}
		if (a.y0 < a.y1) {
			if (lly > a.y0) lly = a.y0;
			if (ury < a.y1) ury = a.y1;
		} else {
			if (lly > a.y1) lly = a.y1;
			if (ury < a.y0) ury = a.y0;
		}
	}

	// Convert to user-space coordinates
	var rv = {	llx:(llx-this.g_tdx)/this.g_tsx,
				lly:(lly-this.g_tdy)/this.g_tsy,
				urx:(urx-this.g_tdx)/this.g_tsx,
				ury:(ury-this.g_tdy)/this.g_tsy };
	return rv;
};
// Tranforms the pts array to standard (not y-inverted), unscalled values.
BWIPJS.prototype.transform = function(pts) {
	var minx = this.minx;
	var maxy = this.maxy;

	for (var i = 0; i < pts.length; i++) {
		var pt = pts[i];
		pt[0] = pt[0] - minx;
		pt[1] = maxy - pt[1];
	}
};
BWIPJS.prototype.stroke = function() {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// This is a "super majority" round i.e. if over .66 round up.
	var penw = floor(this.g_penw * tsx + 0.66);
	var penh = floor(this.g_penw * tsy + 0.66);

	// Calculate the bounding boxes
	var nlines = 0, npolys = 0;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'l') {
			// We only stroke vertical and horizontal lines.  Complex shapes are
			// always filled.
			if (a.x0 != a.x1 && a.y0 != a.y1) {
				throw new Error('stroke: --not-orthogonal--');
			}
			var x0 = a.x0;
			var y0 = a.y0;
			var x1 = a.x1;
			var y1 = a.y1;

			// Half widths (may be factional)
			var penw2 = penw/2;
			var penh2 = penh/2;

			if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
			if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }
			if (x0 == x1) {
				this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1); 	// vertical line
			} else {
				this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);	// horizontal line
			}
			nlines++;
		} else if (a.op == 'p') {
			// Closed (rectangular) poly (border around the barcode)
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			if (pts.length != 4) {
				throw new Error('stroke: --not-a-rect--');
			}
			for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {
				var xj = pts[j][0];
				var yj = pts[j][1];
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi != xj && yi != yj) {
					throw new Error('stroke: --not-orthogonal--');
				}

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}

			// Half widths (integer)
			var penw2 = ceil(penw/2);
			var penh2 = ceil(penh/2);

			// We render these as two polygons plus a fill.
			// When border width is odd, allocate the bigger half to the outside.
			this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);
			npolys++;
		} else {
			throw new Error('stroke: --not-a-line--');
		}
	}

	// Draw the lines
	var self = this;
	this.cmds.push(function() {
		// Half widths (big half and remaining half)
		var bigw2 = ceil(penw/2);
		var bigh2 = ceil(penh/2);
		var remw2 = penw - bigw2;
		var remh2 = penh - bigh2;

		for (var i = 0; i < path.length; i++) {
			var a = path[i]
			if (a.op == 'l') {
				var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];
				self.transform(pts);
				self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
							a.x0 == a.x1 ? penw : penh, rgb);
				self.fill(rgb);
			} else {
				var pts = a.poly;
				self.transform(pts);
				var x0 = min(pts[0][0], pts[2][0]);
				var x1 = max(pts[0][0], pts[2][0]);
				var y0 = min(pts[0][1], pts[2][1]);
				var y1 = max(pts[0][1], pts[2][1]);

				// Top and left edges are "inside" the polygon.
				// Bottom and right edges are outside.
				self.drawing.polygon([
						[ x0-bigw2, y0-bigh2 ],
						[ x0-bigw2, y1+bigh2+1 ],
						[ x1+bigw2+1, y1+bigh2+1 ],
						[ x1+bigw2+1, y0-bigh2 ]
					]);
				self.drawing.polygon([
						[ x0+remw2, y0+remh2 ],
						[ x0+remw2, y1-remh2+1 ],
						[ x1-remw2+1, y1-remh2+1 ],
						[ x1-remw2+1, y0+remh2 ],
					]);
				self.drawing.fill(rgb);
			}
		}
	});
};
BWIPJS.prototype.fill = function() {
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// Calculate the bounding boxes
	for (var p = 0; p < path.length; p++) {
		var a = path[p];
		if (a.op == 'p') {  // polygon
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			for (var i = 0; i < pts.length; i++) {
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}
			// With polygons, the right and bottom edges are "outside" and do not
			// contribute to the bounding box.  But we are in postscript inverted-y
			// mode.
			this.bbox(minx, miny+1, maxx-1, maxy);
		} else if (a.op == 'e') {	// ellipse
			this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);
		} else {
			throw new Error('fill: --not-a-polygon--');
		}
	}

	// Render the poly
	var self = this;
	this.cmds.push(function() {
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
				self.drawing.polygon(pts);
			} else if (a.op == 'e') {
				var pts = [ [ a.x, a.y ] ];
				self.transform(pts);
				self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);
			}
		}
		self.drawing.fill(rgb);
	});
};

// The pix array is in standard (not y-inverted postscript) orientation.
BWIPJS.prototype.maxicode = function(pix) {
	var tsx = this.g_tsx;
	var tsy = this.g_tsy;
	var rgb = this.getRGB();

	// Module width.  Module height is an integer multiple of tsy.
	var twidth = 1.04 * tsx * 100;
	var mwidth = (twidth / 30)|0;
	if (twidth - (mwidth*30-1) > 9) {
		mwidth++;
	}

	// Dimensions needed for plotting the hexagons.  These must be integer values.
	var w, h, wgap, hgap;
	// if (opts.??? ) {
	//	// Create a one or two pixel gap
	//	wgap = (mwidth & 1) ? 1 : 2;
	//	hgap = 1;
	//	w = mwidth - gap;
	//	h = 4 * tsy;
	// } else {
		// Create a 1/8mm gap
		wgap = (tsx/2)|0;
		hgap = (tsy/2)|0;
		w = mwidth - wgap;
		if (w & 1) {
			w--;
		}
		h = ((4*tsy)|0) - hgap;
	//}

	// These must be integer values
	var w2 = w / 2 - 1;			// half width
	var qh = ((w2+1) / 2)|0;	// quarter height
	var vh = h - 2 - 2 * qh;	// side height

	// Bounding box
	this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);

	// Render the elements
	var self = this;
	this.cmds.push(function() {
		// Draw the hexagons
		for (var i = 0; i < pix.length; i++) {
			var c = pix[i];
			var x = c % 30;
			var y = (c / 30)|0;

			// Adjust x,y to the top of hexagon
			x *= mwidth;
			x += (y & 1) ? mwidth : mwidth/2;
			x = x|0;

			y = 33 - y;	// invert for postscript notation
			y *= tsy * 3;
			y += tsy * 2 - h/2;
			y = y|0;
			
			// Build bottom up so the drawing is top-down.
			var pts = [ [ x-0.5, y-- ] ]; 
			y -= qh-1;
			pts.push([x-1-w2, y--]);
			y -= vh;
			pts.push([x-1-w2, y--]);
			y -= qh-1;
			pts.push([x-0.5, y++]);
			y += qh-1;
			pts.push([x+w2, y++]);
			y += vh;
			pts.push([x+w2, y++]);

			self.transform(pts);
			self.drawing.hexagon(pts, rgb);
		}
		self.drawing.fill(rgb);


		// Draw the rings
		var x = (14 * mwidth + mwidth/2 + 0.01)|0;
		var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;
		self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);

	});
};

// dx,dy are inter-character gaps
BWIPJS.prototype.show = function(str, dx, dy) {
	if (!str.length) {
		return;
	}

	// Capture current graphics state
	var tsx	 = this.g_tsx;
	var tsy  = this.g_tsy;
	var name = this.g_font.FontName || 'OCR-B';
	var size = (this.g_font.FontSize || 10);
	var szx  = size * tsx;
	var szy  = size * tsy;
	var posx = this.g_posx;
	var posy = this.g_posy;
	var rgb  = this.getRGB();

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	// Convert dx,dy to device space
	dx = tsx * dx || 0;
	dy = tsy * dy || 0;

	// Bounding box.
	var base = posy + dy;
	var bbox = this.drawing.measure(str, name, szx, szy);
	var width = bbox.width + (str.length-1) * dx;
	this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);
	this.g_posx += width;

	var self = this;
	self.cmds.push(function() {
		// self.transform()
		var x = posx - self.minx;
		var y = self.maxy - posy;
		self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });
	});
};
// drawing surface bounding box
BWIPJS.prototype.bbox = function(x0, y0, x1, y1) {
	if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
	if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }

	x0 = floor(x0);
	y0 = floor(y0);
	x1 = ceil(x1);
	y1 = ceil(y1);

	if (this.minx > x0) this.minx = x0;
    if (this.maxx < x1)	this.maxx = x1;
    if (this.miny > y0)	this.miny = y0;
	if (this.maxy < y1)	this.maxy = y1;
};
BWIPJS.prototype.render = function() {
	if (this.minx === Infinity) {
		return callback(new Error('--empty-drawing-surface--'));
	}
	// Draw the image
	this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,
					  this.g_tsx, this.g_tsy);
	for (var i = 0, l = this.cmds.length; i < l; i++) {
		this.cmds[i]();
	}
	return this.drawing.end();
};

return BWIPJS;
})();	// BWIPJS closure
// drawing-builtin.js
//
// The aliased (except the fonts) graphics used by drawing-canvas.js and
// drawing-png.js
//
// All x,y and lengths are integer values.
//
// For the methods that take a color `rgb` parameter, the value is always a
// string with format RRGGBB.
//
// opts is the same options object passed into the bwipjs methods.
function DrawingBuiltin(opts) {
	var floor = Math.floor;

	// Unrolled x,y rotate/translate matrix
	var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
	var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

	var gs_image, gs_rowbyte;	// rowbyte will be 1 for png's, 0 for canvas
	var gs_width, gs_height;	// image size, in pixels
	var gs_dx, gs_dy;			// x,y translate (padding)
	var gs_r, gs_g, gs_b;		// rgb
	var gs_xymap;				// even-odd edge map

	return {
		// Ensure compliant bar codes by always using integer scaling factors.
		scale : function(sx, sy) {
			return [ (sx|0)||1, (sy|0)||1 ];
		},

		// Measure text.  This and scale() are the only drawing primitives that
		// are called before init().
		//
		// `font` is the font name typically OCR-A or OCR-B.
		// `fwidth` and `fheight` are the requested font cell size.  They will
		// usually be the same, except when the scaling is not symetric.
		measure : function(str, font, fwidth, fheight) {
			fwidth = fwidth|0;
			fheight = fheight|0;

			var fontid = FontLib.lookup(font);
			var width = 0;
			var ascent = 0;
			var descent = 0;
			for (var i = 0, l = str.length; i < l; i++) {
				var ch = str.charCodeAt(i);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				ascent  = Math.max(ascent, glyph.top);
				descent = Math.max(descent, glyph.height - glyph.top);

				if (i == l-1) {
					width += glyph.left + glyph.width;
				} else {
					width += glyph.advance;
				}
			}
			return { width:width, ascent:ascent, descent:descent };
		},

		// width and height represent the maximum bounding box the graphics will occupy.
		// The dimensions are for an unrotated rendering.  Adjust as necessary.
		init : function(width, height) {
			// Add in the effects of padding.  These are always set before the
			// drawing constructor is called.
			var padl = opts.paddingleft;
			var padr = opts.paddingright;
			var padt = opts.paddingtop;
			var padb = opts.paddingbottom;
			var rot  = opts.rotate || 'N';

			width  += padl + padr;
			height += padt + padb;

			if (+opts.sizelimit && +opts.sizelimit < width * height) {
				throw new Error('Image size over limit');
			}

			// Transform indexes are: x, y, w, h
			switch (rot) {
			// tx = w-y, ty = x
			case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
			// tx = w-x, ty = h-y
			case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
			// tx = y, ty = h-x
			case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
			// tx = x, ty = y
			default:  tx0 = ty1 = 1; break;
			}

			// Setup the graphics state
			var swap = rot == 'L' || rot == 'R';
			gs_width  = swap ? height : width;
			gs_height = swap ? width : height;
			gs_dx = padl;
			gs_dy = padt;
			gs_xymap = [];
			gs_xymap.min = Infinity;
			gs_r = gs_g = gs_b = 0;

			// Get the rgba image from the constructor
			var res = this.image(gs_width, gs_height);
			gs_image   = res.buffer;
			gs_rowbyte = res.ispng ? 1 : 0;
		},
		// Unconnected stroked lines are used to draw the bars in linear barcodes;
		// and the border around a linear barcode (e.g. ITF-14)
		// No line cap should be applied.  These lines are always orthogonal.
		line : function(x0, y0, x1, y1, lw, rgb) {
			x0 = x0|0;
			y0 = y0|0;
			x1 = x1|0;
			y1 = y1|0;

			// Most linear barcodes, the line width will be integral.  The exceptions
			// are variable width barcodes (e.g. code39) and the postal 4-state codes.
			lw = Math.round(lw) || 1;

			if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }
			if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			// Horizontal or vertical line?
			var w2 = (lw/2)|0;
			if (x0 == x1) {
				// Vertical line
				x0 = x0 - w2;
				x1 = x1 + lw - w2 - 1;
			} else {
				// Horizontal line
				y0 = y0 - w2;
				y1 = y1 + lw - w2 - 1;
			}
			for (var y = y0; y <= y1; y++) {
				for (var x = x0; x <= x1; x++) {
					set(x, y, 255);
				}
			}
		},

		// Polygons are used to draw the connected regions in a 2d barcode.
		// These will always be unstroked, filled, non-intersecting,
		// orthogonal shapes.
		// You will see a series of polygon() calls, followed by a fill().
		polygon : function(pts) {
			var npts = pts.length;
			for (var j = npts-1, i = 0; i < npts; j = i++) {
				if (pts[j][0] == pts[i][0]) {
					// Vertical lines do not get their end points. End points
					// are added by the horizontal line logic.
					var xj = pts[j][0]|0;	// i or j, doesn't matter
					var yj = pts[j][1]|0;
					var yi = pts[i][1]|0;
					if (yj > yi) {
						for (var y = yi+1; y < yj; y++) {
							addPoint(xj, y);
						}
					} else {
						for (var y = yj+1; y < yi; y++) {
							addPoint(xj, y);
						}
					}
				} else {
					var xj = pts[j][0]|0;
					var xi = pts[i][0]|0;
					var yj = pts[j][1]|0;	// i or j, doesn't matter

					// Horizontal lines are tricky.  As a rule, top lines get filled,
					// bottom lines do not (similar to how left edges get filled and
					// right edges do not).
					//
					// Where it gets complex is deciding whether the line actually
					// adds edges.  There are cases where a horizontal line does
					// not add anything to the scanline plotting.  And it doesn't
					// actually matter whether the line is a top or bottom edge,
					// the logic is the same.
					//
					// A left edge is added if the edge to its left is below.
					// A right edge is added if the edge to its right is below.
					if (xj < xi) {
						var yl = pts[j == 0 ? npts-1 : j-1][1];	// left edge
						var yr = pts[i == npts-1 ? 0 : i+1][1];	// right edge
						if (yl > yj) {
							addPoint(xj, yj);
						}
						if (yr > yj) {
							addPoint(xi, yj);
						}
					} else {
						var yl = pts[i == npts-1 ? 0 : i+1][1];	// left edge
						var yr = pts[j == 0 ? npts-1 : j-1][1];	// right edge
						if (yl > yj) {
							addPoint(xi, yj);
						}
						if (yr > yj) {
							addPoint(xj, yj);
						}
					}
				}
			}
		},
		// An unstroked, filled hexagon used by maxicode.  You can choose to fill
		// each individually, or wait for the final fill().
		//
		// The hexagon is drawn from the top, counter-clockwise.
		//
		// The X-coordinate for the top and bottom points on the hexagon is always
		// .5 pixels.  We draw our hexagons with a 2 pixel flat top.
		//
		// All other points of the polygon/hexagon are guaranteed to be integer values.
		hexagon : function(pts, rgb) {
			var x = pts[0][0]|0;
			var y = pts[0][1]|0;
			var qh = pts[1][1] - pts[0][1];		// height of triangle (quarter height)
			var vh = pts[2][1] - pts[1][1] - 1;	// height of vertical side
			var xl = pts[2][0];					// left side
			var xr = pts[4][0];					// right side

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			fillSegment(x, x+1, y++);
			for (var k = 1; k < qh; k++) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			for (var k = 0; k <= vh; k++) {
				fillSegment(xl, xr, y++);
			}
			for (var k = qh-1; k >= 1; k--) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			fillSegment(x, x+1, y);
		},
		// An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
		// maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
		// to create the bullseye rings.  dotcode issues all of its ellipses then a
		// fill().
		ellipse : function(x, y, rx, ry, ccw) {
			drawEllipse(x-rx, y-ry, x+rx, y+ry, ccw);
		},
		// PostScript's default fill rule is even-odd.
		fill : function(rgb) {
			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			evenodd();
			gs_xymap = [];
			gs_xymap.min = Infinity;
		},
		// Draw text with optional inter-character spacing.  `y` is the baseline.
		// font is an object with properties { name, width, height, dx }
		// width and height are the font cell size.
		// dx is extra space requested between characters (usually zero).
		text : function(x, y, str, rgb, font) {
			x = x|0;
			y = y|0;

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			var fontid  = FontLib.lookup(font.name);
			var fwidth  = font.width|0;
			var fheight = font.height|0;
			var dx      = font.dx|0;
			for (var k = 0; k < str.length; k++) {
				var ch = str.charCodeAt(k);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				var gt = y - glyph.top;
				var gl = glyph.left;
				var gw = glyph.width;
				var gh = glyph.height;
				var gb = glyph.bytes;
				var go = glyph.offset;		// offset into bytes

				for (var i = 0; i < gw; i++) {
					for (var j = 0; j < gh; j++) {
						var a = gb[go + j * gw + i];
						if (a) {
							set(x+gl+i, gt+j, a);
						}
					}
				}
				x += glyph.advance + dx;
			}
		},
		// Called after all drawing is complete.
		end : function() {
		},
	};

	// This code is specialized to deal with two types of RGBA buffers:
	// - canvas style, which is true RGBA
	// - PNG style, which has a one-byte "filter code" prefixing each row.
	function set(x, y, a) {
		// translate/rotate
		x += gs_dx;
		y += gs_dy;
		var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
		var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);

		// https://en.wikipedia.org/wiki/Alpha_compositing
		var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;
		var dsta = gs_image[offs+3] / 255;
		var srca = a / 255;
		var inva = (1 - srca) * dsta;
		var outa = srca + inva;

		gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;
		gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;
		gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;
		gs_image[offs+3] = (255 * outa)|0;
	}

	// Add a point on an edge to the scanline map.
	function addPoint(x, y) {
		if (gs_xymap.min > y) gs_xymap.min = y;
		if (!gs_xymap[y]) {
			gs_xymap[y] = [ x ];
		} else {
			gs_xymap[y].push(x);
		}
	}

	function fillSegment(x0, x1, y) {
		while (x0 <= x1) {
			set(x0++, y, 255);
		}
	}

	// even-odd fill
	//
	// This implementation is optimized for BWIPP's simple usage.
	// It is not a general purpose scanline fill.  It relies heavily on
	// polygon() creating the correct intersections.
	function evenodd() {
		var ymin = gs_xymap.min;
		var ymax = gs_xymap.length-1;

		for (var y = ymin; y <= ymax; y++) {
			var pts = gs_xymap[y];
			if (!pts) {
				continue
			}
			pts.sort(function(a, b) { return a - b; });

			var wn = false;
			var xl = 0;
			for (var n = 0, npts = pts.length; n < npts; n++) {
				var x = pts[n];
				if (wn) {
					fillSegment(xl, x-1, y);
				} else {
					xl = x;
				}
				wn = !wn;
			}
		}
	}

	function drawEllipse(x0, y0, x1, y1, dir) {
		x0 = x0|0;
		y0 = y0|0;
		x1 = x1|0;
		y1 = y1|0;

		var a = Math.abs(x1-x0);
		var b = Math.abs(y1-y0);
		var b1 = b & 1;
		var dx = 4*(1-a)*b*b;
		var dy = 4*(b1+1)*a*a;
		var err = dx + dy + b1*a*a;
		var e2;

		// Left and right edges
		var left = [], right = [];
		left.min = right.min = Infinity;

		if (x0 > x1) { x0 = x1; x1 += a; }
		if (y0 > y1) y0 = y1;
		y0 += ((b+1)/2)|0;
		y1 = y0 - b1;
		a *= 8*a; b1 = 8*b*b;

		do {
			maxedge(right, x1, y0);	// 1st quadrant
			minedge(left, x0, y0);	// 2nd quadrant
			minedge(left, x0, y1);	// 3rd quadrant
			maxedge(right, x1, y1);	// 4th quadrant
			e2 = 2*err;
			if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }
			if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }
		} while (x0 <= x1);

		while (y0-y1 < b) {	// too early stop of flat ellipse
			maxedge(right, x1+1, y0);
			minedge(left, x0-1, y0++);
			minedge(left, x0-1, y1);
			maxedge(right, x1+1, y1--);
		}

		for (var y = left.min, max = left.length-1; y <= max; y++) {
			addPoint(left[y], y);
		}
		// The points we calculated are "inside".  The fill algorithm excludes 
		// right edges, so +1 on each x.
		for (var y = right.min, max = right.length-1; y <= max; y++) {
			addPoint(right[y]+1, y);
		}

		function minedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey > x) {
				e[y] = x;
			}
		}

		function maxedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey < x) {
				e[y] = x;
			}
		}
	}

	// Returns 1 if clockwise, -1 if ccw.
	function polydir(pts) {
		var xp = 0;
		for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {
			xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];
		}
		return xp > 0 ? 1 : -1;
	}
}
// drawing-canvas.js
//

// opts is the same options object passed into the bwipjs methods.
function DrawingCanvas(opts, canvas) {
	if (typeof window == null) {
		throw new Error('DrawingCanvas: not a browser');
	}

	var img;
	var ctx = canvas.getContext('2d');
	var drawing = DrawingBuiltin(opts);

	// Provide our specializations for the builtin drawing
	drawing.image = image;
	drawing.end = end;

	return drawing;


	// Called by DrawingBuiltin.init() to get the ARGB bitmap for rendering.
	function image(width, height) {
		canvas.width  = width;
		canvas.height = height;

		// Set background 
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
			ctx.fillStyle = '#' + opts.backgroundcolor;
			ctx.fillRect(0, 0, width, height);
		} else {
			ctx.clearRect(0, 0, width, height);
		}

		// Prepare the bitmap 
		img = ctx.getImageData(0, 0, width, height);

		// The return value is designed for both canvas pure-RGBA and PNG RGBA
		return { buffer:img.data, ispng:false };
	}

	function end() {
		ctx.putImageData(img, 0, 0);
	}
}
// drawing-zlibpng.js
//
var PNGTYPE_PALETTE = 3;
var PNGTYPE_TRUEALPHA = 6;
var PNG_TEXT = "Software\0bwip-js.metafloor.com";
var PNG_CRC = (function() {
	var precalc = [];
	for (var i = 0; i < 256; i++) {
		var c = i;
		for (var j = 0; j < 8; j++) {
			if (c & 1) {
				c = 0xedb88320 ^ (c >>> 1);
			} else {
				c = c >>> 1;
			}
		}
		precalc[i] = c;
	}
	return precalc;
})();

var PNG_ZLIB = typeof process == 'object' && typeof process.release == 'object' &&
				 process.release.name == 'node' ? require('zlib') : null;

// opts is the same options object passed into the bwipjs methods.
function DrawingZlibPng(opts, callback) {
	if (!PNG_ZLIB) {
		throw new Error('Not running in node.js');
	}
	var image_buffer, image_width, image_height;

	// Provide our specializations for the builtin drawing
	var drawing = DrawingBuiltin(opts);
	drawing.image = image;
	drawing.end = end;
	return drawing;

	// Called by DrawingBuiltin.init() to get the RGBA image data for rendering.
	function image(width, height) {
		// PNG RGBA buffers are prefixed with a one-byte filter type
		image_buffer = Buffer.alloc ? Buffer.alloc(width * height * 4 + height)
									: new Buffer(width * height * 4 + height);
		image_width = width;
		image_height = height;

		// Set background 
		if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
			var rgb = opts.backgroundcolor;
			fillRGB(parseInt(rgb.substr(0,2), 16),
					parseInt(rgb.substr(2,2), 16),
					parseInt(rgb.substr(4,2), 16));
		}

		// The return value is designed to accommodate both canvas pure-RGBA buffers
		// and PNG's row-filter prefixed RGBA buffers.
		return { buffer:image_buffer, ispng:true };
	}

	function fillRGB(r, g, b) {
		var color = ((r << 24) | (g << 16) | (b << 8) | 0xff) >>> 0;

		// This is made complex by the filter byte that prefixes each row...
		var len = image_width * 4 + 1;
		var row = Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
		for (var i = 1; i < len; i += 4) {
			row.writeUInt32BE(color, i);
		}
		image_buffer.fill(row);
	}

	function end() {
		if (!callback) {
			return new Promise(makePNG);
		} else {
			makePNG(function(png) { callback(null, png); }, function(err) { callback(err); });
		}
	}

	function makePNG(resolve, reject) {
		// DEFLATE the image data
		var bufs = [];
		var buflen = 0;
		var deflator = PNG_ZLIB.createDeflate({
				chunkSize: 32 * 1024,
				level : PNG_ZLIB.Z_DEFAULT_COMPRESSION,
				strategy: PNG_ZLIB.Z_DEFAULT_STRATEGY });
		deflator.on('error', reject);
		deflator.on('data', function(data) { bufs.push(data); buflen += data.length; });
		deflator.on('end', returnPNG);
		deflator.end(image_buffer);

		function returnPNG() {
			var length = 8 + 12 + 13 + 			// PNG Header + IHDR chunk
						 12 + PNG_TEXT.length +	// tEXt
						 12 + buflen +			// IDAT
						 12;					// IEND
			if (opts.dpi) {
				length += 12 + 9;				// pHYs
			}

			// Emulate a byte-stream
			var png = Buffer.alloc(length);
			var pngoff = 0;	// running offset into the png buffer

			write('\x89PNG\x0d\x0a\x1a\x0a'); // PNG file header
			writeIHDR();
			writeTEXT();
			if (opts.dpi) {
				writePHYS();
			}
			writeIDAT();
			writeIEND();

			// Success
			resolve(png);

			function writeIHDR() {
				write32(13);	// chunk length
				var crcoff = pngoff;

				write('IHDR');
				write32(image_width);
				write32(image_height);
				write8(8);		// bit depth
				write8(PNGTYPE_TRUEALPHA);
				write8(0);		// compression default
				write8(0);		// filter default
				write8(0);		// no interlace

				writeCRC(crcoff);
			}
			function writeTEXT() {
				write32(PNG_TEXT.length);	// chunk length
				var crcoff = pngoff;

				write('tEXt');
				write(PNG_TEXT);
				writeCRC(crcoff);
			}
			function writePHYS() {
				write32(9);
				var crcoff = pngoff;

				var pxm = ((opts.dpi || 72) / 0.0254)|0;
				write('pHYs');
				write32(pxm);	// x-axis
				write32(pxm);	// y-axis
				write8(1);		// px/m (the only usable option)
				writeCRC(crcoff);
			}
			function writeIDAT() {
				write32(buflen);	// chunk length
				var crcoff = pngoff;

				write('IDAT');
				for (var i = 0; i < bufs.length; i++) {
					bufs[i].copy(png, pngoff);
					pngoff += bufs[i].length;
				}
				writeCRC(crcoff);
			}
			function writeIEND() {
				write32(0);				// chunk length;
				var crcoff = pngoff;

				write('IEND');
				writeCRC(crcoff);
			}

			function write(s) {
				png.write(s, pngoff, 'binary');
				pngoff += s.length;
			}
			function write32(v) {
				png.writeUInt32BE(v, pngoff);
				pngoff += 4;
			}
			function write16(v) {
				png.writeUInt16BE(v, pngoff);
				pngoff += 2;
			}
			function write8(v) {
				png[pngoff++] = v;
			}
			function writeCRC(off) {
				var crc = -1;
				while (off < pngoff) {
					crc = PNG_CRC[(crc ^ png[off++]) & 0xff] ^ (crc >>> 8);
				}
				write32((crc ^ -1) >>> 0);
			}
		}
	}
}
// fontlib.js
var FontLib = (function() {
	var fonts = [];
	var names = {};
	var glyphcache = {};
	var glyphmru = {};
	var glyphcount = 0;

	// Sentinel to simplify moving entries around in the list.
	glyphmru.next = glyphmru;
	glyphmru.prev = glyphmru;

	return {
		lookup:lookup,
		monochrome:monochrome,
		getglyph:getglyph,
		getpaths:getpaths,
		loadFont:loadFont,
	};

	// loadFont(name, data)
	// loadFont(name, mult, data)
	// loadFont(name, multy, multx, data)	// note order: y,x
	// data must be the font data, either a binary or base64 encoded string.
	function loadFont(name /*...args*/) {
		var multx = 100;
		var multy = 100;
		var data = null;

		if (arguments.length == 2) {
			data = arguments[1];
		} else if (arguments.length == 3) {
			multx = multy = +arguments[1] || 100;
			data = arguments[2];
		} else if (arguments.length == 4) {
			multy = +arguments[1] || 100;
			multx = +arguments[2] || 100;
			data = arguments[3];
		} else {
			throw new Error("loadFont(): invalid number of arguments");
		}

		var base64 = /^\s*[A-Za-z0-9+\/]{72}/.test(data);
		if (typeof atob == 'undefined') {
			// node
			var bytes = Buffer.from ? Buffer.from(data, base64 ? 'base64' : 'binary')
									: new Buffer(data, base64 ? 'base64' : 'binary');
		} else {
			// browser
			var bstr = base64 ? atob(data) : data,
				len = bstr.length,
				bytes = new Uint8Array(len);
			for (var i = 0; i < len; i++) {
				bytes[i] = bstr.charCodeAt(i);
			}
		} 
		var font = STBTT.InitFont(bytes);
		font.bwipjs_name = name;
		font.bwipjs_multx = multx;
		font.bwipjs_multy = multy;

		var fontid = fonts.push(font)-1;
		names[name.toUpperCase()] = fontid;
		return fontid;
	}

	// Always returns a valid font-id (default OCR-B)
	function lookup(name) {
		var fontid = names[name.toUpperCase()];
		return fontid === undefined ? 1 : fontid;		// OCR B default
	}

	// Not supported by stbtt
	function monochrome(mono) {
		if (mono) {
			throw new Error('fontlib: monochrome not implemented');
		}
	}

	function getglyph(fontid, charcode, width, height) {
		fontid   = fontid|0;
		charcode = charcode|0;
		width    = +width;
		height   = +height;
		if (!width || width < 8) {
			width = 8;
		}
		if (!height || height < 8) {
			height = width;
		}
		if (fontid < 0 || fontid >= fonts.length) {
			fontid = 1;		// OCR B default
		}
		if (!charcode || charcode < 32) {
			charcode = 32;
		}

		// In the cache?
		var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height; 
		var glyph = glyphcache[cachekey];
		if (glyph) {
			// Unthread from the MRU
			glyph.prev.next = glyph.next;
			glyph.next.prev = glyph.prev;

			// Thread back onto the top
			var sntl = glyphmru;
			glyph.next = sntl.next;
			glyph.prev = sntl;
			sntl.next = glyph;
			
			return glyph;
		}

		var font = fonts[fontid];
		var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,
												   height * font.bwipjs_multy / 100);
		
		glyph.bytes = glyph.pixels;
		glyph.cachekey = cachekey;
		glyph.offset = 0;

		//glyph = {
		//		top:font.GlyphTop(),
		//		left:font.GlyphLeft(),
		//		width:font.GlyphWidth(),
		//		height:font.GlyphHeight(),
		//		advance:font.GlyphAdvance(),
		//		bitmap:font.GlyphBitmap(),
		//		offset:0,
		//		cachekey:cachekey,
		//	};

		// Purge old
		if (glyphcount > 250) {
			var sntl = glyphmru;
			var temp = sntl.prev;
			temp.prev.next = sntl;
			sntl.prev = temp.prev;
			temp.next = temp.prev = null;
			delete glyphcache[temp.cachekey];
		} else {
			glyphcount++;
		}

		// Add to cache and to the top of the MRU
		glyphcache[cachekey] = glyph;

		var sntl = glyphmru;
		glyph.next = sntl.next;
		glyph.prev = sntl;
		sntl.next = glyph;

		return glyph;
	}

	function getpaths(fontid, charcode, width, height) {
		fontid   = fontid|0;
		charcode = charcode|0;
		width    = +width;
		height   = +height;
		if (!width || width < 8) {
			width = 8;
		}
		if (!height || height < 8) {
			height = width;
		}
		if (fontid < 0 || fontid >= fonts.length) {
			fontid = 1;		// OCR B default
		}
		if (!charcode || charcode < 32) {
			charcode = 32;
		}

		var font = fonts[fontid];
		return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,
											  height * font.bwipjs_multy / 100);
	}
})();

// bwip-js/stb_trutype.js
//
// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.
//
// This file is part of the bwip-js project available at:
//
// 		http://metafloor.github.io/bwip-js
//
// Copyright (c) 2019 Mark Warren : MIT LICENSE

// Copyright notice from stb_truetype.h:
//
// MIT License
//
// Copyright (c) 2017 Sean Barrett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var STBTT = (function () {
	"use strict";

var	STBTT_vmove	 = 1,
	STBTT_vline	 = 2,
	STBTT_vcurve = 3,
	STBTT_vcubic = 4,

	STBTT_PLATFORM_ID_UNICODE	= 0,
	STBTT_PLATFORM_ID_MAC		= 1,
	STBTT_PLATFORM_ID_ISO		= 2,
	STBTT_PLATFORM_ID_MICROSOFT = 3,

	STBTT_UNICODE_EID_UNICODE_1_0		= 0,
	STBTT_UNICODE_EID_UNICODE_1_1		= 1,
	STBTT_UNICODE_EID_ISO_10646			= 2,
	STBTT_UNICODE_EID_UNICODE_2_0_BMP	= 3,
	STBTT_UNICODE_EID_UNICODE_2_0_FULL	= 4,

	STBTT_MS_EID_SYMBOL			= 0,
	STBTT_MS_EID_UNICODE_BMP	= 1,
	STBTT_MS_EID_SHIFTJIS		= 2,
	STBTT_MS_EID_UNICODE_FULL	= 10;

var floor = Math.floor;
var ceil  = Math.ceil;
var sqrt  = Math.sqrt;
var abs   = Math.abs;

// Allocate an array of objects - replaces malloc(sizeof struct * n)
function oalloc(n) {
	var o = [];
	for (var i = 0; i < n; i++) {
		o.push({});
	}
	return o;
}

//static unsigned char stbtt__buf_get8(stbtt__buf * b)
function stbtt__buf_get8(b) {
    return b[b.cursor++]||0;
}

//static unsigned char stbtt__buf_peek8(stbtt__buf * b)
function stbtt__buf_peek8(b) {
    return b[b.cursor];
}

//static void stbtt__buf_seek(stbtt__buf * b, int o)
function stbtt__buf_seek(b, o) {
    b.cursor = (o > b.length || o < 0) ? b.length : o;
}

//static void stbtt__buf_skip(stbtt__buf * b, int o)
function stbtt__buf_skip(b, o) {
    stbtt__buf_seek(b, b.cursor + o);
}

//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)
function stbtt__buf_get(b, n) {
    var v = 0;
    for (var i = 0; i < n; i++) {
        v = (v << 8) | stbtt__buf_get8(b);
    }
    return v;
}

// This function is only called once with a real 'p', all other uses are
// for a NULL buffer.  The for real usage, the code is inlined.
//static stbtt__buf stbtt__new_buf(const void *p, int size)
function stbtt__null_buf() {
	return { length:0 };
}

//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)
function stbtt__buf_range(b, o, s) {
    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {
        return stbtt__null_buf();
    }
	var r = b.subarray(o, o + s);
	r.cursor = 0;
	return r;
}

//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)
function stbtt__cff_get_index(b) {
    var start = b.cursor;
    var count = stbtt__buf_get(b, 2);
    if (count) {
        var offsize = stbtt__buf_get8(b);
        stbtt__buf_skip(b, offsize * count);
        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);
    }
    return stbtt__buf_range(b, start, b.cursor - start);
}

//static unsigned int stbtt__cff_int(stbtt__buf * b)
function stbtt__cff_int(b) {
    var b0 = stbtt__buf_get8(b);
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    } else if (b0 >= 247 && b0 <= 250) {
        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;
    } else if (b0 >= 251 && b0 <= 254) {
        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;
    } else if (b0 == 28) {
        return stbtt__buf_get(b, 2);
    } else if (b0 == 29) {
        return stbtt__buf_get(b, 4);
    }
    return 0;
}

//static void stbtt__cff_skip_operand(stbtt__buf * b)
function stbtt__cff_skip_operand(b) {
    var b0 = stbtt__buf_peek8(b);
    if (b0 == 30) {
        stbtt__buf_skip(b, 1);
        while (b.cursor < b.length) {
            var v = stbtt__buf_get8(b);
            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {
                break;
            }
        }
    } else {
        stbtt__cff_int(b);
    }
}

//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)
function stbtt__dict_get(b, key) {
    stbtt__buf_seek(b, 0);
    while (b.cursor < b.length) {
        var start = b.cursor, end, op;
        while (stbtt__buf_peek8(b) >= 28) {
            stbtt__cff_skip_operand(b);
        }
        end = b.cursor;
        op = stbtt__buf_get8(b);
        if (op == 12) {
            op = stbtt__buf_get8(b) | 0x100;
        }
        if (op == key) {
            return stbtt__buf_range(b, start, end - start);
        }
    }
    return stbtt__buf_range(b, 0, 0);
}

//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)
function stbtt__dict_get_ints(b, key, outcount, out) {
    var operands = stbtt__dict_get(b, key);
    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {
        out[i] = stbtt__cff_int(operands);
    }
}
// single-integer format of above since javascript doesn't have address-of
function stbtt__dict_get_int(b, key, out) {
    var operands = stbtt__dict_get(b, key);
    if (operands.cursor < operands.length) {
        out = stbtt__cff_int(operands);
    }
	return out;
}

//static int stbtt__cff_index_count(stbtt__buf * b)
function stbtt__cff_index_count(b) {
    stbtt__buf_seek(b, 0);
    return stbtt__buf_get(b, 2);
}

//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)
function stbtt__cff_index_get(b, i) {
    var count, offsize, start, end;
    stbtt__buf_seek(b, 0);
    count = stbtt__buf_get(b, 2);
    offsize = stbtt__buf_get8(b);
    stbtt__buf_skip(b, i * offsize);
    start = stbtt__buf_get(b, offsize);
    end = stbtt__buf_get(b, offsize);
    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);
}

// Convert sign-extend a 16-bit integer to JS number
function INT16(n) {
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned short ttUSHORT(unsigned char *p)
function ttUSHORT(b, o) {
    return b[o] * 256 + b[o+1];
}

//static short ttSHORT(unsigned char *p)
function ttSHORT(b, o) {
    var n = b[o] * 256 + b[o+1];
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned int ttULONG(unsigned char *p)
function ttULONG(b, o) {
    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];
}

//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)
function stbtt__find_table(data, fontstart, tag) {
    var num_tables = ttUSHORT(data, fontstart + 4);
    var tabledir = fontstart + 12;
    for (var i = 0; i < num_tables; ++i) {
        var loc = tabledir + 16 * i;
        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {
            return ttULONG(data, loc + 8);
        }
    }
    return 0;
}

//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)
function stbtt__get_subrs(cff, fontdict) {
    var private_loc = [ 0, 0 ];
    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);
    if (!private_loc[1] || !private_loc[0]) {
        return stbtt__null_buf();
    }
    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);
    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);
    if (!subrsoff) {
        return stbtt__null_buf();
    }
    stbtt__buf_seek(cff, private_loc[1] + subrsoff);
    return stbtt__cff_get_index(cff);
}

//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)
function stbtt_InitFont_internal(info, data, fontstart) {
    var cmap, t, i, numTables;

    info.data = data;
    info.fontstart = fontstart;
    info.cff = stbtt__null_buf();

    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);		//"cmap"
    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);	//"loca"
    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);	//"head"
    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]);	//"glyf"
    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);	//"hhea"
    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]);	//"hmtx"
    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]);	//"kern"

    if (!cmap || !info.head || !info.hhea || !info.hmtx) {
        return 0;
    }
    if (info.glyf) {
        if (!info.loca) {
            return 0;
        }
    } else {
        var b, topdict, topdictidx, cff,
			cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);	//"CFF "
        if (!cff) {
            return 0;
        }

        info.fontdicts = stbtt__null_buf();
        info.fdselect = stbtt__null_buf();

        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);
		info.cff.cursor = 0;
        b = info.cff;

        stbtt__buf_skip(b, 2);
        stbtt__buf_seek(b, stbtt__buf_get8(b));

        stbtt__cff_get_index(b);
        topdictidx = stbtt__cff_get_index(b);
        topdict = stbtt__cff_index_get(topdictidx, 0);
        stbtt__cff_get_index(b);
        info.gsubrs = stbtt__cff_get_index(b);

        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);
        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);
        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);
        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);
        info.subrs = stbtt__get_subrs(b, topdict);

        if (cstype != 2) {
            return 0;
        }
        if (charstrings == 0) {
            return 0;
        }

        if (fdarrayoff) {
            if (!fdselectoff) {
                return 0;
            }
            stbtt__buf_seek(b, fdarrayoff);
            info.fontdicts = stbtt__cff_get_index(b);
            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);
        }

        stbtt__buf_seek(b, charstrings);
        info.charstrings = stbtt__cff_get_index(b);
    }

    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);	//"maxp"
    if (t) {
        info.numGlyphs = ttUSHORT(data, t + 4);
    }
    else {
        info.numGlyphs = 0xffff;
    }

    numTables = ttUSHORT(data, cmap + 2);
    info.index_map = 0;
    for (i = 0; i < numTables; ++i) {
        var encoding_record = cmap + 4 + 8 * i;

        switch (ttUSHORT(data, encoding_record)) {
        case STBTT_PLATFORM_ID_MICROSOFT:
            switch (ttUSHORT(data, encoding_record + 2)) {
            case STBTT_MS_EID_UNICODE_BMP:
            case STBTT_MS_EID_UNICODE_FULL:
                info.index_map = cmap + ttULONG(data, encoding_record + 4);
                break;
            }
            break;
        case STBTT_PLATFORM_ID_UNICODE:
            info.index_map = cmap + ttULONG(data, encoding_record + 4);
            break;
        }
    }
    if (info.index_map == 0) {
        return 0;
    }

    info.indexToLocFormat = ttUSHORT(data, info.head + 50);
    return 1;
}

//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)
function stbtt_FindGlyphIndex(info, unicode_codepoint) {
    var data = info.data, index_map = info.index_map;

    var format = ttUSHORT(data, index_map + 0);
    if (format == 0) {
        var bytes = ttUSHORT(data, index_map + 2);
        if (unicode_codepoint < bytes - 6) {
            return data[index_map + 6 + unicode_codepoint];
		}
        return 0;
    } else if (format == 6) {
        var first = ttUSHORT(data, index_map + 6),
            count = ttUSHORT(data, index_map + 8);
        if (unicode_codepoint >= first && unicode_codepoint < first + count) {
            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);
		}
        return 0;
    } else if (format == 2) {
        return 0;
    } else if (format == 4) {
        var segcount = ttUSHORT(data, index_map + 6) >> 1,
            searchRange = ttUSHORT(data, index_map + 8) >> 1,
            entrySelector = ttUSHORT(data, index_map + 10),
            rangeShift = ttUSHORT(data, index_map + 12) >> 1,
			endCount = index_map + 14,
            search = endCount;

        if (unicode_codepoint > 0xffff) {
            return 0;
        }

        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {
            search += rangeShift * 2;
        }

        search -= 2;
        while (entrySelector) {
            searchRange >>= 1;
            var end = ttUSHORT(data, search + searchRange * 2);
            if (unicode_codepoint > end) {
                search += searchRange * 2;
            }
            --entrySelector;
        }
        search += 2;

		var offset, start, item = (search - endCount) >>> 1;

		start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);
		if (unicode_codepoint < start) {
			return 0;
		}

		offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);
		if (offset == 0) {
			return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);
		}
		return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +
								index_map + 14 + segcount * 6 + 2 +	2 * item);
    } else if (format == 12 || format == 13) {
        var ngroups = ttULONG(data, index_map + 12),
			low = 0, high = ngroups;
         while (low < high) {
            var mid = low + ((high - low) >> 1);
            var start_char = ttULONG(data, index_map + 16 + mid * 12);
            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);
            if (unicode_codepoint < start_char) {
                high = mid;
            } else if (unicode_codepoint > end_char) {
                low = mid + 1;
            } else {
                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);
                if (format == 12) {
                    return start_glyph + unicode_codepoint - start_char;
				} else {
                    return start_glyph;
                }
            }
        }
        return 0;
    }
    return 0;
}

//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)
function stbtt_setvertex(v, type, x, y, cx, cy) {
    v.type = type;
    v.x = x;
    v.y = y;
    v.cx = cx;
    v.cy = cy;
}

//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)
function stbtt__GetGlyfOffset(info, glyph_index) {
    var  g1, g2;
    if (glyph_index >= info.numGlyphs) {
        return -1;
    }
    if (info.indexToLocFormat >= 2) {
        return -1;
    }

    if (info.indexToLocFormat == 0) {
        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;
        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;
    } else {
        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);
        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);
    }

    return g1 == g2 ? -1 : g1;
}

//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
function stbtt_GetGlyphBox(info, glyph_index, out) {
    if (info.cff.length) {
        stbtt__GetGlyphInfoT2(info, glyph_index, out);
    } else {
        var g = stbtt__GetGlyfOffset(info, glyph_index);
        if (g < 0) {
            return 0;
        }
	    out.x0 = ttSHORT(info.data, g + 2);
		out.y0 = ttSHORT(info.data, g + 4);
		out.x1 = ttSHORT(info.data, g + 6);
		out.y1 = ttSHORT(info.data, g + 8);
    }
    return 1;
}

//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,
//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)
function stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {
    if (start_off) {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);
		}
        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);
    } else {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);
		} else {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);
		}
    }
    return num_vertices;
}

//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeTT(info, glyph_index) {
    var data = info.data,
		g = stbtt__GetGlyfOffset(info, glyph_index);

	if (g < 0) {
        return null;
    }

	var vertices = [];
    var numberOfContours = ttSHORT(data, g);
    if (numberOfContours > 0) {
        var flags = 0, flagcount,
			i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,
			x, y, cx, cy, sx, sy, scx, scy;
        var endPtsOfContours = g + 10;
        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);
        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);
		var ptsoff = 0;

        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);
        m = n + 2 * numberOfContours;

        vertices = oalloc(m);
        next_move = 0;
        flagcount = 0;
        off = m - n;

        for (i = 0; i < n; ++i) {
            if (flagcount == 0) {
                flags = points[ptsoff++];
                if (flags & 8) {
                    flagcount = points[ptsoff++];
                }
            } else {
                --flagcount;
            }
            vertices[off + i].type = flags;
        }

        x = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 2) {
                var dx = points[ptsoff++];
                x += (flags & 16) ? dx : -dx;
            } else {
                if (!(flags & 16)) {
                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].x = x;
        }

        y = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 4) {
                var dy = points[ptsoff++];
                y += (flags & 32) ? dy : -dy;
            } else {
                if (!(flags & 32)) {
                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].y = y;
        }

        var num_vertices = 0;
        sx = sy = cx = cy = scx = scy = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            x = vertices[off + i].x;
            y = vertices[off + i].y;

            if (next_move == i) {
                if (i != 0) {
                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
											sx, sy, scx, scy, cx, cy);
				}
                start_off = !(flags & 1);
                if (start_off) {
                    scx = x;
                    scy = y;
                    if (!(vertices[off + i + 1].type & 1)) {
                        sx = (x + vertices[off + i + 1].x) >> 1;
                        sy = (y + vertices[off + i + 1].y) >> 1;
                    } else {
                        sx = vertices[off + i + 1].x;
                        sy = vertices[off + i + 1].y;
                        ++i;
                    }
                } else {
                    sx = x;
                    sy = y;
                }
                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);
                was_off = 0;
                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);
                ++j;
            } else {
                if (!(flags & 1)) {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);
					}
                    cx = x;
                    cy = y;
                    was_off = 1;
                } else {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);
                    } else {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);
					}
                    was_off = 0;
                }
            }
        }
        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
												sx, sy, scx, scy, cx, cy);
    } else if (numberOfContours == -1) {
        var more = 1;
        var comp = g + 10;
         while (more) {
            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];

            flags = ttSHORT(data, comp);
            comp += 2;
            gidx = ttSHORT(data, comp);
            comp += 2;

            if (flags & 2) {
                if (flags & 1) {
                    mtx[4] = ttSHORT(data, comp);
                    comp += 2;
                    mtx[5] = ttSHORT(data, comp);
                    comp += 2;
                } else {
                    mtx[4] = stbtt__buf_get8(data, comp);
                    comp += 1;
                    mtx[5] = stbtt__buf_get8(data, comp);
                    comp += 1;
                }
            }
            if (flags & (1 << 3)) {
                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
            } else if (flags & (1 << 6)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            } else if (flags & (1 << 7)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[2] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            }

            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);
            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);
            var comp_verts = stbtt_GetGlyphShape(info, gidx);
            if (comp_verts.length > 0) {
                for (var i = 0, l = comp_verts.length; i < l; ++i) {
                    var v = comp_verts[i], x, y;
					x = v.x;
					y = v.y;
                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                    x = v.cx;
                    y = v.cy;
                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                }

				vertices = vertices.concat(comp_verts);
            }
            more = flags & (1 << 5);
        }
    }
	//console.log('vertices(' + vertices.length + ')');
	//for (var i = 0; i < vertices.length; i++) {
	//	var pt = vertices[i];
	//	console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);
	//}

    return vertices;
}

//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)
function stbtt__track_vertex(c, x, y) {
    if (x > c.max_x || !c.started) {
        c.max_x = x;
    }
    if (y > c.max_y || !c.started) {
        c.max_y = y;
    }
    if (x < c.min_x || !c.started) {
        c.min_x = x;
    }
    if (y < c.min_y || !c.started) {
        c.min_y = y;
    }
    c.started = 1;
}

//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)
function stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {
	stbtt__track_vertex(c, x, y);
	if (type == STBTT_vcubic) {
		stbtt__track_vertex(c, cx, cy);
		stbtt__track_vertex(c, cx1, cy1);
	}
	var v = {};
	stbtt_setvertex(v, type, x, y, cx, cy);
	v.cx1 = cx1;
	v.cy1 = cy1;
	c.vertices.push(v);
 }

//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)
function stbtt__csctx_close_shape(ctx) {
    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);
	}
}

//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rmove_to(ctx, dx, dy) {
    stbtt__csctx_close_shape(ctx);
    ctx.first_x = ctx.x = ctx.x + dx;
    ctx.first_y = ctx.y = ctx.y + dy;
    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rline_to(ctx, dx, dy) {
    ctx.x += dx;
    ctx.y += dy;
    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,
//									float dy2, float dx3, float dy3)
function stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {
    var cx1 = ctx.x + dx1,
		cy1 = ctx.y + dy1,
		cx2 = cx1 + dx2,
		cy2 = cy1 + dy2;
    ctx.x = cx2 + dx3;
    ctx.y = cy2 + dy3;
    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);
}

//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)
function stbtt__get_subr(b, n) {
    var count = stbtt__cff_index_count(b);
    var bias = 107;
    if (count >= 33900) {
        bias = 32768;
    } else if (count >= 1240) {
        bias = 1131;
    }
    n += bias;
    if (n < 0 || n >= count) {
        return stbtt__null_buf();
    }
    return stbtt__cff_index_get(b, n);
}

//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)
function stbtt__cid_get_glyph_subrs(info, glyph_index) {
    var fdselect = info.fdselect;
    var nranges, start, end, v, fmt, fdselector = -1, i;

    stbtt__buf_seek(fdselect, 0);
    fmt = stbtt__buf_get8(fdselect);
    if (fmt == 0) {
        stbtt__buf_skip(fdselect, glyph_index);
        fdselector = stbtt__buf_get8(fdselect);
    } else if (fmt == 3) {
        nranges = stbtt__buf_get(fdselect, 2);
        start = stbtt__buf_get(fdselect, 2);
        for (i = 0; i < nranges; i++) {
            v = stbtt__buf_get8(fdselect);
            end = stbtt__buf_get(fdselect, 2);
            if (glyph_index >= start && glyph_index < end) {
                fdselector = v;
                break;
            }
            start = end;
        }
    }
    if (fdselector == -1) {
        stbtt__null_buf();
    }
    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));
}

//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,
//								   stbtt__csctx * c)
function stbtt__run_charstring(info, glyph_index, c) {
    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,
		has_subrs = 0, clear_stack,
		s = [], subr_stack = [], subrs = info.subrs, b, f;

    b = stbtt__cff_index_get(info.charstrings, glyph_index);
    while (b.cursor < b.length) {
        i = 0;
        clear_stack = 1;
        b0 = stbtt__buf_get8(b);
        switch (b0) {
        case 0x13:
        case 0x14:
            if (in_header) {
                maskbits += (sp / 2)|0;
            }
            in_header = 0;
            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);
            break;

        case 0x01:
        case 0x03:
        case 0x12:
        case 0x17:
            maskbits += (sp / 2)|0;
            break;

        case 0x15:
            in_header = 0;
            if (sp < 2) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);
            break;
        case 0x04:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);
            break;
        case 0x16:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 1], 0);
            break;

        case 0x05:
            if (sp < 2) {
                return 0;
            }
            for (; i + 1 < sp; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            break;

        case 0x07:
            if (sp < 1) {
                return 0;
            }
			for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
			}
			break;
        case 0x06:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
            }
            break;

        case 0x1F:
            if (sp < 4) {
                return 0;
            }
			for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
			}
			break;
        case 0x1E:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
            }
            break;

        case 0x08:
            if (sp < 6) {
                return 0;
            }
            for (; i + 5 < sp; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            break;

        case 0x18:
            if (sp < 8) {
                return 0;
            }
            for (; i + 5 < sp - 2; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            if (i + 1 >= sp) {
                return 0;
            }
            stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            break;

        case 0x19:
            if (sp < 8) {
                return 0;
            }
            for (; i + 1 < sp - 6; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            if (i + 5 >= sp) {
                return 0;
            }
            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],
                                    s[i + 3], s[i + 4], s[i + 5]);
            break;

        case 0x1A:
        case 0x1B:
            if (sp < 4) {
                return 0;
            }
            f = 0.0;
            if (sp & 1) {
                f = s[i];
                i++;
            }
            for (; i + 3 < sp; i += 4) {
                if (b0 == 0x1B) {
                    stbtt__csctx_rccurve_to(c, s[i], f,
                                            s[i + 1],
                                            s[i + 2],
                                            s[i + 3], 0.0);
                } else {
                    stbtt__csctx_rccurve_to(c, f, s[i],
                                            s[i + 1],
                                            s[i + 2], 0.0,
                                            s[i + 3]);
				}
                f = 0.0;
            }
            break;

        case 0x0A:
            if (!has_subrs) {
                if (info.fdselect.length) {
                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);
				}
                has_subrs = 1;
            }

        case 0x1D:
            if (sp < 1) {
                return 0;
            }
            v = s[--sp]|0;
            if (subr_stack_height >= 10) {
                return 0;
            }
            subr_stack[subr_stack_height++] = b;
            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);
            if (b.length == 0) {
                return 0;
            }
            b.cursor = 0;
            clear_stack = 0;
            break;

        case 0x0B:
            if (subr_stack_height <= 0) {
                return 0;
            }
            b = subr_stack[--subr_stack_height];
            clear_stack = 0;
            break;

        case 0x0E:
            stbtt__csctx_close_shape(c);
            return 1;

        case 0x0C:
            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,
				dx, dy, b1 = stbtt__buf_get8(b);
            switch (b1) {
            case 0x22:
                if (sp < 7) {
                    return 0;
                }
                dx1 = s[0];
                dx2 = s[1];
                dy2 = s[2];
                dx3 = s[3];
                dx4 = s[4];
                dx5 = s[5];
                dx6 = s[6];
                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);
                break;

            case 0x23:
                if (sp < 13) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = s[10];
                dy6 = s[11];

                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            case 0x24:
                if (sp < 9) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dx4 = s[5];
                dx5 = s[6];
                dy5 = s[7];
                dx6 = s[8];
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));
                break;

            case 0x25:
                if (sp < 11) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = dy6 = s[10];
                dx = dx1 + dx2 + dx3 + dx4 + dx5;
                dy = dy1 + dy2 + dy3 + dy4 + dy5;
                if (abs(dx) > abs(dy)) {
                    dy6 = -dy;
                } else {
                    dx6 = -dx;
                }
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            default:
                return 0;
            }
        	break;

        default:
            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
                return 0;
            }
            if (b0 == 255) {
                f = stbtt__buf_get(b, 4) / 0x10000;
            } else {
                stbtt__buf_skip(b, -1);
                f = stbtt__cff_int(b);
            }
            if (sp >= 48) {
                return 0;
            }
            s[sp++] = f;
            clear_stack = 0;
            break;
        }
        if (clear_stack) {
            sp = 0;
        }
    }
    return 0;
}

function stbtt__csctx_init() {
	return { started:0, first_x:0, first_y:0, x:0, y:0,
			min_x:0, max_x:0, min_y:0, max_y:0,
			vertices:[]
		};
}

//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,
//									stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeT2(info, glyph_index) {
    var output_ctx = stbtt__csctx_init();
    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {
		return output_ctx.vertices;
    }
    return null;
}

//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,
//                      int *y0, int *x1, int *y1)
function stbtt__GetGlyphInfoT2(info, glyph_index, out) {
    var c = stbtt__csctx_init();
    var r = stbtt__run_charstring(info, glyph_index, c);
	out.x0 = r ? c.min_x : 0;
	out.y0 = r ? c.min_y : 0;
	out.x1 = r ? c.max_x : 0;
	out.y1 = r ? c.max_y : 0;
    return r && c.vertices ? c.vertices.length : 0;
}

//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,
//								 stbtt_vertex ** pvertices)
function stbtt_GetGlyphShape(info, glyph_index) {
    if (!info.cff.length) {
        return stbtt__GetGlyphShapeTT(info, glyph_index);
    } else {
        return stbtt__GetGlyphShapeT2(info, glyph_index);
    }
}

//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,
//                       int *advanceWidth, int *leftSideBearing)
function stbtt_GetGlyphHMetrics(info, glyph_index) {
    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);
    if (glyph_index < numOfLongHorMetrics) {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)
			};
    } else {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +
											2 * (glyph_index - numOfLongHorMetrics))
			};
    }
}

//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,
//                           int *advanceWidth, int *leftSideBearing)
function stbtt_GetCodepointHMetrics(info, codepoint) {
     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));
}

//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)
function stbtt_GetFontVMetrics(info) {
	return {
        ascent:	ttSHORT(info.data, info.hhea + 4),
        descent:ttSHORT(info.data, info.hhea + 6),
        linegap:ttSHORT(info.data, info.hhea + 8),
	};
}

//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,
//                              float scale_x, float scale_y, float shift_x, float shift_y,
//								int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {
    var tmp = {};
    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {
		return { x0:0, y0:0, x1:0, y1:0 };
    }
	return {
			x0:floor(tmp.x0 * scale_x + shift_x),
			y0:floor(-tmp.y1 * scale_y + shift_y),
			x1:ceil(tmp.x1 * scale_x + shift_x),
			y1:ceil(-tmp.y0 * scale_y + shift_y),
		};
}

//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,
//                                    int codepoint, float scale_x, float scale_y, float shift_x,
//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {
    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),
											scale_x, scale_y, shift_x, shift_y);
}

//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,	float scale_x, float scale_y,
//										int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {
    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);
}

//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)
function stbtt__new_active(e, off_x, start_point) {
    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);
	return {
		fdx:dxdy,
		fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,
		fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),
		direction:e.invert ? 1.0 : -1.0,
		sy:e.y0,
		ey:e.y1,
		next:0,
    };
}

//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,
//                           float x0, float y0, float x1, float y1)
function stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {
	x = x|0;
    if (y0 == y1) {
        return;
    }
    if (y0 > e.ey) {
        return;
    }
    if (y1 < e.sy) {
        return;
    }
    if (y0 < e.sy) {
        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
        y0 = e.sy;
    }
    if (y1 > e.ey) {
        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
        y1 = e.ey;
    }

    if (x0 <= x && x1 <= x) {
        scanline[x] += e.direction * (y1 - y0);
    } else if (x0 >= x + 1 && x1 >= x + 1) {

    } else {
        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);
    }
}

//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,
//                             stbtt__active_edge * e, float y_top)
// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in
// places in this function.  That doesn't work with array-views, so we reverse the handling.
function stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {
    var y_bottom = y_top + 1;
    while (e) {
        if (e.fdx == 0) {
            var x0 = e.fx;
            if (x0 < len) {
                if (x0 >= 0) {
                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);
                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);
                } else {
                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);
                }
            }
        } else {
            var x0 = e.fx,
				dx = e.fdx,
				xb = x0 + dx,
				x_top, x_bottom,
				sy0, sy1,
				dy = e.fdy;

            if (e.sy > y_top) {
                x_top = x0 + dx * (e.sy - y_top);
                sy0 = e.sy;
            } else {
                x_top = x0;
                sy0 = y_top;
            }
            if (e.ey < y_bottom) {
                x_bottom = x0 + dx * (e.ey - y_top);
                sy1 = e.ey;
            } else {
                x_bottom = xb;
                sy1 = y_bottom;
            }

            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
                if ((x_top|0) == (x_bottom|0)) {
                    var height = sy1 - sy0,
						x = x_top|0;
                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;
                    scanline_fill[x+1] += e.direction * height;
                } else {
                    var t, x, x1, x2, y_crossing, step, sign, area;
                    if (x_top > x_bottom) {
                        sy0 = y_bottom - (sy0 - y_top);
                        sy1 = y_bottom - (sy1 - y_top);
                        t = sy0, sy0 = sy1, sy1 = t;
                        t = x_bottom, x_bottom = x_top, x_top = t;
                        dx = -dx;
                        dy = -dy;
                        t = x0, x0 = xb, xb = t;
                    }

                    x1 = x_top|0;
                    x2 = x_bottom|0;
                    y_crossing = (x1 + 1 - x0) * dy + y_top;
                    sign = e.direction;
                    area = sign * (y_crossing - sy0);

                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);

                    step = sign * dy;
                    for (x = x1 + 1; x < x2; ++x) {
                        scanline[x] += area + step / 2;
                        area += step;
                    }
                    y_crossing += dy * (x2 - (x1 + 1));

                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *
												(sy1 - y_crossing);
                    scanline_fill[x2+1] += sign * (sy1 - sy0);
                }
            } else {
                for (var x = 0; x < len; ++x) {
                    var y0 = y_top,
						x1 = x,
						x2 = x + 1,
						x3 = xb,
						y3 = y_bottom,
						y1 = (x - x0) / dx + y_top,
						y2 = (x + 1 - x0) / dx + y_top;

                    if (x0 < x1 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x1 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x1 && x3 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x3 < x1 && x0 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x2 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x2 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);
                    }
                }
            }
        }
        e = e.next;
    }
}

//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,
//                              int vsubsample, int off_x, int off_y, void *userdata)
function stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {
	vsubsample |= 0, off_x |= 0, off_y |= 0;
    var active = null, z;
    var y = off_y, j = 0, i;
    var scanline = new Float32Array(result.w * 2 + 1);
    var scanline2 = scanline.subarray(result.w);
	var eoff = 0;

    edges[nedges].y0 = off_y + result.h + 1;
    while (j < result.h) {
        var scan_y_top = y + 0.0,
			scan_y_bottom = y + 1.0,
			step = active;

		// F'ing IE
		if (scanline.fill) { scanline.fill(0); }
		else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }

        while (step) {
            z = step;
			step = z.next;
            if (z.ey <= scan_y_top) {
                z.direction = 0;
            } else {
			}
        }

        while (edges[eoff].y0 <= scan_y_bottom) {
            if (edges[eoff].y0 != edges[eoff].y1) {
                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);
				z.next = active;
				active = z;
            }
            ++eoff;
        }

        if (active) {
			// C implementation passed scanline2+1.  See function for details.
            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);
		}
		for (var i = 0, sum = 0; i < result.w; ++i) {
			var k, m;
			sum += scanline2[i];
			k = scanline[i] + sum;
			k = abs(k) * 255 + 0.5;
			m = k>>>0;
			if (m > 255) {
				m = 255;
			}
			result.pixels[j * result.stride + i] = m;
        }

        step = active;
        while (step) {
            z = step;
            z.fx += z.fdx;
            step = z.next;
        }
        ++y;
        ++j;
    }
}

//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)
function stbtt__sort_edges_ins_sort(p, n) {
    for (var i = 1; i < n; ++i) {
        var t = p[i], j = i;
        while (j > 0 && t.y0 < p[j-1].y0) {
             p[j] = p[j - 1];
            --j;
        }
        if (i != j) {
            p[j] = t;
        }
    }
}

//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)
// The C implementation messed with the p pointer.  JS uses an offset instead.
function stbtt__sort_edges_quicksort(p, o, n) {
    while (n > 12) {
        var t, c, i, j, z,
			m = n >> 1,
			c01 = p[o].y0 < p[o+m].y0,
			c12 = p[o+m].y0 < p[o+n-1].y0;

        if (c01 != c12) {
            c = p[o].y0 < p[o+n-11].y0;
            z = (c == c12) ? 0 : n - 1;
            t = p[o+z];
            p[o+z] = p[o+m];
            p[o+m] = t;
        }

        t = p[o];
        p[o] = p[o+m];
        p[o+m] = t;

        i = 1;
        j = n - 1;
        for (;;) {
            for ( ; p[o+i].y0 < p[o].y0; ++i) {
            }
            for ( ; p[o].y0 < p[o+j].y0; --j) {
            }
            if (i >= j) {
                break;
            }
            t = p[o+i];
            p[o+i] = p[o+j];
            p[o+j] = t;

            ++i;
            --j;
        }

        if (j < n - i) {
            stbtt__sort_edges_quicksort(p, o, j);
            o += i;
            n -= i;
        } else {
            stbtt__sort_edges_quicksort(p, o + i, n - i);
            n = j;
        }
    }
}

//static void stbtt__sort_edges(stbtt__edge * p, int n)
function stbtt__sort_edges(p, n) {
    stbtt__sort_edges_quicksort(p, 0, n);
    stbtt__sort_edges_ins_sort(p, n);
}

//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,
//                 int windings, float scale_x, float scale_y, float shift_x,
//                 float shift_y, int off_x, int off_y, int invert,
//                 void *userdata)
function stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {
    var y_scale_inv = invert ? -scale_y : scale_y,
		e, n, i, j, k, m,
		vsubsample = 1;

    n = 0;
    for (i = 0; i < wcount.length; ++i) {
        n += wcount[i];
    }

    e = oalloc(n + 1);
    n = 0;
    m = 0;
    for (i = 0; i < wcount.length; ++i) {
        var p = m;
        m += wcount[i];
        j = wcount[i] - 1;
        for (k = 0; k < wcount[i]; j = k++) {
            var a = k, b = j;
            if (pts[p+j].y == pts[p+k].y) {
                continue;
            }

            e[n].invert = 0;
            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {
                e[n].invert = 1;
                a = j, b = k;
            }
            e[n].x0 = pts[p+a].x * scale_x + shift_x;
            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;
            e[n].x1 = pts[p+b].x * scale_x + shift_x;
            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;
            ++n;
        }
    }

    stbtt__sort_edges(e, n);
    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);
 }

//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float objspace_flatness_squared, int n)
function stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {
    var mx = (x0 + 2 * x1 + x2) / 4,
		my = (y0 + 2 * y1 + y2) / 4,
		dx = (x0 + x2) / 2 - mx,
		dy = (y0 + y2) / 2 - my;
    if (n > 16) {
        return 1;
    }
    if (dx * dx + dy * dy > objspace_flatness_squared) {
        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,
                               objspace_flatness_squared, n + 1);
        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,
                               objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x2, y:y2 });
    }
    return 1;
}

//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float x3, float y3, float objspace_flatness_squared, int n)
function stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {
    var dx0 = x1 - x0,
		dy0 = y1 - y0,
		dx1 = x2 - x1,
		dy1 = y2 - y1,
		dx2 = x3 - x2,
		dy2 = y3 - y2,
		dx = x3 - x0,
		dy = y3 - y0,
		longlen = sqrt(dx0 * dx0 + dy0 * dy0) +
				  sqrt(dx1 * dx1 + dy1 * dy1) +
                  sqrt(dx2 * dx2 + dy2 * dy2),
		shortlen = sqrt(dx * dx + dy * dy),
		flatness_squared = longlen * longlen - shortlen * shortlen;
    if (n > 16) {
        return;
    }

    if (flatness_squared > objspace_flatness_squared) {
        var x01 = (x0 + x1) / 2,
			y01 = (y0 + y1) / 2,
			x12 = (x1 + x2) / 2,
			y12 = (y1 + y2) / 2,
			x23 = (x2 + x3) / 2,
			y23 = (y2 + y3) / 2,
			xa = (x01 + x12) / 2,
			ya = (y01 + y12) / 2,
			xb = (x12 + x23) / 2,
			yb = (y12 + y23) / 2,
			mx = (xa + xb) / 2,
			my = (ya + yb) / 2;

        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,
								objspace_flatness_squared, n + 1);
        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,
								objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x3, y:y3 });
    }
}

//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,
//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
function stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {
    var points = [],
		objspace_flatness_squared = objspace_flatness * objspace_flatness,
		n = -1, start = 0,
		x = 0, y = 0;
	for (var i = 0, nverts = vertices.length; i < nverts; ++i) {
		switch (vertices[i].type) {
		case STBTT_vmove:
			if (n >= 0) {
				contour_lengths[n] = points.length - start;
			}
			++n;
			start = points.length;
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vline:
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vcurve:
			stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		case STBTT_vcubic:
			stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,
								   objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		}
	}
	contour_lengths[n] = points.length - start;

	//console.log("--cl(" + (n+1) + '):');
	//for (var i = 0; i <= n; i++) {
	//	console.log(" %d", contour_lengths[i]);
	//}
	//console.log("\n--pts(" + points.length + '):');
	//for (var i = 0; i < points.length; i++) {
	//	var pt = points[i];
	//	console.log(i + ': ' + pt.x  + ',' + pt.y);
	//}

    return points;
}

//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,
//                stbtt_vertex * vertices, int num_verts, float scale_x,
//                float scale_y, float shift_x, float shift_y, int x_off,
//                int y_off, int invert, void *userdata)
function stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,
						 x_off, y_off, invert) {
	x_off |= 0, y_off |= 0;
    var scale = scale_x > scale_y ? scale_y : scale_x,
		wcount = [],
		windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);
    if (windings) {
        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,
						 shift_x, shift_y, x_off, y_off, invert);
    }
}

//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,
//                              unsigned char *output, int out_w, int out_h,
//                              int out_stride, float scale_x, float scale_y,
//                              float shift_x, float shift_y, int glyph)
function stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, glyph) {
    var vertices = stbtt_GetGlyphShape(info, glyph);
    var gbm = {};
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);
    gbm.pixels = buffer;
    gbm.w = out_w|0;
    gbm.h = out_h|0;
    gbm.stride = out_stride|0;

    if (gbm.w && gbm.h) {
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);
	}
}

//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,
//                                  unsigned char *output, int out_w,
//                                  int out_h, int out_stride, float scale_x,
//                                  float scale_y, float shift_x,
//                                  float shift_y, int codepoint)
function stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, codepoint) {
    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                  scale_x, scale_y, shift_x, shift_y,
                                  stbtt_FindGlyphIndex(info, codepoint));
}

//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)
function stbtt_InitFont(font, data, offset) {
    return stbtt_InitFont_internal(font, data, offset);
}


function InitFont(data) {
	var font = {};
    if (!stbtt_InitFont_internal(font, data, 0)) {
		return null;
	}

	var vm = stbtt_GetFontVMetrics(font);

	font.ascent = vm.ascent;
	font.descent = vm.descent;
	font.linegap = vm.linegap;

	return font;
}

function GetGlyph(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}

    var vertices = stbtt_GetGlyphShape(font, glyph);
	var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);
	var width = rect.x1 - rect.x0;
	var height = rect.y1 - rect.y0;
	var pixels = null;

	if (width && height) {
		var gbm = {
			pixels : (pixels = new Uint8Array(width * height)),
			w : width,
			h : height,
			stride : width,
		}
		stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);
	}

	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);
	return {
		glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,
		advance:floor(hmetrics.advanceWidth * scale_x),
	}
}
function GetPaths(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}
    var vertices = stbtt_GetGlyphShape(font, glyph);
	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);

	// The hmetrics just give us advance.  We need ascent and descent as well.
	var ascent = 0;
	var descent = 0;

	// Convert to SVG notation
	var paths = [];
	if (vertices) {
		for (var i = 0, l = vertices.length; i < l; i++) {
			var v = vertices[i];
			var path;
			if (v.type == STBTT_vmove) {
				path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vline) {
				path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vcurve) {
				path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,
								  cx:v.cx * scale_x, cy:v.cy * scale_y };
			} else if (v.type == STBTT_vcubic) {
				path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,
								 cx1:v.cx * scale_x, cy1:v.cy * scale_y,
								 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };
			} else {
				continue;
			}
			if (path.y > ascent)  ascent  = path.y;
			if (path.y < descent) descent = path.y;
			paths.push(path);
		}
	}

	// Add the glyph metrics to the returned array.
	paths.advance = hmetrics.advanceWidth * scale_x;
	paths.ascent  = ascent;
	paths.descent = descent;
	return paths;
}


// exports
return {
	InitFont:	InitFont,
	GetGlyph:	GetGlyph,
	GetPaths:	GetPaths,
}

})();
FontLib.loadFont("OCR-A", 100, 100, "");
FontLib.loadFont("OCR-B", 96, 100, "");

return {
		// The public interface
		request:Request, toBuffer:ToBuffer, toCanvas:ToCanvas, render:Render, raw:Raw,
		fixupOptions:FixupOptions,
		loadFont:FontLib.loadFont,
		VERSION:'__BWIPJS_VERS__',

		// Internals
		BWIPJS:BWIPJS, BWIPP:BWIPP, STBTT:STBTT, FontLib:FontLib,
		DrawingBuiltin:DrawingBuiltin, DrawingCanvas:DrawingCanvas,
		DrawingZlibPng:DrawingZlibPng,
	};
}));
